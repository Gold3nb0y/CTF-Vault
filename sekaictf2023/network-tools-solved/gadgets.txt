


Gadgets
=======


0x000000000002a113: adc al, 0; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000e5cf: adc al, 0x24; call 0xe1f0; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000011346: adc al, 0x24; lea rdi, [rip + 0x4f1b5]; lea rax, [rip - 0x5ce6]; mov esi, 0x23; call rax; 
0x0000000000017e5d: adc al, 0x24; mov rcx, qword ptr [rsp + 8]; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x0000000000016488: adc al, 0x3b; add byte ptr [rax], al; lea rdx, [rsp + 0x20]; call rax; 
0x000000000000c22d: adc al, 0x48; add esp, 0x28; ret; 
0x000000000000bc03: adc al, 0x48; mov eax, dword ptr [rip + 0x6e295]; test rax, rax; je 0xbc18; jmp rax; 
0x000000000001ba77: adc al, 0x48; mov eax, dword ptr [rsp]; lea rcx, [rip + 0x450a5]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001e130: adc al, 0x48; mov edi, dword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x20]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x278; ret; 
0x000000000001cd1b: adc al, 0x48; mov edi, dword ptr [rsp + 0x50]; lea rax, [rip + 0x58]; call rax; 
0x0000000000054d34: adc al, 0x66; mov ebx, 0xb70f0b01; ret; 
0x000000000002b9bc: adc al, 0x81; add rdx, rcx; jmp rdx; 
0x000000000000eb0b: adc al, 0x83; jmp qword ptr [rax]; 
0x0000000000039fe2: adc al, 0x88; add rdx, rax; jmp rdx; 
0x000000000001e663: adc al, 0x89; and al, 8; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001e65f: adc al, 0x8b; and al, 0x14; mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000039b0e: adc al, 0x90; add rdx, r8; jmp rdx; 
0x0000000000039c11: adc al, 0x96; add rdx, rsi; jmp rdx; 
0x0000000000040b92: adc al, 0xb9; add rdx, rcx; jmp rdx; 
0x000000000004b3ab: adc al, 0xca; ret; 
0x0000000000034c10: adc al, 0xce; add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000c222: adc al, 0xf6; and al, 0x1f; add dword ptr [rbp + 9], esi; mov eax, dword ptr [rsp + 0x14]; add rsp, 0x28; ret; 
0x000000000004abcd: adc al, 1; add rdx, -0x10; mov eax, 1; ret; 
0x000000000004ac12: adc al, 1; add rdx, 0x10; mov eax, 1; ret; 
0x000000000004ac34: adc al, 1; add rdx, 0x20; mov eax, 1; ret; 
0x000000000001e947: adc al, 3; push rdx; ret; 
0x0000000000014c31: adc al, 6; add byte ptr [rax - 0x73], cl; add eax, 0xffff6a35; mov esi, 0x49; call rax; 
0x00000000000136ac: adc al, bpl; mov ebp, 0x48fffffc; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000002ce9d: adc al, byte ptr [rax]; add byte ptr [rax + 3], cl; test byte ptr [rax + rbx*2], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000002a1d8: adc al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000005784f: adc al, byte ptr [rcx + 0xf]; scasd eax, dword ptr [rdi]; ret 0xe801; 
0x0000000000010f72: adc al, byte ptr [rdi + 0x1240006]; movzx eax, al; add rsp, 0x38; ret; 
0x000000000001aced: adc al, ch; cmp eax, 0x48fffffc; mov eax, dword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x00000000000124ad: adc al, ch; mov ebp, 0x48ffffca; add esp, 0x18; ret; 
0x00000000000124cd: adc al, ch; mov ebp, 0x48ffffcf; add esp, 0x18; ret; 
0x00000000000136ad: adc al, ch; mov ebp, 0x48fffffc; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000001c95d: adc al, ch; or eax, 0x4800001a; add esp, 0x18; ret; 
0x0000000000038e97: adc al, ch; ret; 
0x000000000003cfb0: adc al, ch; sbb bh, byte ptr [rdi - 0x7ab70001]; ror byte ptr [rdi], 0x84; test dword ptr [rax], 0x89480000; ret; 
0x000000000005a9b6: adc bh, bh; adc eax, 0x1f48b; add rsp, 0x48; ret; 
0x000000000005a966: adc bh, bh; adc eax, 0x1f4db; add rsp, 0x48; ret; 
0x000000000005a916: adc bh, bh; adc eax, 0x1f52b; add rsp, 0x48; ret; 
0x000000000005a563: adc bh, bh; adc eax, 0x1f8de; add rsp, 0x48; ret; 
0x0000000000056a86: adc bh, bh; adc eax, 0x233bb; add rsp, 0x48; ret; 
0x000000000004d5c6: adc bh, bh; adc eax, 0x2c87b; add rsp, 0x48; ret; 
0x0000000000022a26: adc bh, bh; adc eax, 0x5741b; add rsp, 0x48; ret; 
0x00000000000229d6: adc bh, bh; adc eax, 0x5746b; add rsp, 0x48; ret; 
0x0000000000022986: adc bh, bh; adc eax, 0x574bb; add rsp, 0x48; ret; 
0x0000000000022936: adc bh, bh; adc eax, 0x5750b; add rsp, 0x48; ret; 
0x000000000001efc3: adc bh, bh; adc eax, 0x5ae7e; add rsp, 0x48; ret; 
0x000000000001ef83: adc bh, bh; adc eax, 0x5aebe; add rsp, 0x48; ret; 
0x000000000001ef43: adc bh, bh; adc eax, 0x5aefe; add rsp, 0x48; ret; 
0x000000000001bff0: adc bh, bh; adc eax, 0x5dd01; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000019acb: adc bh, bh; adc eax, 0x5fdc6; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001906b: adc bh, bh; adc eax, 0x60db6; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000001839c: adc bh, bh; adc eax, 0x61acd; add rsp, 0x88; ret; 
0x0000000000016e8b: adc bh, bh; adc eax, 0x628fe; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000016dd0: adc bh, bh; adc eax, 0x62949; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000016384: adc bh, bh; adc eax, 0x6337d; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000015ff0: adc bh, bh; adc eax, 0x63ab1; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000015ea4: adc bh, bh; adc eax, 0x63f85; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000011934: adc bh, bh; adc eax, 0x67e45; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000000c074: adc bh, bh; adc eax, 0x6dcf5; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000ec48: adc bh, bh; xlatb; add rsp, 0x18; ret; 
0x000000000000c8ea: adc bh, byte ptr [rax + rax]; add rsp, 0x128; ret; 
0x0000000000053514: adc byte ptr [r15], cl; adc dword ptr [rbx], eax; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x000000000002a584: adc byte ptr [r8 + 1], r15b; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x0000000000017141: adc byte ptr [r8 - 0x75], r9b; and al, 0x18; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x20; ret; 
0x0000000000016f59: adc byte ptr [r8 - 0x75], r9b; and al, 0x28; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x38; ret; 
0x000000000001f2b2: adc byte ptr [r8 - 0x77], r9b; adc byte ptr [rdi], r9b; adc byte ptr [rdi], al; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000004cda6: adc byte ptr [rax + 0x110001], bh; add rsp, 0x98; pop rbx; pop r14; ret; 
0x000000000003610b: adc byte ptr [rax + 0x39], cl; ret; 
0x000000000000fa06: adc byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x000000000002a585: adc byte ptr [rax + 1], bh; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x000000000004ac17: adc byte ptr [rax + 1], bh; ret; 
0x0000000000010fd1: adc byte ptr [rax + 1], cl; test dword ptr [rax - 0x77], 0x4818247c; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x0000000000049f44: adc byte ptr [rax + 3], cl; push rdi; adc byte ptr [rbx + 4], dh; xor eax, eax; pop rbx; ret; 
0x0000000000014406: adc byte ptr [rax + 8], al; movaps xmmword ptr [rsp + 0x20], xmm0; lea rcx, [rip + 0x61c2b]; lea rax, [rip - 0x8a8c]; lea rdx, [rsp + 0x20]; call rax; 
0x000000000002a4c9: adc byte ptr [rax + 8], al; movups xmmword ptr [rdi + 8], xmm0; xor eax, eax; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x0000000000029073: adc byte ptr [rax + 9], cl; ret; 
0x0000000000011187: adc byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x1b8; ret; 
0x000000000004ade2: adc byte ptr [rax - 0x39], cl; sbb byte ptr [rax], r8b; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4920; 
0x0000000000012938: adc byte ptr [rax - 0x73], cl; adc eax, 0x63658; lea rax, [rip - 0x7227]; mov esi, 0x100; call rax; 
0x0000000000010b7f: adc byte ptr [rax - 0x73], cl; add eax, 0x2e3f9; call rax; 
0x000000000000e18a: adc byte ptr [rax - 0x73], cl; add eax, 0x49e4e; lea rsi, [rsp + 0x28]; call rax; 
0x0000000000017c6f: adc byte ptr [rax - 0x73], cl; add eax, 0x799; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000eefd: adc byte ptr [rax - 0x73], cl; add eax, 0xf33b; call rax; 
0x000000000001d31e: adc byte ptr [rax - 0x73], cl; add eax, 0xfffee2aa; call rax; 
0x000000000001adfe: adc byte ptr [rax - 0x73], cl; add eax, 0xffff07ca; call rax; 
0x000000000001159a: adc byte ptr [rax - 0x73], cl; add eax, 0xffffa48e; call rax; 
0x000000000001ab7d: adc byte ptr [rax - 0x73], cl; add eax, 0xffffc13b; call rax; 
0x000000000001e24d: adc byte ptr [rax - 0x73], cl; add eax, 0xffffe55b; call rax; 
0x000000000000e749: adc byte ptr [rax - 0x73], cl; or eax, 0x51b4b; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001a279: adc byte ptr [rax - 0x73], cl; push rsp; and al, 0x50; call rax; 
0x0000000000059eda: adc byte ptr [rax - 0x73], cl; xor eax, 0xb0f2; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000011220: adc byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x38; ret; 
0x00000000000165b4: adc byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x50; ret; 
0x0000000000016361: adc byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x68; ret; 
0x0000000000019f90: adc byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x88; ret; 
0x0000000000012d04: adc byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0xc8; ret; 
0x000000000000fe3a: adc byte ptr [rax - 0x75], cl; and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0xc0; ret; 
0x000000000005a3ec: adc byte ptr [rax - 0x75], cl; and al, 0x18; lea rsi, [rip + 0xb320]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a251: adc byte ptr [rax - 0x75], cl; and al, 0x18; lea rsi, [rip + 0xb4bb]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000017142: adc byte ptr [rax - 0x75], cl; and al, 0x18; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x20; ret; 
0x000000000001a116: adc byte ptr [rax - 0x75], cl; and al, 0x20; add rsp, 0xd8; ret; 
0x0000000000016f5a: adc byte ptr [rax - 0x75], cl; and al, 0x28; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x38; ret; 
0x000000000001dbed: adc byte ptr [rax - 0x75], cl; and al, 0x48; mov qword ptr [rax + 0x18], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x118; ret; 
0x00000000000177d3: adc byte ptr [rax - 0x75], cl; and al, 0x50; mov qword ptr [rax + 0x18], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x0000000000059dc3: adc byte ptr [rax - 0x75], cl; and al, 8; call qword ptr [rax + 0x18]; 
0x000000000000e6be: adc byte ptr [rax - 0x75], cl; and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x70; ret; 
0x000000000000e643: adc byte ptr [rax - 0x75], cl; and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x78; ret; 
0x000000000001376c: adc byte ptr [rax - 0x75], cl; and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x000000000005aad1: adc byte ptr [rax - 0x75], cl; jae 0x5aace; call qword ptr [rax + 0x18]; 
0x0000000000015193: adc byte ptr [rax - 0x75], cl; je 0x151bc; sbb byte ptr [rax - 0x73], cl; add eax, 0x5b60; call rax; 
0x000000000001bd13: adc byte ptr [rax - 0x75], cl; je 0x1bd3c; sbb byte ptr [rax - 0x73], cl; add eax, 0xb00; mov edi, 0x27; call rax; 
0x000000000000d623: adc byte ptr [rax - 0x75], cl; je 0xd64c; sbb byte ptr [rax - 0x73], cl; add eax, 0xc1d0; lea rdi, [rsp + 0x278]; call rax; 
0x0000000000037bf9: adc byte ptr [rax - 0x75], cl; jge 0x37bfe; call rbx; 
0x00000000000393d8: adc byte ptr [rax - 0x75], cl; jge 0x393dd; call rbx; 
0x00000000000114e7: adc byte ptr [rax - 0x75], cl; jl 0x11510; or byte ptr [rax - 0x73], cl; add eax, 0xffffa54c; call rax; 
0x0000000000019f47: adc byte ptr [rax - 0x75], cl; jl 0x19f70; or byte ptr [rax - 0x73], cl; add eax, 0xffffc5cc; call rax; 
0x0000000000042781: adc byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000005c0cf: adc byte ptr [rax - 0x75], cl; mov rcx, qword ptr ds:[rsi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov esi, eax; pop rax; jmp rcx; 
0x0000000000011644: adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; add rsp, 0x38; ret; 
0x000000000001529e: adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; add rsp, 0x40; ret; 
0x000000000001741a: adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; add rsp, 0x58; ret; 
0x000000000000fe3f: adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; add rsp, 0xc0; ret; 
0x000000000005b093: adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x20; call qword ptr [rbp + 0x18]; 
0x000000000000bf2c: adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xd0; ret; 
0x000000000003d3ed: adc byte ptr [rax - 0x75], cl; sbb dil, r15b; push rax; sub byte ptr [rax - 0x77], cl; ret 0xdeb; 
0x000000000001f2b3: adc byte ptr [rax - 0x77], cl; adc byte ptr [rdi], r9b; adc byte ptr [rdi], al; movups xmmword ptr [rsi], xmm0; ret; 
0x0000000000015294: adc byte ptr [rax - 0x77], cl; and al, 0x18; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x000000000000f08e: adc byte ptr [rax - 0x77], cl; and al, 0x20; lea rax, [rip + 0xb9f5]; call rax; 
0x000000000000f050: adc byte ptr [rax - 0x77], cl; and al, 0x20; lea rax, [rip + 0xba33]; call rax; 
0x000000000001731e: adc byte ptr [rax - 0x77], cl; and al, 0x38; mov qword ptr [rsp + 0x40], rdx; add rsp, 0x48; ret; 
0x000000000003b33c: adc byte ptr [rax - 0x77], cl; and al, 0x40; mov qword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x00000000000143e2: adc byte ptr [rax - 0x77], cl; and al, 0x58; mov qword ptr [rsp + 0x60], rdx; add rsp, 0x68; ret; 
0x0000000000013ac0: adc byte ptr [rax - 0x77], cl; and al, 8; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000001dab3: adc byte ptr [rax - 0x77], cl; clc; mov qword ptr [rsp], rax; mov qword ptr [rsp + 8], rax; add rsp, 0x10; ret; 
0x000000000004ccee: adc byte ptr [rax - 0x77], cl; clc; pop rcx; ret; 
0x000000000001e6a9: adc byte ptr [rax - 0x77], cl; cmovs ecx, dword ptr [rbx + 0x4818244c]; mov dword ptr [rdi + 8], ecx; add rsp, 0x28; ret; 
0x00000000000137f3: adc byte ptr [rax - 0x77], cl; cmp al, 0x24; mov rax, qword ptr [rdi + 8]; mov qword ptr [rsp + 8], rax; add rsp, 0x10; ret; 
0x000000000001e8dd: adc byte ptr [rax - 0x77], cl; ja 0x1e8fa; add rsp, 0x10; pop rbx; ret; 
0x00000000000118a8: adc byte ptr [rax - 0x77], cl; je 0x118d1; sbb byte ptr [rax - 0x73], cl; add eax, 0x4806b; call rax; 
0x00000000000100b3: adc byte ptr [rax - 0x77], cl; mov rax, rdi; mov qword ptr [rsp], rax; mov qword ptr [rsp + 8], rdx; add rsp, 0x10; ret; 
0x0000000000056d32: adc byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; jo 0x56d4b; ret; 
0x0000000000056d4f: adc byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; jo 0x56d68; ret; 
0x0000000000056d67: adc byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; jo 0x56d80; ret; 
0x0000000000056d81: adc byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; jo 0x56d9a; ret; 
0x000000000003e83a: adc byte ptr [rax - 0x77], cl; out 0x41, al; call rdi; 
0x0000000000038ca3: adc byte ptr [rax - 0x77], cl; ret 0x3948; 
0x000000000003ef43: adc byte ptr [rax - 0x77], cl; ret; 
0x000000000005d66d: adc byte ptr [rax - 0x77], cl; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000002488d: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rdi*2 + 0x48], 0x8d; dec qword ptr [rax - 0x77]; ret 0x8348; 
0x0000000000035307: adc byte ptr [rax - 0x7bf0b405], al; ret 0xfffe; 
0x000000000000f22d: adc byte ptr [rax - 0x7d], cl; mov dword ptr [rax + 0x48], 0xb857058d; add byte ptr [rax], al; call rax; 
0x000000000005cc01: adc byte ptr [rax - 0x7d], cl; ret 0x6620; 
0x000000000003a3ae: adc byte ptr [rax - 0x7d], cl; ret 0xeb04; 
0x000000000005aaad: adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000000e532: adc byte ptr [rax - 0x7d], cl; rol dword ptr [rcx], 0x48; mov dword ptr [rax + 0x10], ecx; add rsp, 0xc8; ret; 
0x0000000000052c6f: adc byte ptr [rax - 1], cl; ret 0x4b8d; 
0x000000000004fc9c: adc byte ptr [rax - 1], cl; ret; 
0x00000000000130a4: adc byte ptr [rax], al; add bl, ch; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x58; ret; 
0x0000000000011cb1: adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0xb8; ret; 
0x0000000000029f79: adc byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000003dd9a: adc byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rax; call qword ptr [rip + 0x3be49]; pop rcx; ret; 
0x0000000000015201: adc byte ptr [rax], al; cmove rax, rcx; cmp rax, 0; jne 0x15218; lea rax, [rip + 0x41a4c]; call rax; 
0x000000000000fa21: adc byte ptr [rax], al; cmove rax, rcx; cmp rax, 0; jne 0xfa38; lea rax, [rip + 0x4722c]; call rax; 
0x000000000003cf32: adc byte ptr [rax], al; mov rax, qword ptr [r14 + 0x20]; jne 0x3d0be; mov rdi, r15; call rax; 
0x0000000000022d0d: adc byte ptr [rbp - 0x77], cl; fmul qword ptr [rcx - 9]; fsub st(1), st(0); retf 3; add byte ptr [rax - 1], cl; ret; 
0x000000000001ee10: adc byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x00000000000235e6: adc byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x00000000000379a5: adc byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; pop rbp; ret; 
0x0000000000049f48: adc byte ptr [rbx + 4], dh; xor eax, eax; pop rbx; ret; 
0x0000000000037b68: adc byte ptr [rcx + 0x3e583dd], cl; movsxd rax, dword ptr [r12 + rbp*4]; add rax, r12; jmp rax; 
0x000000000005a2dd: adc byte ptr [rcx + 0x5e415bd8], cl; pop r15; ret; 
0x000000000005951b: adc byte ptr [rcx + 0xf], al; xchg eax, edx; ret; 
0x000000000001b921: adc byte ptr [rcx + 1], bh; call 0x1ae10; add rsp, 0x18; ret; 
0x000000000001da51: adc byte ptr [rcx + 1], bh; call 0x1d330; add rsp, 0x18; ret; 
0x000000000002155a: adc byte ptr [rcx + rcx*4 + 0x48], cl; sbb byte ptr [rcx - 0x7d], cl; ret 0x4c20; 
0x000000000005b06b: adc byte ptr [rcx + rcx*4 - 6], cl; call qword ptr [rbx + 0x18]; 
0x00000000000393b2: adc byte ptr [rcx - 0x73], cl; outsb dx, byte ptr [rsi]; dec dword ptr [rcx - 0x75]; jle 0x393ba; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x00000000000389b7: adc byte ptr [rcx - 0x75], cl; cmp al, 0x24; call rbx; 
0x0000000000056fa8: adc byte ptr [rcx - 0x75], cl; or sil, r8b; add al, 0x18; add byte ptr [rax - 1], cl; ret; 
0x000000000000fb43: adc byte ptr [rcx - 0x76f7db84], cl; jl 0xfb6f; or al, 0x8b; and al, 0xc; add rsp, 0x10; ret; 
0x000000000000fb63: adc byte ptr [rcx - 0x76f7db84], cl; jl 0xfb8f; or al, 0x8b; and al, 0xc; add rsp, 0x10; ret; 
0x000000000004c77f: adc byte ptr [rcx - 0x77], cl; test dh, bl; fadd dword ptr [rax + rax]; add byte ptr [rax + 0x6b], cl; ret; 
0x0000000000019a55: adc byte ptr [rcx], al; add byte ptr [rax], al; call rax; 
0x0000000000019a3f: adc byte ptr [rcx], al; add byte ptr [rax], al; lea rdx, [rip + 0x5c85e]; lea rax, [rip - 0x2a31]; lea rsi, [rsp + 0x110]; call rax; 
0x00000000000359ed: adc byte ptr [rcx], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x000000000003da9b: adc byte ptr [rcx], al; movups xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 0x20]; 
0x000000000001b991: adc byte ptr [rcx], dh; leave; call 0x1ae10; add rsp, 0x18; ret; 
0x000000000001da81: adc byte ptr [rcx], dh; leave; call 0x1d330; add rsp, 0x18; ret; 
0x0000000000056c4c: adc byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 3; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a59a: adc byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 7; add rsp, 0x28; ret; 
0x000000000001ee0a: adc byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x00000000000235e0: adc byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x00000000000137d4: adc byte ptr [rcx], dh; ror byte ptr [rcx - 0x43d173f], 0xff; dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x18; ret; 
0x00000000000137a4: adc byte ptr [rcx], dh; ror byte ptr [rcx - 0x46d173f], 0xff; dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x18; ret; 
0x000000000001ac9d: adc byte ptr [rcx], dh; shr byte ptr [rax - 0x14fd8aff], 5; add rsp, 0x18; ret; 
0x000000000001f2b9: adc byte ptr [rdi], al; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000001f2b7: adc byte ptr [rdi], cl; adc byte ptr [rdi], al; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000001e41d: adc byte ptr [rdi], cl; adc dword ptr [rax], eax; lea rdx, [rip + 0x57fd0]; add rsp, 0x38; ret; 
0x000000000001a8fd: adc byte ptr [rdi], cl; adc dword ptr [rax], eax; lea rdx, [rip + 0x5ba08]; add rsp, 0x38; ret; 
0x0000000000053515: adc byte ptr [rdi], cl; adc dword ptr [rbx], eax; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x0000000000033dd9: adc byte ptr [rdi], cl; mov bh, 0x94; and al, 0xb4; add byte ptr [rax], al; add byte ptr [rcx], cl; ret 0xc148; 
0x000000000000fbf3: adc byte ptr [rdi], cl; mov dh, 0x44; and al, 7; add rsp, 0x18; ret; 
0x000000000001e418: adc byte ptr [rdi], cl; sub byte ptr [rsp + 0x10], al; movups xmmword ptr [rax], xmm0; lea rdx, [rip + 0x57fd0]; add rsp, 0x38; ret; 
0x000000000001a8f8: adc byte ptr [rdi], cl; sub byte ptr [rsp + 0x10], al; movups xmmword ptr [rax], xmm0; lea rdx, [rip + 0x5ba08]; add rsp, 0x38; ret; 
0x000000000000936b: adc byte ptr [rdi], cl; sub byte ptr [rsp], al; movups xmmword ptr [rdi + rax*8], xmm0; add rsp, 0x20; pop rbx; ret; 
0x000000000005edb2: adc byte ptr [rdi], cl; sub dword ptr [rsp], eax; mov rdx, rsp; call qword ptr [rip + 0x1b088]; add rsp, 0x38; ret; 
0x000000000003204e: adc byte ptr [rdi], cl; xchg eax, ebp; ret; 
0x000000000005a58a: adc byte ptr [rdi], cl; xchg eax, ebx; ret; 
0x0000000000059685: adc byte ptr [rdi], cl; xchg eax, edx; ret 0x894c; 
0x000000000005972b: adc byte ptr [rdi], cl; xchg eax, edx; ret 0x8b48; 
0x00000000000597bb: adc byte ptr [rdi], cl; xchg eax, edx; ret 0x972; 
0x000000000001f2b6: adc byte ptr [rdi], r9b; adc byte ptr [rdi], al; movups xmmword ptr [rsi], xmm0; ret; 
0x0000000000012b77: adc byte ptr [rdx + 0x30], bh; call 0x9078; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x0000000000036d0d: adc byte ptr [rdx + 1], bh; call qword ptr [rip + 0x42a6f]; lea rax, [rip + 0x400a0]; pop rcx; ret; 
0x0000000000057790: adc byte ptr [rdx + 8], bh; mov rdi, rax; call qword ptr [rip + 0x222a1]; add rsp, 0x18; ret; 
0x000000000005ac35: adc byte ptr [rdx - 0x75], cl; xor al, 0x28; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000005abe3: adc byte ptr [rdx - 0x75], cl; xor al, 0x33; call qword ptr [rax + 0x18]; 
0x0000000000018af6: adc byte ptr [rdx], al; add byte ptr [rax], al; call rax; 
0x0000000000020811: adc byte ptr [rdx], al; jae 0x20835; pop rbx; ret; 
0x0000000000019a8c: adc byte ptr [rip - 0x2f000001], bl; ud2; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x178; ret; 
0x000000000004abf0: adc byte ptr [rsi + 0xf], ah; mov esp, 0xd1b70fc9; add rdx, rax; mov eax, 1; ret; 
0x00000000000599ea: adc byte ptr [rsi + 4], al; movups xmmword ptr [rax + 1], xmm0; mov cl, 1; mov byte ptr [rax], cl; ret; 
0x000000000002b9db: adc byte ptr [rsi + 8], al; movups xmmword ptr [rdi + 8], xmm0; mov qword ptr [rdi], rax; ret; 
0x000000000001848e: adc byte ptr [rsi - 0x39], ah; add byte ptr [rbx], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0xb8; ret; 
0x0000000000059a44: adc byte ptr [rsi], al; movups xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x18], dx; mov dword ptr [rdi + 0x10], ecx; mov dword ptr [rdi + 0x14], r8d; ret; 
0x000000000000cbfc: adc byte ptr [rsi], dl; add dword ptr [rax], eax; lea rdi, [rsp + 0x120]; call rax; 
0x000000000001e3ab: adc byte ptr [rsp + 0x20], al; movaps xmmword ptr [rsp], xmm0; mov rdi, rsp; call 0x1e3c0; add rsp, 0x58; ret; 
0x000000000000bddd: adc byte ptr [rsp + 0x28], al; movups xmmword ptr [rcx], xmm0; add rsp, 0xb8; ret; 
0x000000000001647c: adc byte ptr [rsp + 0x38], al; movaps xmmword ptr [rsp + 0x20], xmm0; lea rax, [rip + 0x3b14]; lea rdx, [rsp + 0x20]; call rax; 
0x000000000001a2f8: adc byte ptr [rsp + 0x38], al; movaps xmmword ptr [rsp + 0x70], xmm0; lea rax, [rip - 0x2d98]; lea rsi, [rsp + 0x70]; call rax; 
0x0000000000016700: adc byte ptr [rsp + 0x58], al; movaps xmmword ptr [rsp + 0x70], xmm0; lea rax, [rip + 0x3a40]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000000e142: adc byte ptr [rsp + 0x68], al; movups xmmword ptr [rsi], xmm0; lea rdx, [rip + 0x67cf8]; lea rax, [rip + 0x4c879]; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000036d63: adc byte ptr [rsp + 8], al; movups xmmword ptr [rax], xmm0; inc rax; add rsp, 0x20; pop rbx; ret; 
0x00000000000368ee: adc byte ptr [rsp], al; movups xmmword ptr [rbx], xmm0; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x000000000004b3d8: adc byte ptr [rsp], al; movups xmmword ptr [rdi], xmm0; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x00000000000366a2: adc ch, byte ptr [rip - 0x76b7fffc]; ret; 
0x000000000002e919: adc cl, byte ptr [rax - 0x77]; ret; 
0x000000000003991d: adc cl, byte ptr [rax - 0x7d]; ret 0xeb04; 
0x00000000000219ed: adc cl, byte ptr [rax - 1]; ret 0x8949; 
0x0000000000009a45: adc cl, byte ptr [rax - 1]; ret 0x894d; 
0x00000000000297af: adc cl, ch; ret; 
0x000000000001a50f: adc dh, al; and al, 0x47; add byte ptr [rax - 0x73], cl; add eax, 0xfffff254; call rax; 
0x000000000001a642: adc dh, dh; and al, 0x47; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x000000000000c2de: adc dh, dh; and al, 0x4f; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x000000000003dd55: adc dword ptr [r15], r9d; xchg eax, esp; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x000000000005b721: adc dword ptr [r8 - 0x77], ecx; fcomp dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x00000000000599ee: adc dword ptr [rax + 1], eax; mov cl, 1; mov byte ptr [rax], cl; ret; 
0x00000000000599ad: adc dword ptr [rax + 4], eax; mov qword ptr [rax + 0x14], 0; mov word ptr [rax + 0x1c], dx; mov cx, 1; mov word ptr [rax], cx; ret; 
0x0000000000039c02: adc dword ptr [rax + 6], edi; lea rsi, [rip + 0x27f8d]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000000e52e: adc dword ptr [rax - 0x75], ecx; adc byte ptr [rax - 0x7d], cl; rol dword ptr [rcx], 0x48; mov dword ptr [rax + 0x10], ecx; add rsp, 0xc8; ret; 
0x000000000005b722: adc dword ptr [rax - 0x77], ecx; fcomp dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x000000000004f094: adc dword ptr [rax - 1], ecx; ret; 
0x000000000002a0ad: adc dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000005df0e: adc dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000004cdaa: adc dword ptr [rax], eax; add rsp, 0x98; pop rbx; pop r14; ret; 
0x000000000004f104: adc dword ptr [rax], eax; cmovae rax, rdx; shl rax, 0x20; or rax, rcx; ret; 
0x0000000000036d68: adc dword ptr [rax], eax; inc rax; add rsp, 0x20; pop rbx; ret; 
0x000000000005bffa: adc dword ptr [rax], eax; jmp rcx; 
0x000000000003cc45: adc dword ptr [rax], eax; lea rdx, [rip + 0x3a912]; add rsp, 0x58; pop rbx; pop r14; ret; 
0x000000000001e41f: adc dword ptr [rax], eax; lea rdx, [rip + 0x57fd0]; add rsp, 0x38; ret; 
0x000000000001a8ff: adc dword ptr [rax], eax; lea rdx, [rip + 0x5ba08]; add rsp, 0x38; ret; 
0x0000000000057e5a: adc dword ptr [rax], eax; lea rsi, [rip + 0xd485]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000005bdb7: adc dword ptr [rax], eax; mov eax, 0x30; lea rcx, [rip + 0x95ff]; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x0000000000057e72: adc dword ptr [rax], eax; mov eax, 0x5c; ret; 
0x000000000004cc6b: adc dword ptr [rax], eax; mov qword ptr [rbx], 1; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000005bb81: adc dword ptr [rax], eax; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; mov esi, 0x5c; jmp rax; 
0x0000000000057e81: adc dword ptr [rax], eax; ret; 
0x000000000005bf4f: adc dword ptr [rbp + 0x63480000], edx; or al, 0x88; add rcx, rax; jmp rcx; 
0x000000000005c24f: adc dword ptr [rbx + 0x10], eax; mov dword ptr [rbx + 0x30], ebp; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000053513: adc dword ptr [rbx + 0x10], ecx; movups xmmword ptr [rbx], xmm0; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x0000000000059160: adc dword ptr [rbx + 0x49000000], -1; ret 0xff48; 
0x000000000004cc87: adc dword ptr [rbx + rdi + 0x10], eax; inc qword ptr [rbx + 8]; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000003cd04: adc dword ptr [rbx], eax; lea rdx, [rip + 0x3a853]; mov rax, rbx; add rsp, 0x50; pop rbx; ret; 
0x00000000000368f2: adc dword ptr [rbx], eax; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x0000000000053517: adc dword ptr [rbx], eax; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x0000000000046803: adc dword ptr [rcx + 0x39], ecx; ret 0x820f; 
0x00000000000467bd: adc dword ptr [rcx + 0x39], ecx; ret 0xe972; 
0x000000000003dd52: adc dword ptr [rcx + 0x3a], eax; adc dword ptr [r15], r9d; xchg eax, esp; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x000000000003dd51: adc dword ptr [rcx + 0x3a], r8d; adc dword ptr [r15], r9d; xchg eax, esp; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x0000000000021871: adc dword ptr [rcx + 8], eax; add rsp, 0x18; ret; 
0x000000000005b0bb: adc dword ptr [rcx + rcx*4 - 1], ecx; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000000bde2: adc dword ptr [rcx], eax; add rsp, 0xb8; ret; 
0x000000000004cb76: adc dword ptr [rdi + 0xc], eax; ret; 
0x000000000002b9df: adc dword ptr [rdi + 8], eax; mov qword ptr [rdi], rax; ret; 
0x000000000002a4cd: adc dword ptr [rdi + 8], eax; xor eax, eax; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x0000000000009371: adc dword ptr [rdi + rax*8], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000004b3dc: adc dword ptr [rdi], eax; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x0000000000059a47: adc dword ptr [rdi], eax; mov word ptr [rdi + 0x18], dx; mov dword ptr [rdi + 0x10], ecx; mov dword ptr [rdi + 0x14], r8d; ret; 
0x000000000004cb73: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0xc], xmm0; ret; 
0x00000000000354ec: adc dword ptr [rdi], eax; pop rbx; pop r14; pop rbp; ret; 
0x000000000003dd56: adc dword ptr [rdi], ecx; xchg eax, esp; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x0000000000040b8d: adc dword ptr [rdx], eax; add byte ptr [rax + 0x63], cl; adc al, 0xb9; add rdx, rcx; jmp rdx; 
0x000000000003020b: adc dword ptr [rip + 0x63480003], edx; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000004f4a2: adc dword ptr [rsi + 0x10], ecx; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000002a090: adc dword ptr [rsi + 8], eax; mov qword ptr [r14], 8; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000e147: adc dword ptr [rsi], eax; lea rdx, [rip + 0x67cf8]; lea rax, [rip + 0x4c879]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000004f49e: adc dword ptr [rsi], eax; movups xmmword ptr [r14 + 0x10], xmm1; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000001f2bc: adc dword ptr [rsi], eax; ret; 
0x000000000003da9e: adc dword ptr [rsp + 0x10], eax; call qword ptr [rax + 0x20]; 
0x0000000000054754: adc eax, 0x1054b; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000001e573: adc eax, 0x16244c88; mov byte ptr [rsp + 0x17], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000004cd6f: adc eax, 0x16e74; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000004b3a4: adc eax, 0x18eef; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000005ee87: adc eax, 0x1a64c; add rsp, 0x88; ret; 
0x000000000005ebe9: adc eax, 0x1a8ea; add rsp, 0x28; ret; 
0x000000000005eab9: adc eax, 0x1aa1a; add rsp, 0x28; ret; 
0x000000000005e98b: adc eax, 0x1ab48; add rsp, 0x30; pop rbx; ret; 
0x000000000005e852: adc eax, 0x1ac81; add rsp, 0x28; ret; 
0x000000000005e765: adc eax, 0x1ad6e; add rsp, 0x28; ret; 
0x000000000005e6b7: adc eax, 0x1ae1c; add rsp, 0x88; ret; 
0x000000000005e661: adc eax, 0x1ae72; add rsp, 0x88; ret; 
0x000000000005e482: adc eax, 0x1b051; add rsp, 0x88; ret; 
0x000000000005edbb: adc eax, 0x1b088; add rsp, 0x38; ret; 
0x000000000005e42c: adc eax, 0x1b0a7; add rsp, 0x88; ret; 
0x000000000005e301: adc eax, 0x1b1d2; add rsp, 0x88; ret; 
0x000000000005e261: adc eax, 0x1b272; add rsp, 0x88; ret; 
0x000000000005e1ce: adc eax, 0x1b305; add rsp, 0x88; ret; 
0x000000000005e13e: adc eax, 0x1b395; add rsp, 0x88; ret; 
0x000000000005e0ac: adc eax, 0x1b427; add rsp, 0x88; ret; 
0x000000000005e01c: adc eax, 0x1b4b7; add rsp, 0x88; ret; 
0x000000000005d494: adc eax, 0x1bf5f; ud2; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000005c18f: adc eax, 0x1dd3c; pop rcx; ret; 
0x000000000005b5ae: adc eax, 0x1e895; add rsp, 0x38; ret; 
0x000000000005a6d7: adc eax, 0x1f3fc; pop rcx; ret; 
0x000000000005aa3b: adc eax, 0x1f408; add rsp, 0x38; ret; 
0x000000000005a693: adc eax, 0x1f440; pop rcx; ret; 
0x000000000005a656: adc eax, 0x1f47d; pop rcx; ret; 
0x000000000005a9b8: adc eax, 0x1f48b; add rsp, 0x48; ret; 
0x000000000005a624: adc eax, 0x1f4af; pop rcx; ret; 
0x000000000005a968: adc eax, 0x1f4db; add rsp, 0x48; ret; 
0x000000000005a918: adc eax, 0x1f52b; add rsp, 0x48; ret; 
0x000000000005a524: adc eax, 0x1f5af; pop rcx; ret; 
0x000000000005a4e0: adc eax, 0x1f5f3; pop rcx; ret; 
0x000000000005a4a3: adc eax, 0x1f630; pop rcx; ret; 
0x000000000005a471: adc eax, 0x1f662; pop rcx; ret; 
0x000000000005a565: adc eax, 0x1f8de; add rsp, 0x48; ret; 
0x0000000000059b16: adc eax, 0x2032d; add rsp, 0x68; ret; 
0x0000000000057fa8: adc eax, 0x21bf3; mov rax, rbx; pop rbx; ret; 
0x000000000005815d: adc eax, 0x21d6e; add rsp, 0xa0; pop rbx; ret; 
0x0000000000058087: adc eax, 0x21dbc; add rsp, 0xa0; pop rbx; ret; 
0x000000000005779a: adc eax, 0x222a1; add rsp, 0x18; ret; 
0x0000000000056cb2: adc eax, 0x22dd9; ud2; nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; mov rdx, qword ptr [rdi + 0x10]; ret; 
0x0000000000056a88: adc eax, 0x233bb; add rsp, 0x48; ret; 
0x000000000001cb82: adc eax, 0x24448b48; and byte ptr [rax - 0x73], cl; or eax, 0x440dd; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000dfe0: adc eax, 0x24448b48; or byte ptr [rax - 0x73], cl; or eax, 0x5206b; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000005abd9: adc eax, 0x247c8b48; or byte ptr [rax - 0x75], cl; and al, 0x10; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000003d2f0: adc eax, 0x24937; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000053736: adc eax, 0x25c75; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x000000000003a065: adc eax, 0x27b7a; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000004d5c8: adc eax, 0x2c87b; add rsp, 0x48; ret; 
0x0000000000032612: adc eax, 0x2f275; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000049f5e: adc eax, 0x2f605; pop rbx; ret; 
0x00000000000318f5: adc eax, 0x2ff0a; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000318cf: adc eax, 0x2ff48; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000318a9: adc eax, 0x2ff86; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002c39d: adc eax, 0x352f2; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002c0a3: adc eax, 0x355ac; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000003cd85: adc eax, 0x3a7f6; ret; 
0x000000000003cd59: adc eax, 0x3a822; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000003cd08: adc eax, 0x3a853; mov rax, rbx; add rsp, 0x50; pop rbx; ret; 
0x000000000003cc49: adc eax, 0x3a912; add rsp, 0x58; pop rbx; pop r14; ret; 
0x000000000003e5d2: adc eax, 0x3ae71; mov eax, dword ptr [rax]; pop rcx; ret; 
0x000000000003e614: adc eax, 0x3bb07; lea rax, [rip + 0x3bb09]; pop rcx; ret; 
0x000000000003dda2: adc eax, 0x3be49; pop rcx; ret; 
0x000000000003d0b7: adc eax, 0x3c32c; ud2; mov rdi, r15; call rax; 
0x000000000003d0b1: adc eax, 0x3c6d2; call qword ptr [rip + 0x3c32c]; ud2; mov rdi, r15; call rax; 
0x000000000003cd71: adc eax, 0x3d0ea; ud2; nop dword ptr [rax + rax]; mov rax, rdi; lea rdx, [rip + 0x3a7f6]; ret; 
0x000000000003c511: adc eax, 0x3d232; mov r15, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000003c4e2: adc eax, 0x3d261; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000003bb4f: adc eax, 0x3e0c4; add rsp, 0x80; pop rbx; pop r14; pop r15; ret; 
0x000000000003867e: adc eax, 0x413d5; test rax, rax; jne 0x38698; add rsp, 0xb0; pop rbx; ret; 
0x0000000000037da9: adc eax, 0x41a4a; pop rcx; ret; 
0x0000000000036d14: adc eax, 0x42a6f; lea rax, [rip + 0x400a0]; pop rcx; ret; 
0x0000000000035e48: adc eax, 0x435cb; mov rdi, rbx; call qword ptr [rip + 0x43f3a]; add rsp, 0x10; pop rbx; ret; 
0x0000000000035e51: adc eax, 0x43f3a; add rsp, 0x10; pop rbx; ret; 
0x00000000000359e4: adc eax, 0x44027; mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x000000000002a1bc: adc eax, 0x48000000; add esp, 8; pop rbx; pop r14; ret; 
0x000000000004d3fc: adc eax, 0x48c60148; mov eax, esi; pop rcx; ret; 
0x000000000002b99d: adc eax, 0x4e24e; pop rcx; ret; 
0x000000000002b978: adc eax, 0x4e273; pop rcx; ret; 
0x0000000000022a28: adc eax, 0x5741b; add rsp, 0x48; ret; 
0x00000000000229d8: adc eax, 0x5746b; add rsp, 0x48; ret; 
0x0000000000022988: adc eax, 0x574bb; add rsp, 0x48; ret; 
0x0000000000022938: adc eax, 0x5750b; add rsp, 0x48; ret; 
0x000000000001e423: adc eax, 0x57fd0; add rsp, 0x38; ret; 
0x000000000001ab07: adc eax, 0x580005f0; ret; 
0x0000000000020d83: adc eax, 0x58f08; mov qword ptr [r14 + 0x10], rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001cba1: adc eax, 0x5981a; lea rax, [rip - 0x1153d]; mov esi, 0x28; call rax; 
0x000000000001c0f3: adc eax, 0x5a2b0; lea rax, [rip - 0x10a8f]; mov esi, 0x19; call rax; 
0x000000000001f046: adc eax, 0x5a73d; mov eax, ebp; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000001efc5: adc eax, 0x5ae7e; add rsp, 0x48; ret; 
0x000000000001ef85: adc eax, 0x5aebe; add rsp, 0x48; ret; 
0x000000000001ef45: adc eax, 0x5aefe; add rsp, 0x48; ret; 
0x000000000001e328: adc eax, 0x5b0db; add rsp, 0x28; ret; 
0x000000000001e936: adc eax, 0x5b1ad; ud2; nop dword ptr [rax]; movabs rax, 0x5203149ad97ccfc6; ret; 
0x000000000001e236: adc eax, 0x5b485; pop rax; ret; 
0x000000000001e5ea: adc eax, 0x5b5d1; add rsp, 0x18; ret; 
0x000000000001e226: adc eax, 0x5b5d5; pop rax; ret; 
0x000000000001e170: adc eax, 0x5b5e3; add rsp, 0x18; ret; 
0x000000000001e2b6: adc eax, 0x5b685; pop rax; ret; 
0x000000000001e2c6: adc eax, 0x5b7bd; pop rax; ret; 
0x000000000001e206: adc eax, 0x5b845; pop rax; ret; 
0x000000000001a903: adc eax, 0x5ba08; add rsp, 0x38; ret; 
0x000000000001e216: adc eax, 0x5bb8d; pop rax; ret; 
0x000000000001ddea: adc eax, 0x5bbc1; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x000000000001e1d3: adc eax, 0x5bcb0; add rsp, 0x28; ret; 
0x000000000001e27f: adc eax, 0x5bd2c; add rsp, 0x28; ret; 
0x000000000001da2b: adc eax, 0x5bd58; add rsp, 0x68; ret; 
0x000000000001a32c: adc eax, 0x5bfa7; lea rax, [rip - 0x3348]; call rax; 
0x000000000001d230: adc eax, 0x5c4ab; mov rdi, rsp; call qword ptr [rip + 0x5cd82]; add rsp, 0x18; ret; 
0x0000000000019a45: adc eax, 0x5c85e; lea rax, [rip - 0x2a31]; lea rsi, [rsp + 0x110]; call rax; 
0x0000000000019642: adc eax, 0x5cc49; lea rax, [rip - 0x272e]; call rax; 
0x000000000001d239: adc eax, 0x5cd82; add rsp, 0x18; ret; 
0x00000000000192cd: adc eax, 0x5cf8e; call qword ptr [rip + 0x606e8]; mov rax, qword ptr [rsp + 0x50]; add rsp, 0x788; ret; 
0x000000000001c7a8: adc eax, 0x5d063; pop rax; ret; 
0x000000000001c85e: adc eax, 0x5d3ed; add rsp, 0x28; ret; 
0x000000000001c1f9: adc eax, 0x5d3f2; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001c946: adc eax, 0x5d4b5; pop rcx; ret; 
0x000000000001c227: adc eax, 0x5d524; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000018b98: adc eax, 0x5d683; lea rax, [rip - 0x1ae4]; lea rsi, [rsp + 0x220]; call rax; 
0x00000000000188c6: adc eax, 0x5d93d; lea rax, [rip - 0x1952]; lea rsi, [rsp + 0x190]; call rax; 
0x000000000001bd7d: adc eax, 0x5dcce; mov rax, qword ptr [rsp + 0x48]; add rsp, 0x108; ret; 
0x000000000001bf79: adc eax, 0x5dcd2; add rsp, 0x18; ret; 
0x000000000001bff2: adc eax, 0x5dd01; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001b8fb: adc eax, 0x5de88; add rsp, 0x68; ret; 
0x0000000000018078: adc eax, 0x5e0eb; call qword ptr [rip + 0x619f5]; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x478; ret; 
0x000000000001bb2f: adc eax, 0x5e324; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x000000000001ab36: adc eax, 0x5e88d; pop rax; ret; 
0x000000000001ab1a: adc eax, 0x5e9b1; pop rax; ret; 
0x000000000001ac56: adc eax, 0x5e9ed; pop rax; ret; 
0x000000000001aa86: adc eax, 0x5ea85; pop rax; ret; 
0x000000000001aa76: adc eax, 0x5eefd; pop rax; ret; 
0x000000000001ab06: adc eax, 0x5f015; pop rax; ret; 
0x000000000001a95e: adc eax, 0x5f07d; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000001a9da: adc eax, 0x5f141; add rsp, 0x18; ret; 
0x000000000001ad49: adc eax, 0x5f1c2; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001ab5b: adc eax, 0x5f218; add rsp, 0x28; ret; 
0x000000000001abaf: adc eax, 0x5f2dc; add rsp, 0x28; ret; 
0x000000000001aacb: adc eax, 0x5f460; add rsp, 0x28; ret; 
0x0000000000019e22: adc eax, 0x5f641; pop rax; ret; 
0x00000000000197a0: adc eax, 0x5fceb; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x0000000000019acd: adc eax, 0x5fdc6; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000019b1f: adc eax, 0x5fe24; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000197f1: adc eax, 0x5fe92; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x0000000000015de3: adc eax, 0x60320; lea rax, [rip - 0xa77f]; mov esi, 0x19; call rax; 
0x0000000000019758: adc eax, 0x60373; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000192d3: adc eax, 0x606e8; mov rax, qword ptr [rsp + 0x50]; add rsp, 0x788; ret; 
0x000000000001906d: adc eax, 0x60db6; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000018616: adc eax, 0x60df5; mov rax, qword ptr [rsp + 0x58]; add rsp, 0x3a8; ret; 
0x0000000000018cf9: adc eax, 0x60fa2; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000014d26: adc eax, 0x613c5; lea rax, [rip - 0x96c2]; mov esi, 0x49; call rax; 
0x0000000000014c2f: adc eax, 0x614bc; lea rax, [rip - 0x95cb]; mov esi, 0x49; call rax; 
0x000000000001807e: adc eax, 0x619f5; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x478; ret; 
0x000000000001839e: adc eax, 0x61acd; add rsp, 0x88; ret; 
0x00000000000184b9: adc eax, 0x61b2a; pop rax; ret; 
0x00000000000182fd: adc eax, 0x61c4e; xor eax, eax; add rsp, 0x18; ret; 
0x0000000000016e8d: adc eax, 0x628fe; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000016dd2: adc eax, 0x62949; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000016e09: adc eax, 0x629aa; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000016c8e: adc eax, 0x62c65; test al, 1; jne 0x16c9c; add rsp, 0x38; ret; 
0x0000000000016e61: adc eax, 0x62dba; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x0000000000016df6: adc eax, 0x62f35; pop rax; ret; 
0x0000000000013079: adc eax, 0x62f6a; lea rax, [rip - 0x7a15]; mov esi, 0x2b; call rax; 
0x0000000000016a77: adc eax, 0x63084; add rsp, 0x148; ret; 
0x0000000000016386: adc eax, 0x6337d; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000012b5a: adc eax, 0x63471; lea rax, [rip - 0x74f6]; mov esi, 0x2b; call rax; 
0x00000000000301b8: adc eax, 0x63480003; add al, 0x81; add rax, rcx; jmp rax; 
0x00000000000129fb: adc eax, 0x635b0; lea rax, [rip + 0x47a09]; lea rsi, [rsp + 0x38]; call rax; 
0x000000000001293b: adc eax, 0x63658; lea rax, [rip - 0x7227]; mov esi, 0x100; call rax; 
0x0000000000012901: adc eax, 0x6367a; lea rax, [rip - 0x71ed]; mov esi, 0x100; call rax; 
0x0000000000015e82: adc eax, 0x63a59; pop rcx; ret; 
0x0000000000015ff2: adc eax, 0x63ab1; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000015ea6: adc eax, 0x63f85; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000015cd3: adc eax, 0x64060; mov rdi, rax; mov rsi, rdx; call 0x151b0; add rsp, 0x18; ret; 
0x00000000000113f3: adc eax, 0x64b70; lea rax, [rip - 0x5d8f]; mov esi, 0x19; call rax; 
0x00000000000109a7: adc eax, 0x655a4; lea rax, [rip - 0x5343]; mov esi, 0x49; call rax; 
0x00000000000108b4: adc eax, 0x65697; lea rax, [rip - 0x5250]; mov esi, 0x49; call rax; 
0x00000000000105b7: adc eax, 0x65994; lea rax, [rip - 0x4f53]; mov esi, 0x49; call rax; 
0x00000000000104c4: adc eax, 0x65a87; lea rax, [rip - 0x4e60]; mov esi, 0x49; call rax; 
0x0000000000010090: adc eax, 0x65ea3; lea rax, [rip - 0x4a2c]; mov esi, 0x49; call rax; 
0x000000000000fb1d: adc eax, 0x663ce; lea rax, [rip - 0x44b9]; mov esi, 0x49; call rax; 
0x000000000000e14b: adc eax, 0x67cf8; lea rax, [rip + 0x4c879]; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000011a7b: adc eax, 0x67d08; add rsp, 0x68; ret; 
0x0000000000011936: adc eax, 0x67e45; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x00000000000119d8: adc eax, 0x680f3; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x0000000000010f71: adc eax, 0x68712; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x0000000000010b91: adc eax, 0x68eba; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000000c784: adc eax, 0x693ef; lea rax, [rip - 0x1120]; mov esi, 0x1c; call rax; 
0x000000000000c652: adc eax, 0x694f1; lea rax, [rip - 0xf3e]; xor ecx, ecx; mov edi, ecx; call rax; 
0x000000000000fbb5: adc eax, 0x69d5e; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; mov qword ptr [rsp + 0x30], rax; add rsp, 0x38; ret; 
0x000000000000f486: adc eax, 0x6a38d; pop rax; ret; 
0x000000000000f211: adc eax, 0x6a3ca; add rsp, 0x18; ret; 
0x000000000000f56a: adc eax, 0x6a5b1; add rsp, 0x18; ret; 
0x000000000000ef96: adc eax, 0x6ae0d; pop rax; ret; 
0x000000000000ef37: adc eax, 0x6ae6c; add rsp, 0x28; ret; 
0x000000000000ec8a: adc eax, 0x6ae91; add rsp, 0x18; ret; 
0x000000000000e03f: adc eax, 0x6ba0c; add rsp, 0x218; ret; 
0x000000000000e245: adc eax, 0x6bb16; and al, 1; movzx eax, al; add rsp, 0x48; ret; 
0x000000000000e0d2: adc eax, 0x6be69; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000da99: adc eax, 0x6bfb2; add rsp, 0x1d8; ret; 
0x000000000000d0eb: adc eax, 0x6c960; add rsp, 0x398; ret; 
0x000000000000cb2b: adc eax, 0x6cf20; add rsp, 0x398; ret; 
0x000000000000c8da: adc eax, 0x6cf81; mov rdi, rax; lea rsi, [rip + 0x69307]; call 0x14500; add rsp, 0x128; ret; 
0x000000000000bf5c: adc eax, 0x6d727; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000c076: adc eax, 0x6dcf5; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000c0b7: adc eax, 0x6dd8c; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x000000000000a81c: adc eax, 0x6f147; test rax, rax; jle 0xa7ca; pop rbx; ret; 
0x00000000000327f3: adc eax, 0x8b440000; add byte ptr gs:[rax - 0x7d], cl; ret; 
0x0000000000016a6e: adc eax, 0x8b4800eb; jl 0x16a99; sub bh, bh; adc eax, 0x63084; add rsp, 0x148; ret; 
0x000000000003283a: adc eax, 0x8b4c0000; add byte ptr gs:[rax - 0x7d], cl; ret; 
0x000000000003260d: adc eax, 0x8d480000; adc eax, 0x2f275; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000032593: adc eax, 0x8d480000; or eax, 0x2f2cf; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000046abf: adc eax, 0x8d490000; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000005ba0a: adc eax, 0x90ce0c1; ret; 
0x000000000005ba43: adc eax, 0x98c8; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000bbc2: adc eax, 0xa6058b48; fadd dword ptr [rsi]; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x000000000004ac08: adc eax, 0xc9bc0f66; movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x000000000002992a: adc eax, 0xca3d8d48; ja 0x29934; add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x00000000000327a7: adc eax, 0xf440000; mov bh, 0x65; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000005aa05: adc eax, 0xffffcda6; ret; 
0x000000000001a387: adc eax, 0xffffff14; ror byte ptr [rdi], 1; or ecx, dword ptr [rax - 0x75]; and al, 8; add rsp, 0xb8; ret; 
0x0000000000038680: adc eax, dword ptr [rax + rax]; test rax, rax; jne 0x38698; add rsp, 0xb0; pop rbx; ret; 
0x0000000000014d28: adc eax, dword ptr [rsi]; add byte ptr [rax - 0x73], cl; add eax, 0xffff693e; mov esi, 0x49; call rax; 
0x000000000000eb50: adc ebp, ebx; add byte ptr [rdx + 0x24132444], cl; add dword ptr [rdi], ecx; mov dh, 0xc0; add rsp, 0x18; ret; 
0x000000000004eec2: adc ebx, ebp; and esi, eax; or byte ptr [r8], r8b; mov qword ptr [rdi], 0; pop rbx; ret; 
0x0000000000014477: adc ecx, dword ptr [rax - 0x75]; and al, 8; mov rax, qword ptr [rax + 8]; mov qword ptr [rsp + 0x50], rax; add rsp, 0x58; ret; 
0x000000000005ef63: adc ecx, dword ptr [rax - 0x75]; cmp byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x73], cl; xor eax, 0x67ae; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b6be: adc ecx, dword ptr [rax - 0x75]; cmp byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x73], cl; xor eax, 0xa053; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a101: adc ecx, dword ptr [rax - 0x75]; cmp byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x73], cl; xor eax, 0xb610; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000002a581: adc ecx, dword ptr [rax - 0x77]; adc byte ptr [r8 + 1], r15b; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x000000000005aac2: adc ecx, dword ptr [rax - 0x7b]; sal byte ptr [rcx + rbx + 0x48], cl; mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x00000000000467ea: adc ecx, dword ptr [rax - 1]; ret 0x8348; 
0x0000000000023348: adc ecx, dword ptr [rax - 1]; ret; 
0x00000000000557c8: adc ecx, dword ptr [rcx - 1]; ret; 
0x0000000000018b99: adc esi, 5; add byte ptr [rax - 0x73], cl; add eax, 0xffffe51c; lea rsi, [rsp + 0x220]; call rax; 
0x000000000001cdb7: adc esi, eax; and al, 7; add byte ptr [rdx + 0x48072444], cl; add esp, 0x150; ret; 
0x000000000000eb56: adc esp, dword ptr [rcx + rax]; movzx eax, al; add rsp, 0x18; ret; 
0x00000000000327f2: adc rax, -0x74bc0000; add byte ptr gs:[rax - 0x7d], cl; ret; 
0x00000000000327a6: adc rax, 0xf440000; mov bh, 0x65; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000001a641: adc sil, sil; and al, 0x47; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x000000000000c2dd: adc sil, sil; and al, 0x4f; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x000000000004c785: add al, 0; add byte ptr [rax + 0x6b], cl; ret; 
0x000000000001690a: add al, 0; add byte ptr [rax - 0x73], cl; jl 0x16935; lea rsi, [rsp + 0xe0]; call rax; 
0x0000000000029e20: add al, 0; add byte ptr [rax - 0x73], cl; or eax, 0x37406; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000005c95a: add al, 0; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000005ecff: add al, 0; add byte ptr [rax], al; add rsp, 0x28; pop rbx; pop r14; jmp rax; 
0x000000000005ec4d: add al, 0; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x00000000000167a1: add al, 0; add byte ptr [rax], al; call rax; 
0x000000000001e598: add al, 0; add byte ptr [rax], al; call rax; pop rcx; ret; 
0x0000000000016795: add al, 0; add byte ptr [rax], al; lea rax, [rip + 0x24a0]; mov edi, 4; call rax; 
0x000000000001eef7: add al, 0; add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ed07: add al, 0; add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x0000000000044bf0: add al, 0; add byte ptr [rcx], dh; rol byte ptr [rax + 0xf084979], cl; xchg eax, esp; ret 0x8b48; 
0x000000000004b49c: add al, 0; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xf41; 
0x0000000000031c83: add al, 0; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xffbb; 
0x0000000000035e54: add al, 0; add rsp, 0x10; pop rbx; ret; 
0x000000000000fa32: add al, 0; call rax; 
0x00000000000378e5: add al, 0; cmp eax, 4; jne 0x378f5; lea rax, [rip + 0x4275d]; pop rcx; ret; 
0x0000000000037d75: add al, 0; cmp eax, 4; jne 0x37d85; lea rax, [rip + 0x42305]; pop rcx; ret; 
0x00000000000194ac: add al, 0; lea rax, [rip + 0x336b]; mov edi, 0x27; mov edx, 0x1b; call rax; 
0x0000000000036d17: add al, 0; lea rax, [rip + 0x400a0]; pop rcx; ret; 
0x000000000001134d: add al, 0; lea rax, [rip - 0x5ce6]; mov esi, 0x23; call rax; 
0x0000000000017345: add al, 0; lea rcx, [rip + 0x5edfa]; lea rax, [rip - 0xb9c5]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x0000000000014541: add al, 0; lea rcx, [rip + 0x61ad6]; lea rax, [rip - 0x8bc1]; mov esi, 0x2b; lea rdx, [rsp + 0x18]; call rax; 
0x000000000000d57f: add al, 0; lea rdi, [rsp + 0x260]; mov qword ptr [rsp + 0x40], rdi; call rax; 
0x000000000000e155: add al, 0; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000cdbc: add al, 0; lea rdi, [rsp + 0x328]; call rax; 
0x000000000001945f: add al, 0; lea rdi, [rsp + 0x630]; call rax; 
0x000000000001bb8f: add al, 0; lea rdi, [rsp + 0x68]; mov qword ptr [rsp + 0x20], rdi; call rax; 
0x000000000001cb9d: add al, 0; lea rdx, [rip + 0x5981a]; lea rax, [rip - 0x1153d]; mov esi, 0x28; call rax; 
0x000000000001c0ef: add al, 0; lea rdx, [rip + 0x5a2b0]; lea rax, [rip - 0x10a8f]; mov esi, 0x19; call rax; 
0x0000000000015ddf: add al, 0; lea rdx, [rip + 0x60320]; lea rax, [rip - 0xa77f]; mov esi, 0x19; call rax; 
0x0000000000014d22: add al, 0; lea rdx, [rip + 0x613c5]; lea rax, [rip - 0x96c2]; mov esi, 0x49; call rax; 
0x0000000000014c2b: add al, 0; lea rdx, [rip + 0x614bc]; lea rax, [rip - 0x95cb]; mov esi, 0x49; call rax; 
0x0000000000013075: add al, 0; lea rdx, [rip + 0x62f6a]; lea rax, [rip - 0x7a15]; mov esi, 0x2b; call rax; 
0x0000000000012b56: add al, 0; lea rdx, [rip + 0x63471]; lea rax, [rip - 0x74f6]; mov esi, 0x2b; call rax; 
0x00000000000113ef: add al, 0; lea rdx, [rip + 0x64b70]; lea rax, [rip - 0x5d8f]; mov esi, 0x19; call rax; 
0x00000000000109a3: add al, 0; lea rdx, [rip + 0x655a4]; lea rax, [rip - 0x5343]; mov esi, 0x49; call rax; 
0x00000000000108b0: add al, 0; lea rdx, [rip + 0x65697]; lea rax, [rip - 0x5250]; mov esi, 0x49; call rax; 
0x00000000000105b3: add al, 0; lea rdx, [rip + 0x65994]; lea rax, [rip - 0x4f53]; mov esi, 0x49; call rax; 
0x00000000000104c0: add al, 0; lea rdx, [rip + 0x65a87]; lea rax, [rip - 0x4e60]; mov esi, 0x49; call rax; 
0x000000000000e190: add al, 0; lea rsi, [rsp + 0x28]; call rax; 
0x0000000000012a05: add al, 0; lea rsi, [rsp + 0x38]; call rax; 
0x0000000000039655: add al, 0; mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x00000000000359e7: add al, 0; mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x0000000000035e4b: add al, 0; mov rdi, rbx; call qword ptr [rip + 0x43f3a]; add rsp, 0x10; pop rbx; ret; 
0x000000000001ba81: add al, 0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002b97b: add al, 0; pop rcx; ret; 
0x0000000000038681: add al, 0; test rax, rax; jne 0x38698; add rsp, 0xb0; pop rbx; ret; 
0x00000000000540ad: add al, 0x17; mov byte ptr [rdi + r10], al; pop rax; ret; 
0x0000000000053f14: add al, 0x17; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x00000000000540b1: add al, 0x17; pop rax; ret; 
0x0000000000056fae: add al, 0x18; add byte ptr [rax - 1], cl; ret; 
0x000000000001c8de: add al, 0x24; add rsp, 0x10; ret; 
0x000000000001193d: add al, 0x24; add rsp, 0x18; ret; 
0x000000000001e369: add al, 0x24; add rsp, 0x20; ret; 
0x000000000001a965: add al, 0x24; add rsp, 0x28; ret; 
0x000000000001d273: add al, 0x24; add rsp, 0x30; ret; 
0x000000000001bf46: add al, 0x24; add rsp, 0x38; ret; 
0x0000000000013cc6: add al, 0x24; add rsp, 0x68; ret; 
0x000000000001c1f6: add al, 0x24; call qword ptr [rip + 0x5d3f2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001ad46: add al, 0x24; call qword ptr [rip + 0x5f1c2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000018cf6: add al, 0x24; call qword ptr [rip + 0x60fa2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000016e06: add al, 0x24; call qword ptr [rip + 0x629aa]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001ba7a: add al, 0x24; lea rcx, [rip + 0x450a5]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb30: add al, 0x24; mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001c050: add al, 0x24; mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0xc; ret; 
0x000000000001e624: add al, 0x24; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001cb2d: add al, 0x24; mov eax, dword ptr [rsp]; mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001c04d: add al, 0x24; mov eax, dword ptr [rsp]; mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0xc; ret; 
0x000000000002a62e: add al, 0x24; mov ecx, dword ptr [rsp + 3]; mov dword ptr [rdi + 9], eax; mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x000000000001242c: add al, 0x24; mov qword ptr [rdi + 8], rax; mov qword ptr [rdi], rcx; add rsp, 0x48; ret; 
0x000000000001a692: add al, 0x24; mov qword ptr [rsp + 0x18], rax; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x000000000000fbc0: add al, 0x24; mov qword ptr [rsp + 0x30], rax; add rsp, 0x38; ret; 
0x000000000001dab9: add al, 0x24; mov qword ptr [rsp + 8], rax; add rsp, 0x10; ret; 
0x00000000000196f6: add al, 0x24; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x00000000000100bc: add al, 0x24; mov qword ptr [rsp + 8], rdx; add rsp, 0x10; ret; 
0x000000000001bd99: add al, 0x24; mov qword ptr [rsp + 8], rsi; mov qword ptr [rsp + 0x10], rax; mov qword ptr [rsp + 0x18], rsi; add rsp, 0x20; ret; 
0x000000000001c8da: add al, 0x24; mov rax, qword ptr [rsp]; add rsp, 0x10; ret; 
0x000000000001d26f: add al, 0x24; mov rax, qword ptr [rsp]; add rsp, 0x30; ret; 
0x000000000001bf42: add al, 0x24; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000012428: add al, 0x24; mov rax, qword ptr [rsp]; mov qword ptr [rdi + 8], rax; mov qword ptr [rdi], rcx; add rsp, 0x48; ret; 
0x000000000000fbbc: add al, 0x24; mov rax, qword ptr [rsp]; mov qword ptr [rsp + 0x30], rax; add rsp, 0x38; ret; 
0x000000000002aa69: add al, 0x24; mov rcx, qword ptr [rsp + 7]; mov qword ptr [rdi + 1], rax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x000000000000e266: add al, 0x24; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xbc70; pop rcx; ret; 
0x000000000001e3b1: add al, 0x24; mov rdi, rsp; call 0x1e3c0; add rsp, 0x58; ret; 
0x00000000000124f7: add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001e5b3: add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000013a29: add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000164d9: add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000bfd4: add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000000c477: add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x40; ret; 
0x0000000000015f35: add al, 0x24; mov rdx, qword ptr [rsp + 8]; mov qword ptr [rsp + 0x28], rax; mov qword ptr [rsp + 0x30], rdx; add rsp, 0x38; ret; 
0x000000000005edb5: add al, 0x24; mov rdx, rsp; call qword ptr [rip + 0x1b088]; add rsp, 0x38; ret; 
0x000000000005aa32: add al, 0x24; mov rdx, rsp; mov rdi, rax; call qword ptr [rip + 0x1f408]; add rsp, 0x38; ret; 
0x00000000000368ef: add al, 0x24; movups xmmword ptr [rbx], xmm0; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x000000000002186e: add al, 0x24; movups xmmword ptr [rcx + 8], xmm0; add rsp, 0x18; ret; 
0x000000000000936e: add al, 0x24; movups xmmword ptr [rdi + rax*8], xmm0; add rsp, 0x20; pop rbx; ret; 
0x000000000004b3d9: add al, 0x24; movups xmmword ptr [rdi], xmm0; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x00000000000132d1: add al, 0x24; pop rcx; ret; 
0x000000000005dc94: add al, 0x24; ret 1; 
0x000000000005b0b4: add al, 0x34; cmp rax, -1; je 0x5b0cd; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000000f117: add al, 0x48; add edi, ecx; inc rax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb966]; call rax; 
0x000000000000f0d2: add al, 0x48; add edi, ecx; inc rax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb9ab]; call rax; 
0x000000000001c902: add al, 0x48; add esp, 0x10; ret; 
0x000000000000ec38: add al, 0x48; add esp, 0x28; ret; 
0x000000000000f597: add al, 0x48; cmove eax, ecx; cmp rax, 0; jne 0xf5a7; add rsp, 0x18; ret; 
0x00000000000599af: add al, 0x48; mov dword ptr [rax + 0x14], 0; mov word ptr [rax + 0x1c], dx; mov cx, 1; mov word ptr [rax], cx; ret; 
0x000000000001df9a: add al, 0x48; mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x288; ret; 
0x000000000005ac2b: add al, 0x48; mov edi, dword ptr [rsp + 8]; mov rcx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000005c187: add al, 0x48; mov edi, esi; mov rsi, rax; call qword ptr [rip + 0x1dd3c]; pop rcx; ret; 
0x000000000005474d: add al, 0x66; mov ecx, 0x8d480001; adc eax, 0x1054b; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000057038: add al, 0x73; and dword ptr [rcx], esi; fisttp dword ptr [rax - 0x77]; ret 0x8ae9; 
0x000000000000a6da: add al, 0x74; ret; 
0x0000000000009f7c: add al, 0x75; add eax, 0x28c48348; ret; 
0x0000000000037d79: add al, 0x75; or dword ptr [rax - 0x73], ecx; add eax, 0x42305; pop rcx; ret; 
0x00000000000378e9: add al, 0x75; or dword ptr [rax - 0x73], ecx; add eax, 0x4275d; pop rcx; ret; 
0x000000000005ecad: add al, 0x75; sbb cl, byte ptr [rcx - 0x75]; mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x6a68]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df6e: add al, 0x75; sbb cl, byte ptr [rcx - 0x75]; mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x77a7]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7a3: add al, 0x75; sbb cl, byte ptr [rcx - 0x75]; mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x9f72]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000002a39e: add al, 0x81; add rax, r9; jmp rax; 
0x000000000000dfef: add al, 0x81; add rax, rcx; jmp rax; 
0x000000000005bba2: add al, 0x81; add rax, rcx; xor ebx, ebx; mov r15d, r12d; jmp rax; 
0x000000000002fada: add al, 0x81; add rax, rcx; xor edx, edx; jmp rax; 
0x000000000005c03c: add al, 0x81; add rax, rcx; xor r12d, r12d; mov ebp, edx; jmp rax; 
0x000000000005475b: add al, 0x82; add rax, rdx; jmp rax; 
0x000000000000afe3: add al, 0x84; add rax, r12; jmp rax; 
0x000000000005bb85: add al, 0x86; add rax, r14; mov esi, 0x5c; jmp rax; 
0x0000000000029934: add al, 0x87; add rax, rdi; jmp rax; 
0x000000000003f898: add al, 0x88; ret; 
0x0000000000028297: add al, 0x89; add rax, r9; jmp rax; 
0x000000000001c034: add al, 0x89; cmp al, 0x24; mov eax, dword ptr [rsp]; pop rcx; ret; 
0x000000000002c0aa: add al, 0x8a; add rax, rdx; jmp rax; 
0x000000000004b39d: add al, 0x8a; add rax, rdx; lea rdx, [rip + 0x18eef]; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000001c8fe: add al, 0x8b; and al, 4; add rsp, 0x10; ret; 
0x0000000000017f1a: add al, 0x8b; or byte ptr [rcx + 0x4e8b084f], r9b; or al, 0x89; or al, 0x48; add esp, 0xa8; ret; 
0x000000000003935c: add al, 0xa9; add rax, rcx; jmp rax; 
0x0000000000037b70: add al, 0xac; add rax, r12; jmp rax; 
0x000000000002f1fd: add al, 0xba; or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r12; lea rbx, [rip - 0x1a4ad]; call rbx; 
0x0000000000045b08: add al, 0xba; or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r14; lea rbx, [rip - 0x30db8]; call rbx; 
0x000000000002d7cc: add al, 0xba; or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r15; lea rbx, [rip - 0x18a7c]; call rbx; 
0x0000000000032fa1: add al, 0xba; or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r15; lea rbx, [rip - 0x1e251]; call rbx; 
0x0000000000046d2b: add al, 0xba; or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r15; lea rbx, [rip - 0x31fdb]; call rbx; 
0x0000000000042797: add al, 0xc0; add rsp, 0x28; ret; 
0x000000000005ed5a: add al, 0xc1; mov rdi, qword ptr [rsi]; mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x0000000000009372: add al, 0xc7; add rsp, 0x20; pop rbx; ret; 
0x000000000001ee4f: add al, 0xe8; jnp 0x1edf4; add dword ptr [rax], eax; pop rcx; ret; 
0x0000000000022873: add al, 0xe8; push rdi; add dword ptr [eax], eax; pop rcx; ret; 
0x000000000001e61d: add al, 0xe8; sbb eax, 0x89ffffda; add al, 0x24; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000003cabe: add al, 0xeb; add ch, bl; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000599ec: add al, 0xf; adc dword ptr [rax + 1], eax; mov cl, 1; mov byte ptr [rax], cl; ret; 
0x0000000000053f17: add al, 0xf; pop rbx; ret; 
0x000000000000aaf8: add al, 0xf; xchg dword ptr [rbx], edi; add dword ptr [rax], eax; add byte ptr [rcx + 0xc6349c1], cl; mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x000000000000a8a8: add al, 0xf; xchg dword ptr [rsi], ebp; add dword ptr [rax], eax; add byte ptr [rcx + 0xc6349c1], cl; mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x000000000000afd8: add al, 0xf; xchg esi, edx; add al, byte ptr [rax]; add byte ptr [rcx + 0x46349c0], cl; test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x000000000005a6d5: add al, 0xff; adc eax, 0x1f3fc; pop rcx; ret; 
0x000000000005a691: add al, 0xff; adc eax, 0x1f440; pop rcx; ret; 
0x000000000005a654: add al, 0xff; adc eax, 0x1f47d; pop rcx; ret; 
0x000000000005a622: add al, 0xff; adc eax, 0x1f4af; pop rcx; ret; 
0x000000000005a522: add al, 0xff; adc eax, 0x1f5af; pop rcx; ret; 
0x000000000005a4de: add al, 0xff; adc eax, 0x1f5f3; pop rcx; ret; 
0x000000000005a4a1: add al, 0xff; adc eax, 0x1f630; pop rcx; ret; 
0x000000000005a46f: add al, 0xff; adc eax, 0x1f662; pop rcx; ret; 
0x000000000000f20f: add al, 0xff; adc eax, 0x6a3ca; add rsp, 0x18; ret; 
0x0000000000020607: add al, 0xff; and eax, 0x59202; ret; 
0x000000000000dd19: add al, 1; add byte ptr [rax - 0x73], cl; jl 0xdd44; push rax; call rax; 
0x0000000000039e66: add al, 1; add byte ptr [rax], al; movzx ecx, byte ptr [r10]; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x000000000004ce1c: add al, 8; ret 0x4e78; 
0x000000000004d10c: add al, 8; ret 0x8b48; 
0x000000000003d2f2: add al, byte ptr [r8]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000000e048: add al, byte ptr [rax]; add bl, al; lea rax, [rip + 0x2a56d]; lea rdi, [rsp + 0x1c8]; call rax; 
0x000000000000dd39: add al, byte ptr [rax]; add bl, ch; xlatb; lea rax, [rip + 0x2a87b]; lea rdi, [rsp + 0x68]; call rax; 
0x000000000001b5d0: add al, byte ptr [rax]; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x0000000000018b93: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x5d683; lea rax, [rip - 0x1ae4]; lea rsi, [rsp + 0x220]; call rax; 
0x000000000000d4fa: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x2a89c; lea rdi, [rsp + 0x220]; call rax; 
0x000000000001881f: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0xffffd667; lea rdi, [rsp + 0x170]; call rax; 
0x0000000000018b0a: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; mov ah, 0x24; adc byte ptr [rdx], al; add byte ptr [rax], al; call rax; 
0x0000000000050e00: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0x1363e; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002aeab: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0x36667; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001b5c8: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; mov esp, 0x24824; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000005adf6: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; out dx, eax; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x000000000003f69c: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x3b66; 
0x0000000000043480: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000001e8b5: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x75f8; 
0x00000000000331ab: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000025ecf: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; rol byte ptr [rsp + rcx*2], 0x39; ret 0xa575; 
0x000000000001e835: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; sar al, 0x75; ret 0x280f; 
0x00000000000249c5: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; sar al, 0x75; ret 0xc031; 
0x0000000000024a55: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; sar eax, 0x75; ret 0xc749; 
0x000000000001f469: add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret; 
0x000000000002446f: add al, byte ptr [rax]; add byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000001e7e4: add al, byte ptr [rax]; add byte ptr [rax - 1], cl; ret; 
0x000000000005823b: add al, byte ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000005ddd6: add al, byte ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000001ee78: add al, byte ptr [rax]; add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ec88: add al, byte ptr [rax]; add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x0000000000017b59: add al, byte ptr [rax]; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x000000000001054c: add al, byte ptr [rax]; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x40]; add rsp, 0x108; ret; 
0x0000000000053525: add al, byte ptr [rax]; add byte ptr [rax], al; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x000000000005858a: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x000000000002b995: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, rax; call qword ptr [rip + 0x4e24e]; pop rcx; ret; 
0x000000000004ae3d: add al, byte ptr [rax]; add byte ptr [rax], al; pop rbx; pop r14; ret; 
0x000000000005a186: add al, byte ptr [rax]; add byte ptr [rax], al; sub rdx, rax; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x00000000000313d3: add al, byte ptr [rax]; add byte ptr [rbp - 0x77], cl; ret 0x8b48; 
0x000000000003e47d: add al, byte ptr [rax]; add byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x0000000000034640: add al, byte ptr [rax]; add byte ptr [rbx - 0x7af0d108], al; mov esp, 0x41000007; call rdx; 
0x000000000000afdc: add al, byte ptr [rax]; add byte ptr [rcx + 0x46349c0], cl; test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x0000000000055fa1: add al, byte ptr [rax]; add byte ptr [rcx + 0xf], al; mov dh, 0x73; add dword ptr [rcx - 0x7d], ecx; ret; 
0x0000000000027ff1: add al, byte ptr [rax]; add byte ptr [rcx + 1], cl; ret; 
0x0000000000013822: add al, byte ptr [rax]; add byte ptr [rsi - 0x77], ah; and al, 0x16; movzx eax, ax; add rsp, 0x18; ret; 
0x0000000000054b72: add al, byte ptr [rax]; add cl, al; clc; or dword ptr [rcx], edi; ret 0x830f; 
0x0000000000016ec0: add al, byte ptr [rax]; add rsp, 0x18; ret; 
0x000000000004d5cb: add al, byte ptr [rax]; add rsp, 0x48; ret; 
0x0000000000059b19: add al, byte ptr [rax]; add rsp, 0x68; ret; 
0x000000000005808a: add al, byte ptr [rax]; add rsp, 0xa0; pop rbx; ret; 
0x0000000000053739: add al, byte ptr [rax]; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x000000000004a7d1: add al, byte ptr [rax]; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000c987: add al, byte ptr [rax]; call rax; 
0x000000000000dc25: add al, byte ptr [rax]; lea rdi, [rsp + 0x120]; call rax; 
0x000000000000de28: add al, byte ptr [rax]; lea rdi, [rsp + 0x128]; call rax; 
0x000000000000dea6: add al, byte ptr [rax]; lea rdi, [rsp + 0x158]; call rax; 
0x000000000000db7b: add al, byte ptr [rax]; lea rdi, [rsp + 0x160]; call rax; 
0x000000000000da85: add al, byte ptr [rax]; lea rdi, [rsp + 0x190]; call rax; 
0x000000000000cd21: add al, byte ptr [rax]; lea rdi, [rsp + 0x1c8]; call rax; 
0x000000000000d502: add al, byte ptr [rax]; lea rdi, [rsp + 0x220]; call rax; 
0x000000000000d7ae: add al, byte ptr [rax]; lea rdi, [rsp + 0x2a8]; call rax; 
0x000000000000ce53: add al, byte ptr [rax]; lea rdi, [rsp + 0x2e8]; call rax; 
0x000000000000cb14: add al, byte ptr [rax]; lea rdi, [rsp + 0x348]; call rax; 
0x0000000000010c25: add al, byte ptr [rax]; lea rdi, [rsp + 0x38]; call rax; 
0x000000000000d90b: add al, byte ptr [rax]; lea rdi, [rsp + 0x68]; call rax; 
0x000000000000d938: add al, byte ptr [rax]; lea rdi, [rsp + 0x98]; call rax; 
0x000000000000c974: add al, byte ptr [rax]; lea rdi, [rsp + 0xa0]; call rax; 
0x000000000000ddb4: add al, byte ptr [rax]; lea rdi, [rsp + 0xc8]; call rax; 
0x000000000000c9aa: add al, byte ptr [rax]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000000ddee: add al, byte ptr [rax]; lea rdi, [rsp + 0xf8]; call rax; 
0x0000000000017c0b: add al, byte ptr [rax]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x00000000000598e5: add al, byte ptr [rax]; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x0000000000057fab: add al, byte ptr [rax]; mov rax, rbx; pop rbx; ret; 
0x000000000003259b: add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000039358: add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x000000000003dcf7: add al, byte ptr [rax]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x0000000000037222: add al, byte ptr [rax]; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x00000000000318ac: add al, byte ptr [rax]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003d3d1: add al, byte ptr [rax]; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x0000000000039b0a: add al, byte ptr [rax]; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x0000000000039fde: add al, byte ptr [rax]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x0000000000040b8e: add al, byte ptr [rax]; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x0000000000039c0d: add al, byte ptr [rax]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000031892: add al, byte ptr [rax]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000004b091: add al, byte ptr [rax]; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000004d3a3: add al, byte ptr [rax]; nop word ptr cs:[rax + rax]; nop; ret; 
0x0000000000049f61: add al, byte ptr [rax]; pop rbx; ret; 
0x000000000004d58c: add al, byte ptr [rax]; pop rcx; ret; 
0x000000000004a889: add al, byte ptr [rax]; ret; 
0x0000000000056cb5: add al, byte ptr [rax]; ud2; nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; mov rdx, qword ptr [rdi + 0x10]; ret; 
0x000000000000c8e8: add al, ch; adc bh, byte ptr [rax + rax]; add rsp, 0x128; ret; 
0x0000000000011680: add al, ch; bnd jns 0x11684; dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x58; ret; 
0x000000000000dd6d: add al, ch; cmp eax, 0xebffffe7; add byte ptr [rax - 0x73], cl; add eax, 0x2a844; lea rdi, [rsp + 0x98]; call rax; 
0x0000000000019009: add al, ch; imul eax, dword ptr [rax], 0x8b48ffff; and al, 0x10; add rsp, 0x278; ret; 
0x000000000000f402: add al, ch; js 0xf407; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000001c8b3: add al, ch; mov edi, 0x48fffec7; add esp, 0x28; ret; 
0x0000000000013bfc: add al, ch; mov esi, 0x48fffffb; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x88; ret; 
0x0000000000034058: add al, ch; movabs byte ptr [0x8024bc8d48fffeb7], al; add byte ptr [rax], al; add al, ch; xchg eax, ebp; ret 0xfffe; 
0x0000000000012b7c: add al, ch; mul byte ptr [rdi + rdi*8 - 1]; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x0000000000019d98: add al, ch; ret 0xfef2; 
0x0000000000018f97: add al, ch; ret; 
0x000000000001cd61: add al, ch; stc; ret 0xfffe; 
0x0000000000034065: add al, ch; xchg eax, ebp; ret 0xfffe; 
0x000000000000dc18: add al, ch; xchg eax, edx; call 0xecdc1f; lea rax, [rip + 0x2a999]; lea rdi, [rsp + 0x120]; call rax; 
0x000000000000c9c8: add al, ch; xor bh, byte ptr [rbx]; add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x2af09; call rax; 
0x000000000002aeb1: add ax, word ptr [eax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002aeb2: add ax, word ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000005ee85: add bh, bh; adc eax, 0x1a64c; add rsp, 0x88; ret; 
0x000000000005e65f: add bh, bh; adc eax, 0x1ae72; add rsp, 0x88; ret; 
0x000000000005e42a: add bh, bh; adc eax, 0x1b0a7; add rsp, 0x88; ret; 
0x000000000005e2ff: add bh, bh; adc eax, 0x1b1d2; add rsp, 0x88; ret; 
0x000000000005e25f: add bh, bh; adc eax, 0x1b272; add rsp, 0x88; ret; 
0x000000000005e1cc: add bh, bh; adc eax, 0x1b305; add rsp, 0x88; ret; 
0x000000000005e13c: add bh, bh; adc eax, 0x1b395; add rsp, 0x88; ret; 
0x000000000005e0aa: add bh, bh; adc eax, 0x1b427; add rsp, 0x88; ret; 
0x000000000005e01a: add bh, bh; adc eax, 0x1b4b7; add rsp, 0x88; ret; 
0x000000000003d0b5: add bh, bh; adc eax, 0x3c32c; ud2; mov rdi, r15; call rax; 
0x0000000000036d12: add bh, bh; adc eax, 0x42a6f; lea rax, [rip + 0x400a0]; pop rcx; ret; 
0x000000000001bd7b: add bh, bh; adc eax, 0x5dcce; mov rax, qword ptr [rsp + 0x48]; add rsp, 0x108; ret; 
0x00000000000192d1: add bh, bh; adc eax, 0x606e8; mov rax, qword ptr [rsp + 0x50]; add rsp, 0x788; ret; 
0x0000000000018614: add bh, bh; adc eax, 0x60df5; mov rax, qword ptr [rsp + 0x58]; add rsp, 0x3a8; ret; 
0x000000000001807c: add bh, bh; adc eax, 0x619f5; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x478; ret; 
0x000000000000d0e9: add bh, bh; adc eax, 0x6c960; add rsp, 0x398; ret; 
0x000000000000cb29: add bh, bh; adc eax, 0x6cf20; add rsp, 0x398; ret; 
0x0000000000056a30: add bh, bh; and eax, 0x22d51; ret; 
0x0000000000056a10: add bh, bh; and eax, 0x22d71; ret; 
0x000000000004d39e: add bh, bh; and eax, 0x2cb2b; nop word ptr cs:[rax + rax]; nop; ret; 
0x000000000004b154: add bh, bh; and eax, 0x2e62d; ret; 
0x000000000004b11c: add bh, bh; and eax, 0x2e665; ret; 
0x000000000004b0eb: add bh, bh; and eax, 0x2e696; ret; 
0x0000000000026676: add bh, bh; and eax, 0x5310b; ret; 
0x0000000000020a04: add bh, bh; and eax, 0x58d7d; ret; 
0x000000000002094b: add bh, bh; and eax, 0x58e36; ret; 
0x0000000000020728: add bh, bh; and eax, 0x59059; ret; 
0x0000000000020669: add bh, bh; and eax, 0x59118; ret; 
0x0000000000020314: add bh, bh; and eax, 0x5946d; ret; 
0x00000000000201ab: add bh, bh; and eax, 0x595d6; ret; 
0x0000000000020187: add bh, bh; and eax, 0x595fa; ret; 
0x0000000000020131: add bh, bh; and eax, 0x59650; ret; 
0x0000000000020116: add bh, bh; and eax, 0x5966b; ret; 
0x0000000000020090: add bh, bh; and eax, 0x596f1; ret; 
0x0000000000020071: add bh, bh; and eax, 0x59710; ret; 
0x000000000001fc20: add bh, bh; and eax, 0x59b61; ret; 
0x000000000001fa21: add bh, bh; and eax, 0x59d60; ret; 
0x000000000001f9c8: add bh, bh; and eax, 0x59db9; ret; 
0x000000000001f984: add bh, bh; and eax, 0x59dfd; ret; 
0x000000000001f968: add bh, bh; and eax, 0x59e19; ret; 
0x000000000001f71f: add bh, bh; and eax, 0x5a062; ret; 
0x000000000001f1e6: add bh, bh; and eax, 0x5a59b; ret; 
0x000000000001900c: add bh, bh; dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x278; ret; 
0x000000000000b0db: add bh, bh; ret 0x4475; 
0x000000000005666c: add bh, bh; ret 0x8348; 
0x000000000001c1d7: add bh, bh; ror byte ptr [rax - 0x75], 1; add al, 0x24; add rsp, 0x18; ret; 
0x0000000000010b0f: add bh, bh; shr bl, 1; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x48; ret; 
0x0000000000016992: add bh, bh; shr bl, 1; loope 0x169e0; mov eax, dword ptr [rsp + 0x38]; add rsp, 0x1a8; ret; 
0x000000000001cbb1: add bh, bh; shr cl, 1; ret; 
0x0000000000057ece: add bh, byte ptr [rax + 0x7b]; ret; 
0x000000000000e04a: add bl, al; lea rax, [rip + 0x2a56d]; lea rdi, [rsp + 0x1c8]; call rax; 
0x000000000001a39a: add bl, al; lea rax, [rip + 0x7cd]; lea rdi, [rsp + 0x38]; call rax; 
0x000000000000d0f6: add bl, al; lea rax, [rip + 0x8fd1]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000cb36: add bl, al; lea rax, [rip + 0x9591]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000e1ce: add bl, al; lea rax, [rip - 0x2a37]; call rax; 
0x000000000000fb12: add bl, al; lea rdi, [rip + 0x5081b]; lea rdx, [rip + 0x663ce]; lea rax, [rip - 0x44b9]; mov esi, 0x49; call rax; 
0x000000000001a122: add bl, al; mov rdi, qword ptr [rsp + 0x18]; lea rax, [rip - 0x3e50]; lea rsi, [rsp + 0x58]; call rax; 
0x0000000000011342: add bl, al; mov rdx, qword ptr [rsp]; lea rdi, [rip + 0x4f1b5]; lea rax, [rip - 0x5ce6]; mov esi, 0x23; call rax; 
0x0000000000057e82: add bl, al; movzx ecx, byte ptr [rdi + 0xc]; lea rsi, [rip + 0xd469]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x00000000000467e8: add bl, ch; adc ecx, dword ptr [rax - 1]; ret 0x8348; 
0x000000000000d725: add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x10ae1; lea rdi, [rsp + 0x248]; call rax; 
0x000000000000d196: add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x11070; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000cbd8: add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x1162e; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000dec6: add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x29a10; call rax; 
0x000000000000d95b: add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x29f7b; call rax; 
0x000000000000cf8d: add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x2a949; call rax; 
0x000000000000c9cd: add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x2af09; call rax; 
0x00000000000130a6: add bl, ch; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x58; ret; 
0x0000000000017d9e: add bl, ch; add byte ptr [rax - 0x75], cl; and al, 0x20; add rsp, 0x188; ret; 
0x000000000000e1c0: add bl, ch; add byte ptr [rax - 0x75], cl; and al, 0x20; add rsp, 0x98; ret; 
0x000000000001bb5a: add bl, ch; add byte ptr [rbx - 0x7abbdbbc], cl; sal byte ptr [rcx + rdi*2 - 0x15], 0; mov edi, dword ptr [rsp + 0x44]; mov rax, qword ptr [rip + 0x5db9e]; call rax; 
0x000000000001a9cd: add bl, ch; cmovs ecx, dword ptr [rbx + 0x4808247c]; add edi, 8; call qword ptr [rip + 0x5f141]; add rsp, 0x18; ret; 
0x000000000000c187: add bl, ch; cmp ecx, dword ptr [rax - 0x75]; and al, 8; mov qword ptr [rsp + 0x10], rax; add rsp, 0x28; ret; 
0x0000000000018fb2: add bl, ch; fisttp dword ptr [rax - 0x73]; xor eax, 0x5d28c; lea rax, [rip - 0xd9d3]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000d34b: add bl, ch; fmul dword ptr [rax - 0x73]; add eax, 0x99db; lea rdi, [rsp + 0x190]; call rax; 
0x000000000000cd8d: add bl, ch; fmul dword ptr [rax - 0x73]; add eax, 0x9f99; lea rdi, [rsp + 0x190]; call rax; 
0x0000000000015520: add bl, ch; ret 0x8b48; 
0x0000000000019df8: add bl, ch; ret; 
0x0000000000014a43: add bl, ch; sahf; mov eax, dword ptr [rsp + 0x18]; mov edx, dword ptr [rsp + 0x1c]; add rsp, 0x78; ret; 
0x000000000000f98b: add bl, ch; sbb eax, 0x58c48348; ret; 
0x000000000000ebd1: add bl, ch; stosb byte ptr [rdi], al; add rsp, 0x48; ret; 
0x0000000000019d8e: add bl, ch; sub eax, 0x24bc8b48; add qword ptr [rax], rax; add al, ch; ret 0xfef2; 
0x000000000000f26a: add bl, ch; sub ecx, dword ptr [rax - 0x73]; add eax, 0xffffc52c; call rax; 
0x0000000000013299: add bl, ch; xchg eax, ecx; mov rax, qword ptr [rsp + 0x50]; add rsp, 0x118; ret; 
0x000000000000dd3b: add bl, ch; xlatb; lea rax, [rip + 0x2a87b]; lea rdi, [rsp + 0x68]; call rax; 
0x000000000000d903: add bl, ch; xlatb; lea rax, [rip + 0x2acb3]; lea rdi, [rsp + 0x68]; call rax; 
0x000000000005ef6f: add byte ptr [eax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000001ff9e: add byte ptr [eax], al; ret; 
0x000000000001a513: add byte ptr [r8 - 0x73], r9b; add eax, 0xfffff254; call rax; 
0x00000000000132fb: add byte ptr [r8], al; add byte ptr [rax - 0x75], cl; add al, 0x24; pop rcx; ret; 
0x0000000000027bc3: add byte ptr [r8], al; add byte ptr [rax - 0x7af0b407], al; ret 1; 
0x0000000000019428: add byte ptr [r8], r8b; lea rdi, [rsp + 0x560]; call rax; 
0x0000000000059b3e: add byte ptr [rax + 0x18478b48], dl; ret; 
0x0000000000059b4e: add byte ptr [rax + 0x2047b60f], dl; ret; 
0x000000000000c3ee: add byte ptr [rax + 0x28ec8348], dl; mov qword ptr [rsp + 8], rdi; call 0xec40; add rsp, 0x28; ret; 
0x000000000005932c: add byte ptr [rax + 0x29], cl; ret 0x4e72; 
0x0000000000044f8b: add byte ptr [rax + 0x29], cl; ret 0x820f; 
0x000000000001b5d2: add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000005a189: add byte ptr [rax + 0x29], cl; ret 0x8b49; 
0x000000000005bdb8: add byte ptr [rax + 0x30], bh; lea rcx, [rip + 0x95ff]; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x0000000000052c5f: add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000036a82: add byte ptr [rax + 0x39], cl; ret; 
0x000000000001aa6e: add byte ptr [rax + 0x3c894850], dl; and al, 0xff; adc eax, 0x5eefd; pop rax; ret; 
0x000000000000e591: add byte ptr [rax + 0x48057501], ch; add esp, 0x38; ret; 
0x000000000005b90e: add byte ptr [rax + 0x48078b48], dl; mov ecx, dword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov rdi, rax; jmp rcx; 
0x000000000001ab0f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; add rdi, 0x20; call qword ptr [rip + 0x5e9b1]; pop rax; ret; 
0x00000000000115af: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call 0x115e0; pop rcx; ret; 
0x000000000001e2cf: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call 0x1d220; pop rax; ret; 
0x000000000000ef6f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call 0xef90; pop rax; ret; 
0x000000000000f1cf: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call 0xf170; pop rax; ret; 
0x000000000000ef5f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call 0xf220; pop rax; ret; 
0x000000000000f1df: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call 0xf730; pop rax; ret; 
0x000000000000eecf: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call 0xf790; pop rax; ret; 
0x000000000000f4cf: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call 0xf7f0; pop rax; ret; 
0x000000000000ecaf: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call 0xf930; pop rax; ret; 
0x000000000001e22f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call qword ptr [rip + 0x5b485]; pop rax; ret; 
0x000000000001e21f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call qword ptr [rip + 0x5b5d5]; pop rax; ret; 
0x000000000001e2af: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call qword ptr [rip + 0x5b685]; pop rax; ret; 
0x000000000001e2bf: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call qword ptr [rip + 0x5b7bd]; pop rax; ret; 
0x000000000001e20f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call qword ptr [rip + 0x5bb8d]; pop rax; ret; 
0x000000000001c93f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call qword ptr [rip + 0x5d4b5]; pop rcx; ret; 
0x000000000001ab2f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call qword ptr [rip + 0x5e88d]; pop rax; ret; 
0x000000000001ac4f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call qword ptr [rip + 0x5e9ed]; pop rax; ret; 
0x000000000001aa7f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call qword ptr [rip + 0x5ea85]; pop rax; ret; 
0x000000000001aaff: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call qword ptr [rip + 0x5f015]; pop rax; ret; 
0x0000000000016def: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call qword ptr [rip + 0x62f35]; pop rax; ret; 
0x000000000000f47f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call qword ptr [rip + 0x6a38d]; pop rax; ret; 
0x000000000000ef8f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call qword ptr [rip + 0x6ae0d]; pop rax; ret; 
0x000000000001e58f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; lea rax, [rip + 4]; call rax; 
0x000000000001e58f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; lea rax, [rip + 4]; call rax; pop rcx; ret; 
0x000000000001da9f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; mov eax, dword ptr [rdi + 0x80]; pop rcx; ret; 
0x000000000001c79f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; mov edi, dword ptr [rdi]; call qword ptr [rip + 0x5d063]; pop rax; ret; 
0x00000000000184af: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; mov rdi, qword ptr [rdi]; call qword ptr [rip + 0x61b2a]; pop rax; ret; 
0x0000000000037d9f: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; mov rdi, rsp; call qword ptr [rip + 0x41a4a]; pop rcx; ret; 
0x000000000000eedf: add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; pop rax; ret; 
0x000000000004239f: add byte ptr [rax + 0x48], dl; mov eax, dword ptr [rip + 0x37d30]; test rax, rax; lea rcx, [rip - 0x6442]; cmovne rcx, rax; call rcx; 
0x000000000001651f: add byte ptr [rax + 0x48], dl; mov eax, edi; mov byte ptr [rdi], 2; pop rcx; ret; 
0x000000000001650f: add byte ptr [rax + 0x48], dl; mov eax, edi; mov byte ptr [rdi], 3; pop rcx; ret; 
0x000000000002271f: add byte ptr [rax + 0x48], dl; mov edi, dword ptr [rdi]; call 0x1ed20; xor eax, eax; pop rcx; ret; 
0x000000000002272f: add byte ptr [rax + 0x48], dl; mov edi, dword ptr [rdi]; call 0x234e0; xor eax, eax; pop rcx; ret; 
0x0000000000056a3f: add byte ptr [rax + 0x48], dl; mov edi, dword ptr [rdi]; call 0x574b0; xor eax, eax; pop rcx; ret; 
0x000000000004efc4: add byte ptr [rax + 0x5b078801], dh; ret; 
0x0000000000057e73: add byte ptr [rax + 0x5c], bh; ret; 
0x000000000002b9b9: add byte ptr [rax + 0x63], cl; adc al, 0x81; add rdx, rcx; jmp rdx; 
0x0000000000039fdf: add byte ptr [rax + 0x63], cl; adc al, 0x88; add rdx, rax; jmp rdx; 
0x0000000000039c0e: add byte ptr [rax + 0x63], cl; adc al, 0x96; add rdx, rsi; jmp rdx; 
0x0000000000040b8f: add byte ptr [rax + 0x63], cl; adc al, 0xb9; add rdx, rcx; jmp rdx; 
0x000000000000dfec: add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000005bb9f: add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; xor ebx, ebx; mov r15d, r12d; jmp rax; 
0x000000000002fad7: add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; xor edx, edx; jmp rax; 
0x000000000005c039: add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; xor r12d, r12d; mov ebp, edx; jmp rax; 
0x0000000000054758: add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000029931: add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x000000000002c0a7: add byte ptr [rax + 0x63], cl; add al, 0x8a; add rax, rdx; jmp rax; 
0x000000000004b39a: add byte ptr [rax + 0x63], cl; add al, 0x8a; add rax, rdx; lea rdx, [rip + 0x18eef]; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x0000000000039359: add byte ptr [rax + 0x63], cl; add al, 0xa9; add rax, rcx; jmp rax; 
0x000000000003d3d2: add byte ptr [rax + 0x63], cl; cmp al, 0x91; add rdi, rcx; jmp rdi; 
0x00000000000505e7: add byte ptr [rax + 0x63], cl; cmp al, 0xbb; add rdi, rbx; jmp rdi; 
0x000000000002b61d: add byte ptr [rax + 0x63], cl; je 0x2b5d7; add byte ptr [rax + 1], cl; out dx, al; jmp rsi; 
0x00000000000275eb: add byte ptr [rax + 0x63], cl; or al, 0x88; add rcx, rax; jmp rcx; 
0x000000000005bfed: add byte ptr [rax + 0x63], cl; or al, 0x88; add rcx, rax; mov edx, ebp; mov ebp, 0x110001; jmp rcx; 
0x000000000005be9a: add byte ptr [rax + 0x63], cl; or al, 0x88; add rcx, rax; mov edx, r15d; jmp rcx; 
0x000000000002c3a1: add byte ptr [rax + 0x63], cl; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x0000000000057e62: add byte ptr [rax + 0x63], cl; or al, 0x8e; add rcx, rsi; jmp rcx; 
0x0000000000037223: add byte ptr [rax + 0x63], cl; or al, 0xb8; add rcx, rax; jmp rcx; 
0x000000000002998f: add byte ptr [rax + 0x63], cl; test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x00000000000308e7: add byte ptr [rax + 0x63], cl; xor al, 0xb7; add rsi, rdi; jmp rsi; 
0x000000000004c787: add byte ptr [rax + 0x6b], cl; ret; 
0x000000000001f08e: add byte ptr [rax + 0x6c5ae850], dl; add dword ptr [rax], eax; ud2; nop dword ptr [rax + rax]; ret; 
0x0000000000059e2f: add byte ptr [rax + 0x740a163c], al; xor byte ptr [rax - 1], cl; ret 0x3948; 
0x0000000000057e9b: add byte ptr [rax + 0x7d], bh; ret; 
0x000000000005de46: add byte ptr [rax + 0x884101], dh; mov rax, r8; ret; 
0x000000000002a823: add byte ptr [rax + 0xc754bf9], al; mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000002a4af: add byte ptr [rax + 0xf00103c], al; test cl, bl; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x3948; 
0x00000000000129d5: add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 0xa], dh; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x0000000000015202: add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 0xb], dh; lea rax, [rip + 0x41a4c]; call rax; 
0x000000000000fa22: add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 0xb], dh; lea rax, [rip + 0x4722c]; call rax; 
0x000000000000f4ac: add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x000000000001451d: add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x0000000000014261: add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x58; ret; 
0x000000000000d656: add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rsp + rbx - 0x15], dh; pop rbp; lea rax, [rip - 0x1eca]; call rax; 
0x000000000002b622: add byte ptr [rax + 1], cl; out dx, al; jmp rsi; 
0x000000000002ed5b: add byte ptr [rax + 1], cl; ret 0xc148; 
0x0000000000040850: add byte ptr [rax + 1], cl; ret; 
0x00000000000570df: add byte ptr [rax + 3], cl; pop rdx; or byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000002c9d2: add byte ptr [rax + 3], cl; test byte ptr [rax + rbx*2], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000003a05d: add byte ptr [rax + 6], bh; lea rdx, [rip + 0x27b7a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003e831: add byte ptr [rax + rax*8 - 0x72b7b78b], al; jl 0x3e85e; adc byte ptr [rax - 0x77], cl; out 0x41, al; call rdi; 
0x0000000000050104: add byte ptr [rax + rax*8 - 0xb7eb8b], al; ret; 
0x0000000000016794: add byte ptr [rax + rax], al; add byte ptr [rax], al; lea rax, [rip + 0x24a0]; mov edi, 4; call rax; 
0x0000000000036d1d: add byte ptr [rax + rax], al; pop rcx; ret; 
0x000000000001970f: add byte ptr [rax - 0x18], dl; mov dl, byte ptr [rcx]; add byte ptr [rax], al; pop rcx; ret; 
0x000000000004b484: add byte ptr [rax - 0x39], cl; ret; 
0x0000000000059a0f: add byte ptr [rax - 0x3f], cl; out 0x20, al; mov eax, edi; or rax, rsi; ret; 
0x0000000000045b04: add byte ptr [rax - 0x3f], cl; out 4, al; mov edx, 8; mov rdi, r14; lea rbx, [rip - 0x30db8]; call rbx; 
0x000000000002d7c8: add byte ptr [rax - 0x3f], cl; out 4, al; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x18a7c]; call rbx; 
0x0000000000046d27: add byte ptr [rax - 0x3f], cl; out 4, al; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x31fdb]; call rbx; 
0x000000000002a6b5: add byte ptr [rax - 0x628ab406], al; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x0000000000054751: add byte ptr [rax - 0x73], cl; adc eax, 0x1054b; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000003a062: add byte ptr [rax - 0x73], cl; adc eax, 0x27b7a; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003260f: add byte ptr [rax - 0x73], cl; adc eax, 0x2f275; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002c39a: add byte ptr [rax - 0x73], cl; adc eax, 0x352f2; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002c0a0: add byte ptr [rax - 0x73], cl; adc eax, 0x355ac; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000003cc46: add byte ptr [rax - 0x73], cl; adc eax, 0x3a912; add rsp, 0x58; pop rbx; pop r14; ret; 
0x000000000003e611: add byte ptr [rax - 0x73], cl; adc eax, 0x3bb07; lea rax, [rip + 0x3bb09]; pop rcx; ret; 
0x000000000001e420: add byte ptr [rax - 0x73], cl; adc eax, 0x57fd0; add rsp, 0x38; ret; 
0x000000000001cb9e: add byte ptr [rax - 0x73], cl; adc eax, 0x5981a; lea rax, [rip - 0x1153d]; mov esi, 0x28; call rax; 
0x000000000001c0f0: add byte ptr [rax - 0x73], cl; adc eax, 0x5a2b0; lea rax, [rip - 0x10a8f]; mov esi, 0x19; call rax; 
0x000000000001a900: add byte ptr [rax - 0x73], cl; adc eax, 0x5ba08; add rsp, 0x38; ret; 
0x000000000001a329: add byte ptr [rax - 0x73], cl; adc eax, 0x5bfa7; lea rax, [rip - 0x3348]; call rax; 
0x0000000000019a42: add byte ptr [rax - 0x73], cl; adc eax, 0x5c85e; lea rax, [rip - 0x2a31]; lea rsi, [rsp + 0x110]; call rax; 
0x000000000001963f: add byte ptr [rax - 0x73], cl; adc eax, 0x5cc49; lea rax, [rip - 0x272e]; call rax; 
0x00000000000192ca: add byte ptr [rax - 0x73], cl; adc eax, 0x5cf8e; call qword ptr [rip + 0x606e8]; mov rax, qword ptr [rsp + 0x50]; add rsp, 0x788; ret; 
0x0000000000018b95: add byte ptr [rax - 0x73], cl; adc eax, 0x5d683; lea rax, [rip - 0x1ae4]; lea rsi, [rsp + 0x220]; call rax; 
0x00000000000188c3: add byte ptr [rax - 0x73], cl; adc eax, 0x5d93d; lea rax, [rip - 0x1952]; lea rsi, [rsp + 0x190]; call rax; 
0x0000000000018075: add byte ptr [rax - 0x73], cl; adc eax, 0x5e0eb; call qword ptr [rip + 0x619f5]; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x478; ret; 
0x0000000000015de0: add byte ptr [rax - 0x73], cl; adc eax, 0x60320; lea rax, [rip - 0xa77f]; mov esi, 0x19; call rax; 
0x0000000000014d23: add byte ptr [rax - 0x73], cl; adc eax, 0x613c5; lea rax, [rip - 0x96c2]; mov esi, 0x49; call rax; 
0x0000000000014c2c: add byte ptr [rax - 0x73], cl; adc eax, 0x614bc; lea rax, [rip - 0x95cb]; mov esi, 0x49; call rax; 
0x0000000000013076: add byte ptr [rax - 0x73], cl; adc eax, 0x62f6a; lea rax, [rip - 0x7a15]; mov esi, 0x2b; call rax; 
0x0000000000012b57: add byte ptr [rax - 0x73], cl; adc eax, 0x63471; lea rax, [rip - 0x74f6]; mov esi, 0x2b; call rax; 
0x00000000000113f0: add byte ptr [rax - 0x73], cl; adc eax, 0x64b70; lea rax, [rip - 0x5d8f]; mov esi, 0x19; call rax; 
0x00000000000109a4: add byte ptr [rax - 0x73], cl; adc eax, 0x655a4; lea rax, [rip - 0x5343]; mov esi, 0x49; call rax; 
0x00000000000108b1: add byte ptr [rax - 0x73], cl; adc eax, 0x65697; lea rax, [rip - 0x5250]; mov esi, 0x49; call rax; 
0x00000000000105b4: add byte ptr [rax - 0x73], cl; adc eax, 0x65994; lea rax, [rip - 0x4f53]; mov esi, 0x49; call rax; 
0x00000000000104c1: add byte ptr [rax - 0x73], cl; adc eax, 0x65a87; lea rax, [rip - 0x4e60]; mov esi, 0x49; call rax; 
0x000000000001008d: add byte ptr [rax - 0x73], cl; adc eax, 0x65ea3; lea rax, [rip - 0x4a2c]; mov esi, 0x49; call rax; 
0x000000000000fb1a: add byte ptr [rax - 0x73], cl; adc eax, 0x663ce; lea rax, [rip - 0x44b9]; mov esi, 0x49; call rax; 
0x000000000000c781: add byte ptr [rax - 0x73], cl; adc eax, 0x693ef; lea rax, [rip - 0x1120]; mov esi, 0x1c; call rax; 
0x000000000002ee2e: add byte ptr [rax - 0x73], cl; add dword ptr [r8 + 0x39], ecx; ret 0x860f; 
0x000000000002d496: add byte ptr [rax - 0x73], cl; add dword ptr [r9 + 0x39], ecx; ret 0x860f; 
0x000000000000dc32: add byte ptr [rax - 0x73], cl; add eax, 0x105d6; lea rdi, [rsp + 0x100]; call rax; 
0x000000000000dbb0: add byte ptr [rax - 0x73], cl; add eax, 0x10658; lea rdi, [rsp + 0x100]; call rax; 
0x000000000000d727: add byte ptr [rax - 0x73], cl; add eax, 0x10ae1; lea rdi, [rsp + 0x248]; call rax; 
0x000000000000d198: add byte ptr [rax - 0x73], cl; add eax, 0x11070; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000cbda: add byte ptr [rax - 0x73], cl; add eax, 0x1162e; lea rdi, [rsp + 0x178]; call rax; 
0x0000000000015fac: add byte ptr [rax - 0x73], cl; add eax, 0x1c8c; lea rdx, [rsp + 0x18]; call rax; 
0x0000000000018baf: add byte ptr [rax - 0x73], cl; add eax, 0x2059; lea rdi, [rsp + 0x140]; call rax; 
0x0000000000018b6d: add byte ptr [rax - 0x73], cl; add eax, 0x209b; lea rdi, [rsp + 0x140]; call rax; 
0x000000000003dcf1: add byte ptr [rax - 0x73], cl; add eax, 0x23f7b; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x0000000000016798: add byte ptr [rax - 0x73], cl; add eax, 0x24a0; mov edi, 4; call rax; 
0x000000000001bc0d: add byte ptr [rax - 0x73], cl; add eax, 0x25fb; lea rdi, [rsp + 0x50]; call rax; 
0x0000000000039fd8: add byte ptr [rax - 0x73], cl; add eax, 0x27bec; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000000dec8: add byte ptr [rax - 0x73], cl; add eax, 0x29a10; call rax; 
0x000000000000d95d: add byte ptr [rax - 0x73], cl; add eax, 0x29f7b; call rax; 
0x000000000000d915: add byte ptr [rax - 0x73], cl; add eax, 0x2a453; call rax; 
0x000000000000d932: add byte ptr [rax - 0x73], cl; add eax, 0x2a466; lea rdi, [rsp + 0x98]; call rax; 
0x000000000000dea0: add byte ptr [rax - 0x73], cl; add eax, 0x2a718; lea rdi, [rsp + 0x158]; call rax; 
0x000000000000de22: add byte ptr [rax - 0x73], cl; add eax, 0x2a796; lea rdi, [rsp + 0x128]; call rax; 
0x000000000000dde8: add byte ptr [rax - 0x73], cl; add eax, 0x2a7d0; lea rdi, [rsp + 0xf8]; call rax; 
0x000000000000ddae: add byte ptr [rax - 0x73], cl; add eax, 0x2a80a; lea rdi, [rsp + 0xc8]; call rax; 
0x000000000000dd74: add byte ptr [rax - 0x73], cl; add eax, 0x2a844; lea rdi, [rsp + 0x98]; call rax; 
0x000000000000d4fc: add byte ptr [rax - 0x73], cl; add eax, 0x2a89c; lea rdi, [rsp + 0x220]; call rax; 
0x000000000000cf8f: add byte ptr [rax - 0x73], cl; add eax, 0x2a949; call rax; 
0x000000000000dc1f: add byte ptr [rax - 0x73], cl; add eax, 0x2a999; lea rdi, [rsp + 0x120]; call rax; 
0x000000000000da7f: add byte ptr [rax - 0x73], cl; add eax, 0x2ab39; lea rdi, [rsp + 0x190]; call rax; 
0x000000000000d7a8: add byte ptr [rax - 0x73], cl; add eax, 0x2ae10; lea rdi, [rsp + 0x2a8]; call rax; 
0x000000000000cf41: add byte ptr [rax - 0x73], cl; add eax, 0x2ae27; call rax; 
0x000000000000cf64: add byte ptr [rax - 0x73], cl; add eax, 0x2ae34; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000000c9cf: add byte ptr [rax - 0x73], cl; add eax, 0x2af09; call rax; 
0x000000000000d40b: add byte ptr [rax - 0x73], cl; add eax, 0x2b1ad; lea rdi, [rsp + 0x2e8]; call rax; 
0x000000000000c981: add byte ptr [rax - 0x73], cl; add eax, 0x2b3e7; call rax; 
0x000000000000c9a4: add byte ptr [rax - 0x73], cl; add eax, 0x2b3f4; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000000d0ce: add byte ptr [rax - 0x73], cl; add eax, 0x2b4ea; lea rdi, [rsp + 0x348]; call rax; 
0x000000000000ce4d: add byte ptr [rax - 0x73], cl; add eax, 0x2b76b; lea rdi, [rsp + 0x2e8]; call rax; 
0x000000000000cb0e: add byte ptr [rax - 0x73], cl; add eax, 0x2baaa; lea rdi, [rsp + 0x348]; call rax; 
0x00000000000194ad: add byte ptr [rax - 0x73], cl; add eax, 0x336b; mov edi, 0x27; mov edx, 0x1b; call rax; 
0x000000000003e618: add byte ptr [rax - 0x73], cl; add eax, 0x3bb09; pop rcx; ret; 
0x000000000001c2c2: add byte ptr [rax - 0x73], cl; add eax, 0x3d6; call rax; 
0x0000000000036d18: add byte ptr [rax - 0x73], cl; add eax, 0x400a0; pop rcx; ret; 
0x00000000000129ff: add byte ptr [rax - 0x73], cl; add eax, 0x47a09; lea rsi, [rsp + 0x38]; call rax; 
0x000000000000e14f: add byte ptr [rax - 0x73], cl; add eax, 0x4c879; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000016905: add byte ptr [rax - 0x73], cl; add eax, 0x4e3; lea rdi, [rsp + 0x40]; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000000d579: add byte ptr [rax - 0x73], cl; add eax, 0x4ef9f; lea rdi, [rsp + 0x260]; mov qword ptr [rsp + 0x40], rdi; call rax; 
0x000000000000daf2: add byte ptr [rax - 0x73], cl; add eax, 0x85d6; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000015332: add byte ptr [rax - 0x73], cl; add eax, 0x926; call rax; 
0x000000000005bfab: add byte ptr [rax - 0x73], cl; add eax, 0x94b1; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bf4b: add byte ptr [rax - 0x73], cl; add eax, 0x9511; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bf12: add byte ptr [rax - 0x73], cl; add eax, 0x954a; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bed4: add byte ptr [rax - 0x73], cl; add eax, 0x9588; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005be3a: add byte ptr [rax - 0x73], cl; add eax, 0x9622; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bdfb: add byte ptr [rax - 0x73], cl; add eax, 0x9661; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000000d7bb: add byte ptr [rax - 0x73], cl; add eax, 0xd3ad; lea rdi, [rsp + 0x290]; call rax; 
0x000000000000d73d: add byte ptr [rax - 0x73], cl; add eax, 0xd42b; lea rdi, [rsp + 0x290]; call rax; 
0x000000000001cba5: add byte ptr [rax - 0x73], cl; add eax, 0xfffeeac3; mov esi, 0x28; call rax; 
0x000000000001c0f7: add byte ptr [rax - 0x73], cl; add eax, 0xfffef571; mov esi, 0x19; call rax; 
0x0000000000018fbb: add byte ptr [rax - 0x73], cl; add eax, 0xffff262d; lea rdi, [rsp + 0x28]; call rax; 
0x000000000001734d: add byte ptr [rax - 0x73], cl; add eax, 0xffff463b; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x00000000000162a7: add byte ptr [rax - 0x73], cl; add eax, 0xffff5341; call rax; 
0x0000000000015de7: add byte ptr [rax - 0x73], cl; add eax, 0xffff5881; mov esi, 0x19; call rax; 
0x0000000000014d2a: add byte ptr [rax - 0x73], cl; add eax, 0xffff693e; mov esi, 0x49; call rax; 
0x0000000000014c33: add byte ptr [rax - 0x73], cl; add eax, 0xffff6a35; mov esi, 0x49; call rax; 
0x0000000000014549: add byte ptr [rax - 0x73], cl; add eax, 0xffff743f; mov esi, 0x2b; lea rdx, [rsp + 0x18]; call rax; 
0x00000000000144ae: add byte ptr [rax - 0x73], cl; add eax, 0xffff74da; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000014414: add byte ptr [rax - 0x73], cl; add eax, 0xffff7574; lea rdx, [rsp + 0x20]; call rax; 
0x0000000000014363: add byte ptr [rax - 0x73], cl; add eax, 0xffff7625; lea rdx, [rsp + 0x30]; call rax; 
0x0000000000014290: add byte ptr [rax - 0x73], cl; add eax, 0xffff76f8; lea rdx, [rsp + 0x28]; call rax; 
0x00000000000141ff: add byte ptr [rax - 0x73], cl; add eax, 0xffff7789; lea rdx, [rsp + 0x28]; call rax; 
0x000000000001307d: add byte ptr [rax - 0x73], cl; add eax, 0xffff85eb; mov esi, 0x2b; call rax; 
0x0000000000012b5e: add byte ptr [rax - 0x73], cl; add eax, 0xffff8b0a; mov esi, 0x2b; call rax; 
0x000000000001293f: add byte ptr [rax - 0x73], cl; add eax, 0xffff8dd9; mov esi, 0x100; call rax; 
0x0000000000012905: add byte ptr [rax - 0x73], cl; add eax, 0xffff8e13; mov esi, 0x100; call rax; 
0x00000000000113f7: add byte ptr [rax - 0x73], cl; add eax, 0xffffa271; mov esi, 0x19; call rax; 
0x000000000001134e: add byte ptr [rax - 0x73], cl; add eax, 0xffffa31a; mov esi, 0x23; call rax; 
0x00000000000109ab: add byte ptr [rax - 0x73], cl; add eax, 0xffffacbd; mov esi, 0x49; call rax; 
0x00000000000108b8: add byte ptr [rax - 0x73], cl; add eax, 0xffffadb0; mov esi, 0x49; call rax; 
0x00000000000105bb: add byte ptr [rax - 0x73], cl; add eax, 0xffffb0ad; mov esi, 0x49; call rax; 
0x00000000000104c8: add byte ptr [rax - 0x73], cl; add eax, 0xffffb1a0; mov esi, 0x49; call rax; 
0x0000000000010094: add byte ptr [rax - 0x73], cl; add eax, 0xffffb5d4; mov esi, 0x49; call rax; 
0x000000000001bba8: add byte ptr [rax - 0x73], cl; add eax, 0xffffb750; call rax; 
0x000000000000fb21: add byte ptr [rax - 0x73], cl; add eax, 0xffffbb47; mov esi, 0x49; call rax; 
0x000000000001a0dd: add byte ptr [rax - 0x73], cl; add eax, 0xffffc43b; lea rdi, [rsp + 0x98]; call rax; 
0x000000000001a330: add byte ptr [rax - 0x73], cl; add eax, 0xffffccb8; call rax; 
0x000000000000e906: add byte ptr [rax - 0x73], cl; add eax, 0xffffcce2; call rax; 
0x0000000000019a49: add byte ptr [rax - 0x73], cl; add eax, 0xffffd5cf; lea rsi, [rsp + 0x110]; call rax; 
0x0000000000018821: add byte ptr [rax - 0x73], cl; add eax, 0xffffd667; lea rdi, [rsp + 0x170]; call rax; 
0x0000000000019cc7: add byte ptr [rax - 0x73], cl; add eax, 0xffffd8c1; lea rdi, [rsp + 0xc0]; lea rsi, [rsp + 0xe0]; call rax; 
0x0000000000019646: add byte ptr [rax - 0x73], cl; add eax, 0xffffd8d2; call rax; 
0x00000000000199a5: add byte ptr [rax - 0x73], cl; add eax, 0xffffdca3; lea rdi, [rsp + 0xc0]; lea rsi, [rsp + 0xe0]; call rax; 
0x0000000000017e11: add byte ptr [rax - 0x73], cl; add eax, 0xffffe237; lea rsi, [rsp + 0x140]; call rax; 
0x0000000000018eb3: add byte ptr [rax - 0x73], cl; add eax, 0xffffe2a5; call rax; 
0x0000000000018b9c: add byte ptr [rax - 0x73], cl; add eax, 0xffffe51c; lea rsi, [rsp + 0x220]; call rax; 
0x0000000000017d5b: add byte ptr [rax - 0x73], cl; add eax, 0xffffe66d; lea rdi, [rsp + 0xd8]; lea rdx, [rsp + 0xf0]; call rax; 
0x00000000000188ca: add byte ptr [rax - 0x73], cl; add eax, 0xffffe6ae; lea rsi, [rsp + 0x190]; call rax; 
0x0000000000017d93: add byte ptr [rax - 0x73], cl; add eax, 0xffffe775; call rax; 
0x00000000000167c2: add byte ptr [rax - 0x73], cl; add eax, 0xffffeae6; xor esi, esi; call rax; 
0x000000000000c788: add byte ptr [rax - 0x73], cl; add eax, 0xffffeee0; mov esi, 0x1c; call rax; 
0x000000000000c5a7: add byte ptr [rax - 0x73], cl; add eax, 0xfffff041; call rax; 
0x000000000000c656: add byte ptr [rax - 0x73], cl; add eax, 0xfffff0c2; xor ecx, ecx; mov edi, ecx; call rax; 
0x000000000001a514: add byte ptr [rax - 0x73], cl; add eax, 0xfffff254; call rax; 
0x000000000001c9be: add byte ptr [rax - 0x73], cl; add eax, 0xfffff87a; xor esi, esi; call rax; 
0x0000000000029a1d: add byte ptr [rax - 0x73], cl; add r9, qword ptr [r8 - 0x7d]; ret; 
0x0000000000039905: add byte ptr [rax - 0x73], cl; cmp eax, 0x2825f; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000003188c: add byte ptr [rax - 0x73], cl; cmp eax, 0x2ff5c; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x00000000000108aa: add byte ptr [rax - 0x73], cl; cmp eax, 0x4fbb8; lea rdx, [rip + 0x65697]; lea rax, [rip - 0x5250]; mov esi, 0x49; call rax; 
0x00000000000104ba: add byte ptr [rax - 0x73], cl; cmp eax, 0x4ffa8; lea rdx, [rip + 0x65a87]; lea rax, [rip - 0x4e60]; mov esi, 0x49; call rax; 
0x0000000000036e3b: add byte ptr [rax - 0x73], cl; dec dword ptr [r8 - 0x7d]; ret; 
0x0000000000018397: add byte ptr [rax - 0x73], cl; je 0x183c0; adc bh, bh; adc eax, 0x61acd; add rsp, 0x88; ret; 
0x000000000003b34a: add byte ptr [rax - 0x73], cl; je 0x3b373; and byte ptr [rcx + rcx*4 - 9], cl; call rax; 
0x000000000003e40b: add byte ptr [rax - 0x73], cl; je 0x3e434; and byte ptr [rax - 0x75], cl; sbb eax, 0x3b5c0; mov edx, 0x90; call rbx; 
0x000000000005a46a: add byte ptr [rax - 0x73], cl; je 0x5a493; add al, 0xff; adc eax, 0x1f662; pop rcx; ret; 
0x000000000005a49c: add byte ptr [rax - 0x73], cl; je 0x5a4c5; add al, 0xff; adc eax, 0x1f630; pop rcx; ret; 
0x000000000005a4d9: add byte ptr [rax - 0x73], cl; je 0x5a502; add al, 0xff; adc eax, 0x1f5f3; pop rcx; ret; 
0x000000000005a51d: add byte ptr [rax - 0x73], cl; je 0x5a546; add al, 0xff; adc eax, 0x1f5af; pop rcx; ret; 
0x000000000005a61d: add byte ptr [rax - 0x73], cl; je 0x5a646; add al, 0xff; adc eax, 0x1f4af; pop rcx; ret; 
0x000000000005a64f: add byte ptr [rax - 0x73], cl; je 0x5a678; add al, 0xff; adc eax, 0x1f47d; pop rcx; ret; 
0x000000000005a68c: add byte ptr [rax - 0x73], cl; je 0x5a6b5; add al, 0xff; adc eax, 0x1f440; pop rcx; ret; 
0x000000000005a6d0: add byte ptr [rax - 0x73], cl; je 0x5a6f9; add al, 0xff; adc eax, 0x1f3fc; pop rcx; ret; 
0x0000000000016674: add byte ptr [rax - 0x73], cl; jl 0x1669d; pop rax; call rax; 
0x000000000001690c: add byte ptr [rax - 0x73], cl; jl 0x16935; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000001a058: add byte ptr [rax - 0x73], cl; jl 0x1a081; pop rax; lea rdx, [rsp + 0x70]; call rax; 
0x000000000001bc14: add byte ptr [rax - 0x73], cl; jl 0x1bc3d; push rax; call rax; 
0x000000000001bcef: add byte ptr [rax - 0x73], cl; jl 0x1bd18; push rax; call rax; 
0x000000000001bd3e: add byte ptr [rax - 0x73], cl; jl 0x1bd67; push rax; call rax; 
0x000000000000d8e3: add byte ptr [rax - 0x73], cl; jl 0xd90c; push rax; call rax; 
0x000000000000da92: add byte ptr [rax - 0x73], cl; jl 0xdabb; push rax; call qword ptr [rip + 0x6bfb2]; add rsp, 0x1d8; ret; 
0x000000000000dd1b: add byte ptr [rax - 0x73], cl; jl 0xdd44; push rax; call rax; 
0x0000000000018b0c: add byte ptr [rax - 0x73], cl; mov ah, 0x24; adc byte ptr [rdx], al; add byte ptr [rax], al; call rax; 
0x000000000000c9fb: add byte ptr [rax - 0x73], cl; mov ah, 0x24; call 0x4800ca05; lea edx, [rsp + 0x88]; call rax; 
0x000000000000cfbb: add byte ptr [rax - 0x73], cl; mov ah, 0x24; call 0x4800cfc5; lea edx, [rsp + 0x88]; call rax; 
0x0000000000017dbc: add byte ptr [rax - 0x73], cl; mov ah, 0x24; fadd dword ptr [rax]; add byte ptr [rax], al; call rax; 
0x0000000000018843: add byte ptr [rax - 0x73], cl; mov ah, 0x24; jo 0x1884b; add byte ptr [rax], al; call rax; 
0x000000000000d989: add byte ptr [rax - 0x73], cl; mov ah, 0x24; mov al, 0; add byte ptr [rax], al; lea rdx, [rsp + 0x50]; call rax; 
0x000000000000def4: add byte ptr [rax - 0x73], cl; mov ah, 0x24; mov al, 1; add byte ptr [rax], al; lea rdx, [rsp + 0x50]; call rax; 
0x000000000000da4c: add byte ptr [rax - 0x73], cl; mov ah, 0x24; rol byte ptr [rax], 1; add byte ptr [rax], al; call rax; 
0x00000000000194ef: add byte ptr [rax - 0x73], cl; mov ah, 0x24; sbb byte ptr [rsi], al; add byte ptr [rax], al; call rax; 
0x000000000000d0e1: add byte ptr [rax - 0x73], cl; mov esp, 0x8824; add bh, bh; adc eax, 0x6c960; add rsp, 0x398; ret; 
0x000000000000cb21: add byte ptr [rax - 0x73], cl; mov esp, 0x8824; add bh, bh; adc eax, 0x6cf20; add rsp, 0x398; ret; 
0x0000000000050e02: add byte ptr [rax - 0x73], cl; or eax, 0x1363e; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003a60d: add byte ptr [rax - 0x73], cl; or eax, 0x275ff; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000034c68: add byte ptr [rax - 0x73], cl; or eax, 0x2cdd0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000034c0c: add byte ptr [rax - 0x73], cl; or eax, 0x2ce14; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000032595: add byte ptr [rax - 0x73], cl; or eax, 0x2f2cf; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002fad0: add byte ptr [rax - 0x73], cl; or eax, 0x31c30; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor edx, edx; jmp rax; 
0x000000000002aead: add byte ptr [rax - 0x73], cl; or eax, 0x36667; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029e22: add byte ptr [rax - 0x73], cl; or eax, 0x37406; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029eac: add byte ptr [rax - 0x73], cl; or eax, 0x375a8; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000028356: add byte ptr [rax - 0x73], cl; or eax, 0x38d1a; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000017346: add byte ptr [rax - 0x73], cl; or eax, 0x5edfa; lea rax, [rip - 0xb9c5]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x0000000000014542: add byte ptr [rax - 0x73], cl; or eax, 0x61ad6; lea rax, [rip - 0x8bc1]; mov esi, 0x2b; lea rdx, [rsp + 0x18]; call rax; 
0x000000000005bdbd: add byte ptr [rax - 0x73], cl; or eax, 0x95ff; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x00000000000284d9: add byte ptr [rax - 0x73], cl; pop rcx; add cl, byte ptr [rax - 0x7d]; ret 0x49fe; 
0x0000000000017359: add byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call rax; 
0x0000000000014555: add byte ptr [rax - 0x73], cl; push rsp; and al, 0x18; call rax; 
0x000000000001648b: add byte ptr [rax - 0x73], cl; push rsp; and al, 0x20; call rax; 
0x0000000000059b0f: add byte ptr [rax - 0x73], cl; push rsp; and al, 0x38; call qword ptr [rip + 0x2032d]; add rsp, 0x68; ret; 
0x000000000000d991: add byte ptr [rax - 0x73], cl; push rsp; and al, 0x50; call rax; 
0x00000000000505e0: add byte ptr [rax - 0x73], cl; sbb eax, 0x13e00; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x0000000000039c07: add byte ptr [rax - 0x73], cl; xor eax, 0x27f8d; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000058581: add byte ptr [rax - 0x73], cl; xor eax, 0xd073; mov edx, 2; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x0000000000057e5b: add byte ptr [rax - 0x73], cl; xor eax, 0xd485; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000001a113: add byte ptr [rax - 0x74b7efb8], cl; and al, 0x20; add rsp, 0xd8; ret; 
0x000000000004b3a8: add byte ptr [rax - 0x75], cl; adc al, 0xca; ret; 
0x000000000001f2af: add byte ptr [rax - 0x75], cl; adc byte ptr [r8 - 0x77], r9b; adc byte ptr [rdi], r9b; adc byte ptr [rdi], al; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000001193a: add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x18; ret; 
0x000000000001a962: add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x28; ret; 
0x00000000000124f4: add byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001e5b0: add byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001515c: add byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x000000000000c474: add byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x40; ret; 
0x00000000000132ce: add byte ptr [rax - 0x75], cl; add al, 0x24; pop rcx; ret; 
0x0000000000018ac7: add byte ptr [rax - 0x75], cl; add eax, 0x61411; lea rdx, [rsp + 0x1b0]; lea rcx, [rsp + 0x1f8]; call rax; 
0x0000000000012eae: add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x118; ret; 
0x000000000001346c: add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x38; ret; 
0x000000000001799f: add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x40; ret; 
0x0000000000010b95: add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x48; ret; 
0x0000000000017637: add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x50; ret; 
0x00000000000130a8: add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x58; ret; 
0x0000000000015fbc: add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x68; ret; 
0x000000000001163f: add byte ptr [rax - 0x75], cl; and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000001118f: add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x1b8; ret; 
0x00000000000119dc: add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x28; ret; 
0x0000000000018401: add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x48; ret; 
0x0000000000013b8a: add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x50; ret; 
0x00000000000106b4: add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x68; ret; 
0x0000000000017a27: add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x78; ret; 
0x000000000001355c: add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x88; ret; 
0x0000000000011cb5: add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0xb8; ret; 
0x0000000000016494: add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0xc8; ret; 
0x0000000000017da0: add byte ptr [rax - 0x75], cl; and al, 0x20; add rsp, 0x188; ret; 
0x0000000000016e65: add byte ptr [rax - 0x75], cl; and al, 0x20; add rsp, 0x38; ret; 
0x000000000000e1c2: add byte ptr [rax - 0x75], cl; and al, 0x20; add rsp, 0x98; ret; 
0x0000000000047513: add byte ptr [rax - 0x75], cl; and al, 0x20; mov qword ptr [rsp + 0x178], rax; lea rsi, [rsp + 0x150]; call qword ptr [rcx + 0x20]; 
0x000000000001146e: add byte ptr [rax - 0x75], cl; and al, 0x20; mov rdx, qword ptr [rsp + 0x28]; add rsp, 0x88; ret; 
0x0000000000018082: add byte ptr [rax - 0x75], cl; and al, 0x28; add rsp, 0x478; ret; 
0x000000000001b1bb: add byte ptr [rax - 0x75], cl; and al, 0x28; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x228; ret; 
0x000000000001054f: add byte ptr [rax - 0x75], cl; and al, 0x40; add rsp, 0x108; ret; 
0x000000000001bd81: add byte ptr [rax - 0x75], cl; and al, 0x48; add rsp, 0x108; ret; 
0x000000000000d925: add byte ptr [rax - 0x75], cl; and al, 0x48; mov qword ptr [rsp + 0x98], rax; lea rax, [rip + 0x2a466]; lea rdi, [rsp + 0x98]; call rax; 
0x00000000000192d7: add byte ptr [rax - 0x75], cl; and al, 0x50; add rsp, 0x788; ret; 
0x000000000001861a: add byte ptr [rax - 0x75], cl; and al, 0x58; add rsp, 0x3a8; ret; 
0x000000000001b4ed: add byte ptr [rax - 0x75], cl; and al, 0x68; mov rdx, qword ptr [rsp + 0x70]; add rsp, 0x2c8; ret; 
0x0000000000015387: add byte ptr [rax - 0x75], cl; and al, 0x78; mov rdx, qword ptr [rsp + 0x80]; add rsp, 0x148; ret; 
0x0000000000010163: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x108; ret; 
0x0000000000015ff6: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; ret; 
0x0000000000016dd6: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x28; ret; 
0x0000000000010b13: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x48; ret; 
0x0000000000013965: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x88; ret; 
0x000000000000fc8d: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0xe0; ret; 
0x0000000000059ee1: add byte ptr [rax - 0x75], cl; and al, 8; call qword ptr [rax + 0x18]; 
0x000000000001bd2d: add byte ptr [rax - 0x75], cl; and al, 8; mov qword ptr [rsp + 0x48], rax; lea rax, [rip + 0x24d1]; lea rdi, [rsp + 0x50]; call rax; 
0x0000000000015cae: add byte ptr [rax - 0x75], cl; and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x60; ret; 
0x00000000000458df: add byte ptr [rax - 0x75], cl; call 0x24509431; call 0xffffffff834c6e5f; ret; 
0x00000000000582e4: add byte ptr [rax - 0x75], cl; cmp ecx, dword ptr [rax - 0x75]; or byte ptr [r8 - 0x73], cl; xor eax, 0xd30b; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000005822b: add byte ptr [rax - 0x75], cl; cmp ecx, dword ptr [rax - 0x75]; or byte ptr [r8 - 0x73], cl; xor eax, 0xd3c2; mov edx, 2; call qword ptr [rax + 0x18]; 
0x00000000000169c8: add byte ptr [rax - 0x75], cl; je 0x169f1; sub byte ptr [rax - 0x73], cl; add eax, 0x345b; lea rdi, [rsp + 0x30]; call rax; 
0x0000000000016b02: add byte ptr [rax - 0x75], cl; je 0x16b2b; sub byte ptr [rax - 0x73], cl; add eax, 0x3641; lea rdi, [rsp + 0x68]; call rax; 
0x000000000000cd16: add byte ptr [rax - 0x75], cl; je 0xcd3f; sub byte ptr [rax - 0x73], cl; add eax, 0x2e18d; lea rdi, [rsp + 0x1c8]; call rax; 
0x000000000000d2d4: add byte ptr [rax - 0x75], cl; je 0xd2fd; sub byte ptr [rax - 0x73], cl; add eax, 0x2dbcf; lea rdi, [rsp + 0x1c8]; call rax; 
0x0000000000041fc8: add byte ptr [rax - 0x75], cl; jge 0x41fcd; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x0000000000016a70: add byte ptr [rax - 0x75], cl; jl 0x16a99; sub bh, bh; adc eax, 0x63084; add rsp, 0x148; ret; 
0x0000000000059ed5: add byte ptr [rax - 0x75], cl; jl 0x59efe; adc byte ptr [rax - 0x73], cl; xor eax, 0xb0f2; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000001a083: add byte ptr [rax - 0x75], cl; js 0x1a090; lea rax, [rip + 0x961]; call rax; 
0x000000000001b5c2: add byte ptr [rax - 0x75], cl; mov esp, 0x24024; add byte ptr [rax - 0x77], cl; mov esp, 0x24824; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000005f11f: add byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x740d]; mov edx, 0xb; jmp rax; 
0x000000000005ebff: add byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x74ae]; mov edx, 5; jmp rax; 
0x0000000000057e1f: add byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xd764]; mov edx, 0xe; jmp rax; 
0x0000000000018eab: add byte ptr [rax - 0x75], cl; mov word ptr [rax + rcx*8], fs; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xffffe2a5; call rax; 
0x000000000005b89c: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x73], r9b; xor eax, 0x9c6b; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b881: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x73], r9b; xor eax, 0x9e99; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a366: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x73], r9b; xor eax, 0xb3b5; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a338: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x73], r9b; xor eax, 0xb3d7; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059fea: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x73], r9b; xor eax, 0xb720; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000059fb4: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x73], r9b; xor eax, 0xb754; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059f9f: add byte ptr [rax - 0x75], cl; or byte ptr [r9 + rcx*4 - 0xa], r9b; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x0000000000056d7e: add byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; jo 0x56d9a; ret; 
0x000000000000fbb9: add byte ptr [rax - 0x77], cl; add al, 0x24; mov rax, qword ptr [rsp]; mov qword ptr [rsp + 0x30], rax; add rsp, 0x38; ret; 
0x0000000000026813: add byte ptr [rax - 0x77], cl; add ebx, dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x0000000000012cff: add byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xc8; ret; 
0x0000000000014357: add byte ptr [rax - 0x77], cl; and al, 0x30; lea rcx, [rip + 0x61cbc]; lea rax, [rip - 0x89db]; lea rdx, [rsp + 0x30]; call rax; 
0x000000000005b94e: add byte ptr [rax - 0x77], cl; and al, 0x38; call rax; 
0x0000000000015ef0: add byte ptr [rax - 0x77], cl; and al, 0x38; mov rax, qword ptr [rsp + 0x38]; mov byte ptr [rax], 0; add rsp, 0x40; ret; 
0x00000000000187b0: add byte ptr [rax - 0x77], cl; and al, 0x38; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; lea rax, [rip + 0x1fa9]; call rax; 
0x000000000001ccbb: add byte ptr [rax - 0x77], cl; and al, 0x60; mov rdi, qword ptr [rsp + 0x60]; lea rax, [rip + 0x583]; call rax; 
0x000000000004a6fa: add byte ptr [rax - 0x77], cl; and al, 8; lea rbx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003cd7f: add byte ptr [rax - 0x77], cl; clc; lea rdx, [rip + 0x3a7f6]; ret; 
0x000000000005a9ff: add byte ptr [rax - 0x77], cl; clc; lea rdx, [rip - 0x325a]; ret; 
0x0000000000059a1f: add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000003894f: add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8b49; 
0x0000000000043092: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x12e8; 
0x0000000000043173: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x31e8; 
0x0000000000042f64: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x40e8; 
0x0000000000043048: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x5ce8; 
0x000000000004322a: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x7ae8; 
0x0000000000043126: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x7ee8; 
0x0000000000042f17: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x8de8; 
0x0000000000042ffb: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xa9e8; 
0x00000000000431f1: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xb3e8; 
0x00000000000430dc: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xc8e8; 
0x0000000000042eca: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xdae8; 
0x00000000000431b8: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xece8; 
0x0000000000042fb1: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xf3e8; 
0x000000000002674e: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx - 1]; and eax, 0x5302f; pop rbx; ret; 
0x00000000000266f8: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx - 1]; and eax, 0x53085; pop rbx; ret; 
0x00000000000266b2: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx - 1]; and eax, 0x530cb; pop rbx; ret; 
0x00000000000422c8: add byte ptr [rax - 0x77], cl; fisttp word ptr [rcx - 0x3b7cb708]; js 0x4232e; pop rbp; ret; 
0x000000000002f07f: add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x75]; sbb dword ptr [rax + 0x39], ecx; ret; 
0x000000000003cfcd: add byte ptr [rax - 0x77], cl; fmul dword ptr [rbp + rcx*4 + 0x73]; dec dword ptr [rax - 0x7d]; ret; 
0x000000000000a2c8: add byte ptr [rax - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0xe]; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004a8d7: add byte ptr [rax - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0xe]; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000047eb4: add byte ptr [rax - 0x77], cl; fsubp st(0); ret; 
0x000000000000aa95: add byte ptr [rax - 0x77], cl; fucomip st(0); ret 0xffe5; 
0x000000000005ee7d: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1a64c]; add rsp, 0x88; ret; 
0x000000000005e657: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1ae72]; add rsp, 0x88; ret; 
0x000000000005e422: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b0a7]; add rsp, 0x88; ret; 
0x000000000005e2f7: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b1d2]; add rsp, 0x88; ret; 
0x000000000005e257: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b272]; add rsp, 0x88; ret; 
0x000000000005e1c4: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b305]; add rsp, 0x88; ret; 
0x000000000005e134: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b395]; add rsp, 0x88; ret; 
0x000000000005e0a2: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b427]; add rsp, 0x88; ret; 
0x000000000005e012: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b4b7]; add rsp, 0x88; ret; 
0x000000000005e846: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; xor ecx, ecx; call qword ptr [rip + 0x1ac81]; add rsp, 0x28; ret; 
0x000000000005e759: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; xor ecx, ecx; call qword ptr [rip + 0x1ad6e]; add rsp, 0x28; ret; 
0x000000000005e6ab: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; xor ecx, ecx; call qword ptr [rip + 0x1ae1c]; add rsp, 0x88; ret; 
0x000000000005e476: add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; xor ecx, ecx; call qword ptr [rip + 0x1b051]; add rsp, 0x88; ret; 
0x000000000004277c: add byte ptr [rax - 0x77], cl; jl 0x427a5; adc byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000001febf: add byte ptr [rax - 0x77], cl; jle 0x1fed4; ret; 
0x00000000000167ba: add byte ptr [rax - 0x77], cl; mov esp, 0x15824; add byte ptr [rax - 0x73], cl; add eax, 0xffffeae6; xor esi, esi; call rax; 
0x000000000001b5ca: add byte ptr [rax - 0x77], cl; mov esp, 0x24824; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000005d4bf: add byte ptr [rax - 0x77], cl; mov rax, rdi; ret; 
0x00000000000516f6: add byte ptr [rax - 0x77], cl; out 0xe8, al; int1; ret 0xffff; 
0x000000000001d234: add byte ptr [rax - 0x77], cl; out 0xff, eax; adc eax, 0x5cd82; add rsp, 0x18; ret; 
0x0000000000037c09: add byte ptr [rax - 0x77], cl; out dx, eax; call rbx; 
0x000000000005adf8: add byte ptr [rax - 0x77], cl; out dx, eax; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x000000000000d4a3: add byte ptr [rax - 0x77], cl; push rsp; and al, 0x38; mov rax, qword ptr [rip + 0x6c310]; call rax; 
0x0000000000059e54: add byte ptr [rax - 0x77], cl; ret 0x15ff; 
0x000000000005e5b5: add byte ptr [rax - 0x77], cl; ret 0x1f0f; 
0x000000000003f69e: add byte ptr [rax - 0x77], cl; ret 0x3b66; 
0x000000000005e600: add byte ptr [rax - 0x77], cl; ret 0x6666; 
0x000000000004a616: add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000036001: add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x00000000000121a4: add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000005e20a: add byte ptr [rax - 0x77], cl; ret 0x9066; 
0x000000000002c9da: add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000000429e0: add byte ptr [rax - 0x77], cl; ret 0xf48; 
0x0000000000023d97: add byte ptr [rax - 0x77], cl; ret; 
0x0000000000043087: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x12e8; 
0x0000000000043168: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x31e8; 
0x0000000000042f59: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x40e8; 
0x000000000004303d: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x5ce8; 
0x000000000004321f: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x7ae8; 
0x000000000004311b: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x7ee8; 
0x0000000000042f0c: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x8de8; 
0x0000000000042ff0: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xa9e8; 
0x00000000000431e6: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xb3e8; 
0x00000000000430d1: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xc8e8; 
0x0000000000042ebf: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xdae8; 
0x00000000000431ad: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xece8; 
0x0000000000042fa6: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xf3e8; 
0x0000000000015518: add byte ptr [rax - 0x77], cl; test byte ptr [rax + rdi*4], ah; add byte ptr [rax], al; add bl, ch; ret 0x8b48; 
0x000000000003e51a: add byte ptr [rax - 0x77], cl; test dword ptr [rax - 0x77], 0xbb3ae8de; cld; dec dword ptr [rax - 0x77]; ret; 
0x0000000000027bc6: add byte ptr [rax - 0x7af0b407], al; ret 1; 
0x000000000004a87f: add byte ptr [rax - 0x7b], cl; div byte ptr [rsi + rax - 1]; and eax, 0x2eefd; ret; 
0x000000000002675f: add byte ptr [rax - 0x7b], cl; div byte ptr [rsi + rax - 1]; and eax, 0x5301d; ret; 
0x000000000004cd2f: add byte ptr [rax - 0x7b], cl; idiv byte ptr [rax + 5]; add qword ptr [rdi + 0x18], rsi; ret; 
0x00000000000423a7: add byte ptr [rax - 0x7b], cl; ror byte ptr [rax - 0x73], 0xd; mov esi, 0x48ffff9b; cmovne ecx, eax; call rcx; 
0x00000000000433bb: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; movsd dword ptr [rdi], dword ptr [rsi]; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000000bc0a: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x0000000000040ace: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rsi*2 + 0x48], 0x89; ret; 
0x0000000000038682: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + 0x10], 0x48; add esp, 0xb0; pop rbx; ret; 
0x000000000000bbc9: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x000000000000900e: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x000000000002495a: add byte ptr [rax - 0x7b], cl; sal byte ptr [rsi + rbp*2 + 0x48], 0x8d; dec qword ptr [rax - 0x77]; ret 0x8348; 
0x000000000000a820: add byte ptr [rax - 0x7b], cl; sar byte ptr [rsi - 0x5c], 0x5b; ret; 
0x0000000000010c5f: add byte ptr [rax - 0x7d], cl; in al, dx; js 0x10cad; mov dword ptr [rsp], edi; lea rax, [rip + 0x60c1]; call rax; 
0x000000000000eaff: add byte ptr [rax - 0x7d], cl; in al, dx; sbb byte ptr [rcx - 0x76f3db84], cl; jl 0xeb2f; adc al, 0x83; jmp qword ptr [rax]; 
0x000000000000a00f: add byte ptr [rax - 0x7d], cl; in al, dx; sub byte ptr [rbx + 0x700a605], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x0000000000009fbf: add byte ptr [rax - 0x7d], cl; in al, dx; sub byte ptr [rbx + 0x700b605], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x0000000000009f6f: add byte ptr [rax - 0x7d], cl; in al, dx; sub byte ptr [rbx + 0x7014605], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x0000000000010219: add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000098af: add byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x0000000000045dce: add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x00000000000103a9: add byte ptr [rax - 0x7d], cl; ret 0x4811; 
0x000000000004adea: add byte ptr [rax - 0x7d], cl; ret 0x4920; 
0x000000000001e8b7: add byte ptr [rax - 0x7d], cl; ret 0x75f8; 
0x000000000000a41c: add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000025ed1: add byte ptr [rax - 0x7d], cl; rol byte ptr [rsp + rcx*2], 0x39; ret 0xa575; 
0x000000000001e837: add byte ptr [rax - 0x7d], cl; sar al, 0x75; ret 0x280f; 
0x00000000000249c7: add byte ptr [rax - 0x7d], cl; sar al, 0x75; ret 0xc031; 
0x0000000000024a57: add byte ptr [rax - 0x7d], cl; sar eax, 0x75; ret 0xc749; 
0x000000000005dc3f: add byte ptr [rax - 0x7d], dl; jmp qword ptr [rax]; 
0x000000000005659f: add byte ptr [rax - 0x7f], cl; ret 0xa940; 
0x000000000001f46b: add byte ptr [rax - 0x7f], cl; ret; 
0x0000000000024471: add byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000001e7e6: add byte ptr [rax - 1], cl; ret; 
0x000000000003e5cf: add byte ptr [rax - 1], dl; adc eax, 0x3ae71; mov eax, dword ptr [rax]; pop rcx; ret; 
0x0000000000019e1f: add byte ptr [rax - 1], dl; adc eax, 0x5f641; pop rax; ret; 
0x0000000000015e7f: add byte ptr [rax - 1], dl; adc eax, 0x63a59; pop rcx; ret; 
0x0000000000013bf9: add byte ptr [rax], 0; add al, ch; mov esi, 0x48fffffb; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x88; ret; 
0x0000000000034062: add byte ptr [rax], 0; add al, ch; xchg eax, ebp; ret 0xfffe; 
0x000000000001bd78: add byte ptr [rax], 0; add bh, bh; adc eax, 0x5dcce; mov rax, qword ptr [rsp + 0x48]; add rsp, 0x108; ret; 
0x0000000000015384: add byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; and al, 0x78; mov rdx, qword ptr [rsp + 0x80]; add rsp, 0x148; ret; 
0x0000000000045dcb: add byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000040a5b: add byte ptr [rax], 0; add byte ptr [rax], al; mov al, 1; ret; 
0x0000000000056cbb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; mov rdx, qword ptr [rdi + 0x10]; ret; 
0x000000000005d4bb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, rsi; mov rax, rdi; ret; 
0x000000000000bbd3: add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x000000000003bb57: add byte ptr [rax], 0; add byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x000000000004ce60: add byte ptr [rax], al; adc dword ptr [rax], eax; add rsp, 0x98; pop rbx; pop r14; ret; 
0x000000000004f102: add byte ptr [rax], al; adc dword ptr [rax], eax; cmovae rax, rdx; shl rax, 0x20; or rax, rcx; ret; 
0x0000000000057e58: add byte ptr [rax], al; adc dword ptr [rax], eax; lea rsi, [rip + 0xd485]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000057e7f: add byte ptr [rax], al; adc dword ptr [rax], eax; ret; 
0x0000000000016793: add byte ptr [rax], al; add al, 0; add byte ptr [rax], al; lea rax, [rip + 0x24a0]; mov edi, 4; call rax; 
0x0000000000019007: add byte ptr [rax], al; add al, ch; imul eax, dword ptr [rax], 0x8b48ffff; and al, 0x10; add rsp, 0x278; ret; 
0x000000000000f400: add byte ptr [rax], al; add al, ch; js 0xf407; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x0000000000013bfa: add byte ptr [rax], al; add al, ch; mov esi, 0x48fffffb; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x88; ret; 
0x0000000000012b7a: add byte ptr [rax], al; add al, ch; mul byte ptr [rdi + rdi*8 - 1]; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x000000000004d375: add byte ptr [rax], al; add al, ch; ret; 
0x000000000001cd5f: add byte ptr [rax], al; add al, ch; stc; ret 0xfffe; 
0x0000000000034063: add byte ptr [rax], al; add al, ch; xchg eax, ebp; ret 0xfffe; 
0x000000000005ee83: add byte ptr [rax], al; add bh, bh; adc eax, 0x1a64c; add rsp, 0x88; ret; 
0x000000000005e65d: add byte ptr [rax], al; add bh, bh; adc eax, 0x1ae72; add rsp, 0x88; ret; 
0x000000000005e428: add byte ptr [rax], al; add bh, bh; adc eax, 0x1b0a7; add rsp, 0x88; ret; 
0x000000000005e2fd: add byte ptr [rax], al; add bh, bh; adc eax, 0x1b1d2; add rsp, 0x88; ret; 
0x000000000005e25d: add byte ptr [rax], al; add bh, bh; adc eax, 0x1b272; add rsp, 0x88; ret; 
0x000000000005e1ca: add byte ptr [rax], al; add bh, bh; adc eax, 0x1b305; add rsp, 0x88; ret; 
0x000000000005e13a: add byte ptr [rax], al; add bh, bh; adc eax, 0x1b395; add rsp, 0x88; ret; 
0x000000000005e0a8: add byte ptr [rax], al; add bh, bh; adc eax, 0x1b427; add rsp, 0x88; ret; 
0x000000000005e018: add byte ptr [rax], al; add bh, bh; adc eax, 0x1b4b7; add rsp, 0x88; ret; 
0x0000000000036d10: add byte ptr [rax], al; add bh, bh; adc eax, 0x42a6f; lea rax, [rip + 0x400a0]; pop rcx; ret; 
0x000000000001bd79: add byte ptr [rax], al; add bh, bh; adc eax, 0x5dcce; mov rax, qword ptr [rsp + 0x48]; add rsp, 0x108; ret; 
0x000000000000d0e7: add byte ptr [rax], al; add bh, bh; adc eax, 0x6c960; add rsp, 0x398; ret; 
0x000000000000cb27: add byte ptr [rax], al; add bh, bh; adc eax, 0x6cf20; add rsp, 0x398; ret; 
0x0000000000056a2e: add byte ptr [rax], al; add bh, bh; and eax, 0x22d51; ret; 
0x0000000000056a0e: add byte ptr [rax], al; add bh, bh; and eax, 0x22d71; ret; 
0x000000000004d39c: add byte ptr [rax], al; add bh, bh; and eax, 0x2cb2b; nop word ptr cs:[rax + rax]; nop; ret; 
0x000000000004b152: add byte ptr [rax], al; add bh, bh; and eax, 0x2e62d; ret; 
0x000000000004b11a: add byte ptr [rax], al; add bh, bh; and eax, 0x2e665; ret; 
0x000000000004b0e9: add byte ptr [rax], al; add bh, bh; and eax, 0x2e696; ret; 
0x0000000000026674: add byte ptr [rax], al; add bh, bh; and eax, 0x5310b; ret; 
0x0000000000020a02: add byte ptr [rax], al; add bh, bh; and eax, 0x58d7d; ret; 
0x0000000000020949: add byte ptr [rax], al; add bh, bh; and eax, 0x58e36; ret; 
0x0000000000020726: add byte ptr [rax], al; add bh, bh; and eax, 0x59059; ret; 
0x0000000000020667: add byte ptr [rax], al; add bh, bh; and eax, 0x59118; ret; 
0x0000000000020312: add byte ptr [rax], al; add bh, bh; and eax, 0x5946d; ret; 
0x00000000000201a9: add byte ptr [rax], al; add bh, bh; and eax, 0x595d6; ret; 
0x0000000000020185: add byte ptr [rax], al; add bh, bh; and eax, 0x595fa; ret; 
0x000000000002012f: add byte ptr [rax], al; add bh, bh; and eax, 0x59650; ret; 
0x0000000000020114: add byte ptr [rax], al; add bh, bh; and eax, 0x5966b; ret; 
0x000000000002008e: add byte ptr [rax], al; add bh, bh; and eax, 0x596f1; ret; 
0x000000000002006f: add byte ptr [rax], al; add bh, bh; and eax, 0x59710; ret; 
0x000000000001fc1e: add byte ptr [rax], al; add bh, bh; and eax, 0x59b61; ret; 
0x000000000001fa1f: add byte ptr [rax], al; add bh, bh; and eax, 0x59d60; ret; 
0x000000000001f9c6: add byte ptr [rax], al; add bh, bh; and eax, 0x59db9; ret; 
0x000000000001f982: add byte ptr [rax], al; add bh, bh; and eax, 0x59dfd; ret; 
0x000000000001f966: add byte ptr [rax], al; add bh, bh; and eax, 0x59e19; ret; 
0x000000000001f71d: add byte ptr [rax], al; add bh, bh; and eax, 0x5a062; ret; 
0x000000000001f1e4: add byte ptr [rax], al; add bh, bh; and eax, 0x5a59b; ret; 
0x000000000001cbaf: add byte ptr [rax], al; add bh, bh; shr cl, 1; ret; 
0x000000000001a398: add byte ptr [rax], al; add bl, al; lea rax, [rip + 0x7cd]; lea rdi, [rsp + 0x38]; call rax; 
0x000000000000e1cc: add byte ptr [rax], al; add bl, al; lea rax, [rip - 0x2a37]; call rax; 
0x000000000001a120: add byte ptr [rax], al; add bl, al; mov rdi, qword ptr [rsp + 0x18]; lea rax, [rip - 0x3e50]; lea rsi, [rsp + 0x58]; call rax; 
0x00000000000467e6: add byte ptr [rax], al; add bl, ch; adc ecx, dword ptr [rax - 1]; ret 0x8348; 
0x000000000001551e: add byte ptr [rax], al; add bl, ch; ret 0x8b48; 
0x0000000000019df6: add byte ptr [rax], al; add bl, ch; ret; 
0x0000000000019d8c: add byte ptr [rax], al; add bl, ch; sub eax, 0x24bc8b48; add qword ptr [rax], rax; add al, ch; ret 0xfef2; 
0x0000000000013297: add byte ptr [rax], al; add bl, ch; xchg eax, ecx; mov rax, qword ptr [rsp + 0x50]; add rsp, 0x118; ret; 
0x0000000000059b3c: add byte ptr [rax], al; add byte ptr [rax + 0x18478b48], dl; ret; 
0x0000000000059b4c: add byte ptr [rax], al; add byte ptr [rax + 0x2047b60f], dl; ret; 
0x000000000005932a: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x4e72; 
0x0000000000044f89: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x820f; 
0x000000000005a187: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8b49; 
0x0000000000052c5d: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000036a80: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000115ad: add byte ptr [rax], al; add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call 0x115e0; pop rcx; ret; 
0x000000000000f1cd: add byte ptr [rax], al; add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call 0xf170; pop rax; ret; 
0x000000000000ef5d: add byte ptr [rax], al; add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call 0xf220; pop rax; ret; 
0x000000000000eecd: add byte ptr [rax], al; add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call 0xf790; pop rax; ret; 
0x000000000000f4cd: add byte ptr [rax], al; add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call 0xf7f0; pop rax; ret; 
0x000000000001ac4d: add byte ptr [rax], al; add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call qword ptr [rip + 0x5e9ed]; pop rax; ret; 
0x000000000001aafd: add byte ptr [rax], al; add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call qword ptr [rip + 0x5f015]; pop rax; ret; 
0x000000000000f47d: add byte ptr [rax], al; add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call qword ptr [rip + 0x6a38d]; pop rax; ret; 
0x000000000000ef8d: add byte ptr [rax], al; add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; call qword ptr [rip + 0x6ae0d]; pop rax; ret; 
0x000000000001e58d: add byte ptr [rax], al; add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; lea rax, [rip + 4]; call rax; 
0x000000000000efdd: add byte ptr [rax], al; add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; pop rax; ret; 
0x000000000001651d: add byte ptr [rax], al; add byte ptr [rax + 0x48], dl; mov eax, edi; mov byte ptr [rdi], 2; pop rcx; ret; 
0x000000000001650d: add byte ptr [rax], al; add byte ptr [rax + 0x48], dl; mov eax, edi; mov byte ptr [rdi], 3; pop rcx; ret; 
0x0000000000059e2d: add byte ptr [rax], al; add byte ptr [rax + 0x740a163c], al; xor byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000002a4ad: add byte ptr [rax], al; add byte ptr [rax + 0xf00103c], al; test cl, bl; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000004570a: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0xc148; 
0x00000000000570dd: add byte ptr [rax], al; add byte ptr [rax + 3], cl; pop rdx; or byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000003a05b: add byte ptr [rax], al; add byte ptr [rax + 6], bh; lea rdx, [rip + 0x27b7a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000001970d: add byte ptr [rax], al; add byte ptr [rax - 0x18], dl; mov dl, byte ptr [rcx]; add byte ptr [rax], al; pop rcx; ret; 
0x000000000004b482: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000003a060: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0x27b7a; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002c09e: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0x355ac; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000001a327: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0x5bfa7; lea rax, [rip - 0x3348]; call rax; 
0x000000000000dbae: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x10658; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000018b6b: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x209b; lea rdi, [rsp + 0x140]; call rax; 
0x000000000003dcef: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x23f7b; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x0000000000016796: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x24a0; mov edi, 4; call rax; 
0x0000000000039fd6: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x27bec; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000000d930: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x2a466; lea rdi, [rsp + 0x98]; call rax; 
0x000000000000cf62: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x2ae34; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000000c9a2: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x2b3f4; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000001c2c0: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x3d6; call rax; 
0x0000000000016903: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x4e3; lea rdi, [rsp + 0x40]; lea rsi, [rsp + 0xe0]; call rax; 
0x0000000000015330: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x926; call rax; 
0x000000000005bfa9: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x94b1; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bf49: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x9511; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bf10: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x954a; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bed2: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x9588; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005be38: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x9622; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bdf9: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x9661; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000000d73b: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xd42b; lea rdi, [rsp + 0x290]; call rax; 
0x000000000001a0db: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xffffc43b; lea rdi, [rsp + 0x98]; call rax; 
0x0000000000019cc5: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xffffd8c1; lea rdi, [rsp + 0xc0]; lea rsi, [rsp + 0xe0]; call rax; 
0x00000000000199a3: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xffffdca3; lea rdi, [rsp + 0xc0]; lea rsi, [rsp + 0xe0]; call rax; 
0x0000000000018eb1: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xffffe2a5; call rax; 
0x0000000000017d59: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xffffe66d; lea rdi, [rsp + 0xd8]; lea rdx, [rsp + 0xf0]; call rax; 
0x0000000000017d91: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xffffe775; call rax; 
0x000000000001c9bc: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xfffff87a; xor esi, esi; call rax; 
0x0000000000039903: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x2825f; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000003188a: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x2ff5c; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000003b348: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; je 0x3b373; and byte ptr [rcx + rcx*4 - 9], cl; call rax; 
0x000000000000c9f9: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; mov ah, 0x24; call 0x4800ca05; lea edx, [rsp + 0x88]; call rax; 
0x000000000000cfb9: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; mov ah, 0x24; call 0x4800cfc5; lea edx, [rsp + 0x88]; call rax; 
0x0000000000017dba: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; mov ah, 0x24; fadd dword ptr [rax]; add byte ptr [rax], al; call rax; 
0x000000000000da4a: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; mov ah, 0x24; rol byte ptr [rax], 1; add byte ptr [rax], al; call rax; 
0x000000000005bdbb: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; or eax, 0x95ff; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x0000000000017357: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call rax; 
0x0000000000014553: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; push rsp; and al, 0x18; call rax; 
0x000000000000d98f: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; push rsp; and al, 0x50; call rax; 
0x0000000000039c05: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x27f8d; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000005857f: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0xd073; mov edx, 2; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x000000000001a111: add byte ptr [rax], al; add byte ptr [rax - 0x74b7efb8], cl; and al, 0x20; add rsp, 0xd8; ret; 
0x00000000000124f2: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001e5ae: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001515a: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x000000000000c472: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x40; ret; 
0x00000000000132cc: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add al, 0x24; pop rcx; ret; 
0x0000000000012eac: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x118; ret; 
0x000000000001346a: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x38; ret; 
0x000000000001799d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x40; ret; 
0x0000000000017635: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x50; ret; 
0x000000000001163d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000001118d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x1b8; ret; 
0x0000000000013b88: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x50; ret; 
0x00000000000106b2: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x68; ret; 
0x000000000001355a: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x88; ret; 
0x0000000000011cb3: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0xb8; ret; 
0x000000000001146c: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x20; mov rdx, qword ptr [rsp + 0x28]; add rsp, 0x88; ret; 
0x000000000001b1b9: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x28; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x228; ret; 
0x000000000001054d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x40; add rsp, 0x108; ret; 
0x000000000001b4eb: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x68; mov rdx, qword ptr [rsp + 0x70]; add rsp, 0x2c8; ret; 
0x0000000000015385: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x78; mov rdx, qword ptr [rsp + 0x80]; add rsp, 0x148; ret; 
0x0000000000010161: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x108; ret; 
0x0000000000013963: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x88; ret; 
0x000000000000fc8b: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0xe0; ret; 
0x0000000000015cac: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x60; ret; 
0x00000000000458dd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; call 0x24509431; call 0xffffffff834c6e5f; ret; 
0x0000000000041fc6: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; jge 0x41fcd; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000001a081: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; js 0x1a090; lea rax, [rip + 0x961]; call rax; 
0x0000000000056d7c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; jo 0x56d9a; ret; 
0x0000000000026811: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add ebx, dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x0000000000012cfd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xc8; ret; 
0x000000000005b94c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x38; call rax; 
0x000000000003cd7d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; lea rdx, [rip + 0x3a7f6]; ret; 
0x000000000003894d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8b49; 
0x0000000000043090: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x12e8; 
0x0000000000043171: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x31e8; 
0x0000000000042f62: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x40e8; 
0x0000000000043046: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x5ce8; 
0x0000000000043228: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x7ae8; 
0x0000000000043124: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x7ee8; 
0x0000000000042f15: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x8de8; 
0x0000000000042ff9: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xa9e8; 
0x00000000000431ef: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xb3e8; 
0x00000000000430da: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xc8e8; 
0x0000000000042ec8: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xdae8; 
0x00000000000431b6: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xece8; 
0x0000000000042faf: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xf3e8; 
0x000000000002674c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx - 1]; and eax, 0x5302f; pop rbx; ret; 
0x00000000000266f6: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx - 1]; and eax, 0x53085; pop rbx; ret; 
0x00000000000266b0: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx - 1]; and eax, 0x530cb; pop rbx; ret; 
0x000000000002f07d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x75]; sbb dword ptr [rax + 0x39], ecx; ret; 
0x000000000003cfcb: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rbp + rcx*4 + 0x73]; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000047eb2: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fsubp st(0); ret; 
0x000000000005ee7b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1a64c]; add rsp, 0x88; ret; 
0x000000000005e655: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1ae72]; add rsp, 0x88; ret; 
0x000000000005e420: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b0a7]; add rsp, 0x88; ret; 
0x000000000005e2f5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b1d2]; add rsp, 0x88; ret; 
0x000000000005e255: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b272]; add rsp, 0x88; ret; 
0x000000000005e1c2: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b305]; add rsp, 0x88; ret; 
0x000000000005e132: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b395]; add rsp, 0x88; ret; 
0x000000000005e0a0: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b427]; add rsp, 0x88; ret; 
0x000000000005e010: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b4b7]; add rsp, 0x88; ret; 
0x000000000001febd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jle 0x1fed4; ret; 
0x000000000005d4bd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov rax, rdi; ret; 
0x00000000000516f4: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out 0xe8, al; int1; ret 0xffff; 
0x0000000000037c07: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call rbx; 
0x0000000000059e52: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x15ff; 
0x000000000005e5b3: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1f0f; 
0x000000000005e5fe: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x6666; 
0x00000000000449fd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000005e208: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x9066; 
0x000000000005471d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000002467f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000015516: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; test byte ptr [rax + rdi*4], ah; add byte ptr [rax], al; add bl, ch; ret 0x8b48; 
0x000000000003e518: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; test dword ptr [rax - 0x77], 0xbb3ae8de; cld; dec dword ptr [rax - 0x77]; ret; 
0x0000000000027bc4: add byte ptr [rax], al; add byte ptr [rax - 0x7af0b407], al; ret 1; 
0x0000000000010217: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000098ad: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x0000000000045dcc: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x00000000000103a7: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4811; 
0x000000000004ade8: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4920; 
0x000000000000a41a: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000005dc3d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], dl; jmp qword ptr [rax]; 
0x0000000000040025: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret; 
0x000000000002a4b7: add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000003e358: add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret; 
0x0000000000019e1d: add byte ptr [rax], al; add byte ptr [rax - 1], dl; adc eax, 0x5f641; pop rax; ret; 
0x0000000000059b3a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x18478b48], dl; ret; 
0x0000000000059b4a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x2047b60f], dl; ret; 
0x0000000000052c5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000038b0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000001e58b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; lea rax, [rip + 4]; call rax; 
0x000000000000efdb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x48], dl; mov dword ptr [rsp], edi; pop rax; ret; 
0x0000000000059e2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x740a163c], al; xor byte ptr [rax - 1], cl; ret 0x3948; 
0x00000000000570db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 3], cl; pop rdx; or byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000018b69: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x209b; lea rdi, [rsp + 0x140]; call rax; 
0x0000000000013468: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x38; ret; 
0x00000000000106b0: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x68; ret; 
0x0000000000013961: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x88; ret; 
0x000000000003cd7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; lea rdx, [rip + 0x3a7f6]; ret; 
0x000000000003894b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8b49; 
0x000000000002f07b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x75]; sbb dword ptr [rax + 0x39], ecx; ret; 
0x000000000001febb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jle 0x1fed4; ret; 
0x00000000000449fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000005471b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000000098ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x000000000001f12b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000005dc3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], dl; jmp qword ptr [rax]; 
0x0000000000019e1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], dl; adc eax, 0x5f641; pop rax; ret; 
0x000000000005d677: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000090eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x1459930], cl; jmp qword ptr [rsi - 0x2d]; 
0x000000000005effb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000059a89: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rdi + 0x14]; ret; 
0x0000000000059a69: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movzx eax, word ptr [rdi + 0x18]; ret; 
0x0000000000059a29: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movzx eax, word ptr [rdi + 4]; ret; 
0x000000000001c019: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x0000000000017010: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x0000000000017150: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x20; ret; 
0x0000000000040397: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000016f0e: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x0000000000010f20: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x38; ret; 
0x000000000003e8d9: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000001b967: add byte ptr [rax], al; add byte ptr [rax], al; call 0x1b1d0; add rsp, 0x38; ret; 
0x000000000000a4d9: add byte ptr [rax], al; add byte ptr [rax], al; cmp qword ptr [rax - 8], 0; sete al; pop rcx; ret; 
0x000000000005f37c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; ret; 
0x0000000000018b6a: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x209b]; lea rdi, [rsp + 0x140]; call rax; 
0x000000000001c2bf: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x3d6]; call rax; 
0x000000000001532f: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x926]; call rax; 
0x000000000001a0da: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip - 0x3bc5]; lea rdi, [rsp + 0x98]; call rax; 
0x0000000000040a5c: add byte ptr [rax], al; add byte ptr [rax], al; mov al, 1; ret; 
0x0000000000050d77: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rbx + 8], 0; xor eax, eax; pop rbx; ret; 
0x0000000000017f43: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi + 0xc], 0; ret; 
0x0000000000017f35: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi + 4], 0; mov dword ptr [rdi + 8], 0; mov dword ptr [rdi + 0xc], 0; ret; 
0x0000000000017f3c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi + 8], 0; mov dword ptr [rdi + 0xc], 0; ret; 
0x0000000000014824: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rsp + 0x18]; mov edx, dword ptr [rsp + 0x1c]; add rsp, 0x78; ret; 
0x000000000005a9e9: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x20], 0; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000002a889: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x000000000005a9f1: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000001baef: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rsi; pop rcx; ret; 
0x000000000001febc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rdi; ret; 
0x000000000005d4ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x18]; ret; 
0x0000000000059b2c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x10]; ret; 
0x0000000000056cbc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; mov rdx, qword ptr [rdi + 0x10]; ret; 
0x0000000000012eab: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x0000000000013469: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000001799c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x000000000001118c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x1b8; ret; 
0x00000000000106b1: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x0000000000011cb2: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xb8; ret; 
0x000000000001146b: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x20]; mov rdx, qword ptr [rsp + 0x28]; add rsp, 0x88; ret; 
0x000000000001b1b8: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x228; ret; 
0x000000000001b4ea: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x68]; mov rdx, qword ptr [rsp + 0x70]; add rsp, 0x2c8; ret; 
0x0000000000010160: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x108; ret; 
0x0000000000013962: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x88; ret; 
0x000000000000fc8a: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0xe0; ret; 
0x0000000000015cab: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x60; ret; 
0x000000000001e5ad: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000015159: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x000000000000c471: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x40; ret; 
0x000000000003cd7c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; lea rdx, [rip + 0x3a7f6]; ret; 
0x0000000000035c28: add byte ptr [rax], al; add byte ptr [rax], al; mov rbx, rax; dec qword ptr [rax - 8]; mov rdi, r14; call qword ptr [rbp]; 
0x000000000005d4bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, rsi; mov rax, rdi; ret; 
0x00000000000599b4: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rax + 0x1c], dx; mov cx, 1; mov word ptr [rax], cx; ret; 
0x000000000005b5bc: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdi + 0x30]; and al, 4; shr al, 2; ret; 
0x00000000000377a7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov al, 1; ret; 
0x000000000001c007: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; ret; 
0x0000000000053538: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rdi + 0x20]; mov rdx, qword ptr [rdi + 0x28]; ret; 
0x000000000004b099: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x0000000000040a69: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000059a7b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, dword ptr [rdi + 0x10]; ret; 
0x0000000000059a8a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, dword ptr [rdi + 0x14]; ret; 
0x0000000000059b3b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000059a5b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, rdi; ret; 
0x0000000000059b4b: add byte ptr [rax], al; add byte ptr [rax], al; nop; movzx eax, byte ptr [rdi + 0x20]; ret; 
0x0000000000059a6a: add byte ptr [rax], al; add byte ptr [rax], al; nop; movzx eax, word ptr [rdi + 0x18]; ret; 
0x0000000000059a2a: add byte ptr [rax], al; add byte ptr [rax], al; nop; movzx eax, word ptr [rdi + 4]; ret; 
0x000000000004d3ab: add byte ptr [rax], al; add byte ptr [rax], al; nop; ret; 
0x000000000001c01a: add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x000000000005d678: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000004eecc: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000001970c: add byte ptr [rax], al; add byte ptr [rax], al; push rax; call 0x1a8a0; pop rcx; ret; 
0x0000000000019e1c: add byte ptr [rax], al; add byte ptr [rax], al; push rax; call qword ptr [rip + 0x5f641]; pop rax; ret; 
0x000000000001e58c: add byte ptr [rax], al; add byte ptr [rax], al; push rax; mov qword ptr [rsp], rdi; lea rax, [rip + 4]; call rax; 
0x000000000000efdc: add byte ptr [rax], al; add byte ptr [rax], al; push rax; mov qword ptr [rsp], rdi; pop rax; ret; 
0x000000000000fa5c: add byte ptr [rax], al; add byte ptr [rax], al; push rax; xor eax, eax; pop rcx; ret; 
0x000000000000bbd4: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000004ef48: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000004cb6b: add byte ptr [rax], al; add byte ptr [rax], al; xorps xmm0, xmm0; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0xc], xmm0; ret; 
0x00000000000099e6: add byte ptr [rax], al; add byte ptr [rbp + 0x39], cl; ret 0x830f; 
0x000000000005db42: add byte ptr [rax], al; add byte ptr [rbp + 0x39], cl; ret 0x870f; 
0x00000000000454c9: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x3c], cl; mov esi, 8; mov rdi, r15; lea rbx, [rip - 0x3078f]; call rbx; 
0x00000000000366dc: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x7b], cl; dec dword ptr [rax - 0x75]; jnp 0x366e6; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000297a9: add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; pop rsi; adc cl, ch; ret; 
0x0000000000053d68: add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret; 
0x000000000003720f: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsi; pop r15; jmp rcx; 
0x0000000000037035: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x000000000003559e: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000040302: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000004ed2f: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x000000000005c259: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000014825: add byte ptr [rax], al; add byte ptr [rbx - 0x74e7dbbc], cl; push rsp; and al, 0x1c; add rsp, 0x78; ret; 
0x000000000001db6e: add byte ptr [rax], al; add byte ptr [rbx - 0x76dfdbbc], cl; and al, 0x58; mov edi, dword ptr [rsp + 0x58]; lea rax, [rip + 0x3be8c]; call rax; 
0x00000000000341a4: add byte ptr [rax], al; add byte ptr [rbx - 0xb7f83f], al; ret 0x8948; 
0x0000000000020b8a: add byte ptr [rax], al; add byte ptr [rbx - 1], bl; and eax, 0x58bf4; pop rbx; ret; 
0x00000000000203ef: add byte ptr [rax], al; add byte ptr [rbx - 1], bl; and eax, 0x5938f; pop rbx; ret; 
0x000000000001fdd7: add byte ptr [rax], al; add byte ptr [rbx - 1], bl; and eax, 0x599a7; pop rbx; ret; 
0x000000000001fc83: add byte ptr [rax], al; add byte ptr [rbx - 1], bl; and eax, 0x59afb; pop rbx; ret; 
0x000000000001fb11: add byte ptr [rax], al; add byte ptr [rbx - 1], bl; and eax, 0x59c6d; pop rbx; ret; 
0x000000000004ac2d: add byte ptr [rax], al; add byte ptr [rcx + 0x148d48c9], cl; add dword ptr [rax - 0x7d], ecx; ret 0xb820; 
0x000000000002aefc: add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000028292: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; add al, 0x89; add rax, r9; jmp rax; 
0x000000000003a39a: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; xor al, 0xb4; add rsi, r12; jmp rsi; 
0x00000000000354cd: add byte ptr [rax], al; add byte ptr [rcx + 0x69], cl; ret; 
0x000000000000bf8a: add byte ptr [rax], al; add byte ptr [rcx + rax], ah; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000032fb5: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; mov rsi, qword ptr [rsp + 0x198]; call rbx; 
0x0000000000045b1c: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; mov rsi, qword ptr [rsp + 0x330]; call rbx; 
0x0000000000038867: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x000000000002f200: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; lea rbx, [rip - 0x1a4ad]; call rbx; 
0x000000000003e423: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; add rdi, 8; lea rsi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x000000000005858b: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rbx + 0x18]; 
0x000000000002d7cf: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; lea rbx, [rip - 0x18a7c]; call rbx; 
0x0000000000032fa4: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; lea rbx, [rip - 0x1e251]; call rbx; 
0x00000000000454d2: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; lea rbx, [rip - 0x3078f]; call rbx; 
0x0000000000046d2e: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; lea rbx, [rip - 0x31fdb]; call rbx; 
0x000000000004f8c3: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 6], al; lea rsi, [rip + 0x14a78]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000045b0b: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; lea rbx, [rip - 0x30db8]; call rbx; 
0x00000000000090ed: add byte ptr [rax], al; add byte ptr [rcx - 0x1459930], cl; jmp qword ptr [rsi - 0x2d]; 
0x00000000000312d1: add byte ptr [rax], al; add byte ptr [rcx - 0x39], cl; ret; 
0x0000000000051ecb: add byte ptr [rax], al; add byte ptr [rcx - 0x3a], al; and al, 8; add cl, ch; ret; 
0x000000000005effd: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000005409b: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4902; 
0x0000000000057c0a: add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret 0x144; 
0x0000000000059162: add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret 0xff48; 
0x000000000005cc88: add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret; 
0x0000000000010213: add byte ptr [rax], al; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000103a3: add byte ptr [rax], al; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4811; 
0x0000000000017214: add byte ptr [rax], al; add byte ptr [rcx], al; jne 0x17227; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xd8; ret; 
0x00000000000172e3: add byte ptr [rax], al; add byte ptr [rcx], al; jne 0x172f6; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xd8; ret; 
0x0000000000018da2: add byte ptr [rax], al; add byte ptr [rcx], al; lea rax, [rip + 0x39b3]; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000019fcf: add byte ptr [rax], al; add byte ptr [rcx], al; lea rax, [rip - 0x259a]; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000036a7c: add byte ptr [rax], al; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000003e0b3: add byte ptr [rax], al; add byte ptr [rcx], cl; ret 0x298b; 
0x0000000000033ddf: add byte ptr [rax], al; add byte ptr [rcx], cl; ret 0xc148; 
0x000000000005ebe3: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x1a8ea]; add rsp, 0x28; ret; 
0x000000000005eab3: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x1aa1a]; add rsp, 0x28; ret; 
0x000000000005e84c: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x1ac81]; add rsp, 0x28; ret; 
0x000000000005e75f: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x1ad6e]; add rsp, 0x28; ret; 
0x000000000005e6b1: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x1ae1c]; add rsp, 0x88; ret; 
0x000000000005e47c: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x1b051]; add rsp, 0x88; ret; 
0x0000000000040453: add byte ptr [rax], al; add byte ptr [rcx], dh; sar bh, 0x15; add dl, byte ptr [rcx - 0x77cfffd]; push qword ptr [rbx + rax*2 - 0x77]; ret 0x2b8; 
0x0000000000010d4f: add byte ptr [rax], al; add byte ptr [rcx], dh; shl byte ptr [rcx + rax], 0xf; mov dh, 0xc0; add rsp, 0x18; ret; 
0x000000000005cc81: add byte ptr [rax], al; add byte ptr [rcx], dh; shr cl, 0xe8; add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret; 
0x0000000000056d60: add byte ptr [rax], al; add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0x10; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000000a567: add byte ptr [rax], al; add byte ptr [rdi + 0x74c08503], al; ret; 
0x000000000005b5bd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x47; xor byte ptr [rsp + rax], ah; shr al, 2; ret; 
0x0000000000054084: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xc; js 0xffffffff834d479c; ret 0x4c02; 
0x000000000000dae8: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0x100], eax; lea rax, [rip + 0x85d6]; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000017e07: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0x140], eax; lea rax, [rip - 0x1dc9]; lea rsi, [rsp + 0x140]; call rax; 
0x000000000002fc81: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, ebp; ret 0x8366; 
0x00000000000194b7: add byte ptr [rax], al; add byte ptr [rdx + 0x1b], bh; call rax; 
0x000000000003e432: add byte ptr [rax], al; add byte ptr [rdx + 0xa8], bh; call rbx; 
0x0000000000056d77: add byte ptr [rax], al; add byte ptr [rdx + 6], bh; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x0000000000038862: add byte ptr [rax], al; add byte ptr [rdx + 8], bh; mov rdi, r12; call rbx; 
0x0000000000037c02: add byte ptr [rax], al; add byte ptr [rdx + 8], bh; mov rdi, rbp; call rbx; 
0x0000000000059a8b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rdi + 0x14]; ret; 
0x0000000000059a6b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movzx eax, word ptr [rdi + 0x18]; ret; 
0x0000000000059a2b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movzx eax, word ptr [rdi + 4]; ret; 
0x000000000001c01b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x000000000001f746: add byte ptr [rax], al; add cl, ch; jb 0x1f7bb; add byte ptr [rax], al; ret; 
0x000000000002c57f: add byte ptr [rax], al; add cl, ch; ret 0xfffb; 
0x0000000000050d78: add byte ptr [rax], al; add dh, al; or byte ptr [r8], al; xor eax, eax; pop rbx; ret; 
0x00000000000592da: add byte ptr [rax], al; add dh, dh; ret 0xf01; 
0x000000000001666b: add byte ptr [rax], al; add dword ptr [rax - 0x73], ecx; add eax, 0x37bb; lea rdi, [rsp + 0x58]; call rax; 
0x0000000000018da3: add byte ptr [rax], al; add dword ptr [rax - 0x73], ecx; add eax, 0x39b3; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000019fd0: add byte ptr [rax], al; add dword ptr [rax - 0x73], ecx; add eax, 0xffffda66; lea rdi, [rsp + 0x28]; call rax; 
0x000000000002a35b: add byte ptr [rax], al; add dword ptr [rax], eax; setb cl; and cl, al; movzx eax, cl; ret; 
0x00000000000172e4: add byte ptr [rax], al; add dword ptr [rbp + 0xd], esi; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xd8; ret; 
0x0000000000017215: add byte ptr [rax], al; add dword ptr [rbp + 0xd], esi; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xd8; ret; 
0x000000000005ef96: add byte ptr [rax], al; add eax, 0x83127388; jmp qword ptr [rax]; 
0x0000000000040c3d: add byte ptr [rax], al; add rsp, 0x108; pop rbx; pop r14; ret; 
0x000000000000c8ec: add byte ptr [rax], al; add rsp, 0x128; ret; 
0x0000000000015393: add byte ptr [rax], al; add rsp, 0x148; ret; 
0x0000000000011858: add byte ptr [rax], al; add rsp, 0x158; ret; 
0x000000000004cc72: add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000000ebef: add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000000ea27: add byte ptr [rax], al; add rsp, 0x1c8; ret; 
0x0000000000028226: add byte ptr [rax], al; add rsp, 0x20; pop rbx; pop r14; ret; 
0x0000000000017101: add byte ptr [rax], al; add rsp, 0x20; ret; 
0x000000000001e13f: add byte ptr [rax], al; add rsp, 0x278; ret; 
0x000000000001dfa9: add byte ptr [rax], al; add rsp, 0x288; ret; 
0x000000000005ed01: add byte ptr [rax], al; add rsp, 0x28; pop rbx; pop r14; jmp rax; 
0x0000000000040399: add byte ptr [rax], al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000009fac: add byte ptr [rax], al; add rsp, 0x28; ret; 
0x0000000000043c2b: add byte ptr [rax], al; add rsp, 0x30; pop rbx; pop r14; pop r15; ret; 
0x000000000000d87c: add byte ptr [rax], al; add rsp, 0x348; ret; 
0x000000000000e2b7: add byte ptr [rax], al; add rsp, 0x38; ret; 
0x0000000000015efc: add byte ptr [rax], al; add rsp, 0x40; ret; 
0x000000000003e8db: add byte ptr [rax], al; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000000f788: add byte ptr [rax], al; add rsp, 0x48; ret; 
0x000000000001e3b9: add byte ptr [rax], al; add rsp, 0x58; ret; 
0x000000000001be3f: add byte ptr [rax], al; add rsp, 0x88; ret; 
0x0000000000053673: add byte ptr [rax], al; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x000000000003bd60: add byte ptr [rax], al; add rsp, 0xb0; pop rbx; pop r14; pop r15; ret; 
0x000000000001f350: add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000bf8b: add byte ptr [rax], al; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000013631: add byte ptr [rax], al; call 0x124c0; add rsp, 0x98; ret; 
0x0000000000013bfb: add byte ptr [rax], al; call 0x137c0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x88; ret; 
0x0000000000016295: add byte ptr [rax], al; call 0x161b0; mov rdi, qword ptr [rsp + 8]; lea rsi, [rip + 0x5fe88]; lea rax, [rip - 0xacbf]; call rax; 
0x000000000001b925: add byte ptr [rax], al; call 0x1ae10; add rsp, 0x18; ret; 
0x000000000001b969: add byte ptr [rax], al; call 0x1b1d0; add rsp, 0x38; ret; 
0x000000000001da55: add byte ptr [rax], al; call 0x1d330; add rsp, 0x18; ret; 
0x000000000005dc81: add byte ptr [rax], al; call 0x5db10; pop rcx; ret; 
0x0000000000019a6d: add byte ptr [rax], al; call 0x9060; ud2; lea rax, [rip + 0x1083]; lea rdi, [rsp + 0xb0]; call rax; 
0x000000000001bce0: add byte ptr [rax], al; call 0x9060; ud2; lea rax, [rip + 0x2520]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000001a3bc: add byte ptr [rax], al; call 0x9060; ud2; lea rax, [rip + 0x8c4]; lea rdi, [rsp + 0x18]; call rax; 
0x0000000000019d97: add byte ptr [rax], al; call 0x9060; ud2; lea rax, [rip + 0xd59]; lea rdi, [rsp + 0xb0]; call rax; 
0x000000000001697e: add byte ptr [rax], al; call 0x9060; ud2; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x40ed]; call rax; 
0x000000000001c788: add byte ptr [rax], al; call 0x9070; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000010c3d: add byte ptr [rax], al; call 0x9078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x0000000000019008: add byte ptr [rax], al; call 0x9078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x278; ret; 
0x000000000001167f: add byte ptr [rax], al; call 0x9078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x0000000000014331: add byte ptr [rax], al; call 0x9078; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x58; ret; 
0x0000000000012b7b: add byte ptr [rax], al; call 0x9078; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x000000000000d4d7: add byte ptr [rax], al; call 0xc4b0; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x2b0d6]; call rax; 
0x000000000000c595: add byte ptr [rax], al; call 0xc4b0; mov rdi, qword ptr [rsp + 8]; lea rsi, [rip + 0x69588]; lea rax, [rip - 0xfbf]; call rax; 
0x000000000000f401: add byte ptr [rax], al; call 0xf580; add rsp, 0x28; ret; 
0x000000000005823d: add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000005ddd8: add byte ptr [rax], al; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000005a113: add byte ptr [rax], al; call qword ptr [rax + 0x18]; mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x0000000000047489: add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x00000000000359f7: add byte ptr [rax], al; call qword ptr [rax + 0x28]; 
0x000000000005adff: add byte ptr [rax], al; call qword ptr [rbx + 0x20]; 
0x0000000000047527: add byte ptr [rax], al; call qword ptr [rcx + 0x20]; 
0x000000000005ee84: add byte ptr [rax], al; call qword ptr [rip + 0x1a64c]; add rsp, 0x88; ret; 
0x000000000005e65e: add byte ptr [rax], al; call qword ptr [rip + 0x1ae72]; add rsp, 0x88; ret; 
0x000000000005e429: add byte ptr [rax], al; call qword ptr [rip + 0x1b0a7]; add rsp, 0x88; ret; 
0x000000000005e2fe: add byte ptr [rax], al; call qword ptr [rip + 0x1b1d2]; add rsp, 0x88; ret; 
0x000000000005e25e: add byte ptr [rax], al; call qword ptr [rip + 0x1b272]; add rsp, 0x88; ret; 
0x000000000005e1cb: add byte ptr [rax], al; call qword ptr [rip + 0x1b305]; add rsp, 0x88; ret; 
0x000000000005e13b: add byte ptr [rax], al; call qword ptr [rip + 0x1b395]; add rsp, 0x88; ret; 
0x000000000005e0a9: add byte ptr [rax], al; call qword ptr [rip + 0x1b427]; add rsp, 0x88; ret; 
0x000000000005e019: add byte ptr [rax], al; call qword ptr [rip + 0x1b4b7]; add rsp, 0x88; ret; 
0x0000000000036d11: add byte ptr [rax], al; call qword ptr [rip + 0x42a6f]; lea rax, [rip + 0x400a0]; pop rcx; ret; 
0x000000000001bd7a: add byte ptr [rax], al; call qword ptr [rip + 0x5dcce]; mov rax, qword ptr [rsp + 0x48]; add rsp, 0x108; ret; 
0x000000000000d0e8: add byte ptr [rax], al; call qword ptr [rip + 0x6c960]; add rsp, 0x398; ret; 
0x000000000000cb28: add byte ptr [rax], al; call qword ptr [rip + 0x6cf20]; add rsp, 0x398; ret; 
0x000000000000c793: add byte ptr [rax], al; call rax; 
0x000000000001519e: add byte ptr [rax], al; call rax; add rsp, 0x28; ret; 
0x000000000001c1d6: add byte ptr [rax], al; call rax; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001e59a: add byte ptr [rax], al; call rax; pop rcx; ret; 
0x000000000002d7ee: add byte ptr [rax], al; call rbx; 
0x000000000000a4db: add byte ptr [rax], al; cmp qword ptr [rax - 8], 0; sete al; pop rcx; ret; 
0x000000000004cd84: add byte ptr [rax], al; cmp si, 2; sete al; ret; 
0x000000000005ae6e: add byte ptr [rax], al; dec r14; je 0x5ae83; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000005f37e: add byte ptr [rax], al; endbr64; ret; 
0x000000000005dd36: add byte ptr [rax], al; je 0x5dd3e; xor eax, eax; pop rcx; ret; 
0x0000000000057e35: add byte ptr [rax], al; jmp rax; 
0x00000000000454ca: add byte ptr [rax], al; lea r15, [rax + rax*2]; mov esi, 8; mov rdi, r15; lea rbx, [rip - 0x3078f]; call rbx; 
0x00000000000366dd: add byte ptr [rax], al; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000039b03: add byte ptr [rax], al; lea r8, [rip + 0x28078]; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000002c373: add byte ptr [rax], al; lea r8, [rip + 0x35308]; movsxd rcx, dword ptr [r8 + rbp*4]; add rcx, r8; jmp rcx; 
0x000000000000ea1b: add byte ptr [rax], al; lea r8, [rip + 0x6746c]; call 0x11490; add rsp, 0x1c8; ret; 
0x000000000002a393: add byte ptr [rax], al; lea r9, [rip + 0x37128]; movsxd rax, dword ptr [r9 + rax*4]; add rax, r9; jmp rax; 
0x000000000000dbaf: add byte ptr [rax], al; lea rax, [rip + 0x10658]; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000018b6c: add byte ptr [rax], al; lea rax, [rip + 0x209b]; lea rdi, [rsp + 0x140]; call rax; 
0x000000000003dcf0: add byte ptr [rax], al; lea rax, [rip + 0x23f7b]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x0000000000016797: add byte ptr [rax], al; lea rax, [rip + 0x24a0]; mov edi, 4; call rax; 
0x000000000001bc0c: add byte ptr [rax], al; lea rax, [rip + 0x25fb]; lea rdi, [rsp + 0x50]; call rax; 
0x0000000000039fd7: add byte ptr [rax], al; lea rax, [rip + 0x27bec]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000000d931: add byte ptr [rax], al; lea rax, [rip + 0x2a466]; lea rdi, [rsp + 0x98]; call rax; 
0x000000000000d4fb: add byte ptr [rax], al; lea rax, [rip + 0x2a89c]; lea rdi, [rsp + 0x220]; call rax; 
0x000000000000cf63: add byte ptr [rax], al; lea rax, [rip + 0x2ae34]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000000c9a3: add byte ptr [rax], al; lea rax, [rip + 0x2b3f4]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000001c2c1: add byte ptr [rax], al; lea rax, [rip + 0x3d6]; call rax; 
0x0000000000016904: add byte ptr [rax], al; lea rax, [rip + 0x4e3]; lea rdi, [rsp + 0x40]; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000000d578: add byte ptr [rax], al; lea rax, [rip + 0x4ef9f]; lea rdi, [rsp + 0x260]; mov qword ptr [rsp + 0x40], rdi; call rax; 
0x000000000000daf1: add byte ptr [rax], al; lea rax, [rip + 0x85d6]; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000015331: add byte ptr [rax], al; lea rax, [rip + 0x926]; call rax; 
0x000000000005bfaa: add byte ptr [rax], al; lea rax, [rip + 0x94b1]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bf4a: add byte ptr [rax], al; lea rax, [rip + 0x9511]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bf11: add byte ptr [rax], al; lea rax, [rip + 0x954a]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bed3: add byte ptr [rax], al; lea rax, [rip + 0x9588]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005be39: add byte ptr [rax], al; lea rax, [rip + 0x9622]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bdfa: add byte ptr [rax], al; lea rax, [rip + 0x9661]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000000d73c: add byte ptr [rax], al; lea rax, [rip + 0xd42b]; lea rdi, [rsp + 0x290]; call rax; 
0x00000000000167c1: add byte ptr [rax], al; lea rax, [rip - 0x151a]; xor esi, esi; call rax; 
0x0000000000017d92: add byte ptr [rax], al; lea rax, [rip - 0x188b]; call rax; 
0x0000000000017d5a: add byte ptr [rax], al; lea rax, [rip - 0x1993]; lea rdi, [rsp + 0xd8]; lea rdx, [rsp + 0xf0]; call rax; 
0x0000000000018eb2: add byte ptr [rax], al; lea rax, [rip - 0x1d5b]; call rax; 
0x0000000000017e10: add byte ptr [rax], al; lea rax, [rip - 0x1dc9]; lea rsi, [rsp + 0x140]; call rax; 
0x00000000000199a4: add byte ptr [rax], al; lea rax, [rip - 0x235d]; lea rdi, [rsp + 0xc0]; lea rsi, [rsp + 0xe0]; call rax; 
0x0000000000019cc6: add byte ptr [rax], al; lea rax, [rip - 0x273f]; lea rdi, [rsp + 0xc0]; lea rsi, [rsp + 0xe0]; call rax; 
0x0000000000018820: add byte ptr [rax], al; lea rax, [rip - 0x2999]; lea rdi, [rsp + 0x170]; call rax; 
0x000000000001a0dc: add byte ptr [rax], al; lea rax, [rip - 0x3bc5]; lea rdi, [rsp + 0x98]; call rax; 
0x000000000001c9bd: add byte ptr [rax], al; lea rax, [rip - 0x786]; xor esi, esi; call rax; 
0x00000000000505df: add byte ptr [rax], al; lea rbx, [rip + 0x13e00]; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x0000000000050e01: add byte ptr [rax], al; lea rcx, [rip + 0x1363e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000034c67: add byte ptr [rax], al; lea rcx, [rip + 0x2cdd0]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000034c0b: add byte ptr [rax], al; lea rcx, [rip + 0x2ce14]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000032594: add byte ptr [rax], al; lea rcx, [rip + 0x2f2cf]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002facf: add byte ptr [rax], al; lea rcx, [rip + 0x31c30]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor edx, edx; jmp rax; 
0x000000000002aeac: add byte ptr [rax], al; lea rcx, [rip + 0x36667]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029e21: add byte ptr [rax], al; lea rcx, [rip + 0x37406]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029eab: add byte ptr [rax], al; lea rcx, [rip + 0x375a8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000028355: add byte ptr [rax], al; lea rcx, [rip + 0x38d1a]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000005bdbc: add byte ptr [rax], al; lea rcx, [rip + 0x95ff]; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x0000000000018ad5: add byte ptr [rax], al; lea rcx, [rsp + 0x1f8]; call rax; 
0x0000000000039904: add byte ptr [rax], al; lea rdi, [rip + 0x2825f]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000003188b: add byte ptr [rax], al; lea rdi, [rip + 0x2ff5c]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x00000000000108a9: add byte ptr [rax], al; lea rdi, [rip + 0x4fbb8]; lea rdx, [rip + 0x65697]; lea rax, [rip - 0x5250]; mov esi, 0x49; call rax; 
0x00000000000104b9: add byte ptr [rax], al; lea rdi, [rip + 0x4ffa8]; lea rdx, [rip + 0x65a87]; lea rax, [rip - 0x4e60]; mov esi, 0x49; call rax; 
0x000000000000daf8: add byte ptr [rax], al; lea rdi, [rsp + 0x100]; call rax; 
0x000000000001a8d0: add byte ptr [rax], al; lea rdi, [rsp + 0x10]; call rax; 
0x00000000000188f8: add byte ptr [rax], al; lea rdi, [rsp + 0x140]; call rax; 
0x000000000000cb3d: add byte ptr [rax], al; lea rdi, [rsp + 0x178]; call rax; 
0x0000000000014564: add byte ptr [rax], al; lea rdi, [rsp + 0x18]; call rax; 
0x000000000000cd95: add byte ptr [rax], al; lea rdi, [rsp + 0x190]; call rax; 
0x0000000000018af0: add byte ptr [rax], al; lea rdi, [rsp + 0x210]; call rax; 
0x000000000000d62e: add byte ptr [rax], al; lea rdi, [rsp + 0x278]; call rax; 
0x00000000000142a6: add byte ptr [rax], al; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000d743: add byte ptr [rax], al; lea rdi, [rsp + 0x290]; call rax; 
0x0000000000014379: add byte ptr [rax], al; lea rdi, [rsp + 0x30]; call rax; 
0x000000000001a376: add byte ptr [rax], al; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000016933: add byte ptr [rax], al; lea rdi, [rsp + 0x40]; call rax; 
0x000000000001690b: add byte ptr [rax], al; lea rdi, [rsp + 0x40]; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000001bc13: add byte ptr [rax], al; lea rdi, [rsp + 0x50]; call rax; 
0x0000000000019429: add byte ptr [rax], al; lea rdi, [rsp + 0x560]; call rax; 
0x0000000000016673: add byte ptr [rax], al; lea rdi, [rsp + 0x58]; call rax; 
0x000000000001a057: add byte ptr [rax], al; lea rdi, [rsp + 0x58]; lea rdx, [rsp + 0x70]; call rax; 
0x0000000000016b0d: add byte ptr [rax], al; lea rdi, [rsp + 0x68]; call rax; 
0x000000000001bd4d: add byte ptr [rax], al; lea rdi, [rsp + 0x80]; call rax; 
0x000000000001670e: add byte ptr [rax], al; lea rdi, [rsp + 0x90]; call rax; 
0x0000000000019a7b: add byte ptr [rax], al; lea rdi, [rsp + 0xb0]; call rax; 
0x000000000001872a: add byte ptr [rax], al; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000000f919: add byte ptr [rax], al; lea rdi, [rsp + 8]; call 0xecb0; add rsp, 0xc8; ret; 
0x000000000003a061: add byte ptr [rax], al; lea rdx, [rip + 0x27b7a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003260e: add byte ptr [rax], al; lea rdx, [rip + 0x2f275]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002c399: add byte ptr [rax], al; lea rdx, [rip + 0x352f2]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002c09f: add byte ptr [rax], al; lea rdx, [rip + 0x355ac]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000001a328: add byte ptr [rax], al; lea rdx, [rip + 0x5bfa7]; lea rax, [rip - 0x3348]; call rax; 
0x0000000000019a41: add byte ptr [rax], al; lea rdx, [rip + 0x5c85e]; lea rax, [rip - 0x2a31]; lea rsi, [rsp + 0x110]; call rax; 
0x000000000001963e: add byte ptr [rax], al; lea rdx, [rip + 0x5cc49]; lea rax, [rip - 0x272e]; call rax; 
0x00000000000192c9: add byte ptr [rax], al; lea rdx, [rip + 0x5cf8e]; call qword ptr [rip + 0x606e8]; mov rax, qword ptr [rsp + 0x50]; add rsp, 0x788; ret; 
0x0000000000018b94: add byte ptr [rax], al; lea rdx, [rip + 0x5d683]; lea rax, [rip - 0x1ae4]; lea rsi, [rsp + 0x220]; call rax; 
0x00000000000188c2: add byte ptr [rax], al; lea rdx, [rip + 0x5d93d]; lea rax, [rip - 0x1952]; lea rsi, [rsp + 0x190]; call rax; 
0x0000000000018074: add byte ptr [rax], al; lea rdx, [rip + 0x5e0eb]; call qword ptr [rip + 0x619f5]; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x478; ret; 
0x0000000000017358: add byte ptr [rax], al; lea rdx, [rsp + 0x10]; call rax; 
0x0000000000014554: add byte ptr [rax], al; lea rdx, [rsp + 0x18]; call rax; 
0x000000000001648a: add byte ptr [rax], al; lea rdx, [rsp + 0x20]; call rax; 
0x0000000000059b0e: add byte ptr [rax], al; lea rdx, [rsp + 0x38]; call qword ptr [rip + 0x2032d]; add rsp, 0x68; ret; 
0x000000000000d990: add byte ptr [rax], al; lea rdx, [rsp + 0x50]; call rax; 
0x000000000000ca02: add byte ptr [rax], al; lea rdx, [rsp + 0x88]; call rax; 
0x0000000000017d69: add byte ptr [rax], al; lea rdx, [rsp + 0xf0]; call rax; 
0x0000000000039c06: add byte ptr [rax], al; lea rsi, [rip + 0x27f8d]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000058580: add byte ptr [rax], al; lea rsi, [rip + 0xd073]; mov edx, 2; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x0000000000018396: add byte ptr [rax], al; lea rsi, [rsp + 0x10]; call qword ptr [rip + 0x61acd]; add rsp, 0x88; ret; 
0x000000000004751f: add byte ptr [rax], al; lea rsi, [rsp + 0x150]; call qword ptr [rcx + 0x20]; 
0x0000000000018842: add byte ptr [rax], al; lea rsi, [rsp + 0x170]; call rax; 
0x000000000000def3: add byte ptr [rax], al; lea rsi, [rsp + 0x1b0]; lea rdx, [rsp + 0x50]; call rax; 
0x000000000003e40a: add byte ptr [rax], al; lea rsi, [rsp + 0x20]; mov rbx, qword ptr [rip + 0x3b5c0]; mov edx, 0x90; call rbx; 
0x000000000003b349: add byte ptr [rax], al; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x0000000000018b0b: add byte ptr [rax], al; lea rsi, [rsp + 0x210]; call rax; 
0x0000000000047479: add byte ptr [rax], al; lea rsi, [rsp + 0x430]; mov rax, qword ptr [rsp + 0xb0]; call qword ptr [rax + 0x20]; 
0x00000000000194ee: add byte ptr [rax], al; lea rsi, [rsp + 0x618]; call rax; 
0x000000000000d988: add byte ptr [rax], al; lea rsi, [rsp + 0xb0]; lea rdx, [rsp + 0x50]; call rax; 
0x000000000000da4b: add byte ptr [rax], al; lea rsi, [rsp + 0xd0]; call rax; 
0x0000000000017dbb: add byte ptr [rax], al; lea rsi, [rsp + 0xd8]; call rax; 
0x00000000000199b3: add byte ptr [rax], al; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000000c9fa: add byte ptr [rax], al; lea rsi, [rsp + 0xe8]; lea rdx, [rsp + 0x88]; call rax; 
0x000000000001ee7a: add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ec59: add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x000000000005a6cf: add byte ptr [rax], al; lea rsi, [rsp + 4]; call qword ptr [rip + 0x1f3fc]; pop rcx; ret; 
0x000000000005a68b: add byte ptr [rax], al; lea rsi, [rsp + 4]; call qword ptr [rip + 0x1f440]; pop rcx; ret; 
0x000000000005a64e: add byte ptr [rax], al; lea rsi, [rsp + 4]; call qword ptr [rip + 0x1f47d]; pop rcx; ret; 
0x000000000005a61c: add byte ptr [rax], al; lea rsi, [rsp + 4]; call qword ptr [rip + 0x1f4af]; pop rcx; ret; 
0x000000000005a51c: add byte ptr [rax], al; lea rsi, [rsp + 4]; call qword ptr [rip + 0x1f5af]; pop rcx; ret; 
0x000000000005a4d8: add byte ptr [rax], al; lea rsi, [rsp + 4]; call qword ptr [rip + 0x1f5f3]; pop rcx; ret; 
0x000000000005a49b: add byte ptr [rax], al; lea rsi, [rsp + 4]; call qword ptr [rip + 0x1f630]; pop rcx; ret; 
0x000000000005a469: add byte ptr [rax], al; lea rsi, [rsp + 4]; call qword ptr [rip + 0x1f662]; pop rcx; ret; 
0x00000000000377ae: add byte ptr [rax], al; mov al, 1; ret; 
0x000000000001a112: add byte ptr [rax], al; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x20]; add rsp, 0xd8; ret; 
0x0000000000050d79: add byte ptr [rax], al; mov byte ptr [rbx + 8], 0; xor eax, eax; pop rbx; ret; 
0x000000000002a65f: add byte ptr [rax], al; mov byte ptr [rdi + 7], 0; mov word ptr [rdi + 5], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x18; ret; 
0x000000000002a745: add byte ptr [rax], al; mov byte ptr [rdi], 0x17; mov byte ptr [rdi + 1], dl; add rsp, 0x10; ret; 
0x000000000000d874: add byte ptr [rax], al; mov byte ptr [rsp + 0x31f], 0; add rsp, 0x348; ret; 
0x0000000000017f45: add byte ptr [rax], al; mov dword ptr [rdi + 0xc], 0; ret; 
0x000000000002a884: add byte ptr [rax], al; mov dword ptr [rdi + 2], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x0000000000017f37: add byte ptr [rax], al; mov dword ptr [rdi + 4], 0; mov dword ptr [rdi + 8], 0; mov dword ptr [rdi + 0xc], 0; ret; 
0x0000000000017f3e: add byte ptr [rax], al; mov dword ptr [rdi + 8], 0; mov dword ptr [rdi + 0xc], 0; ret; 
0x000000000003a05c: add byte ptr [rax], al; mov eax, 6; lea rdx, [rip + 0x27b7a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000014826: add byte ptr [rax], al; mov eax, dword ptr [rsp + 0x18]; mov edx, dword ptr [rsp + 0x1c]; add rsp, 0x78; ret; 
0x000000000001db6f: add byte ptr [rax], al; mov eax, dword ptr [rsp + 0x20]; mov dword ptr [rsp + 0x58], eax; mov edi, dword ptr [rsp + 0x58]; lea rax, [rip + 0x3be8c]; call rax; 
0x000000000000afdd: add byte ptr [rax], al; mov eax, eax; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000005ba3d: add byte ptr [rax], al; mov eax, edi; lea rdx, [rip + 0x98c8]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000000a8ad: add byte ptr [rax], al; mov ecx, eax; movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x000000000004ac2e: add byte ptr [rax], al; mov ecx, ecx; lea rdx, [rcx + rax]; add rdx, 0x20; mov eax, 1; ret; 
0x00000000000454fb: add byte ptr [rax], al; mov edi, 0x100; mov esi, 8; call rbx; 
0x000000000001bd1e: add byte ptr [rax], al; mov edi, 0x27; call rax; 
0x00000000000194b3: add byte ptr [rax], al; mov edi, 0x27; mov edx, 0x1b; call rax; 
0x000000000001679e: add byte ptr [rax], al; mov edi, 4; call rax; 
0x000000000005df0b: add byte ptr [rax], al; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x00000000000194b8: add byte ptr [rax], al; mov edx, 0x1b; call rax; 
0x000000000005dc76: add byte ptr [rax], al; mov edx, 0x28; mov r8d, 0x11f; call 0x5db10; pop rcx; ret; 
0x000000000005dcad: add byte ptr [rax], al; mov edx, 0x2c; mov r8d, 0xc4; call 0x5db10; pop rcx; ret; 
0x000000000003e433: add byte ptr [rax], al; mov edx, 0xa8; call rbx; 
0x000000000005f130: add byte ptr [rax], al; mov edx, 0xb; jmp rax; 
0x000000000005dd69: add byte ptr [rax], al; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x0000000000057e30: add byte ptr [rax], al; mov edx, 0xe; jmp rax; 
0x000000000005a10e: add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ddef: add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000005a10e: add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x000000000005a43c: add byte ptr [rax], al; mov edx, 1; jmp rax; 
0x0000000000058238: add byte ptr [rax], al; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005ddd3: add byte ptr [rax], al; mov edx, 2; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x0000000000058587: add byte ptr [rax], al; mov edx, 2; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x00000000000582f1: add byte ptr [rax], al; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000005ecfc: add byte ptr [rax], al; mov edx, 4; add rsp, 0x28; pop rbx; pop r14; jmp rax; 
0x000000000005ec4a: add byte ptr [rax], al; mov edx, 4; call qword ptr [rax + 0x18]; 
0x000000000005ec10: add byte ptr [rax], al; mov edx, 5; jmp rax; 
0x0000000000056d78: add byte ptr [rax], al; mov edx, 6; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x0000000000038863: add byte ptr [rax], al; mov edx, 8; mov rdi, r12; call rbx; 
0x0000000000037c03: add byte ptr [rax], al; mov edx, 8; mov rdi, rbp; call rbx; 
0x000000000005eed4: add byte ptr [rax], al; mov edx, 9; call qword ptr [rax + 0x18]; 
0x0000000000052787: add byte ptr [rax], al; mov edx, ebx; lea rsi, [rip + 0x11e1e]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000004f8c4: add byte ptr [rax], al; mov edx, r15d; lea rsi, [rip + 0x14a78]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000045500: add byte ptr [rax], al; mov esi, 8; call rbx; 
0x0000000000056d7d: add byte ptr [rax], al; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x0000000000040e53: add byte ptr [rax], al; mov qword ptr [rbx + 8], r14; add rsp, 0x108; pop rbx; pop r14; ret; 
0x000000000004049a: add byte ptr [rax], al; mov qword ptr [rbx], rax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000409f1: add byte ptr [rax], al; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000026812: add byte ptr [rax], al; mov qword ptr [rbx], rax; pop rbx; pop r14; pop r15; ret; 
0x000000000003e9cb: add byte ptr [rax], al; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000001caf9: add byte ptr [rax], al; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x0000000000014757: add byte ptr [rax], al; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x148; ret; 
0x000000000001474b: add byte ptr [rax], al; mov qword ptr [rcx + 8], rdx; mov rdx, qword ptr [rsp + 0xb0]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x148; ret; 
0x000000000005a9eb: add byte ptr [rax], al; mov qword ptr [rdi + 0x20], 0; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000004f01e: add byte ptr [rax], al; mov qword ptr [rdi + 8], 0; xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000002a88b: add byte ptr [rax], al; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x000000000002a669: add byte ptr [rax], al; mov qword ptr [rdi + 8], rax; add rsp, 0x18; ret; 
0x000000000002a71b: add byte ptr [rax], al; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000002a589: add byte ptr [rax], al; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x000000000005a9f3: add byte ptr [rax], al; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000001baf1: add byte ptr [rax], al; mov qword ptr [rdi], rsi; pop rcx; ret; 
0x000000000001febe: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rdi; ret; 
0x0000000000012cfe: add byte ptr [rax], al; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xc8; ret; 
0x000000000004277b: add byte ptr [rax], al; mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x00000000000167b9: add byte ptr [rax], al; mov qword ptr [rsp + 0x158], rdi; lea rax, [rip - 0x151a]; xor esi, esi; call rax; 
0x00000000000466ac: add byte ptr [rax], al; mov qword ptr [rsp + 0x330], rdi; mov rbp, rcx; call rcx; 
0x000000000005b94d: add byte ptr [rax], al; mov qword ptr [rsp + 0x38], rax; call rax; 
0x0000000000015eef: add byte ptr [rax], al; mov qword ptr [rsp + 0x38], rax; mov rax, qword ptr [rsp + 0x38]; mov byte ptr [rax], 0; add rsp, 0x40; ret; 
0x00000000000187af: add byte ptr [rax], al; mov qword ptr [rsp + 0x38], rax; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; lea rax, [rip + 0x1fa9]; call rax; 
0x000000000000d4a2: add byte ptr [rax], al; mov qword ptr [rsp + 0x38], rdx; mov rax, qword ptr [rip + 0x6c310]; call rax; 
0x000000000000d587: add byte ptr [rax], al; mov qword ptr [rsp + 0x40], rdi; call rax; 
0x0000000000019636: add byte ptr [rax], al; mov qword ptr [rsp + 0x740], rsi; lea rdx, [rip + 0x5cc49]; lea rax, [rip - 0x272e]; call rax; 
0x0000000000011840: add byte ptr [rax], al; mov qword ptr [rsp + 0xa0], rax; mov rax, qword ptr [rsp + 0x98]; mov rdx, qword ptr [rsp + 0xa0]; add rsp, 0x158; ret; 
0x000000000004a6f9: add byte ptr [rax], al; mov qword ptr [rsp + 8], rax; lea rbx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000005bd8f: add byte ptr [rax], al; mov r13, rax; call rax; 
0x000000000005dc7b: add byte ptr [rax], al; mov r8d, 0x11f; call 0x5db10; pop rcx; ret; 
0x000000000005dcb2: add byte ptr [rax], al; mov r8d, 0xc4; call 0x5db10; pop rcx; ret; 
0x000000000003beee: add byte ptr [rax], al; mov rax, qword ptr [rbx + r13 + 8]; test rax, rax; je 0x3bf09; mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000001f2ae: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x10]; mov qword ptr [rsi + 0x10], rax; movups xmm0, xmmword ptr [rdi]; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000005d4ae: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x18]; ret; 
0x0000000000059b2e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x10]; ret; 
0x0000000000056cbe: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; mov rdx, qword ptr [rdi + 0x10]; ret; 
0x000000000005b56e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rdi, rax; jmp rcx; 
0x000000000001e96e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000005d49e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000001c00e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; ret; 
0x0000000000018ac6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x61411]; lea rdx, [rsp + 0x1b0]; lea rcx, [rsp + 0x1f8]; call rax; 
0x0000000000012ead: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x000000000001346b: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000001799e: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000017636: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x50; ret; 
0x000000000001163e: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x00000000000359ef: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x000000000001118e: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x1b8; ret; 
0x0000000000018400: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x48; ret; 
0x0000000000013b89: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x50; ret; 
0x00000000000106b3: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x000000000001355b: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x88; ret; 
0x0000000000011cb4: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xb8; ret; 
0x0000000000047512: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x20]; mov qword ptr [rsp + 0x178], rax; lea rsi, [rsp + 0x150]; call qword ptr [rcx + 0x20]; 
0x000000000001146d: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x20]; mov rdx, qword ptr [rsp + 0x28]; add rsp, 0x88; ret; 
0x000000000001b1ba: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x228; ret; 
0x000000000001054e: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x40]; add rsp, 0x108; ret; 
0x000000000001b4ec: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x68]; mov rdx, qword ptr [rsp + 0x70]; add rsp, 0x2c8; ret; 
0x0000000000015386: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x78]; mov rdx, qword ptr [rsp + 0x80]; add rsp, 0x148; ret; 
0x0000000000011848: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x98]; mov rdx, qword ptr [rsp + 0xa0]; add rsp, 0x158; ret; 
0x0000000000047481: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0xb0]; call qword ptr [rax + 0x20]; 
0x0000000000010162: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x108; ret; 
0x0000000000013964: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x88; ret; 
0x000000000000fc8c: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0xe0; ret; 
0x0000000000059ee0: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000015cad: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x60; ret; 
0x00000000000141a3: add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x00000000000124f3: add byte ptr [rax], al; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001e5af: add byte ptr [rax], al; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001515b: add byte ptr [rax], al; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x000000000000c473: add byte ptr [rax], al; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x40; ret; 
0x00000000000132cd: add byte ptr [rax], al; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000053527: add byte ptr [rax], al; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x000000000003cd7e: add byte ptr [rax], al; mov rax, rdi; lea rdx, [rip + 0x3a7f6]; ret; 
0x0000000000059a1e: add byte ptr [rax], al; mov rax, rdi; ret; 
0x00000000000466b4: add byte ptr [rax], al; mov rbp, rcx; call rcx; 
0x0000000000035c2a: add byte ptr [rax], al; mov rbx, rax; dec qword ptr [rax - 8]; mov rdi, r14; call qword ptr [rbp]; 
0x0000000000018eaa: add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0xc8]; lea rax, [rip - 0x1d5b]; call rax; 
0x000000000001a082: add byte ptr [rax], al; mov rdi, qword ptr [rax + 8]; lea rax, [rip + 0x961]; call rax; 
0x0000000000041fc7: add byte ptr [rax], al; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x00000000000582e3: add byte ptr [rax], al; mov rdi, qword ptr [rbx]; mov rax, qword ptr [rbx + 8]; lea rsi, [rip + 0xd30b]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000005822a: add byte ptr [rax], al; mov rdi, qword ptr [rbx]; mov rax, qword ptr [rbx + 8]; lea rsi, [rip + 0xd3c2]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059ed4: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x10]; lea rsi, [rip + 0xb0f2]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000e3e5: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x18]; mov rsi, rax; call 0xe280; add rsp, 0x38; ret; 
0x000000000002d7e1: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x148]; call rbx; 
0x0000000000047471: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x80]; lea rsi, [rsp + 0x430]; mov rax, qword ptr [rsp + 0xb0]; call qword ptr [rax + 0x20]; 
0x0000000000013629: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x90]; call 0x124c0; add rsp, 0x98; ret; 
0x0000000000038868: add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x000000000002f201: add byte ptr [rax], al; mov rdi, r12; lea rbx, [rip - 0x1a4ad]; call rbx; 
0x0000000000032fb6: add byte ptr [rax], al; mov rdi, r13; mov rsi, qword ptr [rsp + 0x198]; call rbx; 
0x0000000000045b1d: add byte ptr [rax], al; mov rdi, r13; mov rsi, qword ptr [rsp + 0x330]; call rbx; 
0x0000000000045b0c: add byte ptr [rax], al; mov rdi, r14; lea rbx, [rip - 0x30db8]; call rbx; 
0x000000000003e424: add byte ptr [rax], al; mov rdi, r15; add rdi, 8; lea rsi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x000000000005858c: add byte ptr [rax], al; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x000000000003cf3c: add byte ptr [rax], al; mov rdi, r15; call rax; 
0x000000000002d7d0: add byte ptr [rax], al; mov rdi, r15; lea rbx, [rip - 0x18a7c]; call rbx; 
0x0000000000032fa5: add byte ptr [rax], al; mov rdi, r15; lea rbx, [rip - 0x1e251]; call rbx; 
0x00000000000454d3: add byte ptr [rax], al; mov rdi, r15; lea rbx, [rip - 0x3078f]; call rbx; 
0x0000000000046d2f: add byte ptr [rax], al; mov rdi, r15; lea rbx, [rip - 0x31fdb]; call rbx; 
0x0000000000057794: add byte ptr [rax], al; mov rdi, rax; call qword ptr [rip + 0x222a1]; add rsp, 0x18; ret; 
0x000000000003dd9c: add byte ptr [rax], al; mov rdi, rax; call qword ptr [rip + 0x3be49]; pop rcx; ret; 
0x000000000002b997: add byte ptr [rax], al; mov rdi, rax; call qword ptr [rip + 0x4e24e]; pop rcx; ret; 
0x000000000002b972: add byte ptr [rax], al; mov rdi, rax; call qword ptr [rip + 0x4e273]; pop rcx; ret; 
0x0000000000037c08: add byte ptr [rax], al; mov rdi, rbp; call rbx; 
0x000000000005adf7: add byte ptr [rax], al; mov rdi, rbp; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x0000000000058157: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rip + 0x21d6e]; add rsp, 0xa0; pop rbx; ret; 
0x000000000005ee7c: add byte ptr [rax], al; mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1a64c]; add rsp, 0x88; ret; 
0x000000000005e656: add byte ptr [rax], al; mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1ae72]; add rsp, 0x88; ret; 
0x000000000005e421: add byte ptr [rax], al; mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1b0a7]; add rsp, 0x88; ret; 
0x000000000005e2f6: add byte ptr [rax], al; mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1b1d2]; add rsp, 0x88; ret; 
0x000000000005e256: add byte ptr [rax], al; mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1b272]; add rsp, 0x88; ret; 
0x000000000005e1c3: add byte ptr [rax], al; mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1b305]; add rsp, 0x88; ret; 
0x000000000005e133: add byte ptr [rax], al; mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1b395]; add rsp, 0x88; ret; 
0x000000000005e0a1: add byte ptr [rax], al; mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1b427]; add rsp, 0x88; ret; 
0x000000000005e011: add byte ptr [rax], al; mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1b4b7]; add rsp, 0x88; ret; 
0x0000000000011850: add byte ptr [rax], al; mov rdx, qword ptr [rsp + 0xa0]; add rsp, 0x158; ret; 
0x000000000005c370: add byte ptr [rax], al; mov rdx, rcx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000005d4be: add byte ptr [rax], al; mov rdx, rsi; mov rax, rdi; ret; 
0x00000000000169c7: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x345b]; lea rdi, [rsp + 0x30]; call rax; 
0x0000000000016b01: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x3641]; lea rdi, [rsp + 0x68]; call rax; 
0x000000000000ea13: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0xf8]; lea r8, [rip + 0x6746c]; call 0x11490; add rsp, 0x1c8; ret; 
0x000000000001bb85: add byte ptr [rax], al; mov rsi, rax; lea rax, [rip + 0x4098f]; lea rdi, [rsp + 0x68]; mov qword ptr [rsp + 0x20], rdi; call rax; 
0x00000000000599b6: add byte ptr [rax], al; mov word ptr [rax + 0x1c], dx; mov cx, 1; mov word ptr [rax], cx; ret; 
0x0000000000013823: add byte ptr [rax], al; mov word ptr [rsp + 0x16], ax; movzx eax, ax; add rsp, 0x18; ret; 
0x000000000001e95e: add byte ptr [rax], al; movabs rax, 0x89a76c34a9f81ac8; ret; 
0x000000000000dae9: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0x100], xmm0; lea rax, [rip + 0x85d6]; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000017e08: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0x140], xmm0; lea rax, [rip - 0x1dc9]; lea rsi, [rsp + 0x140]; call rax; 
0x0000000000028293: add byte ptr [rax], al; movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x000000000002998e: add byte ptr [rax], al; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000005bb9e: add byte ptr [rax], al; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor ebx, ebx; mov r15d, r12d; jmp rax; 
0x000000000005c038: add byte ptr [rax], al; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor r12d, r12d; mov ebp, edx; jmp rax; 
0x000000000005ba46: add byte ptr [rax], al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000005be01: add byte ptr [rax], al; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bfec: add byte ptr [rax], al; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; mov edx, ebp; mov ebp, 0x110001; jmp rcx; 
0x000000000005be99: add byte ptr [rax], al; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; mov edx, r15d; jmp rcx; 
0x0000000000057e61: add byte ptr [rax], al; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000003a39b: add byte ptr [rax], al; movsxd rsi, dword ptr [r12 + rsi*4]; add rsi, r12; jmp rsi; 
0x000000000005bdc3: add byte ptr [rax], al; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x000000000001a2f5: add byte ptr [rax], al; movups xmm0, xmmword ptr [rsp + 0x38]; movaps xmmword ptr [rsp + 0x70], xmm0; lea rax, [rip - 0x2d98]; lea rsi, [rsp + 0x70]; call rax; 
0x00000000000166fd: add byte ptr [rax], al; movups xmm0, xmmword ptr [rsp + 0x58]; movaps xmmword ptr [rsp + 0x70], xmm0; lea rax, [rip + 0x3a40]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000005b5ce: add byte ptr [rax], al; movzx eax, byte ptr [rdi + 0x30]; and al, 0x10; shr al, 4; ret; 
0x000000000005b5de: add byte ptr [rax], al; movzx eax, byte ptr [rdi + 0x30]; and al, 0x20; shr al, 5; ret; 
0x000000000005b5be: add byte ptr [rax], al; movzx eax, byte ptr [rdi + 0x30]; and al, 4; shr al, 2; ret; 
0x00000000000540a9: add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + r10], al; pop rax; ret; 
0x0000000000053f10: add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x00000000000543cb: add byte ptr [rax], al; movzx eax, r10b; lea rcx, [rip + 0x10868]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000035777: add byte ptr [rax], al; movzx eax, r14b; lea rcx, [rip + 0x2c2d4]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000039e68: add byte ptr [rax], al; movzx ecx, byte ptr [r10]; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x00000000000377a9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov al, 1; ret; 
0x000000000001c009: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; ret; 
0x0000000000015e79: add byte ptr [rax], al; nop dword ptr [rax + rax]; push rax; call qword ptr [rip + 0x63a59]; pop rcx; ret; 
0x0000000000059a09: add byte ptr [rax], al; nop dword ptr [rax + rax]; shl rsi, 0x20; mov eax, edi; or rax, rsi; ret; 
0x0000000000010c59: add byte ptr [rax], al; nop dword ptr [rax + rax]; sub rsp, 0x78; mov qword ptr [rsp], rdi; lea rax, [rip + 0x60c1]; call rax; 
0x000000000004cd29: add byte ptr [rax], al; nop dword ptr [rax + rax]; test rsi, rsi; js 0x4cd3a; add qword ptr [rdi + 0x18], rsi; ret; 
0x000000000005353a: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rdi + 0x20]; mov rdx, qword ptr [rdi + 0x28]; ret; 
0x0000000000020ffb: add byte ptr [rax], al; nop dword ptr [rax]; movzx edi, al; call rbx; 
0x000000000004b09b: add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x0000000000040a6b: add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000059a7d: add byte ptr [rax], al; nop; mov eax, dword ptr [rdi + 0x10]; ret; 
0x0000000000059a8c: add byte ptr [rax], al; nop; mov eax, dword ptr [rdi + 0x14]; ret; 
0x0000000000059b3d: add byte ptr [rax], al; nop; mov rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000059a5d: add byte ptr [rax], al; nop; mov rax, rdi; ret; 
0x0000000000057e0d: add byte ptr [rax], al; nop; movabs rax, 0x5203149ad97ccfc6; ret; 
0x0000000000059b4d: add byte ptr [rax], al; nop; movzx eax, byte ptr [rdi + 0x20]; ret; 
0x0000000000059a6c: add byte ptr [rax], al; nop; movzx eax, word ptr [rdi + 0x18]; ret; 
0x0000000000059a2c: add byte ptr [rax], al; nop; movzx eax, word ptr [rdi + 4]; ret; 
0x000000000004d3ad: add byte ptr [rax], al; nop; ret; 
0x000000000001c01c: add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x000000000004602f: add byte ptr [rax], al; or byte ptr [rdi], cl; xchg eax, esp; ret 0x8948; 
0x000000000000eca8: add byte ptr [rax], al; pop rax; ret; 
0x000000000000a474: add byte ptr [rax], al; pop rbx; pop r12; pop r14; pop r15; ret; 
0x0000000000037210: add byte ptr [rax], al; pop rbx; pop r14; pop r15; jmp rcx; 
0x0000000000037036: add byte ptr [rax], al; pop rbx; pop r14; pop r15; ret; 
0x000000000003559f: add byte ptr [rax], al; pop rbx; pop r14; pop rbp; ret; 
0x0000000000040303: add byte ptr [rax], al; pop rbx; pop r14; ret; 
0x000000000005c25a: add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000368fc: add byte ptr [rax], al; pop rbx; ret; 
0x000000000000e0bc: add byte ptr [rax], al; pop rcx; ret; 
0x000000000001970e: add byte ptr [rax], al; push rax; call 0x1a8a0; pop rcx; ret; 
0x000000000003e5ce: add byte ptr [rax], al; push rax; call qword ptr [rip + 0x3ae71]; mov eax, dword ptr [rax]; pop rcx; ret; 
0x0000000000019e1e: add byte ptr [rax], al; push rax; call qword ptr [rip + 0x5f641]; pop rax; ret; 
0x0000000000015e7e: add byte ptr [rax], al; push rax; call qword ptr [rip + 0x63a59]; pop rcx; ret; 
0x00000000000115ae: add byte ptr [rax], al; push rax; mov qword ptr [rsp], rdi; call 0x115e0; pop rcx; ret; 
0x000000000000f1ce: add byte ptr [rax], al; push rax; mov qword ptr [rsp], rdi; call 0xf170; pop rax; ret; 
0x000000000000ef5e: add byte ptr [rax], al; push rax; mov qword ptr [rsp], rdi; call 0xf220; pop rax; ret; 
0x000000000000eece: add byte ptr [rax], al; push rax; mov qword ptr [rsp], rdi; call 0xf790; pop rax; ret; 
0x000000000000f4ce: add byte ptr [rax], al; push rax; mov qword ptr [rsp], rdi; call 0xf7f0; pop rax; ret; 
0x000000000001ab2e: add byte ptr [rax], al; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5e88d]; pop rax; ret; 
0x000000000001ac4e: add byte ptr [rax], al; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5e9ed]; pop rax; ret; 
0x000000000001aafe: add byte ptr [rax], al; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5f015]; pop rax; ret; 
0x0000000000016dee: add byte ptr [rax], al; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x62f35]; pop rax; ret; 
0x000000000000f47e: add byte ptr [rax], al; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x6a38d]; pop rax; ret; 
0x000000000000ef8e: add byte ptr [rax], al; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x6ae0d]; pop rax; ret; 
0x000000000001e58e: add byte ptr [rax], al; push rax; mov qword ptr [rsp], rdi; lea rax, [rip + 4]; call rax; 
0x000000000001da9e: add byte ptr [rax], al; push rax; mov qword ptr [rsp], rdi; mov eax, dword ptr [rdi + 0x80]; pop rcx; ret; 
0x000000000000efce: add byte ptr [rax], al; push rax; mov qword ptr [rsp], rdi; pop rax; ret; 
0x000000000001651e: add byte ptr [rax], al; push rax; mov rax, rdi; mov byte ptr [rdi], 2; pop rcx; ret; 
0x000000000001650e: add byte ptr [rax], al; push rax; mov rax, rdi; mov byte ptr [rdi], 3; pop rcx; ret; 
0x000000000000fa5e: add byte ptr [rax], al; push rax; xor eax, eax; pop rcx; ret; 
0x000000000000bbd6: add byte ptr [rax], al; ret; 
0x000000000002a2da: add byte ptr [rax], al; setb al; and al, cl; ret; 
0x0000000000059a0e: add byte ptr [rax], al; shl rsi, 0x20; mov eax, edi; or rax, rsi; ret; 
0x0000000000045b03: add byte ptr [rax], al; shl rsi, 4; mov edx, 8; mov rdi, r14; lea rbx, [rip - 0x30db8]; call rbx; 
0x000000000002d7c7: add byte ptr [rax], al; shl rsi, 4; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x18a7c]; call rbx; 
0x0000000000046d26: add byte ptr [rax], al; shl rsi, 4; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x31fdb]; call rbx; 
0x000000000005a188: add byte ptr [rax], al; sub rdx, rax; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x0000000000010c5e: add byte ptr [rax], al; sub rsp, 0x78; mov qword ptr [rsp], rdi; lea rax, [rip + 0x60c1]; call rax; 
0x000000000000e590: add byte ptr [rax], al; test al, 1; jne 0xe59b; add rsp, 0x38; ret; 
0x00000000000174ab: add byte ptr [rax], al; test byte ptr [rsp + 0x27], 1; jne 0x174be; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x0000000000017550: add byte ptr [rax], al; test byte ptr [rsp + 0x37], 1; jne 0x17563; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x00000000000226ce: add byte ptr [rax], al; test dil, 1; jne 0x226dd; shr rdi, 8; mov eax, edi; ret; 
0x0000000000041fbe: add byte ptr [rax], al; test r12, r12; je 0x42072; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x0000000000035f84: add byte ptr [rax], al; test rax, rax; je 0x35f8d; pop rcx; ret; 
0x000000000004cd2e: add byte ptr [rax], al; test rsi, rsi; js 0x4cd3a; add qword ptr [rdi + 0x18], rsi; ret; 
0x000000000001e7b1: add byte ptr [rax], al; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000010d50: add byte ptr [rax], al; xor eax, eax; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000004ef4a: add byte ptr [rax], al; xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x0000000000022737: add byte ptr [rax], al; xor eax, eax; pop rcx; ret; 
0x000000000005cdc3: add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000395b4: add byte ptr [rax], al; xor ebx, ebx; lea rcx, [rip + 0x2859d]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000005ebe4: add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x1a8ea]; add rsp, 0x28; ret; 
0x000000000005eab4: add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x1aa1a]; add rsp, 0x28; ret; 
0x000000000005e84d: add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x1ac81]; add rsp, 0x28; ret; 
0x000000000005e760: add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x1ad6e]; add rsp, 0x28; ret; 
0x000000000005e6b2: add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x1ae1c]; add rsp, 0x88; ret; 
0x000000000005e47d: add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x1b051]; add rsp, 0x88; ret; 
0x0000000000056d2c: add byte ptr [rax], al; xor ecx, ecx; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x00000000000426df: add byte ptr [rax], al; xor edx, edx; call rbx; 
0x0000000000056d61: add byte ptr [rax], al; xor esi, esi; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000004cb6d: add byte ptr [rax], al; xorps xmm0, xmm0; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0xc], xmm0; ret; 
0x000000000000c0e2: add byte ptr [rax], r8b; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x00000000000377ad: add byte ptr [rax], r8b; mov al, 1; ret; 
0x000000000001f2ad: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 0x10]; mov qword ptr [rsi + 0x10], rax; movups xmm0, xmmword ptr [rdi]; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000001e96d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000005d49d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000001c00d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; ret; 
0x0000000000059a1d: add byte ptr [rax], r8b; mov rax, rdi; ret; 
0x000000000001e95d: add byte ptr [rax], r8b; movabs rax, 0x89a76c34a9f81ac8; ret; 
0x000000000005b5cd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi + 0x30]; and al, 0x10; shr al, 4; ret; 
0x000000000005b5dd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi + 0x30]; and al, 0x20; shr al, 5; ret; 
0x000000000003e5cd: add byte ptr [rax], r8b; push rax; call qword ptr [rip + 0x3ae71]; mov eax, dword ptr [rax]; pop rcx; ret; 
0x0000000000015e7d: add byte ptr [rax], r8b; push rax; call qword ptr [rip + 0x63a59]; pop rcx; ret; 
0x000000000001ab2d: add byte ptr [rax], r8b; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5e88d]; pop rax; ret; 
0x0000000000016ded: add byte ptr [rax], r8b; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x62f35]; pop rax; ret; 
0x000000000001da9d: add byte ptr [rax], r8b; push rax; mov qword ptr [rsp], rdi; mov eax, dword ptr [rdi + 0x80]; pop rcx; ret; 
0x000000000000efcd: add byte ptr [rax], r8b; push rax; mov qword ptr [rsp], rdi; pop rax; ret; 
0x000000000000bc15: add byte ptr [rax], r8b; ret; 
0x0000000000059a0d: add byte ptr [rax], r8b; shl rsi, 0x20; mov eax, edi; or rax, rsi; ret; 
0x0000000000010c5d: add byte ptr [rax], r8b; sub rsp, 0x78; mov qword ptr [rsp], rdi; lea rax, [rip + 0x60c1]; call rax; 
0x000000000004cd2d: add byte ptr [rax], r8b; test rsi, rsi; js 0x4cd3a; add qword ptr [rdi + 0x18], rsi; ret; 
0x0000000000019f45: add byte ptr [rbp + 0x10], dh; mov rdi, qword ptr [rsp + 8]; lea rax, [rip - 0x3a34]; call rax; 
0x0000000000014475: add byte ptr [rbp + 0x13], dh; mov rax, qword ptr [rsp + 8]; mov rax, qword ptr [rax + 8]; mov qword ptr [rsp + 0x50], rax; add rsp, 0x58; ret; 
0x000000000001cd19: add byte ptr [rbp + 0x14], dh; mov rdi, qword ptr [rsp + 0x50]; lea rax, [rip + 0x58]; call rax; 
0x000000000003e608: add byte ptr [rbp + 0x17], dh; movzx eax, byte ptr [rip + 0x3bb16]; lea rdx, [rip + 0x3bb07]; lea rax, [rip + 0x3bb09]; pop rcx; ret; 
0x000000000001306d: add byte ptr [rbp + 0x1e], dh; lea rdi, [rip + 0x4d57a]; lea rdx, [rip + 0x62f6a]; lea rax, [rip - 0x7a15]; mov esi, 0x2b; call rax; 
0x0000000000012b4e: add byte ptr [rbp + 0x1e], dh; lea rdi, [rip + 0x4da99]; lea rdx, [rip + 0x63471]; lea rax, [rip - 0x74f6]; mov esi, 0x2b; call rax; 
0x00000000000099e8: add byte ptr [rbp + 0x39], cl; ret 0x830f; 
0x000000000005db44: add byte ptr [rbp + 0x39], cl; ret 0x870f; 
0x000000000003c109: add byte ptr [rbp + 0x480675c0], al; mov eax, dword ptr [rsp]; pop rcx; ret; 
0x00000000000129dd: add byte ptr [rbp + 0xa], dh; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x000000000001520a: add byte ptr [rbp + 0xb], dh; lea rax, [rip + 0x41a4c]; call rax; 
0x000000000000fa2a: add byte ptr [rbp + 0xb], dh; lea rax, [rip + 0x4722c]; call rax; 
0x000000000000efb1: add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x000000000000fa0e: add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x00000000000141e2: add byte ptr [rbp + 5], dh; add rsp, 0x58; ret; 
0x000000000004cce4: add byte ptr [rbp + rcx + 0x48], dh; mov edx, dword ptr [rdi + 0x18]; mov rdi, qword ptr [rdi + 0x10]; mov rax, rdi; pop rcx; ret; 
0x00000000000599e6: add byte ptr [rbp + rcx + 0xf], dh; adc byte ptr [rsi + 4], al; movups xmmword ptr [rax + 1], xmm0; mov cl, 1; mov byte ptr [rax], cl; ret; 
0x000000000001c40b: add byte ptr [rbp + rcx - 0x15], dh; sub ecx, dword ptr [rax - 0x73]; add eax, 0x3a849; call rax; 
0x000000000001547b: add byte ptr [rbp + rcx - 0x15], dh; sub ecx, dword ptr [rax - 0x73]; add eax, 0x417d9; call rax; 
0x000000000004fd86: add byte ptr [rbp + rcx*4 + 0x2d], cl; ret 0xbf; 
0x00000000000454cb: add byte ptr [rbp + rcx*4 + 0x3c], cl; mov esi, 8; mov rdi, r15; lea rbx, [rip - 0x3078f]; call rbx; 
0x0000000000029bad: add byte ptr [rbp + rcx*4 + 0x79], cl; add cl, byte ptr [rcx - 0x7d]; ret 0x4cfe; 
0x00000000000366de: add byte ptr [rbp + rcx*4 + 0x7b], cl; dec dword ptr [rax - 0x75]; jnp 0x366e6; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002a394: add byte ptr [rbp + rcx*4 + 0xd], cl; sub byte ptr [rcx + 3], dh; add byte ptr [rcx + 0x63], cl; add al, 0x81; add rax, r9; jmp rax; 
0x0000000000039b04: add byte ptr [rbp + rcx*4 + 5], cl; js 0x39a8a; add al, byte ptr [rax]; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000002c374: add byte ptr [rbp + rcx*4 + 5], cl; or byte ptr [rbx + 3], dl; add byte ptr [rcx + 0x63], cl; or al, 0xa8; add rcx, r8; jmp rcx; 
0x000000000003afb2: add byte ptr [rbp + rcx*4 + 5], cl; outsb dx, byte ptr [rsi]; ret; 
0x000000000000910b: add byte ptr [rbp - 0x1e], dh; test dx, dx; setne al; pop rbx; ret; 
0x00000000000297ab: add byte ptr [rbp - 0x77], cl; pop rsi; adc cl, ch; ret; 
0x00000000000313d5: add byte ptr [rbp - 0x77], cl; ret 0x8b48; 
0x0000000000053d6a: add byte ptr [rbp - 0x77], cl; ret; 
0x0000000000041fbf: add byte ptr [rbp - 0x7b], cl; in al, 0xf; test byte ptr [rcx + 0x48000000], ch; mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x0000000000037211: add byte ptr [rbx + 0x41], bl; pop rsi; pop r15; jmp rcx; 
0x000000000001f3e5: add byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x00000000000355a0: add byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000040304: add byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000001f197: add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000003b5bb: add byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; pop rbp; ret; 
0x000000000000a475: add byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x0000000000041405: add byte ptr [rbx + 0x41df8918], cl; call rdi; 
0x0000000000038765: add byte ptr [rbx + 0x41df8918], cl; call rsi; 
0x000000000003b0a5: add byte ptr [rbx + 0x41ef8928], cl; call rsi; 
0x0000000000018ae6: add byte ptr [rbx + 0x480c2474], cl; lea eax, [rip + 0x2eae]; lea rdi, [rsp + 0x210]; call rax; 
0x000000000001bb66: add byte ptr [rbx + 0x4844247c], cl; mov eax, dword ptr [rip + 0x5db9e]; call rax; 
0x0000000000040df9: add byte ptr [rbx + 0x48682444], cl; mov dword ptr [rbx + 0x90], eax; add rsp, 0x108; pop rbx; pop r14; ret; 
0x000000000005a40f: add byte ptr [rbx + 0x48], dl; mov ebx, edi; call 0x5a2f0; mov rax, rbx; pop rbx; ret; 
0x000000000003ec57: add byte ptr [rbx + 0x527501f8], al; lea rbx, [r15 - 1]; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x0000000000009f79: add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x000000000005c25b: add byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000037d76: add byte ptr [rbx + 0x97504f8], al; lea rax, [rip + 0x42305]; pop rcx; ret; 
0x00000000000378e6: add byte ptr [rbx + 0x97504f8], al; lea rax, [rip + 0x4275d]; pop rcx; ret; 
0x00000000000327f5: add byte ptr [rbx + rcx*4 + 0x65], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000003283c: add byte ptr [rbx + rcx*4 + 0x65], cl; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000014827: add byte ptr [rbx - 0x74e7dbbc], cl; push rsp; and al, 0x1c; add rsp, 0x78; ret; 
0x000000000001db70: add byte ptr [rbx - 0x76dfdbbc], cl; and al, 0x58; mov edi, dword ptr [rsp + 0x58]; lea rax, [rip + 0x3be8c]; call rax; 
0x000000000001bb5c: add byte ptr [rbx - 0x7abbdbbc], cl; sal byte ptr [rcx + rdi*2 - 0x15], 0; mov edi, dword ptr [rsp + 0x44]; mov rax, qword ptr [rip + 0x5db9e]; call rax; 
0x0000000000034642: add byte ptr [rbx - 0x7af0d108], al; mov esp, 0x41000007; call rdx; 
0x00000000000341a6: add byte ptr [rbx - 0xb7f83f], al; ret 0x8948; 
0x0000000000020b8c: add byte ptr [rbx - 1], bl; and eax, 0x58bf4; pop rbx; ret; 
0x00000000000203f1: add byte ptr [rbx - 1], bl; and eax, 0x5938f; pop rbx; ret; 
0x000000000001fdd9: add byte ptr [rbx - 1], bl; and eax, 0x599a7; pop rbx; ret; 
0x000000000001fc85: add byte ptr [rbx - 1], bl; and eax, 0x59afb; pop rbx; ret; 
0x000000000001fb13: add byte ptr [rbx - 1], bl; and eax, 0x59c6d; pop rbx; ret; 
0x0000000000017a25: add byte ptr [rbx], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x78; ret; 
0x0000000000018491: add byte ptr [rbx], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0xb8; ret; 
0x0000000000049a7b: add byte ptr [rbx], al; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000001bd1c: add byte ptr [rbx], cl; add byte ptr [rax], al; mov edi, 0x27; call rax; 
0x000000000004ac2f: add byte ptr [rcx + 0x148d48c9], cl; add dword ptr [rax - 0x7d], ecx; ret 0xb820; 
0x000000000004e9b0: add byte ptr [rcx + 0x39], cl; int 0x77; sub cl, byte ptr [rax - 0x77]; ret; 
0x000000000002aefe: add byte ptr [rcx + 0x39], cl; ret; 
0x000000000003687e: add byte ptr [rcx + 0x3e083f8], cl; lea rcx, [rip + 0x2b1dd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000afde: add byte ptr [rcx + 0x46349c0], cl; test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x0000000000039b0b: add byte ptr [rcx + 0x63], cl; adc al, 0x90; add rdx, r8; jmp rdx; 
0x000000000002a39b: add byte ptr [rcx + 0x63], cl; add al, 0x81; add rax, r9; jmp rax; 
0x000000000005bb82: add byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; mov esi, 0x5c; jmp rax; 
0x0000000000028294: add byte ptr [rcx + 0x63], cl; add al, 0x89; add rax, r9; jmp rax; 
0x000000000002b01e: add byte ptr [rcx + 0x63], cl; cmp al, 0x98; add rdi, r8; jmp rdi; 
0x000000000002c37b: add byte ptr [rcx + 0x63], cl; or al, 0xa8; add rcx, r8; jmp rcx; 
0x000000000003a39c: add byte ptr [rcx + 0x63], cl; xor al, 0xb4; add rsi, r12; jmp rsi; 
0x00000000000354cf: add byte ptr [rcx + 0x69], cl; ret; 
0x0000000000034728: add byte ptr [rcx + 0x6b], cl; sal dword ptr [rax + 0x48], 0xc7; ret; 
0x000000000000a8ae: add byte ptr [rcx + 0xc6349c1], cl; mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x0000000000055fa3: add byte ptr [rcx + 0xf], al; mov dh, 0x73; add dword ptr [rcx - 0x7d], ecx; ret; 
0x0000000000039e69: add byte ptr [rcx + 0xf], al; mov dh, 0xa; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x00000000000543cc: add byte ptr [rcx + 0xf], al; mov dh, 0xc2; lea rcx, [rip + 0x10868]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000035778: add byte ptr [rcx + 0xf], al; mov dh, 0xc6; lea rcx, [rip + 0x2c2d4]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000027ff3: add byte ptr [rcx + 1], cl; ret; 
0x0000000000039e72: add byte ptr [rcx + rax - 0x18], cl; jmp rax; 
0x000000000000bf60: add byte ptr [rcx + rax], ah; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000c0bb: add byte ptr [rcx + rax], ah; movzx eax, al; add rsp, 0x38; ret; 
0x000000000000e249: add byte ptr [rcx + rax], ah; movzx eax, al; add rsp, 0x48; ret; 
0x000000000005796e: add byte ptr [rcx + rcx - 0x40], cl; or rax, rdx; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000021556: add byte ptr [rcx + rcx*4 + 0x58], cl; adc byte ptr [rcx + rcx*4 + 0x48], cl; sbb byte ptr [rcx - 0x7d], cl; ret 0x4c20; 
0x000000000000c55d: add byte ptr [rcx + rcx*4 + 1], cl; mov qword ptr [rcx + 8], rdi; mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0xa8; ret; 
0x0000000000037e65: add byte ptr [rcx + rcx*4 - 0x10], cl; add rsp, 0x10; pop rbx; pop r14; pop r15; ret; 
0x000000000003c239: add byte ptr [rcx + rcx*4 - 0x10], cl; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000032fb7: add byte ptr [rcx + rcx*4 - 0x11], cl; mov rsi, qword ptr [rsp + 0x198]; call rbx; 
0x0000000000045b1e: add byte ptr [rcx + rcx*4 - 0x11], cl; mov rsi, qword ptr [rsp + 0x330]; call rbx; 
0x000000000003c9c6: add byte ptr [rcx + rcx*4 - 0x18], cl; lea r14, [r13 - 1]; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x0000000000038869: add byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x000000000002f202: add byte ptr [rcx + rcx*4 - 0x19], cl; lea rbx, [rip - 0x1a4ad]; call rbx; 
0x000000000005ebdd: add byte ptr [rcx + rcx*4 - 0x29], cl; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1a8ea]; add rsp, 0x28; ret; 
0x000000000005eaad: add byte ptr [rcx + rcx*4 - 0x29], cl; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1aa1a]; add rsp, 0x28; ret; 
0x000000000005e984: add byte ptr [rcx + rcx*4 - 0x29], cl; xor ecx, ecx; call qword ptr [rip + 0x1ab48]; add rsp, 0x30; pop rbx; ret; 
0x000000000000e8f2: add byte ptr [rcx + rcx*4 - 0x3e], cl; call 0xc4b0; mov rdi, qword ptr [rsp + 8]; lea rsi, [rip + 0x675d1]; lea rax, [rip - 0x331e]; call rax; 
0x000000000005de4b: add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000002ee26: add byte ptr [rcx + rcx*4 - 0x74], cl; and al, 0x78; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add dword ptr [r8 + 0x39], ecx; ret 0x860f; 
0x000000000003934c: add byte ptr [rcx + rcx*4 - 0xb], al; and ebp, 3; lea rcx, [rip + 0x287f2]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x000000000003e425: add byte ptr [rcx + rcx*4 - 1], cl; add rdi, 8; lea rsi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x000000000005858d: add byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rbx + 0x18]; 
0x000000000003cf3d: add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x000000000002d7d1: add byte ptr [rcx + rcx*4 - 1], cl; lea rbx, [rip - 0x18a7c]; call rbx; 
0x0000000000032fa6: add byte ptr [rcx + rcx*4 - 1], cl; lea rbx, [rip - 0x1e251]; call rbx; 
0x00000000000454d4: add byte ptr [rcx + rcx*4 - 1], cl; lea rbx, [rip - 0x3078f]; call rbx; 
0x0000000000046d30: add byte ptr [rcx + rcx*4 - 1], cl; lea rbx, [rip - 0x31fdb]; call rbx; 
0x0000000000035624: add byte ptr [rcx + rcx*4 - 1], cl; xor edx, edx; call rbp; cmp eax, -1; jne 0x356f8; call rbx; 
0x000000000004f8c5: add byte ptr [rcx + rcx*4 - 6], al; lea rsi, [rip + 0x14a78]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000003d0ac: add byte ptr [rcx + rcx*4 - 9], cl; call qword ptr [rip + 0x3c6d2]; call qword ptr [rip + 0x3c32c]; ud2; mov rdi, r15; call rax; 
0x0000000000045b0d: add byte ptr [rcx + rcx*4 - 9], cl; lea rbx, [rip - 0x30db8]; call rbx; 
0x00000000000090ef: add byte ptr [rcx - 0x1459930], cl; jmp qword ptr [rsi - 0x2d]; 
0x00000000000312d3: add byte ptr [rcx - 0x39], cl; ret; 
0x0000000000051ecd: add byte ptr [rcx - 0x3a], al; and al, 8; add cl, ch; ret; 
0x000000000001f04a: add byte ptr [rcx - 0x3b7cb718], cl; sub byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000040b02: add byte ptr [rcx - 0x42ea0039], cl; pop qword ptr [rbx]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002c57b: add byte ptr [rcx - 0x44], al; add byte ptr ss:[rax], al; add cl, ch; ret 0xfffb; 
0x00000000000233bc: add byte ptr [rcx - 0x4c], al; add ebx, ebp; cmp cl, byte ptr [rcx - 0x7d]; sal al, 0x84; ror byte ptr [rdi], 0x95; ret; 
0x000000000003bf23: add byte ptr [rcx - 0x63ea0039], cl; fild dword ptr [rbx]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000457bc: add byte ptr [rcx - 0x73], cl; add dword ptr [r8 + 0x39], ecx; ret; 
0x0000000000046ac1: add byte ptr [rcx - 0x73], cl; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000003cf33: add byte ptr [rcx - 0x75], cl; and byte ptr [rdi], r9b; test dword ptr [rax + 0x4c000001], eax; mov edi, edi; call rax; 
0x000000000005aaa9: add byte ptr [rcx - 0x75], cl; pop rdi; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000000558f2: add byte ptr [rcx - 0x77], al; ret 0xc5e9; 
0x00000000000098cc: add byte ptr [rcx - 0x77], cl; ret 0x3949; 
0x000000000005efff: add byte ptr [rcx - 0x77], cl; ret; 
0x000000000004f8ba: add byte ptr [rcx - 0x7d], al; jmp qword ptr [rdi]; 
0x000000000005409d: add byte ptr [rcx - 0x7d], cl; ret 0x4902; 
0x000000000000c21e: add byte ptr [rcx - 0x9ebdbbc], cl; and al, 0x1f; add dword ptr [rbp + 9], esi; mov eax, dword ptr [rsp + 0x14]; add rsp, 0x28; ret; 
0x0000000000057c0c: add byte ptr [rcx - 1], cl; ret 0x144; 
0x000000000002774a: add byte ptr [rcx - 1], cl; ret 0x394c; 
0x0000000000058f79: add byte ptr [rcx - 1], cl; ret 0xff48; 
0x0000000000057b8c: add byte ptr [rcx - 1], cl; ret; 
0x000000000003cf3a: add byte ptr [rcx], 0; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x0000000000017633: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x50; ret; 
0x0000000000013b86: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x50; ret; 
0x0000000000013558: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x88; ret; 
0x00000000000178f6: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0xb8; ret; 
0x0000000000010215: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000103a5: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4811; 
0x000000000000cea5: add byte ptr [rcx], al; add byte ptr [rax], al; call rax; 
0x000000000000daef: add byte ptr [rcx], al; add byte ptr [rax], al; lea rax, [rip + 0x85d6]; lea rdi, [rsp + 0x100]; call rax; 
0x00000000000454fe: add byte ptr [rcx], al; add byte ptr [rax], al; mov esi, 8; call rbx; 
0x000000000002a2d8: add byte ptr [rcx], al; add byte ptr [rax], al; setb al; and al, cl; ret; 
0x000000000002a35c: add byte ptr [rcx], al; add byte ptr [rdi], cl; xchg eax, edx; shl dword ptr [rax], 0xc1; movzx eax, cl; ret; 
0x0000000000017216: add byte ptr [rcx], al; jne 0x17227; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xd8; ret; 
0x00000000000172e5: add byte ptr [rcx], al; jne 0x172f6; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xd8; ret; 
0x000000000001666c: add byte ptr [rcx], al; lea rax, [rip + 0x37bb]; lea rdi, [rsp + 0x58]; call rax; 
0x0000000000018da4: add byte ptr [rcx], al; lea rax, [rip + 0x39b3]; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000019fd1: add byte ptr [rcx], al; lea rax, [rip - 0x259a]; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000017ac0: add byte ptr [rcx], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000017c69: add byte ptr [rcx], al; mov rsi, qword ptr [rsp + 0x10]; lea rax, [rip + 0x799]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000bc51: add byte ptr [rcx], al; pop rbp; ret; 
0x00000000000567d7: add byte ptr [rcx], ch; ret 0x148d; 
0x0000000000036a7e: add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000003e0b5: add byte ptr [rcx], cl; ret 0x298b; 
0x0000000000033de1: add byte ptr [rcx], cl; ret 0xc148; 
0x00000000000395b5: add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x73]; or eax, 0x2859d; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003789d: add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x000000000001c782: add byte ptr [rcx], dh; idiv byte ptr [rdx + 0x80]; call 0x9070; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000285ce: add byte ptr [rcx], dh; jmp qword ptr [rsi + 0x66]; 
0x000000000005ebe5: add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x1a8ea]; add rsp, 0x28; ret; 
0x000000000005eab5: add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x1aa1a]; add rsp, 0x28; ret; 
0x000000000005e84e: add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x1ac81]; add rsp, 0x28; ret; 
0x000000000005e761: add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x1ad6e]; add rsp, 0x28; ret; 
0x000000000005e6b3: add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x1ae1c]; add rsp, 0x88; ret; 
0x000000000005e47e: add byte ptr [rcx], dh; leave; call qword ptr [rip + 0x1b051]; add rsp, 0x88; ret; 
0x0000000000056d2d: add byte ptr [rcx], dh; leave; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x0000000000044bf2: add byte ptr [rcx], dh; rol byte ptr [rax + 0xf084979], cl; xchg eax, esp; ret 0x8b48; 
0x0000000000038e78: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; pop rbx; pop r14; pop r15; ret; 
0x0000000000040455: add byte ptr [rcx], dh; sar bh, 0x15; add dl, byte ptr [rcx - 0x77cfffd]; push qword ptr [rbx + rax*2 - 0x77]; ret 0x2b8; 
0x0000000000010d51: add byte ptr [rcx], dh; shl byte ptr [rcx + rax], 0xf; mov dh, 0xc0; add rsp, 0x18; ret; 
0x000000000000fc7c: add byte ptr [rcx], dh; shr byte ptr [rax - 0x14ab8aff], 0x16; mov qword ptr [rsp + 8], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0xe0; ret; 
0x000000000005cc83: add byte ptr [rcx], dh; shr cl, 0xe8; add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret; 
0x0000000000056d62: add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0x10; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000005bdb6: add byte ptr [rcx], dl; add byte ptr [rax + 0x30], bh; lea rcx, [rip + 0x95ff]; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x0000000000057e71: add byte ptr [rcx], dl; add byte ptr [rax + 0x5c], bh; ret; 
0x0000000000057e59: add byte ptr [rcx], dl; add byte ptr [rax - 0x73], cl; xor eax, 0xd485; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000005bb80: add byte ptr [rcx], dl; add byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; mov esi, 0x5c; jmp rax; 
0x000000000004f8b8: add byte ptr [rcx], dl; add byte ptr [rcx - 0x7d], al; jmp qword ptr [rdi]; 
0x00000000000454fc: add byte ptr [rdi + 0x100], bh; mov esi, 8; call rbx; 
0x000000000001bd1f: add byte ptr [rdi + 0x27], bh; call rax; 
0x00000000000194b4: add byte ptr [rdi + 0x27], bh; mov edx, 0x1b; call rax; 
0x000000000000a569: add byte ptr [rdi + 0x74c08503], al; ret; 
0x000000000001679f: add byte ptr [rdi + 4], bh; call rax; 
0x00000000000327a9: add byte ptr [rdi + rcx - 0x49], al; add byte ptr gs:[rax - 0x7d], cl; ret; 
0x000000000005f2fa: add byte ptr [rdi - 0x1c], dh; sub rsp, r11; test qword ptr [rsp + 8], rsp; add rsp, rax; leave; ret; 
0x0000000000009fc7: add byte ptr [rdi], al; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x000000000001a2f6: add byte ptr [rdi], cl; adc byte ptr [rsp + 0x38], al; movaps xmmword ptr [rsp + 0x70], xmm0; lea rax, [rip - 0x2d98]; lea rsi, [rsp + 0x70]; call rax; 
0x00000000000166fe: add byte ptr [rdi], cl; adc byte ptr [rsp + 0x58], al; movaps xmmword ptr [rsp + 0x70], xmm0; lea rax, [rip + 0x3a40]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000005b5cf: add byte ptr [rdi], cl; mov dh, 0x47; xor byte ptr [rax + rdx], ah; shr al, 4; ret; 
0x000000000005b5df: add byte ptr [rdi], cl; mov dh, 0x47; xor byte ptr [rax], ah; shr al, 5; ret; 
0x000000000005b5bf: add byte ptr [rdi], cl; mov dh, 0x47; xor byte ptr [rsp + rax], ah; shr al, 2; ret; 
0x0000000000054086: add byte ptr [rdi], cl; mov dh, 0xc; js 0xffffffff834d479c; ret 0x4c02; 
0x00000000000555e3: add byte ptr [rdi], cl; mov dh, 0xc; or byte ptr [rbp - 0x6bf0be37], al; ret 0x4c89; 
0x0000000000020fff: add byte ptr [rdi], cl; mov dh, 0xf8; call rbx; 
0x000000000004115d: add byte ptr [rdi], cl; mov dh, 5; ret; 
0x000000000003623e: add byte ptr [rdi], cl; or ebp, ebx; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002e913: add byte ptr [rdi], cl; or ebp, ebx; add ch, bl; adc cl, byte ptr [rax - 0x77]; ret; 
0x000000000003fea7: add byte ptr [rdi], cl; or ebp, ecx; wait; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000000aa86: add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000003d0bb: add byte ptr [rdi], cl; or ecx, dword ptr [rcx + rcx*4 - 1]; call rax; 
0x000000000000daea: add byte ptr [rdi], cl; sub dword ptr [rsp + 0x100], eax; lea rax, [rip + 0x85d6]; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000017e09: add byte ptr [rdi], cl; sub dword ptr [rsp + 0x140], eax; lea rax, [rip - 0x1dc9]; lea rsi, [rsp + 0x140]; call rax; 
0x00000000000313cf: add byte ptr [rdi], cl; test al, cl; add al, byte ptr [rax]; add byte ptr [rbp - 0x77], cl; ret 0x8b48; 
0x00000000000443d1: add byte ptr [rdi], cl; test byte ptr [rdi], ch; xor eax, dword ptr [rax]; add byte ptr [rax - 1], cl; ret; 
0x0000000000027744: add byte ptr [rdi], cl; test byte ptr [rsi], dl; or dword ptr [rax], eax; add byte ptr [rcx - 1], cl; ret 0x394c; 
0x000000000002a4b3: add byte ptr [rdi], cl; test cl, bl; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000002fc83: add byte ptr [rdi], cl; xchg eax, ebp; ret 0x8366; 
0x000000000004b49e: add byte ptr [rdi], cl; xchg eax, ebp; ret 0xf41; 
0x0000000000031c85: add byte ptr [rdi], cl; xchg eax, ebp; ret 0xffbb; 
0x000000000002a2db: add byte ptr [rdi], cl; xchg eax, edx; shl byte ptr [rax], 0xc8; ret; 
0x000000000002a35e: add byte ptr [rdi], cl; xchg eax, edx; shl dword ptr [rax], 0xc1; movzx eax, cl; ret; 
0x000000000001ac80: add byte ptr [rdi], cl; xchg eax, esp; shl byte ptr [rcx + rax], 0xf; mov dh, 0xc0; add rsp, 0x20; ret; 
0x000000000005df0c: add byte ptr [rdx + 0x11], bh; call qword ptr [rax + 0x18]; 
0x00000000000194b9: add byte ptr [rdx + 0x1b], bh; call rax; 
0x000000000000eb52: add byte ptr [rdx + 0x24132444], cl; add dword ptr [rdi], ecx; mov dh, 0xc0; add rsp, 0x18; ret; 
0x000000000005dc77: add byte ptr [rdx + 0x28], bh; mov r8d, 0x11f; call 0x5db10; pop rcx; ret; 
0x000000000005dcae: add byte ptr [rdx + 0x2c], bh; mov r8d, 0xc4; call 0x5db10; pop rcx; ret; 
0x000000000001cdbc: add byte ptr [rdx + 0x48072444], cl; add esp, 0x150; ret; 
0x000000000002c16f: add byte ptr [rdx + 0x49], dh; lea eax, [rsp - 0x2e]; lea rcx, [rip + 0x35536]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000053e38: add byte ptr [rdx + 0x63], cl; sbb al, 0x80; add rbx, rax; jmp rbx; 
0x000000000005bdc4: add byte ptr [rdx + 0x63], cl; xor al, 0xb9; add rsi, rcx; jmp rsi; 
0x000000000003e417: add byte ptr [rdx + 0x90], bh; call rbx; 
0x000000000003e434: add byte ptr [rdx + 0xa8], bh; call rbx; 
0x000000000005f131: add byte ptr [rdx + 0xb], bh; jmp rax; 
0x000000000005dd6a: add byte ptr [rdx + 0xd], bh; call qword ptr [rax + 0x18]; 
0x0000000000057e31: add byte ptr [rdx + 0xe], bh; jmp rax; 
0x000000000005a10f: add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x000000000005ddf0: add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000005a10f: add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x000000000005a43d: add byte ptr [rdx + 1], bh; jmp rax; 
0x0000000000058239: add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; 
0x000000000005ddd4: add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x0000000000058588: add byte ptr [rdx + 2], bh; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x00000000000582f2: add byte ptr [rdx + 3], bh; call qword ptr [rax + 0x18]; 
0x000000000005ecfd: add byte ptr [rdx + 4], bh; add rsp, 0x28; pop rbx; pop r14; jmp rax; 
0x000000000005ec4b: add byte ptr [rdx + 4], bh; call qword ptr [rax + 0x18]; 
0x000000000005ec11: add byte ptr [rdx + 5], bh; jmp rax; 
0x0000000000056d5d: add byte ptr [rdx + 5], bh; xor esi, esi; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x0000000000056d79: add byte ptr [rdx + 6], bh; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x0000000000038864: add byte ptr [rdx + 8], bh; mov rdi, r12; call rbx; 
0x0000000000037c04: add byte ptr [rdx + 8], bh; mov rdi, rbp; call rbx; 
0x000000000005eed5: add byte ptr [rdx + 9], bh; call qword ptr [rax + 0x18]; 
0x000000000003beef: add byte ptr [rdx - 0x75], cl; sub r9d, dword ptr [rax]; test rax, rax; je 0x3bf09; mov rdi, qword ptr [rbx + r13]; call rax; 
0x0000000000039b09: add byte ptr [rdx], 0; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x0000000000017c0a: add byte ptr [rdx], al; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x48; ret; 
0x0000000000017b58: add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x40; ret; 
0x000000000001054b: add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x40; add rsp, 0x108; ret; 
0x0000000000018b09: add byte ptr [rdx], al; add byte ptr [rax], al; lea rsi, [rsp + 0x210]; call rax; 
0x000000000005ef97: add byte ptr [rip - 0x7ced8c78], al; jmp qword ptr [rax]; 
0x000000000003885f: add byte ptr [rsi + 0x18], bh; mov edx, 8; mov rdi, r12; call rbx; 
0x000000000001feb5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov qword ptr [rsi + 0x10], rdi; ret; 
0x000000000004b092: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; nop dword ptr [rax]; ret; 
0x000000000004d3a4: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; nop; ret; 
0x0000000000045501: add byte ptr [rsi + 8], bh; call rbx; 
0x0000000000059a8d: add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rdi + 0x14]; ret; 
0x000000000002b9ad: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rsi]; lea rcx, [rip + 0x35be2]; movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x0000000000059a6d: add byte ptr [rsi - 0x70], ah; movzx eax, word ptr [rdi + 0x18]; ret; 
0x0000000000059a2d: add byte ptr [rsi - 0x70], ah; movzx eax, word ptr [rdi + 4]; ret; 
0x000000000000ec9d: add byte ptr [rsi - 0x70], ah; push rax; mov qword ptr [rsp], rdi; call 0xf850; pop rax; ret; 
0x000000000001e1fd: add byte ptr [rsi - 0x70], ah; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5b845]; pop rax; ret; 
0x000000000001c01d: add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x0000000000013824: add byte ptr [rsi - 0x77], ah; and al, 0x16; movzx eax, ax; add rsp, 0x18; ret; 
0x000000000004cd85: add byte ptr [rsi - 0x7d], ah; inc byte ptr [rdx]; sete al; ret; 
0x00000000000119da: add byte ptr [rsi], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000194ec: add byte ptr [rsi], al; add byte ptr [rax], al; lea rsi, [rsp + 0x618]; call rax; 
0x0000000000019634: add byte ptr [rsi], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x740], rsi; lea rdx, [rip + 0x5cc49]; lea rax, [rip - 0x272e]; call rax; 
0x000000000005474c: add byte ptr [rsi], al; mov ecx, 0x8d480001; adc eax, 0x1054b; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000505e4: add byte ptr [rsi], bh; add dword ptr [rax], eax; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000000d65e: add byte ptr [rsp + rbx - 0x15], dh; pop rbp; lea rax, [rip - 0x1eca]; call rax; 
0x0000000000018aef: add byte ptr cs:[rax], al; lea rdi, [rsp + 0x210]; call rax; 
0x00000000000599e5: add byte ptr ds:[rbp + rcx + 0xf], dh; adc byte ptr [rsi + 4], al; movups xmmword ptr [rax + 1], xmm0; mov cl, 1; mov byte ptr [rax], cl; ret; 
0x00000000000327ad: add byte ptr gs:[rax - 0x7d], cl; ret; 
0x000000000002c57e: add byte ptr ss:[rax], al; add cl, ch; ret 0xfffb; 
0x0000000000016b0c: add byte ptr ss:[rax], al; lea rdi, [rsp + 0x68]; call rax; 
0x000000000002e917: add ch, bl; adc cl, byte ptr [rax - 0x77]; ret; 
0x00000000000246d9: add ch, bl; add byte ptr [rax - 0x77], cl; ret; 
0x000000000001aca3: add ch, bl; add eax, 0x18c48348; ret; 
0x0000000000054b74: add cl, al; clc; or dword ptr [rcx], edi; ret 0x830f; 
0x0000000000019eb2: add cl, byte ptr [rax + 0xf]; ror dword ptr [rax - 0x7d], 0xf8; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x0000000000059f8c: add cl, byte ptr [rax - 0x75]; jge 0x59f91; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000409e9: add cl, byte ptr [rax - 0x77]; or byte ptr [r8 + 1], dil; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x000000000003e9c3: add cl, byte ptr [rax - 0x77]; or byte ptr [r8 + 1], dil; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000003f692: add cl, byte ptr [rax - 0x7b]; sal byte ptr [rsp + rcx*2 + 0xf], 0xb7; mov bl, byte ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x3b66; 
0x00000000000284dd: add cl, byte ptr [rax - 0x7d]; ret 0x49fe; 
0x000000000002f342: add cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000053def: add cl, byte ptr [rax - 1]; ret 0x8948; 
0x000000000004ee81: add cl, byte ptr [rax - 1]; ret; 
0x00000000000540a1: add cl, byte ptr [rcx + 0x39]; jae 0x54195; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + r10], al; pop rax; ret; 
0x00000000000599f8: add cl, byte ptr [rcx - 0x36cefeb8]; mov byte ptr [rax], cl; ret; 
0x0000000000029bb1: add cl, byte ptr [rcx - 0x7d]; ret 0x4cfe; 
0x000000000002f187: add cl, byte ptr [rcx - 0x7d]; ret; 
0x0000000000053b2f: add cl, byte ptr [rcx]; ret; 
0x0000000000036e36: add cl, ch; int1; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; dec dword ptr [r8 - 0x7d]; ret; 
0x000000000001f748: add cl, ch; jb 0x1f7bb; add byte ptr [rax], al; ret; 
0x000000000000dbab: add cl, ch; out 0, al; add byte ptr [rax], al; lea rax, [rip + 0x10658]; lea rdi, [rsp + 0x100]; call rax; 
0x000000000000dc6f: add cl, ch; push 0x48fffffc; lea eax, [rip + 0x10594]; lea rdi, [rsp + 0xe8]; call rax; 
0x000000000002c581: add cl, ch; ret 0xfffb; 
0x0000000000051ed3: add cl, ch; ret; 
0x0000000000050d7a: add dh, al; or byte ptr [r8], al; xor eax, eax; pop rbx; ret; 
0x0000000000036623: add dh, al; sbb al, 0x20; add byte ptr [rax - 1], cl; ret; 
0x000000000000d875: add dh, al; test byte ptr [rdi + rbx], ah; add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x348; ret; 
0x000000000005dbe6: add dh, byte ptr [rax + 0x5b012401]; pop r14; pop r15; ret; 
0x000000000005dedf: add dh, byte ptr [rax + 0x884101]; mov rax, r8; ret; 
0x0000000000040c35: add dh, byte ptr [rbp + 0x12]; mov qword ptr [rbx], 3; add rsp, 0x108; pop rbx; pop r14; ret; 
0x00000000000091b8: add dh, byte ptr [rbp - 0x4b]; cmp r11, 3; jne 0x9170; pop rbx; ret; 
0x000000000002080c: add dh, byte ptr [rbx + 0x17]; cmp dword ptr [rbx + 0x10], 2; jae 0x20835; pop rbx; ret; 
0x0000000000020812: add dh, byte ptr [rbx + 0x20]; pop rbx; ret; 
0x0000000000020842: add dh, byte ptr [rbx + 1]; ret; 
0x00000000000599cd: add dh, byte ptr [rcx]; leave; mov word ptr [rax], cx; ret; 
0x00000000000174ac: add dh, dh; and al, 0x27; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x0000000000017551: add dh, dh; and al, 0x37; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x00000000000592dc: add dh, dh; ret 0xf01; 
0x000000000004045a: add dl, byte ptr [rcx - 0x77cfffd]; push qword ptr [rbx + rax*2 - 0x77]; ret 0x2b8; 
0x0000000000022845: add dword ptr [eax], eax; pop rcx; ret; 
0x000000000002a62b: add dword ptr [r11 + 0x4c8b2404], r9d; and al, 3; mov dword ptr [rdi + 9], eax; mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x000000000001a646: add dword ptr [r13 + 0xa], r14d; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x000000000002ee31: add dword ptr [r8 + 0x39], ecx; ret 0x860f; 
0x00000000000457bf: add dword ptr [r8 + 0x39], ecx; ret; 
0x000000000004efc2: add dword ptr [r8], r8d; mov al, 1; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000002a87d: add dword ptr [r8], r8d; mov word ptr [rdi + 6], 0; mov dword ptr [rdi + 2], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x000000000002d499: add dword ptr [r9 + 0x39], ecx; ret 0x860f; 
0x0000000000054e56: add dword ptr [r9 - 0x7d], ecx; ret; 
0x000000000002ee32: add dword ptr [rax + 0x39], ecx; ret 0x860f; 
0x00000000000457c0: add dword ptr [rax + 0x39], ecx; ret; 
0x000000000005de5a: add dword ptr [rax + 0x884101], esi; mov rax, r8; ret; 
0x0000000000020ff5: add dword ptr [rax + rdi - 0x17], esi; xor al, 1; add byte ptr [rax], al; nop dword ptr [rax]; movzx edi, al; call rbx; 
0x000000000000eb4c: add dword ptr [rax - 0x14ecdbbc], ecx; add byte ptr [rdx + 0x24132444], cl; add dword ptr [rdi], ecx; mov dh, 0xc0; add rsp, 0x18; ret; 
0x000000000001666d: add dword ptr [rax - 0x73], ecx; add eax, 0x37bb; lea rdi, [rsp + 0x58]; call rax; 
0x0000000000018da5: add dword ptr [rax - 0x73], ecx; add eax, 0x39b3; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000015f75: add dword ptr [rax - 0x73], ecx; add eax, 0x423; lea rdi, [rsp + 0x18]; call rax; 
0x0000000000019fd2: add dword ptr [rax - 0x73], ecx; add eax, 0xffffda66; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000017ac1: add dword ptr [rax - 0x75], ecx; and al, 0x10; add rsp, 0x40; ret; 
0x0000000000017c6a: add dword ptr [rax - 0x75], ecx; je 0x17c93; adc byte ptr [rax - 0x73], cl; add eax, 0x799; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000059dbe: add dword ptr [rax - 0x75], ecx; jl 0x59de7; adc byte ptr [rax - 0x75], cl; and al, 8; call qword ptr [rax + 0x18]; 
0x00000000000128c9: add dword ptr [rax - 0x75dcdbbc], ecx; and al, 0x23; and al, 1; movzx eax, al; add rsp, 0x28; ret; 
0x0000000000011b14: add dword ptr [rax - 0x75e8dbbc], ecx; and al, 0x17; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x000000000001132f: add dword ptr [rax - 0x77], ecx; jns 0x1133c; mov qword ptr [rcx + 0x10], rsi; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xc8; ret; 
0x0000000000016260: add dword ptr [rax - 0x77], ecx; jns 0x1626d; mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0xa8; ret; 
0x000000000000c560: add dword ptr [rax - 0x77], ecx; jns 0xc56d; mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0xa8; ret; 
0x000000000002c10b: add dword ptr [rax - 0x7c], eax; dec dword ptr [rdi]; mov ebx, edi; add dword ptr [rax], eax; add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000055bab: add dword ptr [rax - 0x7d], ecx; ret 0x4802; 
0x0000000000055083: add dword ptr [rax - 0x7d], ecx; ret 0x4c02; 
0x000000000004ac13: add dword ptr [rax - 0x7d], ecx; ret 0xb810; 
0x000000000004ac35: add dword ptr [rax - 0x7d], ecx; ret 0xb820; 
0x000000000004abce: add dword ptr [rax - 0x7d], ecx; ret 0xb8f0; 
0x000000000004782f: add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000032750: add dword ptr [rax - 1], ecx; ret 0x8548; 
0x0000000000053dc8: add dword ptr [rax - 1], ecx; ret 0x8948; 
0x0000000000052ad0: add dword ptr [rax - 1], ecx; ret; 
0x000000000005dd68: add dword ptr [rax], 0; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000005df0a: add dword ptr [rax], 0x11ba00; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000005dcac: add dword ptr [rax], 0x2cba00; add byte ptr [rax], al; mov r8d, 0xc4; call 0x5db10; pop rcx; ret; 
0x000000000004cda8: add dword ptr [rax], eax; adc dword ptr [rax], eax; add rsp, 0x98; pop rbx; pop r14; ret; 
0x000000000005bff8: add dword ptr [rax], eax; adc dword ptr [rax], eax; jmp rcx; 
0x0000000000057e70: add dword ptr [rax], eax; adc dword ptr [rax], eax; mov eax, 0x5c; ret; 
0x000000000005bb7f: add dword ptr [rax], eax; adc dword ptr [rax], eax; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; mov esi, 0x5c; jmp rax; 
0x0000000000019d96: add dword ptr [rax], eax; add al, ch; ret 0xfef2; 
0x0000000000018f95: add dword ptr [rax], eax; add al, ch; ret; 
0x000000000000f268: add dword ptr [rax], eax; add bl, ch; sub ecx, dword ptr [rax - 0x73]; add eax, 0xffffc52c; call rax; 
0x000000000000d901: add dword ptr [rax], eax; add bl, ch; xlatb; lea rax, [rip + 0x2acb3]; lea rdi, [rsp + 0x68]; call rax; 
0x000000000002998d: add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x000000000002ed59: add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret 0xc148; 
0x0000000000016792: add dword ptr [rax], eax; add byte ptr [rax + rax], al; add byte ptr [rax], al; lea rax, [rip + 0x24a0]; mov edi, 4; call rax; 
0x0000000000019a40: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; adc eax, 0x5c85e; lea rax, [rip - 0x2a31]; lea rsi, [rsp + 0x110]; call rax; 
0x00000000000188c1: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; adc eax, 0x5d93d; lea rax, [rip - 0x1952]; lea rsi, [rsp + 0x190]; call rax; 
0x000000000002ee2c: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add dword ptr [r8 + 0x39], ecx; ret 0x860f; 
0x000000000001bc0b: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x25fb; lea rdi, [rsp + 0x50]; call rax; 
0x000000000000daf0: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x85d6; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000017e0f: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0xffffe237; lea rsi, [rsp + 0x140]; call rax; 
0x00000000000167c0: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0xffffeae6; xor esi, esi; call rax; 
0x0000000000036e39: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; dec dword ptr [r8 - 0x7d]; ret; 
0x0000000000018841: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; mov ah, 0x24; jo 0x1884b; add byte ptr [rax], al; call rax; 
0x0000000000034c66: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; or eax, 0x2cdd0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000034c0a: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; or eax, 0x2ce14; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000284d7: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; pop rcx; add cl, byte ptr [rax - 0x7d]; ret 0x49fe; 
0x000000000000defa: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rsp; and al, 0x50; call rax; 
0x0000000000018ac5: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; add eax, 0x61411; lea rdx, [rsp + 0x1b0]; lea rcx, [rsp + 0x1f8]; call rax; 
0x0000000000047511: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; and al, 0x20; mov qword ptr [rsp + 0x178], rax; lea rsi, [rsp + 0x150]; call qword ptr [rcx + 0x20]; 
0x000000000000d4a1: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; push rsp; and al, 0x38; mov rax, qword ptr [rip + 0x6c310]; call rax; 
0x000000000004a614: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000002c9d8: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000000358c4: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000024958: add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; sal byte ptr [rsi + rbp*2 + 0x48], 0x8d; dec qword ptr [rax - 0x77]; ret 0x8348; 
0x000000000002a3d7: add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000004765b: add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret; 
0x000000000004cc70: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop r14; ret; 
0x00000000000170ff: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x20; ret; 
0x00000000000404bc: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000170b7: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x38; ret; 
0x000000000003e8fa: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000016fe0: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x48; ret; 
0x000000000001b923: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x1ae10; add rsp, 0x18; ret; 
0x000000000001da53: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x1d330; add rsp, 0x18; ret; 
0x000000000000d4d5: add dword ptr [rax], eax; add byte ptr [rax], al; call 0xc4b0; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x2b0d6]; call rax; 
0x000000000005a111: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000005ddf2: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000005a111: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x000000000005ee82: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rip + 0x1a64c]; add rsp, 0x88; ret; 
0x000000000005e65c: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rip + 0x1ae72]; add rsp, 0x88; ret; 
0x000000000005e427: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rip + 0x1b0a7]; add rsp, 0x88; ret; 
0x000000000005e2fc: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rip + 0x1b1d2]; add rsp, 0x88; ret; 
0x000000000005e25c: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rip + 0x1b272]; add rsp, 0x88; ret; 
0x000000000005e1c9: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rip + 0x1b305]; add rsp, 0x88; ret; 
0x000000000005e139: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rip + 0x1b395]; add rsp, 0x88; ret; 
0x000000000005e0a7: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rip + 0x1b427]; add rsp, 0x88; ret; 
0x000000000005e017: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rip + 0x1b4b7]; add rsp, 0x88; ret; 
0x0000000000036d0f: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rip + 0x42a6f]; lea rax, [rip + 0x400a0]; pop rcx; ret; 
0x000000000005a43f: add dword ptr [rax], eax; add byte ptr [rax], al; jmp rax; 
0x0000000000017d90: add dword ptr [rax], eax; add byte ptr [rax], al; lea rax, [rip - 0x188b]; call rax; 
0x00000000000199a2: add dword ptr [rax], eax; add byte ptr [rax], al; lea rax, [rip - 0x235d]; lea rdi, [rsp + 0xc0]; lea rsi, [rsp + 0xe0]; call rax; 
0x0000000000019cc4: add dword ptr [rax], eax; add byte ptr [rax], al; lea rax, [rip - 0x273f]; lea rdi, [rsp + 0xc0]; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000003b347: add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000002283a: add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ec57: add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x00000000000409ef: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x000000000003e9c9: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000002a587: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x0000000000017634: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x50; ret; 
0x000000000001163c: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x0000000000013b87: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x50; ret; 
0x0000000000013559: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x88; ret; 
0x00000000000178f7: add dword ptr [rax], eax; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xb8; ret; 
0x000000000003559d: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop r14; pop rbp; ret; 
0x000000000002a272: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000005ebe2: add dword ptr [rax], eax; add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x1a8ea]; add rsp, 0x28; ret; 
0x000000000005eab2: add dword ptr [rax], eax; add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x1aa1a]; add rsp, 0x28; ret; 
0x000000000005e84b: add dword ptr [rax], eax; add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x1ac81]; add rsp, 0x28; ret; 
0x000000000005e75e: add dword ptr [rax], eax; add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x1ad6e]; add rsp, 0x28; ret; 
0x000000000005e6b0: add dword ptr [rax], eax; add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x1ae1c]; add rsp, 0x88; ret; 
0x000000000005e47b: add dword ptr [rax], eax; add byte ptr [rax], al; xor ecx, ecx; call qword ptr [rip + 0x1b051]; add rsp, 0x88; ret; 
0x00000000000426dd: add dword ptr [rax], eax; add byte ptr [rax], al; xor edx, edx; call rbx; 
0x0000000000029bab: add dword ptr [rax], eax; add byte ptr [rbp + rcx*4 + 0x79], cl; add cl, byte ptr [rcx - 0x7d]; ret 0x4cfe; 
0x0000000000040c43: add dword ptr [rax], eax; add byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000000a473: add dword ptr [rax], eax; add byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x000000000004e9ae: add dword ptr [rax], eax; add byte ptr [rcx + 0x39], cl; int 0x77; sub cl, byte ptr [rax - 0x77]; ret; 
0x000000000002c112: add dword ptr [rax], eax; add byte ptr [rcx + 0x39], cl; ret; 
0x000000000000a8ac: add dword ptr [rax], eax; add byte ptr [rcx + 0xc6349c1], cl; mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x0000000000039e67: add dword ptr [rax], eax; add byte ptr [rcx + 0xf], al; mov dh, 0xa; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x000000000003cf3b: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x000000000005aaa7: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; pop rdi; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000058f77: add dword ptr [rax], eax; add byte ptr [rcx - 1], cl; ret 0xff48; 
0x0000000000057b8a: add dword ptr [rax], eax; add byte ptr [rcx - 1], cl; ret; 
0x000000000001666a: add dword ptr [rax], eax; add byte ptr [rcx], al; lea rax, [rip + 0x37bb]; lea rdi, [rsp + 0x58]; call rax; 
0x0000000000035c8a: add dword ptr [rax], eax; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x00000000000313cd: add dword ptr [rax], eax; add byte ptr [rdi], cl; test al, cl; add al, byte ptr [rax]; add byte ptr [rbp - 0x77], cl; ret 0x8b48; 
0x000000000002a2d9: add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg eax, edx; shl byte ptr [rax], 0xc8; ret; 
0x00000000000454ff: add dword ptr [rax], eax; add byte ptr [rsi + 8], bh; call rbx; 
0x000000000005e768: add dword ptr [rax], eax; add rsp, 0x28; ret; 
0x000000000005e98e: add dword ptr [rax], eax; add rsp, 0x30; pop rbx; ret; 
0x000000000005aa3e: add dword ptr [rax], eax; add rsp, 0x38; ret; 
0x000000000005a568: add dword ptr [rax], eax; add rsp, 0x48; ret; 
0x000000000005e01f: add dword ptr [rax], eax; add rsp, 0x88; ret; 
0x000000000000e16a: add dword ptr [rax], eax; call rax; 
0x000000000000ce9f: add dword ptr [rax], eax; lea rdi, [rsp + 0x100]; call rax; 
0x000000000000cbfe: add dword ptr [rax], eax; lea rdi, [rsp + 0x120]; call rax; 
0x000000000000cb5a: add dword ptr [rax], eax; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000d5dd: add dword ptr [rax], eax; lea rdi, [rsp + 0x248]; call rax; 
0x000000000000d8e2: add dword ptr [rax], eax; lea rdi, [rsp + 0x50]; call rax; 
0x000000000000c948: add dword ptr [rax], eax; lea rdi, [rsp + 0x88]; call rax; 
0x000000000000dc7a: add dword ptr [rax], eax; lea rdi, [rsp + 0xe8]; call rax; 
0x0000000000054750: add dword ptr [rax], eax; lea rdx, [rip + 0x1054b]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000005de45: add dword ptr [rax], eax; mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000004efc3: add dword ptr [rax], eax; mov al, 1; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000004b3a7: add dword ptr [rax], eax; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x00000000000599be: add dword ptr [rax], eax; mov word ptr [rax], cx; ret; 
0x000000000002a87e: add dword ptr [rax], eax; mov word ptr [rdi + 6], 0; mov dword ptr [rdi + 2], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x0000000000050e08: add dword ptr [rax], eax; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000054757: add dword ptr [rax], eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004b399: add dword ptr [rax], eax; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; lea rdx, [rip + 0x18eef]; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x0000000000053e37: add dword ptr [rax], eax; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x000000000004cd72: add dword ptr [rax], eax; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000505e6: add dword ptr [rax], eax; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000004f8ce: add dword ptr [rax], eax; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000001ec63: add dword ptr [rax], eax; pop rcx; ret; 
0x000000000002a35d: add dword ptr [rax], eax; setb cl; and cl, al; movzx eax, cl; ret; 
0x000000000005d497: add dword ptr [rax], eax; ud2; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000001f094: add dword ptr [rax], eax; ud2; nop dword ptr [rax + rax]; ret; 
0x0000000000039093: add dword ptr [rbp + 0x3b], esi; lea r14, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000037860: add dword ptr [rbp + 0x3b], esi; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000391cd: add dword ptr [rbp + 0x3b], esi; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000043923: add dword ptr [rbp + 0x3c], esi; lea rbp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000038e3b: add dword ptr [rbp + 0x3d], esi; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020e89: add dword ptr [rbp + 0x3d], esi; mov r14, r15; dec r14; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000003bfef: add dword ptr [rbp + 0x3d], esi; mov r14, rbx; dec r14; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000037fcc: add dword ptr [rbp + 0x3e], esi; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003b448: add dword ptr [rbp + 0x3f], esi; lea r15, [r12 - 1]; mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x000000000001f3a3: add dword ptr [rbp + 0x40], esi; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001ffbf: add dword ptr [rbp + 0x40], esi; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003847e: add dword ptr [rbp + 0x45], esi; mov r12, rbp; dec r12; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003ec5a: add dword ptr [rbp + 0x52], esi; lea rbx, [r15 - 1]; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x0000000000019eba: add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x0000000000017556: add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000c2e3: add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x000000000001a4ad: add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x00000000000174b1: add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x00000000000172e6: add dword ptr [rbp + 0xd], esi; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xd8; ret; 
0x0000000000017217: add dword ptr [rbp + 0xd], esi; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xd8; ret; 
0x000000000005de53: add dword ptr [rbp + 0xe], esi; mov byte ptr [r8 + 1], 1; mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000000c373: add dword ptr [rbp + 0xe], esi; mov rax, qword ptr [rsp + 0x18]; mov edx, dword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x0000000000017413: add dword ptr [rbp + 0xf], esi; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000e593: add dword ptr [rbp + 5], esi; add rsp, 0x38; ret; 
0x00000000000226d3: add dword ptr [rbp + 7], esi; shr rdi, 8; mov eax, edi; ret; 
0x000000000000c227: add dword ptr [rbp + 9], esi; mov eax, dword ptr [rsp + 0x14]; add rsp, 0x28; ret; 
0x000000000005dc4b: add dword ptr [rbx + 0x2737fff], eax; pop rcx; ret; 
0x000000000005dbea: add dword ptr [rbx + 0x41], ebx; pop rsi; pop r15; ret; 
0x000000000002a62c: add dword ptr [rbx + 0x4c8b2404], ecx; and al, 3; mov dword ptr [rdi + 9], eax; mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x000000000001cdb3: add dword ptr [rbx - 0x15], esi; adc esi, eax; and al, 7; add byte ptr [rdx + 0x48072444], cl; add esp, 0x150; ret; 
0x000000000002d49a: add dword ptr [rcx + 0x39], ecx; ret 0x860f; 
0x000000000005dbe8: add dword ptr [rcx + rax], esp; pop rbx; pop r14; pop r15; ret; 
0x000000000005366c: add dword ptr [rcx + rcx*8 + 0xb5840f], eax; add byte ptr [rax], al; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x000000000005de48: add dword ptr [rcx - 0x78], eax; add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000002c0b4: add dword ptr [rcx - 0x7d], ecx; ret 0x4902; 
0x000000000005904f: add dword ptr [rcx - 0x7d], ecx; ret 0x4c02; 
0x0000000000054e57: add dword ptr [rcx - 0x7d], ecx; ret; 
0x00000000000220af: add dword ptr [rcx - 1], ecx; ret; 
0x000000000005de59: add dword ptr [rcx], eax; mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x00000000000599fb: add dword ptr [rcx], esi; leave; mov byte ptr [rax], cl; ret; 
0x000000000004cd36: add dword ptr [rdi + 0x18], esi; ret; 
0x0000000000009f77: add dword ptr [rdi], eax; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x000000000003da9c: add dword ptr [rdi], ecx; adc dword ptr [rsp + 0x10], eax; call qword ptr [rax + 0x20]; 
0x0000000000011ab7: add dword ptr [rdi], ecx; mov dh, 0xc0; add rsp, 0x10; ret; 
0x000000000000bf62: add dword ptr [rdi], ecx; mov dh, 0xc0; add rsp, 0x18; ret; 
0x000000000001ac85: add dword ptr [rdi], ecx; mov dh, 0xc0; add rsp, 0x20; ret; 
0x00000000000128d3: add dword ptr [rdi], ecx; mov dh, 0xc0; add rsp, 0x28; ret; 
0x000000000000c0bd: add dword ptr [rdi], ecx; mov dh, 0xc0; add rsp, 0x38; ret; 
0x000000000000c120: add dword ptr [rdi], ecx; mov dh, 0xc0; add rsp, 0x48; ret; 
0x00000000000141db: add dword ptr [rdi], ecx; mov dh, 0xc0; cmp rax, 0; jne 0x141ea; add rsp, 0x58; ret; 
0x0000000000042792: add dword ptr [rdi], ecx; mov dh, 0xc0; lea eax, [rax + rax*8]; add rsp, 0x28; ret; 
0x000000000005c908: add dword ptr [rdi], ecx; popfq; ret 0x148; 
0x000000000002186b: add dword ptr [rdi], ecx; sub byte ptr [rsp], al; movups xmmword ptr [rcx + 8], xmm0; add rsp, 0x18; ret; 
0x000000000005600d: add dword ptr [rdi], ecx; xchg eax, esp; ret 0x8040; 
0x000000000005a5a4: add dword ptr [rdi], esi; mov eax, ebx; pop rbx; pop r14; pop r15; ret; 
0x0000000000009f76: add dword ptr [rdi], r8d; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x0000000000035e85: add dword ptr [rdx + rbp + 0x31], esi; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x000000000005dede: add dword ptr [rdx], eax; mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000005ddb3: add dword ptr [rsi + rax + 0x48], esi; add esp, 0x20; pop rbx; ret; 
0x000000000000a8ab: add dword ptr cs:[rax], eax; add byte ptr [rcx + 0xc6349c1], cl; mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x00000000000505e5: add dword ptr ds:[rax], eax; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x0000000000050e07: add dword ptr ss:[rax], eax; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000e167: add eax, 0x100a4; call rax; 
0x0000000000019b01: add eax, 0x100a; call rax; 
0x000000000000dd17: add eax, 0x104f4; lea rdi, [rsp + 0x50]; call rax; 
0x000000000000dcc0: add eax, 0x1054b; lea rdi, [rsp + 0xe8]; call rax; 
0x000000000000dc77: add eax, 0x10594; lea rdi, [rsp + 0xe8]; call rax; 
0x000000000000dc35: add eax, 0x105d6; lea rdi, [rsp + 0x100]; call rax; 
0x000000000000dbb3: add eax, 0x10658; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000019a78: add eax, 0x1083; lea rdi, [rsp + 0xb0]; call rax; 
0x000000000000d8df: add eax, 0x1092c; lea rdi, [rsp + 0x50]; call rax; 
0x000000000000f08c: add eax, 0x10; mov qword ptr [rsp + 0x20], rax; lea rax, [rip + 0xb9f5]; call rax; 
0x000000000000f04e: add eax, 0x10; mov qword ptr [rsp + 0x20], rax; lea rax, [rip + 0xba33]; call rax; 
0x000000000000d72a: add eax, 0x10ae1; lea rdi, [rsp + 0x248]; call rax; 
0x000000000000d6e9: add eax, 0x10b22; lea rdi, [rsp + 0x248]; call rax; 
0x000000000000d5da: add eax, 0x10c31; lea rdi, [rsp + 0x248]; call rax; 
0x000000000000d45a: add eax, 0x10db1; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000053e34: add eax, 0x10df7; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x000000000000d1b9: add eax, 0x11052; lea rdi, [rsp + 0x120]; call rax; 
0x000000000000d19b: add eax, 0x11070; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000d117: add eax, 0x110f4; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000cf05: add eax, 0x11306; lea rdi, [rsp + 0x88]; call rax; 
0x000000000000ce9c: add eax, 0x1136f; lea rdi, [rsp + 0x100]; call rax; 
0x000000000000cbfb: add eax, 0x11610; lea rdi, [rsp + 0x120]; call rax; 
0x000000000000cbdd: add eax, 0x1162e; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000cb57: add eax, 0x116b4; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000c945: add eax, 0x118c6; lea rdi, [rsp + 0x88]; call rax; 
0x000000000004cd34: add eax, 0x18770148; ret; 
0x000000000000efb3: add eax, 0x18c48348; ret; 
0x000000000001c1d3: add eax, 0x1c28; call rax; 
0x000000000001c1d3: add eax, 0x1c28; call rax; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000015faf: add eax, 0x1c8c; lea rdx, [rsp + 0x18]; call rax; 
0x0000000000018990: add eax, 0x1d1b; call rax; 
0x00000000000188f5: add eax, 0x1d66; lea rdi, [rsp + 0x140]; call rax; 
0x0000000000018727: add eax, 0x1f34; lea rdi, [rsp + 0xd0]; call rax; 
0x00000000000187c2: add eax, 0x1fa9; call rax; 
0x0000000000018bb2: add eax, 0x2059; lea rdi, [rsp + 0x140]; call rax; 
0x0000000000018b70: add eax, 0x209b; lea rdi, [rsp + 0x140]; call rax; 
0x000000000004ac2a: add eax, 0x20b9; add byte ptr [rcx + 0x148d48c9], cl; add dword ptr [rax - 0x7d], ecx; ret 0xb820; 
0x00000000000151c0: add eax, 0x21cb; call rax; 
0x000000000001890d: add eax, 0x22fe; lea rdi, [rsp + 0x140]; call rax; 
0x000000000003dcf4: add eax, 0x23f7b; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000001679b: add eax, 0x24a0; mov edi, 4; call rax; 
0x000000000001bd4a: add eax, 0x24c1; lea rdi, [rsp + 0x80]; call rax; 
0x000000000001873f: add eax, 0x24cc; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000001bd3a: add eax, 0x24d1; lea rdi, [rsp + 0x50]; call rax; 
0x000000000001bceb: add eax, 0x2520; lea rdi, [rsp + 0x50]; call rax; 
0x000000000001bc10: add eax, 0x25fb; lea rdi, [rsp + 0x50]; call rax; 
0x0000000000039fdb: add eax, 0x27bec; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x0000000000039b07: add eax, 0x28078; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x0000000000009f7e: add eax, 0x28c48348; ret; 
0x000000000000decb: add eax, 0x29a10; call rax; 
0x000000000000d960: add eax, 0x29f7b; call rax; 
0x000000000000d918: add eax, 0x2a453; call rax; 
0x000000000000d935: add eax, 0x2a466; lea rdi, [rsp + 0x98]; call rax; 
0x000000000000e04e: add eax, 0x2a56d; lea rdi, [rsp + 0x1c8]; call rax; 
0x000000000000dea3: add eax, 0x2a718; lea rdi, [rsp + 0x158]; call rax; 
0x000000000000de25: add eax, 0x2a796; lea rdi, [rsp + 0x128]; call rax; 
0x000000000000ddeb: add eax, 0x2a7d0; lea rdi, [rsp + 0xf8]; call rax; 
0x000000000000ddb1: add eax, 0x2a80a; lea rdi, [rsp + 0xc8]; call rax; 
0x000000000000dd77: add eax, 0x2a844; lea rdi, [rsp + 0x98]; call rax; 
0x000000000003721f: add eax, 0x2a874; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x000000000000dd40: add eax, 0x2a87b; lea rdi, [rsp + 0x68]; call rax; 
0x000000000000d4ee: add eax, 0x2a87d; call rax; 
0x000000000000d4ff: add eax, 0x2a89c; lea rdi, [rsp + 0x220]; call rax; 
0x000000000000cf92: add eax, 0x2a949; call rax; 
0x000000000000dc22: add eax, 0x2a999; lea rdi, [rsp + 0x120]; call rax; 
0x000000000000db78: add eax, 0x2aa43; lea rdi, [rsp + 0x160]; call rax; 
0x000000000000da82: add eax, 0x2ab39; lea rdi, [rsp + 0x190]; call rax; 
0x000000000000d908: add eax, 0x2acb3; lea rdi, [rsp + 0x68]; call rax; 
0x000000000000d7ab: add eax, 0x2ae10; lea rdi, [rsp + 0x2a8]; call rax; 
0x000000000000cf44: add eax, 0x2ae27; call rax; 
0x000000000000cf67: add eax, 0x2ae34; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000000d715: add eax, 0x2aea6; lea rdi, [rsp + 0x2e8]; call rax; 
0x000000000000c9d2: add eax, 0x2af09; call rax; 
0x000000000000d4e5: add eax, 0x2b0d6; call rax; 
0x000000000000d40e: add eax, 0x2b1ad; lea rdi, [rsp + 0x2e8]; call rax; 
0x000000000000c984: add eax, 0x2b3e7; call rax; 
0x000000000000c9a7: add eax, 0x2b3f4; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000000d0d1: add eax, 0x2b4ea; lea rdi, [rsp + 0x348]; call rax; 
0x000000000000cf31: add eax, 0x2b68a; lea rdi, [rsp + 0xa0]; call rax; 
0x000000000000ce50: add eax, 0x2b76b; lea rdi, [rsp + 0x2e8]; call rax; 
0x000000000000cb11: add eax, 0x2baaa; lea rdi, [rsp + 0x348]; call rax; 
0x000000000000c971: add eax, 0x2bc4a; lea rdi, [rsp + 0xa0]; call rax; 
0x0000000000017d79: add eax, 0x2cb2; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000d2dc: add eax, 0x2dbcf; lea rdi, [rsp + 0x1c8]; call rax; 
0x0000000000010c22: add eax, 0x2e0c9; lea rdi, [rsp + 0x38]; call rax; 
0x000000000000cd1e: add eax, 0x2e18d; lea rdi, [rsp + 0x1c8]; call rax; 
0x0000000000010b82: add eax, 0x2e3f9; call rax; 
0x0000000000010b0b: add eax, 0x2e470; call rax; 
0x0000000000018aed: add eax, 0x2eae; lea rdi, [rsp + 0x210]; call rax; 
0x0000000000056d5f: add eax, 0x31000000; test byte ptr [rax - 0x77], 0x10; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x00000000000194b0: add eax, 0x336b; mov edi, 0x27; mov edx, 0x1b; call rax; 
0x00000000000169d0: add eax, 0x345b; lea rdi, [rsp + 0x30]; call rax; 
0x000000000002c377: add eax, 0x35308; movsxd rcx, dword ptr [r8 + rbp*4]; add rcx, r8; jmp rcx; 
0x0000000000016b0a: add eax, 0x3641; lea rdi, [rsp + 0x68]; call rax; 
0x000000000002b01a: add eax, 0x3655d; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x0000000000016670: add eax, 0x37bb; lea rdi, [rsp + 0x58]; call rax; 
0x00000000000423a3: add eax, 0x37d30; test rax, rax; lea rcx, [rip - 0x6442]; cmovne rcx, rax; call rcx; 
0x000000000000e595: add eax, 0x38c48348; ret; 
0x000000000001a8cd: add eax, 0x392e; lea rdi, [rsp + 0x10]; call rax; 
0x00000000000275e7: add eax, 0x39944; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x0000000000018da8: add eax, 0x39b3; lea rdi, [rsp + 0x28]; call rax; 
0x000000000001670b: add eax, 0x3a40; lea rdi, [rsp + 0x90]; call rax; 
0x000000000001c412: add eax, 0x3a849; call rax; 
0x000000000001c3f4: add eax, 0x3a867; call rax; 
0x0000000000016487: add eax, 0x3b14; lea rdx, [rsp + 0x20]; call rax; 
0x000000000003e61b: add eax, 0x3bb09; pop rcx; ret; 
0x000000000003e60d: add eax, 0x3bb16; lea rdx, [rip + 0x3bb07]; lea rax, [rip + 0x3bb09]; pop rcx; ret; 
0x000000000001db7f: add eax, 0x3be8c; call rax; 
0x000000000001bdcc: add eax, 0x3c11f; call rax; 
0x000000000001c2c5: add eax, 0x3d6; call rax; 
0x000000000002083d: add eax, 0x3f839000; add dh, byte ptr [rbx + 1]; ret; 
0x0000000000019af2: add eax, 0x3fee9; call rax; 
0x0000000000036d1b: add eax, 0x400a0; pop rcx; ret; 
0x00000000000169e5: add eax, 0x4096; call rax; 
0x000000000001bb8c: add eax, 0x4098f; lea rdi, [rsp + 0x68]; mov qword ptr [rsp + 0x20], rdi; call rax; 
0x0000000000039652: add eax, 0x40a71; mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x000000000001698e: add eax, 0x40ed; call rax; 
0x000000000001a554: add eax, 0x417; call rax; 
0x0000000000015482: add eax, 0x417d9; call rax; 
0x0000000000015464: add eax, 0x417f7; call rax; 
0x000000000001520f: add eax, 0x41a4c; call rax; 
0x0000000000037d8c: add eax, 0x422f7; pop rcx; ret; 
0x0000000000037d7e: add eax, 0x42305; pop rcx; ret; 
0x0000000000037d72: add eax, 0x42349; cmp eax, 4; jne 0x37d85; lea rax, [rip + 0x42305]; pop rcx; ret; 
0x0000000000015f78: add eax, 0x423; lea rdi, [rsp + 0x18]; call rax; 
0x0000000000016930: add eax, 0x423b; lea rdi, [rsp + 0x40]; call rax; 
0x00000000000378fc: add eax, 0x4274f; pop rcx; ret; 
0x00000000000378ee: add eax, 0x4275d; pop rcx; ret; 
0x00000000000378e2: add eax, 0x42799; cmp eax, 4; jne 0x378f5; lea rax, [rip + 0x4275d]; pop rcx; ret; 
0x000000000001945c: add eax, 0x430bf; lea rdi, [rsp + 0x630]; call rax; 
0x000000000001dded: add eax, 0x448b4800; and al, 0x10; add rsp, 0x68; ret; 
0x000000000001bb32: add eax, 0x448b4800; and al, 0x18; add rsp, 0x28; ret; 
0x000000000001bd80: add eax, 0x448b4800; and al, 0x48; add rsp, 0x108; ret; 
0x0000000000019ad0: add eax, 0x448b4800; and al, 8; add rsp, 0x18; ret; 
0x0000000000019b22: add eax, 0x448b4800; and al, 8; add rsp, 0x28; ret; 
0x00000000000197a3: add eax, 0x448b4800; and al, 8; add rsp, 0x48; ret; 
0x000000000000fa2f: add eax, 0x4722c; call rax; 
0x0000000000012a02: add eax, 0x47a09; lea rsi, [rsp + 0x38]; call rax; 
0x000000000001e3b7: add eax, 0x48000000; add esp, 0x58; ret; 
0x000000000005e1cf: add eax, 0x480001b3; add esp, 0x88; ret; 
0x00000000000118b0: add eax, 0x4806b; call rax; 
0x000000000001a9cc: add eax, 0x480feb00; mov edi, dword ptr [rsp + 8]; add rdi, 8; call qword ptr [rip + 0x5f141]; add rsp, 0x18; ret; 
0x000000000001a961: add eax, 0x48b4800; and al, 0x48; add esp, 0x28; ret; 
0x000000000001ad4c: add eax, 0x48b4800; and al, 0x59; ret; 
0x000000000001f049: add eax, 0x48e88900; add esp, 0x28; pop rbx; pop rbp; ret; 
0x000000000000e18d: add eax, 0x49e4e; lea rsi, [rsp + 0x28]; call rax; 
0x000000000000d377: add eax, 0x49e74; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000cdb9: add eax, 0x4a432; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000e152: add eax, 0x4c879; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000019426: add eax, 0x4de5; lea rdi, [rsp + 0x560]; call rax; 
0x0000000000016908: add eax, 0x4e3; lea rdi, [rsp + 0x40]; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000000d57c: add eax, 0x4ef9f; lea rdi, [rsp + 0x260]; mov qword ptr [rsp + 0x40], rdi; call rax; 
0x000000000001ccc8: add eax, 0x583; call rax; 
0x000000000001cd23: add eax, 0x58; call rax; 
0x00000000000141e4: add eax, 0x58c48348; ret; 
0x000000000001cba4: add eax, 0x58d4800; ret; 
0x0000000000018fba: add eax, 0x58d4800; sub eax, 0x48ffff26; lea edi, [rsp + 0x28]; call rax; 
0x0000000000037d7f: add eax, 0x59000423; ret; 
0x0000000000049f5f: add eax, 0x5b0002f6; ret; 
0x000000000001519b: add eax, 0x5b60; call rax; 
0x000000000001519b: add eax, 0x5b60; call rax; add rsp, 0x28; ret; 
0x000000000001e260: add eax, 0x5b; call rax; 
0x000000000001f196: add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x0000000000010f8a: add eax, 0x5da1; call rax; 
0x000000000001bb6d: add eax, 0x5db9e; call rax; 
0x000000000001f3e4: add eax, 0x5e415b00; pop r15; ret; 
0x0000000000010c6a: add eax, 0x60c1; call rax; 
0x0000000000018aca: add eax, 0x61411; lea rdx, [rsp + 0x1b0]; lea rcx, [rsp + 0x1f8]; call rax; 
0x0000000000054756: add eax, 0x63480001; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000000ea1f: add eax, 0x6746c; call 0x11490; add rsp, 0x1c8; ret; 
0x0000000000034726: add eax, 0x6b490000; sal dword ptr [rax + 0x48], 0xc7; ret; 
0x000000000000d4ab: add eax, 0x6c310; call rax; 
0x000000000000bbc5: add eax, 0x6d8a6; test rax, rax; je 0xbbd8; jmp rax; 
0x000000000000bc06: add eax, 0x6e295; test rax, rax; je 0xbc18; jmp rax; 
0x000000000000a015: add eax, 0x700a6; cmp eax, 4; jne 0xa024; add rsp, 0x28; ret; 
0x0000000000009fc5: add eax, 0x700b6; cmp eax, 4; jne 0x9fd4; add rsp, 0x28; ret; 
0x0000000000009f75: add eax, 0x70146; cmp eax, 4; jne 0x9f84; add rsp, 0x28; ret; 
0x000000000000900a: add eax, 0x70979; test rax, rax; je 0x9016; call rax; 
0x000000000000900a: add eax, 0x70979; test rax, rax; je 0x9016; call rax; add rsp, 8; ret; 
0x0000000000017c72: add eax, 0x799; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000f9e0: add eax, 0x79ab; call rax; 
0x000000000001a39e: add eax, 0x7cd; lea rdi, [rsp + 0x38]; call rax; 
0x000000000001a373: add eax, 0x7f8; lea rdi, [rsp + 0x38]; call rax; 
0x000000000005ef98: add eax, 0x83127388; jmp qword ptr [rax]; 
0x0000000000024cb5: add eax, 0x83480000; sar al, 0x75; ret 0x280f; 
0x0000000000024d75: add eax, 0x83480000; sar al, 0x75; ret 0xc031; 
0x0000000000024e05: add eax, 0x83480000; sar eax, 0x75; ret 0xc749; 
0x000000000000daf5: add eax, 0x85d6; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000046741: add eax, 0x89480000; ret 0x8948; 
0x00000000000365bb: add eax, 0x894800eb; ret; 
0x000000000004627d: add eax, 0x894c17eb; ret 0x8349; 
0x000000000002030f: add eax, 0x8ba; add bh, bh; and eax, 0x5946d; ret; 
0x000000000001fc80: add eax, 0x8ba; add byte ptr [rbx - 1], bl; and eax, 0x59afb; pop rbx; ret; 
0x000000000001a3c7: add eax, 0x8c4; lea rdi, [rsp + 0x18]; call rax; 
0x00000000000192c8: add eax, 0x8d480000; adc eax, 0x5cf8e; call qword ptr [rip + 0x606e8]; mov rax, qword ptr [rsp + 0x50]; add rsp, 0x788; ret; 
0x00000000000505de: add eax, 0x8d480000; sbb eax, 0x13e00; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000002a32a: add eax, 0x8d481677; or eax, 0x37178; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a2ba: add eax, 0x8d481677; or eax, 0x371d0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a25a: add eax, 0x8d481a77; or eax, 0x37218; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000318a4: add eax, 0x8d488477; adc eax, 0x2ff86; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000001aaac: add eax, 0x8f; call rax; 
0x000000000000d0fa: add eax, 0x8fd1; lea rdi, [rsp + 0x178]; call rax; 
0x0000000000015335: add eax, 0x926; call rax; 
0x000000000005bfae: add eax, 0x94b1; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bf4e: add eax, 0x9511; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bf15: add eax, 0x954a; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bed7: add eax, 0x9588; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000000cb3a: add eax, 0x9591; lea rdi, [rsp + 0x178]; call rax; 
0x000000000001a08a: add eax, 0x961; call rax; 
0x000000000005be3d: add eax, 0x9622; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bdfe: add eax, 0x9661; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000000d350: add eax, 0x99db; lea rdi, [rsp + 0x190]; call rax; 
0x0000000000014561: add eax, 0x9cba; lea rdi, [rsp + 0x18]; call rax; 
0x00000000000144c1: add eax, 0x9d5a; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000014376: add eax, 0x9ea5; lea rdi, [rsp + 0x30]; call rax; 
0x00000000000142a3: add eax, 0x9f78; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000cd92: add eax, 0x9f99; lea rdi, [rsp + 0x190]; call rax; 
0x000000000001bd1b: add eax, 0xb00; mov edi, 0x27; call rax; 
0x000000000001bad1: add eax, 0xb2444c6; or dword ptr [rdx + 0x480b2444], ecx; add esp, 0x10; ret; 
0x000000000000f234: add eax, 0xb857; call rax; 
0x000000000000f2ff: add eax, 0xb90c; call rax; 
0x000000000000f2db: add eax, 0xb930; call rax; 
0x000000000000f125: add eax, 0xb966; call rax; 
0x000000000000f0e0: add eax, 0xb9ab; call rax; 
0x000000000000f096: add eax, 0xb9f5; call rax; 
0x000000000000f058: add eax, 0xba33; call rax; 
0x000000000001ab90: add eax, 0xbb; call rax; 
0x000000000000d62b: add eax, 0xc1d0; lea rdi, [rsp + 0x278]; call rax; 
0x000000000001e426: add eax, 0xc4834800; cmp bl, al; lea rax, [rip - 0x12c94]; call rax; 
0x000000000001a906: add eax, 0xc4834800; cmp bl, al; lea rax, [rip - 0xf174]; call rax; 
0x000000000001f77f: add eax, 0xc4834800; or byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000001f29c: add eax, 0xc4834800; or byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x000000000001e1d6: add eax, 0xc4834800; sub bl, al; lea rax, [rip - 0x12a44]; call rax; 
0x000000000001e282: add eax, 0xc4834800; sub bl, al; lea rax, [rip - 0x12af0]; call rax; 
0x000000000001e32b: add eax, 0xc4834800; sub bl, al; lea rax, [rip - 0x12b99]; call rax; 
0x000000000001aace: add eax, 0xc4834800; sub bl, al; lea rax, [rip - 0xf33c]; call rax; 
0x000000000001abb2: add eax, 0xc4834800; sub bl, al; lea rax, [rip - 0xf420]; call rax; 
0x000000000001a054: add eax, 0xc67; lea rdi, [rsp + 0x58]; lea rdx, [rsp + 0x70]; call rax; 
0x000000000001c851: add eax, 0xc6894800; mov al, byte ptr [rsp + 0x16]; movzx edi, al; call qword ptr [rip + 0x5d3ed]; add rsp, 0x28; ret; 
0x000000000001bf6c: add eax, 0xc6894800; mov al, byte ptr [rsp + 0x16]; movzx edi, al; call qword ptr [rip + 0x5dcd2]; add rsp, 0x18; ret; 
0x000000000000d849: add eax, 0xd322; lea rdi, [rsp + 0x278]; call rax; 
0x000000000000d7be: add eax, 0xd3ad; lea rdi, [rsp + 0x290]; call rax; 
0x000000000000d740: add eax, 0xd42b; lea rdi, [rsp + 0x290]; call rax; 
0x0000000000019da2: add eax, 0xd59; lea rdi, [rsp + 0xb0]; call rax; 
0x0000000000016b85: add eax, 0xd6; call rax; 
0x0000000000010b58: add eax, 0xd6b3; call rax; 
0x000000000001d233: add eax, 0xe7894800; call qword ptr [rip + 0x5cd82]; add rsp, 0x18; ret; 
0x000000000004ac25: add eax, 0xebc9bc0f; add eax, 0x20b9; add byte ptr [rcx + 0x148d48c9], cl; add dword ptr [rax - 0x7d], ecx; ret 0xb820; 
0x00000000000197f4: add eax, 0xf012400; mov dh, 0xc0; add rsp, 0x38; ret; 
0x000000000000ef14: add eax, 0xf327; call rax; 
0x000000000000ef00: add eax, 0xf33b; call rax; 
0x0000000000018613: add eax, 0xf515ff00; or eax, 0x8b480006; and al, 0x58; add rsp, 0x3a8; ret; 
0x000000000001807b: add eax, 0xf515ff00; sbb dword ptr [rsi], eax; add byte ptr [rax - 0x75], cl; and al, 0x28; add rsp, 0x478; ret; 
0x0000000000038519: add eax, 0xfee161e8; dec dword ptr [rax - 0x7b]; fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x000000000004c839: add eax, 0xff480000; ret 0x3948; 
0x000000000002c6ba: add eax, 0xff480000; ret; 
0x000000000001e42f: add eax, 0xfffed36c; call rax; 
0x000000000001e334: add eax, 0xfffed467; call rax; 
0x000000000001e28b: add eax, 0xfffed510; call rax; 
0x000000000001e1df: add eax, 0xfffed5bc; call rax; 
0x000000000001d321: add eax, 0xfffee2aa; call rax; 
0x000000000001cba8: add eax, 0xfffeeac3; mov esi, 0x28; call rax; 
0x000000000001c536: add eax, 0xfffef095; call rax; 
0x0000000000018ebe: add eax, 0xfffef2e9; dec dword ptr [rax - 0x75]; and al, 0x20; add rsp, 0xf8; ret; 
0x000000000001c0fa: add eax, 0xfffef571; mov esi, 0x19; call rax; 
0x000000000001bcd1: add eax, 0xfffefaca; call rax; 
0x000000000001ae01: add eax, 0xffff07ca; call rax; 
0x000000000001abbb: add eax, 0xffff0be0; call rax; 
0x000000000001aad7: add eax, 0xffff0cc4; call rax; 
0x000000000001a90f: add eax, 0xffff0e8c; call rax; 
0x000000000001a386: add eax, 0xffff1415; call rax; 
0x000000000001a386: add eax, 0xffff1415; call rax; ud2; mov rax, qword ptr [rsp + 8]; add rsp, 0xb8; ret; 
0x0000000000019db5: add eax, 0xffff19e6; call rax; 
0x0000000000019db5: add eax, 0xffff19e6; call rax; ud2; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x158; ret; 
0x0000000000019b30: add eax, 0xffff1c6b; call rax; 
0x0000000000019a8b: add eax, 0xffff1d10; call rax; 
0x0000000000019a8b: add eax, 0xffff1d10; call rax; ud2; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x178; ret; 
0x0000000000019667: add eax, 0xffff2134; call rax; 
0x0000000000018fbe: add eax, 0xffff262d; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000018bc8: add eax, 0xffff2bd3; call rax; 
0x0000000000017350: add eax, 0xffff463b; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x0000000000016c44: add eax, 0xffff4b57; call rax; 
0x0000000000016920: add eax, 0xffff4e7b; call rax; 
0x00000000000162aa: add eax, 0xffff5341; call rax; 
0x0000000000015dea: add eax, 0xffff5881; mov esi, 0x19; call rax; 
0x00000000000155a6: add eax, 0xffff6025; call rax; 
0x000000000001522e: add eax, 0xffff639d; call rax; 
0x0000000000014d2d: add eax, 0xffff693e; mov esi, 0x49; call rax; 
0x0000000000014c36: add eax, 0xffff6a35; mov esi, 0x49; call rax; 
0x000000000001477f: add eax, 0xffff701c; call rax; 
0x0000000000014583: add eax, 0xffff7218; call rax; 
0x00000000000144e3: add eax, 0xffff72b8; call rax; 
0x0000000000014398: add eax, 0xffff7403; call rax; 
0x000000000001454c: add eax, 0xffff743f; mov esi, 0x2b; lea rdx, [rsp + 0x18]; call rax; 
0x00000000000142c5: add eax, 0xffff74d6; call rax; 
0x00000000000144b1: add eax, 0xffff74da; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000014417: add eax, 0xffff7574; lea rdx, [rsp + 0x20]; call rax; 
0x0000000000014366: add eax, 0xffff7625; lea rdx, [rsp + 0x30]; call rax; 
0x0000000000014293: add eax, 0xffff76f8; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000014202: add eax, 0xffff7789; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000013080: add eax, 0xffff85eb; mov esi, 0x2b; call rax; 
0x0000000000012b61: add eax, 0xffff8b0a; mov esi, 0x2b; call rax; 
0x0000000000012942: add eax, 0xffff8dd9; mov esi, 0x100; call rax; 
0x0000000000012908: add eax, 0xffff8e13; mov esi, 0x100; call rax; 
0x00000000000113fa: add eax, 0xffffa271; mov esi, 0x19; call rax; 
0x0000000000011351: add eax, 0xffffa31a; mov esi, 0x23; call rax; 
0x000000000001159d: add eax, 0xffffa48e; call rax; 
0x000000000001bbcb: add eax, 0xffffa500; call rax; 
0x00000000000114ef: add eax, 0xffffa54c; call rax; 
0x0000000000010ba2: add eax, 0xffffabf9; call rax; 
0x00000000000109ae: add eax, 0xffffacbd; mov esi, 0x49; call rax; 
0x00000000000108bb: add eax, 0xffffadb0; mov esi, 0x49; call rax; 
0x00000000000105be: add eax, 0xffffb0ad; mov esi, 0x49; call rax; 
0x00000000000104cb: add eax, 0xffffb1a0; mov esi, 0x49; call rax; 
0x0000000000010097: add eax, 0xffffb5d4; mov esi, 0x49; call rax; 
0x000000000001bbab: add eax, 0xffffb750; call rax; 
0x000000000000fb24: add eax, 0xffffbb47; mov esi, 0x49; call rax; 
0x000000000000fa4e: add eax, 0xffffbb7d; call rax; 
0x000000000000f9c7: add eax, 0xffffbdd4; call rax; 
0x0000000000019f05: add eax, 0xffffc046; lea rdi, [rsp + 0x20]; call rax; 
0x000000000001ab80: add eax, 0xffffc13b; call rax; 
0x000000000001a12b: add eax, 0xffffc1b0; lea rsi, [rsp + 0x58]; call rax; 
0x000000000000f462: add eax, 0xffffc339; call rax; 
0x000000000001a0e0: add eax, 0xffffc43b; lea rdi, [rsp + 0x98]; call rax; 
0x000000000000f26f: add eax, 0xffffc52c; call rax; 
0x0000000000019f4f: add eax, 0xffffc5cc; call rax; 
0x000000000000f1b2: add eax, 0xffffc5e9; call rax; 
0x000000000000f0ad: add eax, 0xffffc6ee; call rax; 
0x000000000000ef43: add eax, 0xffffc858; call rax; 
0x000000000000eeb2: add eax, 0xffffc8e9; call rax; 
0x000000000000ede5: add eax, 0xffffc9b6; call rax; 
0x000000000000ed1a: add eax, 0xffffca81; call rax; 
0x000000000001a333: add eax, 0xffffccb8; call rax; 
0x000000000000e909: add eax, 0xffffcce2; call rax; 
0x000000000001a303: add eax, 0xffffd268; lea rsi, [rsp + 0x70]; call rax; 
0x000000000000e1d2: add eax, 0xffffd5c9; call rax; 
0x0000000000019a4c: add eax, 0xffffd5cf; lea rsi, [rsp + 0x110]; call rax; 
0x0000000000018824: add eax, 0xffffd667; lea rdi, [rsp + 0x170]; call rax; 
0x000000000001968b: add eax, 0xffffd6a0; call rax; 
0x000000000000e07a: add eax, 0xffffd721; call rax; 
0x0000000000019cca: add eax, 0xffffd8c1; lea rdi, [rsp + 0xc0]; lea rsi, [rsp + 0xe0]; call rax; 
0x0000000000019649: add eax, 0xffffd8d2; call rax; 
0x0000000000019fd5: add eax, 0xffffda66; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000dc4b: add eax, 0xffffdb50; call rax; 
0x00000000000199a8: add eax, 0xffffdca3; lea rdi, [rsp + 0xc0]; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000001e394: add eax, 0xffffde77; lea rdi, [rsp + 0x20]; call rax; 
0x000000000000d665: add eax, 0xffffe136; call rax; 
0x0000000000017e14: add eax, 0xffffe237; lea rsi, [rsp + 0x140]; call rax; 
0x0000000000018eb6: add eax, 0xffffe2a5; call rax; 
0x000000000001dd8a: add eax, 0xffffe401; call rax; 
0x0000000000018b9f: add eax, 0xffffe51c; lea rsi, [rsp + 0x220]; call rax; 
0x000000000001e250: add eax, 0xffffe55b; call rax; 
0x000000000000d1ae: add eax, 0xffffe5ed; call rax; 
0x0000000000017d5e: add eax, 0xffffe66d; lea rdi, [rsp + 0xd8]; lea rdx, [rsp + 0xf0]; call rax; 
0x00000000000188cd: add eax, 0xffffe6ae; lea rsi, [rsp + 0x190]; call rax; 
0x0000000000017d96: add eax, 0xffffe775; call rax; 
0x0000000000017c2f: add eax, 0xffffe88c; call rax; 
0x0000000000017c2f: add eax, 0xffffe88c; call rax; add rsp, 0x18; ret; 
0x00000000000167c5: add eax, 0xffffeae6; xor esi, esi; call rax; 
0x000000000000cbf0: add eax, 0xffffebab; call rax; 
0x000000000000c78b: add eax, 0xffffeee0; mov esi, 0x1c; call rax; 
0x000000000000c5aa: add eax, 0xfffff041; call rax; 
0x000000000000c659: add eax, 0xfffff0c2; xor ecx, ecx; mov edi, ecx; call rax; 
0x000000000001a517: add eax, 0xfffff254; call rax; 
0x000000000001e1ad: add eax, 0xfffff53e; call rax; 
0x000000000001e306: add eax, 0xfffff555; call rax; 
0x000000000001c9c1: add eax, 0xfffff87a; xor esi, esi; call rax; 
0x000000000001e3ed: add eax, 0xfffffe0e; lea rdi, [rsp + 0x10]; call rax; 
0x000000000001e2f3: add eax, 0xffffff38; call rax; 
0x000000000001e597: add eax, 4; call rax; 
0x000000000001e597: add eax, 4; call rax; pop rcx; ret; 
0x000000000000d0f4: add eax, dword ptr [rax]; add bl, al; lea rax, [rip + 0x8fd1]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000cb34: add eax, dword ptr [rax]; add bl, al; lea rax, [rip + 0x9591]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000d349: add eax, dword ptr [rax]; add bl, ch; fmul dword ptr [rax - 0x73]; add eax, 0x99db; lea rdi, [rsp + 0x190]; call rax; 
0x000000000000cd8b: add eax, dword ptr [rax]; add bl, ch; fmul dword ptr [rax - 0x73]; add eax, 0x9f99; lea rdi, [rsp + 0x190]; call rax; 
0x000000000000d577: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x4ef9f; lea rdi, [rsp + 0x260]; mov qword ptr [rsp + 0x40], rdi; call rax; 
0x0000000000029a1b: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add r9, qword ptr [r8 - 0x7d]; ret; 
0x0000000000029eaa: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0x375a8; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000141a2: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x18; ret; 
0x00000000000433c2: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000022d16: add eax, dword ptr [rax]; add byte ptr [rax - 1], cl; ret; 
0x000000000000a418: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000040c3b: add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x108; pop rbx; pop r14; ret; 
0x000000000000d87a: add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x348; ret; 
0x00000000000582f4: add eax, dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000001eeb4: add eax, dword ptr [rax]; add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ecc4: add eax, dword ptr [rax]; add byte ptr [rax], al; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x000000000002b970: add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, rax; call qword ptr [rip + 0x4e273]; pop rcx; ret; 
0x00000000000285cc: add eax, dword ptr [rax]; add byte ptr [rcx], dh; jmp qword ptr [rsi + 0x66]; 
0x00000000000454fa: add eax, dword ptr [rax]; add byte ptr [rdi + 0x100], bh; mov esi, 8; call rbx; 
0x000000000003c02d: add eax, dword ptr [rax]; add rsp, 0x50; pop rbx; pop r14; pop r15; ret; 
0x000000000003cc4c: add eax, dword ptr [rax]; add rsp, 0x58; pop rbx; pop r14; ret; 
0x000000000003bb52: add eax, dword ptr [rax]; add rsp, 0x80; pop rbx; pop r14; pop r15; ret; 
0x000000000003cd5c: add eax, dword ptr [rax]; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000003d0b4: add eax, dword ptr [rax]; call qword ptr [rip + 0x3c32c]; ud2; mov rdi, r15; call rax; 
0x0000000000019af5: add eax, dword ptr [rax]; call rax; 
0x000000000003e617: add eax, dword ptr [rax]; lea rax, [rip + 0x3bb09]; pop rcx; ret; 
0x000000000003e610: add eax, dword ptr [rax]; lea rdx, [rip + 0x3bb07]; lea rax, [rip + 0x3bb09]; pop rcx; ret; 
0x000000000003e5d5: add eax, dword ptr [rax]; mov eax, dword ptr [rax]; pop rcx; ret; 
0x000000000003e416: add eax, dword ptr [rax]; mov edx, 0x90; call rbx; 
0x000000000003c514: add eax, dword ptr [rax]; mov r15, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x0000000000017a26: add eax, dword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; ret; 
0x0000000000018492: add eax, dword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xb8; ret; 
0x000000000003c238: add eax, dword ptr [rax]; mov rax, r14; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000003cd0b: add eax, dword ptr [rax]; mov rax, rbx; add rsp, 0x50; pop rbx; ret; 
0x000000000003c4e5: add eax, dword ptr [rax]; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000002a39a: add eax, dword ptr [rax]; movsxd rax, dword ptr [r9 + rax*4]; add rax, r9; jmp rax; 
0x000000000002835c: add eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002fad6: add eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor edx, edx; jmp rax; 
0x0000000000029930: add eax, dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000002c0a6: add eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000002c37a: add eax, dword ptr [rax]; movsxd rcx, dword ptr [r8 + rbp*4]; add rcx, r8; jmp rcx; 
0x00000000000275ea: add eax, dword ptr [rax]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000002c3a0: add eax, dword ptr [rax]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002b01d: add eax, dword ptr [rax]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x000000000002b9b8: add eax, dword ptr [rax]; movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x000000000002b61c: add eax, dword ptr [rax]; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x00000000000308e6: add eax, dword ptr [rax]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000003dda5: add eax, dword ptr [rax]; pop rcx; ret; 
0x000000000003cd88: add eax, dword ptr [rax]; ret; 
0x000000000003c108: add eax, dword ptr [rax]; test eax, eax; jne 0x3c114; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x00000000000423a6: add eax, dword ptr [rax]; test rax, rax; lea rcx, [rip - 0x6442]; cmovne rcx, rax; call rcx; 
0x000000000003d0ba: add eax, dword ptr [rax]; ud2; mov rdi, r15; call rax; 
0x000000000003cd74: add eax, dword ptr [rax]; ud2; nop dword ptr [rax + rax]; mov rax, rdi; lea rdx, [rip + 0x3a7f6]; ret; 
0x0000000000039090: add eax, dword ptr [rbx + 0x3b7501f8]; lea r14, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003785d: add eax, dword ptr [rbx + 0x3b7501f8]; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000391ca: add eax, dword ptr [rbx + 0x3b7501f8]; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000043920: add eax, dword ptr [rbx + 0x3c7501f8]; lea rbp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000038e38: add eax, dword ptr [rbx + 0x3d7501f9]; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000037fc9: add eax, dword ptr [rbx + 0x3e7501f8]; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003b445: add eax, dword ptr [rbx + 0x3f7501fa]; lea r15, [r12 - 1]; mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x000000000001f3a0: add eax, dword ptr [rbx + 0x407501f8]; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001ffbc: add eax, dword ptr [rbx + 0x407501f8]; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000049a64: add eax, dword ptr [rbx]; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000003ecad: add eax, dword ptr [rcx]; add rsp, 0x10; pop rbx; pop r14; pop r15; ret; 
0x00000000000308de: add eax, dword ptr [rdi + 0x60]; lea rdi, [rip + 0x30f64]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x0000000000015de5: add eax, dword ptr [rsi]; add byte ptr [rax - 0x73], cl; add eax, 0xffff5881; mov esi, 0x19; call rax; 
0x000000000001975a: add eax, dword ptr [rsi]; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x28; ret; 
0x000000000002b01c: add eax, dword ptr gs:[rax]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x000000000002b013: add eax, eax; add rcx, rbp; lea r8, [rip + 0x3655d]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x00000000000132f9: add eax, ebp; add byte ptr [r8], al; add byte ptr [rax - 0x75], cl; add al, 0x24; pop rcx; ret; 
0x0000000000029996: add eax, ebp; jmp rax; 
0x00000000000132c9: add eax, ebp; rol dword ptr [rax], 1; add byte ptr [rax], al; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000dff2: add eax, ecx; jmp rax; 
0x0000000000013621: add eax, ecx; mov qword ptr [rsp + 0x90], rax; mov rdi, qword ptr [rsp + 0x90]; call 0x124c0; add rsp, 0x98; ret; 
0x000000000005bba5: add eax, ecx; xor ebx, ebx; mov r15d, r12d; jmp rax; 
0x000000000002fadd: add eax, ecx; xor edx, edx; jmp rax; 
0x000000000005c03f: add eax, ecx; xor r12d, r12d; mov ebp, edx; jmp rax; 
0x0000000000029937: add eax, edi; jmp rax; 
0x000000000002b615: add eax, edi; lea rbp, [rip + 0x35f1e]; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x000000000002c0ad: add eax, edx; jmp rax; 
0x000000000004b3a0: add eax, edx; lea rdx, [rip + 0x18eef]; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000005cf3d: add eax, edx; mov rcx, rsi; cmp rsi, rdi; jne 0x5cf30; ret; 
0x000000000005bb88: add eax, esi; mov esi, 0x5c; jmp rax; 
0x000000000004cd53: add eax, esi; mov qword ptr [rdi + 0x18], rax; ret; 
0x000000000000afe6: add eax, esp; jmp rax; 
0x000000000003c946: add ebp, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000001bff3: add ebp, ebx; add eax, 0x448b4800; and al, 8; add rsp, 0x18; ret; 
0x000000000003cfd6: add ebx, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x0000000000026816: add ebx, dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x0000000000053e3e: add ebx, eax; jmp rbx; 
0x00000000000233bf: add ebx, ebp; cmp cl, byte ptr [rcx - 0x7d]; sal al, 0x84; ror byte ptr [rdi], 0x95; ret; 
0x00000000000132f7: add ecx, 1; call 0x13340; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x00000000000132c7: add ecx, 1; call 0x133a0; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000e534: add ecx, 1; mov qword ptr [rax + 0x10], rcx; add rsp, 0xc8; ret; 
0x0000000000019f3d: add ecx, dword ptr [rax + 0xf]; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 0x10], dh; mov rdi, qword ptr [rsp + 8]; lea rax, [rip - 0x3a34]; call rax; 
0x000000000001aa48: add ecx, dword ptr [rax + 0xf]; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x000000000003cd05: add ecx, dword ptr [rax - 0x73]; adc eax, 0x3a853; mov rax, rbx; add rsp, 0x50; pop rbx; ret; 
0x0000000000053e31: add ecx, dword ptr [rax - 0x73]; add eax, 0x10df7; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x0000000000039352: add ecx, dword ptr [rax - 0x73]; or eax, 0x287f2; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x00000000000370b6: add ecx, dword ptr [rax - 0x73]; or eax, 0x2a9ca; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000036dc3: add ecx, dword ptr [rax - 0x73]; or eax, 0x2acad; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000368b1: add ecx, dword ptr [rax - 0x73]; or eax, 0x2b1af; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000036883: add ecx, dword ptr [rax - 0x73]; or eax, 0x2b1dd; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002e92b: add ecx, dword ptr [rax - 0x77]; ret; 
0x000000000005d33a: add ecx, dword ptr [rax - 0x7d]; ret 0x4804; 
0x0000000000029a21: add ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000053e16: add ecx, dword ptr [rax - 0x7d]; rol dword ptr [rax + rcx*2], 0xff; ret 0xff49; 
0x00000000000424c5: add ecx, dword ptr [rax - 1]; ret; 
0x000000000002a633: add ecx, dword ptr [rcx + 0x4f890947]; or al, 0x48; add esp, 0x18; ret; 
0x0000000000037b6d: add ecx, dword ptr [rcx + 0x63]; add al, 0xac; add rax, r12; jmp rax; 
0x0000000000054607: add ecx, dword ptr [rcx - 1]; ret; 
0x00000000000275f1: add ecx, eax; jmp rcx; 
0x000000000005bff3: add ecx, eax; mov edx, ebp; mov ebp, 0x110001; jmp rcx; 
0x000000000005bea0: add ecx, eax; mov edx, r15d; jmp rcx; 
0x000000000002b016: add ecx, ebp; lea r8, [rip + 0x3655d]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x000000000003b8f1: add ecx, ebp; ret; 
0x00000000000592d7: add ecx, ebp; xchg eax, edi; add byte ptr [rax], al; add dh, dh; ret 0xf01; 
0x000000000002c3a7: add ecx, edx; jmp rcx; 
0x000000000004ef0a: add ecx, edx; neg r8; mov qword ptr [rdi], r9; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x0000000000034994: add ecx, esi; jmp rcx; 
0x000000000000a8b6: add ecx, esp; jmp rcx; 
0x000000000005efa2: add edi, -0x7f; cmp edi, 0x21; setb al; or al, cl; ret; 
0x000000000004ccff: add edi, 0x10; mov rax, rdi; pop rcx; ret; 
0x000000000000ef33: add edi, 0x18; call qword ptr [rip + 0x6ae6c]; add rsp, 0x28; ret; 
0x000000000000ef0f: add edi, 0x18; lea rax, [rip + 0xf327]; call rax; 
0x000000000001ab16: add edi, 0x20; call qword ptr [rip + 0x5e9b1]; pop rax; ret; 
0x000000000000f2fa: add edi, 0x20; lea rax, [rip + 0xb90c]; call rax; 
0x000000000000f2d6: add edi, 0x20; lea rax, [rip + 0xb930]; call rax; 
0x000000000000f22f: add edi, 0x40; lea rax, [rip + 0xb857]; call rax; 
0x000000000000f3fd: add edi, 0xa8; call 0xf580; add rsp, 0x28; ret; 
0x000000000005dd3e: add edi, 0xffef0000; cmp edi, 0xfffd01f0; setb al; pop rcx; ret; 
0x000000000000f20d: add edi, 4; call qword ptr [rip + 0x6a3ca]; add rsp, 0x18; ret; 
0x000000000001e16c: add edi, 8; call qword ptr [rip + 0x5b5e3]; add rsp, 0x18; ret; 
0x000000000001a9d6: add edi, 8; call qword ptr [rip + 0x5f141]; add rsp, 0x18; ret; 
0x000000000003e42a: add edi, 8; lea rsi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x0000000000057ed8: add edi, dword ptr [rax + 0x75]; ret; 
0x000000000002b024: add edi, eax; jmp rdi; 
0x00000000000505ed: add edi, ebx; jmp rdi; 
0x000000000000f119: add edi, ecx; inc rax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb966]; call rax; 
0x000000000000f0d4: add edi, ecx; inc rax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb9ab]; call rax; 
0x000000000003d3d8: add edi, ecx; jmp rdi; 
0x0000000000018cd9: add edi, edi; dec dword ptr [rdi]; or ebp, ebx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x0000000000010fd3: add edi, esi; mov qword ptr [rsp + 0x18], rdi; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x000000000005bb18: add edi, esi; mov rdi, r13; mov rsi, r15; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x0000000000055060: add edi, esi; ret; 
0x000000000004abd0: add edx, -0x10; mov eax, 1; ret; 
0x000000000004ac15: add edx, 0x10; mov eax, 1; ret; 
0x000000000004ac37: add edx, 0x20; mov eax, 1; ret; 
0x0000000000049f46: add edx, dword ptr [rdi + 0x10]; jae 0x49f4f; xor eax, eax; pop rbx; ret; 
0x000000000000e392: add edx, dword ptr [rdi + 0x10]; mov qword ptr [rdi + 0x10], rdx; add rsp, 0xb8; ret; 
0x0000000000039b11: add edx, eax; jmp rdx; 
0x000000000004abf9: add edx, eax; mov eax, 1; ret; 
0x000000000002b9bf: add edx, ecx; jmp rdx; 
0x000000000004abe1: add edx, ecx; mov eax, 1; ret; 
0x0000000000039c14: add edx, esi; jmp rdx; 
0x00000000000091be: add esi, dword ptr [rbp - 0x51]; pop rbx; ret; 
0x000000000001cb80: add esi, dword ptr [rdi + 0x15]; mov rax, qword ptr [rsp + 0x20]; lea rcx, [rip + 0x440dd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000e742: add esi, dword ptr [rdi + 0x42]; mov rax, qword ptr [rsp + 0x10]; lea rcx, [rip + 0x51b4b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000014399: add esi, dword ptr [rdi + rdi*8 - 1]; call rax; 
0x000000000004d3fe: add esi, eax; mov rax, rsi; pop rcx; ret; 
0x000000000002b624: add esi, ebp; jmp rsi; 
0x000000000005bdca: add esi, ecx; jmp rsi; 
0x00000000000308ed: add esi, edi; jmp rsi; 
0x000000000005bcd1: add esi, edi; mov rdi, r13; mov rdx, r9; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x000000000003a3a2: add esi, esp; jmp rsi; 
0x0000000000040c40: add esp, 0x108; pop rbx; pop r14; ret; 
0x000000000001016a: add esp, 0x108; ret; 
0x000000000001ee0e: add esp, 0x10; pop rbx; pop r14; pop r15; ret; 
0x00000000000235e4: add esp, 0x10; pop rbx; pop r14; pop rbp; ret; 
0x000000000001e7b6: add esp, 0x10; pop rbx; ret; 
0x000000000000fb51: add esp, 0x10; ret; 
0x0000000000010c4a: add esp, 0x118; ret; 
0x000000000000c8ef: add esp, 0x128; ret; 
0x000000000001cb00: add esp, 0x138; ret; 
0x000000000001475e: add esp, 0x148; ret; 
0x000000000001cdc2: add esp, 0x150; ret; 
0x000000000001185b: add esp, 0x158; ret; 
0x0000000000019a9a: add esp, 0x178; ret; 
0x0000000000017da7: add esp, 0x188; ret; 
0x0000000000036052: add esp, 0x18; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000004cbc5: add esp, 0x18; pop rbx; pop r14; ret; 
0x0000000000009a5b: add esp, 0x18; ret; 
0x000000000001699d: add esp, 0x1a8; ret; 
0x00000000000368f8: add esp, 0x1b0; pop rbx; ret; 
0x0000000000011196: add esp, 0x1b8; ret; 
0x000000000000ea2a: add esp, 0x1c8; ret; 
0x000000000000da9f: add esp, 0x1d8; ret; 
0x000000000001410d: add esp, 0x1f8; ret; 
0x000000000003f02b: add esp, 0x20; pop rbx; pop r14; pop r15; ret; 
0x000000000004f843: add esp, 0x20; pop rbx; pop r14; pop rbp; ret; 
0x0000000000027fd0: add esp, 0x20; pop rbx; pop r14; ret; 
0x0000000000009375: add esp, 0x20; pop rbx; ret; 
0x0000000000010fe0: add esp, 0x20; ret; 
0x000000000000e045: add esp, 0x218; ret; 
0x000000000001b1c7: add esp, 0x228; ret; 
0x0000000000012024: add esp, 0x248; ret; 
0x0000000000019015: add esp, 0x278; ret; 
0x000000000001dfac: add esp, 0x288; ret; 
0x000000000000a0e6: add esp, 0x28; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000005ed04: add esp, 0x28; pop rbx; pop r14; jmp rax; 
0x000000000004f4a6: add esp, 0x28; pop rbx; pop r14; ret; 
0x000000000001f04e: add esp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000009f80: add esp, 0x28; ret; 
0x000000000001b4f9: add esp, 0x2c8; ret; 
0x000000000003e47a: add esp, 0x2e0; pop rbx; pop r14; pop r15; ret; 
0x0000000000043c2e: add esp, 0x30; pop rbx; pop r14; pop r15; ret; 
0x000000000005e991: add esp, 0x30; pop rbx; ret; 
0x000000000000bfdc: add esp, 0x30; ret; 
0x000000000000d87f: add esp, 0x348; ret; 
0x000000000000a197: add esp, 0x38; pop rbx; pop r12; pop r14; pop r15; ret; 
0x0000000000009c13: add esp, 0x38; pop rbx; pop r14; ret; 
0x000000000000c0c2: add esp, 0x38; ret; 
0x000000000000cb31: add esp, 0x398; ret; 
0x0000000000018621: add esp, 0x3a8; ret; 
0x0000000000038e7c: add esp, 0x40; pop rbx; pop r14; pop r15; ret; 
0x000000000005351d: add esp, 0x40; pop rbx; ret; 
0x000000000000c47f: add esp, 0x40; ret; 
0x0000000000018089: add esp, 0x478; ret; 
0x0000000000057197: add esp, 0x48; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000003e8de: add esp, 0x48; pop rbx; pop rbp; ret; 
0x000000000000c125: add esp, 0x48; ret; 
0x000000000003c030: add esp, 0x50; pop rbx; pop r14; pop r15; ret; 
0x0000000000057cd0: add esp, 0x50; pop rbx; pop r14; pop rbp; ret; 
0x000000000003cd11: add esp, 0x50; pop rbx; ret; 
0x000000000000bcba: add esp, 0x50; ret; 
0x0000000000038047: add esp, 0x58; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000003cc4f: add esp, 0x58; pop rbx; pop r14; ret; 
0x000000000000f98f: add esp, 0x58; ret; 
0x0000000000015cba: add esp, 0x60; ret; 
0x000000000000c2ec: add esp, 0x68; ret; 
0x0000000000040880: add esp, 0x70; pop rbx; ret; 
0x000000000000e6ca: add esp, 0x70; ret; 
0x00000000000192de: add esp, 0x788; ret; 
0x000000000003d4f1: add esp, 0x78; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000003e770: add esp, 0x78; pop rbx; pop r14; pop r15; pop rbp; ret; 
0x00000000000422cf: add esp, 0x78; pop rbx; pop rbp; ret; 
0x000000000000bd28: add esp, 0x78; ret; 
0x000000000003bb55: add esp, 0x80; pop rbx; pop r14; pop r15; ret; 
0x00000000000402ff: add esp, 0x88; pop rbx; pop r14; ret; 
0x000000000000fb0d: add esp, 0x88; ret; 
0x000000000004cdad: add esp, 0x98; pop rbx; pop r14; ret; 
0x000000000005c256: add esp, 0x98; pop rbx; pop rbp; ret; 
0x000000000000e1c9: add esp, 0x98; ret; 
0x000000000005808d: add esp, 0xa0; pop rbx; ret; 
0x0000000000012b16: add esp, 0xa0; ret; 
0x0000000000053676: add esp, 0xa8; pop rbx; pop r14; ret; 
0x000000000000c56e: add esp, 0xa8; ret; 
0x000000000003adb1: add esp, 0xb0; pop rbx; pop r14; pop r15; ret; 
0x0000000000038689: add esp, 0xb0; pop rbx; ret; 
0x000000000000bde5: add esp, 0xb8; ret; 
0x000000000000fe46: add esp, 0xc0; ret; 
0x000000000000c753: add esp, 0xc8; ret; 
0x000000000001c05b: add esp, 0xc; ret; 
0x000000000003720c: add esp, 0xd0; pop rbx; pop r14; pop r15; jmp rcx; 
0x0000000000037520: add esp, 0xd0; pop rbx; pop r14; pop r15; ret; 
0x000000000000bf37: add esp, 0xd0; ret; 
0x0000000000017220: add esp, 0xd8; ret; 
0x0000000000037032: add esp, 0xe0; pop rbx; pop r14; pop r15; ret; 
0x000000000000fc94: add esp, 0xe0; ret; 
0x000000000001d99a: add esp, 0xe8; ret; 
0x0000000000014d45: add esp, 0xf8; ret; 
0x000000000005b122: add esp, 8; pop rbx; pop r12; pop r14; pop r15; jmp rax; 
0x000000000001f29f: add esp, 8; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000003d415: add esp, 8; pop rbx; pop r14; pop r15; pop rbp; ret; 
0x000000000001f353: add esp, 8; pop rbx; pop r14; ret; 
0x0000000000009017: add esp, 8; ret; 
0x000000000005f306: add esp, eax; leave; ret; 
0x000000000000c2e2: add qword ptr [r13 + 0xa], r14; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x000000000001a4ac: add qword ptr [r13 + 0xa], r14; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x000000000005a5a3: add qword ptr [r15], r14; mov eax, ebx; pop rbx; pop r14; pop r15; ret; 
0x0000000000019d95: add qword ptr [rax], rax; add al, ch; ret 0xfef2; 
0x0000000000016791: add qword ptr [rax], rax; add byte ptr [rax + rax], al; add byte ptr [rax], al; lea rax, [rip + 0x24a0]; mov edi, 4; call rax; 
0x000000000003b346: add qword ptr [rax], rax; add byte ptr [rax], al; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000004f8cd: add qword ptr [rax], rax; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x00000000000599fa: add qword ptr [rcx], rsi; leave; mov byte ptr [rax], cl; ret; 
0x000000000004cd35: add qword ptr [rdi + 0x18], rsi; ret; 
0x000000000003c945: add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000005bb17: add r15, rsi; mov rdi, r13; mov rsi, r15; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x0000000000029a20: add r9, qword ptr [r8 - 0x7d]; ret; 
0x000000000004ef09: add r9, rdx; neg r8; mov qword ptr [rdi], r9; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x00000000000599f7: add r9b, byte ptr [rcx - 0x36cefeb8]; mov byte ptr [rax], cl; ret; 
0x000000000000f08b: add rax, 0x10; mov qword ptr [rsp + 0x20], rax; lea rax, [rip + 0xb9f5]; call rax; 
0x000000000000f04d: add rax, 0x10; mov qword ptr [rsp + 0x20], rax; lea rax, [rip + 0xba33]; call rax; 
0x0000000000054755: add rax, 0x63480001; add al, 0x82; add rax, rdx; jmp rax; 
0x00000000000308dd: add rax, qword ptr [rdi + 0x60]; lea rdi, [rip + 0x30f64]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000000afe5: add rax, r12; jmp rax; 
0x0000000000039e73: add rax, r13; jmp rax; 
0x000000000005bb87: add rax, r14; mov esi, 0x5c; jmp rax; 
0x000000000002b012: add rax, r8; add rcx, rbp; lea r8, [rip + 0x3655d]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x0000000000028299: add rax, r9; jmp rax; 
0x0000000000029995: add rax, rbp; jmp rax; 
0x000000000000dff1: add rax, rcx; jmp rax; 
0x0000000000013620: add rax, rcx; mov qword ptr [rsp + 0x90], rax; mov rdi, qword ptr [rsp + 0x90]; call 0x124c0; add rsp, 0x98; ret; 
0x000000000005bba4: add rax, rcx; xor ebx, ebx; mov r15d, r12d; jmp rax; 
0x000000000002fadc: add rax, rcx; xor edx, edx; jmp rax; 
0x000000000005c03e: add rax, rcx; xor r12d, r12d; mov ebp, edx; jmp rax; 
0x0000000000029936: add rax, rdi; jmp rax; 
0x000000000002b614: add rax, rdi; lea rbp, [rip + 0x35f1e]; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x000000000002c0ac: add rax, rdx; jmp rax; 
0x000000000004b39f: add rax, rdx; lea rdx, [rip + 0x18eef]; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000005cf3c: add rax, rdx; mov rcx, rsi; cmp rsi, rdi; jne 0x5cf30; ret; 
0x000000000004cd52: add rax, rsi; mov qword ptr [rdi + 0x18], rax; ret; 
0x000000000003cfd5: add rbx, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x0000000000053e3d: add rbx, rax; jmp rbx; 
0x00000000000132f6: add rcx, 1; call 0x13340; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x00000000000132c6: add rcx, 1; call 0x133a0; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000e533: add rcx, 1; mov qword ptr [rax + 0x10], rcx; add rsp, 0xc8; ret; 
0x000000000000a8b5: add rcx, r12; jmp rcx; 
0x0000000000034993: add rcx, r14; jmp rcx; 
0x000000000002c380: add rcx, r8; jmp rcx; 
0x00000000000275f0: add rcx, rax; jmp rcx; 
0x000000000005bff2: add rcx, rax; mov edx, ebp; mov ebp, 0x110001; jmp rcx; 
0x000000000005be9f: add rcx, rax; mov edx, r15d; jmp rcx; 
0x000000000002b015: add rcx, rbp; lea r8, [rip + 0x3655d]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x000000000002c3a6: add rcx, rdx; jmp rcx; 
0x0000000000057e67: add rcx, rsi; jmp rcx; 
0x000000000004ccfe: add rdi, 0x10; mov rax, rdi; pop rcx; ret; 
0x000000000000ef32: add rdi, 0x18; call qword ptr [rip + 0x6ae6c]; add rsp, 0x28; ret; 
0x000000000000ef0e: add rdi, 0x18; lea rax, [rip + 0xf327]; call rax; 
0x000000000001ab15: add rdi, 0x20; call qword ptr [rip + 0x5e9b1]; pop rax; ret; 
0x000000000000f2f9: add rdi, 0x20; lea rax, [rip + 0xb90c]; call rax; 
0x000000000000f2d5: add rdi, 0x20; lea rax, [rip + 0xb930]; call rax; 
0x000000000000f22e: add rdi, 0x40; lea rax, [rip + 0xb857]; call rax; 
0x000000000000f3fc: add rdi, 0xa8; call 0xf580; add rsp, 0x28; ret; 
0x000000000000f20c: add rdi, 4; call qword ptr [rip + 0x6a3ca]; add rsp, 0x18; ret; 
0x000000000001e16b: add rdi, 8; call qword ptr [rip + 0x5b5e3]; add rsp, 0x18; ret; 
0x000000000001a9d5: add rdi, 8; call qword ptr [rip + 0x5f141]; add rsp, 0x18; ret; 
0x000000000003e429: add rdi, 8; lea rsi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x000000000002b023: add rdi, r8; jmp rdi; 
0x00000000000505ec: add rdi, rbx; jmp rdi; 
0x000000000000f118: add rdi, rcx; inc rax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb966]; call rax; 
0x000000000000f0d3: add rdi, rcx; inc rax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb9ab]; call rax; 
0x000000000003d3d7: add rdi, rcx; jmp rdi; 
0x0000000000010fd2: add rdi, rsi; mov qword ptr [rsp + 0x18], rdi; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x000000000004abcf: add rdx, -0x10; mov eax, 1; ret; 
0x000000000004ac14: add rdx, 0x10; mov eax, 1; ret; 
0x000000000004ac36: add rdx, 0x20; mov eax, 1; ret; 
0x0000000000049f45: add rdx, qword ptr [rdi + 0x10]; jae 0x49f4f; xor eax, eax; pop rbx; ret; 
0x000000000000e391: add rdx, qword ptr [rdi + 0x10]; mov qword ptr [rdi + 0x10], rdx; add rsp, 0xb8; ret; 
0x0000000000039b10: add rdx, r8; jmp rdx; 
0x0000000000039fe4: add rdx, rax; jmp rdx; 
0x000000000004abf8: add rdx, rax; mov eax, 1; ret; 
0x000000000002b9be: add rdx, rcx; jmp rdx; 
0x000000000004abe0: add rdx, rcx; mov eax, 1; ret; 
0x0000000000039c13: add rdx, rsi; jmp rdx; 
0x000000000003a3a1: add rsi, r12; jmp rsi; 
0x000000000005bcd0: add rsi, r15; mov rdi, r13; mov rdx, r9; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x000000000004d3fd: add rsi, rax; mov rax, rsi; pop rcx; ret; 
0x000000000002b623: add rsi, rbp; jmp rsi; 
0x000000000005bdc9: add rsi, rcx; jmp rsi; 
0x00000000000308ec: add rsi, rdi; jmp rsi; 
0x0000000000040c3f: add rsp, 0x108; pop rbx; pop r14; ret; 
0x0000000000010169: add rsp, 0x108; ret; 
0x000000000001ee0d: add rsp, 0x10; pop rbx; pop r14; pop r15; ret; 
0x00000000000235e3: add rsp, 0x10; pop rbx; pop r14; pop rbp; ret; 
0x000000000001e7b5: add rsp, 0x10; pop rbx; ret; 
0x000000000000fb50: add rsp, 0x10; ret; 
0x0000000000010c49: add rsp, 0x118; ret; 
0x000000000000c8ee: add rsp, 0x128; ret; 
0x000000000001caff: add rsp, 0x138; ret; 
0x000000000001475d: add rsp, 0x148; ret; 
0x000000000001cdc1: add rsp, 0x150; ret; 
0x000000000001185a: add rsp, 0x158; ret; 
0x0000000000019a99: add rsp, 0x178; ret; 
0x0000000000017da6: add rsp, 0x188; ret; 
0x0000000000036051: add rsp, 0x18; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000004cbc4: add rsp, 0x18; pop rbx; pop r14; ret; 
0x0000000000009a5a: add rsp, 0x18; ret; 
0x000000000001699c: add rsp, 0x1a8; ret; 
0x00000000000368f7: add rsp, 0x1b0; pop rbx; ret; 
0x0000000000011195: add rsp, 0x1b8; ret; 
0x000000000000ea29: add rsp, 0x1c8; ret; 
0x000000000000da9e: add rsp, 0x1d8; ret; 
0x000000000001410c: add rsp, 0x1f8; ret; 
0x000000000003f02a: add rsp, 0x20; pop rbx; pop r14; pop r15; ret; 
0x000000000004f842: add rsp, 0x20; pop rbx; pop r14; pop rbp; ret; 
0x0000000000027fcf: add rsp, 0x20; pop rbx; pop r14; ret; 
0x0000000000009374: add rsp, 0x20; pop rbx; ret; 
0x0000000000010fdf: add rsp, 0x20; ret; 
0x000000000000e044: add rsp, 0x218; ret; 
0x000000000001b1c6: add rsp, 0x228; ret; 
0x0000000000012023: add rsp, 0x248; ret; 
0x0000000000019014: add rsp, 0x278; ret; 
0x000000000001dfab: add rsp, 0x288; ret; 
0x000000000000a0e5: add rsp, 0x28; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000005ed03: add rsp, 0x28; pop rbx; pop r14; jmp rax; 
0x000000000004f4a5: add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000001f04d: add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000009f7f: add rsp, 0x28; ret; 
0x000000000001b4f8: add rsp, 0x2c8; ret; 
0x000000000003e479: add rsp, 0x2e0; pop rbx; pop r14; pop r15; ret; 
0x0000000000043c2d: add rsp, 0x30; pop rbx; pop r14; pop r15; ret; 
0x000000000005e990: add rsp, 0x30; pop rbx; ret; 
0x000000000000bfdb: add rsp, 0x30; ret; 
0x000000000000d87e: add rsp, 0x348; ret; 
0x000000000000a196: add rsp, 0x38; pop rbx; pop r12; pop r14; pop r15; ret; 
0x0000000000009c12: add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000c0c1: add rsp, 0x38; ret; 
0x000000000000cb30: add rsp, 0x398; ret; 
0x0000000000018620: add rsp, 0x3a8; ret; 
0x0000000000038e7b: add rsp, 0x40; pop rbx; pop r14; pop r15; ret; 
0x000000000005351c: add rsp, 0x40; pop rbx; ret; 
0x000000000000c47e: add rsp, 0x40; ret; 
0x0000000000018088: add rsp, 0x478; ret; 
0x0000000000057196: add rsp, 0x48; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000003e8dd: add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000000c124: add rsp, 0x48; ret; 
0x000000000003c02f: add rsp, 0x50; pop rbx; pop r14; pop r15; ret; 
0x0000000000057ccf: add rsp, 0x50; pop rbx; pop r14; pop rbp; ret; 
0x000000000003cd10: add rsp, 0x50; pop rbx; ret; 
0x000000000000bcb9: add rsp, 0x50; ret; 
0x0000000000038046: add rsp, 0x58; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000003cc4e: add rsp, 0x58; pop rbx; pop r14; ret; 
0x000000000000f98e: add rsp, 0x58; ret; 
0x0000000000015cb9: add rsp, 0x60; ret; 
0x000000000000c2eb: add rsp, 0x68; ret; 
0x000000000004087f: add rsp, 0x70; pop rbx; ret; 
0x000000000000e6c9: add rsp, 0x70; ret; 
0x00000000000192dd: add rsp, 0x788; ret; 
0x000000000003d4f0: add rsp, 0x78; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000003e76f: add rsp, 0x78; pop rbx; pop r14; pop r15; pop rbp; ret; 
0x00000000000422ce: add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000000bd27: add rsp, 0x78; ret; 
0x000000000003bb54: add rsp, 0x80; pop rbx; pop r14; pop r15; ret; 
0x00000000000402fe: add rsp, 0x88; pop rbx; pop r14; ret; 
0x000000000000fb0c: add rsp, 0x88; ret; 
0x000000000004cdac: add rsp, 0x98; pop rbx; pop r14; ret; 
0x000000000005c255: add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000000e1c8: add rsp, 0x98; ret; 
0x000000000005808c: add rsp, 0xa0; pop rbx; ret; 
0x0000000000012b15: add rsp, 0xa0; ret; 
0x0000000000053675: add rsp, 0xa8; pop rbx; pop r14; ret; 
0x000000000000c56d: add rsp, 0xa8; ret; 
0x000000000003adb0: add rsp, 0xb0; pop rbx; pop r14; pop r15; ret; 
0x0000000000038688: add rsp, 0xb0; pop rbx; ret; 
0x000000000000bde4: add rsp, 0xb8; ret; 
0x000000000000fe45: add rsp, 0xc0; ret; 
0x000000000000c752: add rsp, 0xc8; ret; 
0x000000000001c05a: add rsp, 0xc; ret; 
0x000000000003720b: add rsp, 0xd0; pop rbx; pop r14; pop r15; jmp rcx; 
0x000000000003751f: add rsp, 0xd0; pop rbx; pop r14; pop r15; ret; 
0x000000000000bf36: add rsp, 0xd0; ret; 
0x000000000001721f: add rsp, 0xd8; ret; 
0x0000000000037031: add rsp, 0xe0; pop rbx; pop r14; pop r15; ret; 
0x000000000000fc93: add rsp, 0xe0; ret; 
0x000000000001d999: add rsp, 0xe8; ret; 
0x0000000000014d44: add rsp, 0xf8; ret; 
0x000000000005b121: add rsp, 8; pop rbx; pop r12; pop r14; pop r15; jmp rax; 
0x000000000001f29e: add rsp, 8; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000003d414: add rsp, 8; pop rbx; pop r14; pop r15; pop rbp; ret; 
0x000000000003bc28: add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000009016: add rsp, 8; ret; 
0x000000000005f305: add rsp, rax; leave; ret; 
0x00000000000599cc: add sil, byte ptr [rcx]; leave; mov word ptr [rax], cx; ret; 
0x000000000005aaa6: add word ptr [rax], ax; add byte ptr [rcx - 0x75], cl; pop rdi; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000000228f5: add word ptr [rax], ax; pop rcx; ret; 
0x000000000001bd3c: and al, 0; add byte ptr [rax - 0x73], cl; jl 0x1bd67; push rax; call rax; 
0x0000000000051ec9: and al, 0; add byte ptr [rax], al; add byte ptr [rcx - 0x3a], al; and al, 8; add cl, ch; ret; 
0x0000000000029fc2: and al, 0; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001679d: and al, 0; add byte ptr [rdi + 4], bh; call rax; 
0x000000000000daee: and al, 0; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x85d6; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000015200: and al, 0x10; add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 0xb], dh; lea rax, [rip + 0x41a4c]; call rax; 
0x000000000000fa20: and al, 0x10; add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 0xb], dh; lea rax, [rip + 0x4722c]; call rax; 
0x000000000000f22c: and al, 0x10; add rdi, 0x40; lea rax, [rip + 0xb857]; call rax; 
0x0000000000010fd0: and al, 0x10; add rdi, rsi; mov qword ptr [rsp + 0x18], rdi; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x0000000000010c47: and al, 0x10; add rsp, 0x118; ret; 
0x0000000000019dc1: and al, 0x10; add rsp, 0x158; ret; 
0x0000000000019a97: and al, 0x10; add rsp, 0x178; ret; 
0x0000000000013676: and al, 0x10; add rsp, 0x18; ret; 
0x0000000000019012: and al, 0x10; add rsp, 0x278; ret; 
0x000000000000c192: and al, 0x10; add rsp, 0x28; ret; 
0x0000000000011224: and al, 0x10; add rsp, 0x38; ret; 
0x0000000000017864: and al, 0x10; add rsp, 0x40; ret; 
0x0000000000010b99: and al, 0x10; add rsp, 0x48; ret; 
0x00000000000165b8: and al, 0x10; add rsp, 0x50; ret; 
0x0000000000011689: and al, 0x10; add rsp, 0x58; ret; 
0x0000000000015cb7: and al, 0x10; add rsp, 0x60; ret; 
0x0000000000015fc0: and al, 0x10; add rsp, 0x68; ret; 
0x000000000000e6c7: and al, 0x10; add rsp, 0x70; ret; 
0x000000000000e64c: and al, 0x10; add rsp, 0x78; ret; 
0x0000000000013c05: and al, 0x10; add rsp, 0x88; ret; 
0x0000000000013775: and al, 0x10; add rsp, 0x98; ret; 
0x0000000000012d08: and al, 0x10; add rsp, 0xc8; ret; 
0x00000000000172ec: and al, 0x10; add rsp, 0xd8; ret; 
0x000000000001198c: and al, 0x10; call 0x11690; add rsp, 0x18; ret; 
0x0000000000013cbd: and al, 0x10; call 0x12a30; mov rax, qword ptr [rsp]; add rsp, 0x68; ret; 
0x000000000001ad0c: and al, 0x10; call 0x1a870; add rsp, 0x18; ret; 
0x000000000001acec: and al, 0x10; call 0x1a930; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000001c95c: and al, 0x10; call 0x1e370; add rsp, 0x18; ret; 
0x0000000000009ff7: and al, 0x10; call 0xaaa0; add rsp, 0x28; ret; 
0x0000000000009fa7: and al, 0x10; call 0xad10; add rsp, 0x28; ret; 
0x0000000000014b5f: and al, 0x10; call 0xc300; add rsp, 0x28; ret; 
0x00000000000124ac: and al, 0x10; call 0xef70; add rsp, 0x18; ret; 
0x00000000000124cc: and al, 0x10; call 0xf490; add rsp, 0x18; ret; 
0x000000000003daa0: and al, 0x10; call qword ptr [rax + 0x20]; 
0x000000000005a9b5: and al, 0x10; call qword ptr [rip + 0x1f48b]; add rsp, 0x48; ret; 
0x000000000005a965: and al, 0x10; call qword ptr [rip + 0x1f4db]; add rsp, 0x48; ret; 
0x000000000005a915: and al, 0x10; call qword ptr [rip + 0x1f52b]; add rsp, 0x48; ret; 
0x000000000005a562: and al, 0x10; call qword ptr [rip + 0x1f8de]; add rsp, 0x48; ret; 
0x0000000000056a85: and al, 0x10; call qword ptr [rip + 0x233bb]; add rsp, 0x48; ret; 
0x000000000004d5c5: and al, 0x10; call qword ptr [rip + 0x2c87b]; add rsp, 0x48; ret; 
0x0000000000022a25: and al, 0x10; call qword ptr [rip + 0x5741b]; add rsp, 0x48; ret; 
0x00000000000229d5: and al, 0x10; call qword ptr [rip + 0x5746b]; add rsp, 0x48; ret; 
0x0000000000022985: and al, 0x10; call qword ptr [rip + 0x574bb]; add rsp, 0x48; ret; 
0x0000000000022935: and al, 0x10; call qword ptr [rip + 0x5750b]; add rsp, 0x48; ret; 
0x000000000001efc2: and al, 0x10; call qword ptr [rip + 0x5ae7e]; add rsp, 0x48; ret; 
0x000000000001ef82: and al, 0x10; call qword ptr [rip + 0x5aebe]; add rsp, 0x48; ret; 
0x000000000001ef42: and al, 0x10; call qword ptr [rip + 0x5aefe]; add rsp, 0x48; ret; 
0x000000000001bfef: and al, 0x10; call qword ptr [rip + 0x5dd01]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000019aca: and al, 0x10; call qword ptr [rip + 0x5fdc6]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001839b: and al, 0x10; call qword ptr [rip + 0x61acd]; add rsp, 0x88; ret; 
0x0000000000016e8a: and al, 0x10; call qword ptr [rip + 0x628fe]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000016dcf: and al, 0x10; call qword ptr [rip + 0x62949]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000016383: and al, 0x10; call qword ptr [rip + 0x6337d]; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000015fef: and al, 0x10; call qword ptr [rip + 0x63ab1]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000015ea3: and al, 0x10; call qword ptr [rip + 0x63f85]; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000011933: and al, 0x10; call qword ptr [rip + 0x67e45]; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000000c073: and al, 0x10; call qword ptr [rip + 0x6dcf5]; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000001735d: and al, 0x10; call rax; 
0x000000000000ec47: and al, 0x10; call rdi; 
0x000000000000ec47: and al, 0x10; call rdi; add rsp, 0x18; ret; 
0x00000000000151e5: and al, 0x10; cmove rax, rcx; cmp rax, 0; jne 0x151f6; add rsp, 0x38; ret; 
0x000000000000fa05: and al, 0x10; cmove rax, rcx; cmp rax, 0; jne 0xfa16; add rsp, 0x38; ret; 
0x000000000000efac: and al, 0x10; cmp qword ptr [rdi], 0; jne 0xefb9; add rsp, 0x18; ret; 
0x0000000000010b7e: and al, 0x10; lea rax, [rip + 0x2e3f9]; call rax; 
0x000000000000e189: and al, 0x10; lea rax, [rip + 0x49e4e]; lea rsi, [rsp + 0x28]; call rax; 
0x0000000000017c6e: and al, 0x10; lea rax, [rip + 0x799]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000eefc: and al, 0x10; lea rax, [rip + 0xf33b]; call rax; 
0x000000000001d31d: and al, 0x10; lea rax, [rip - 0x11d56]; call rax; 
0x000000000001e24c: and al, 0x10; lea rax, [rip - 0x1aa5]; call rax; 
0x000000000001ab7c: and al, 0x10; lea rax, [rip - 0x3ec5]; call rax; 
0x0000000000011599: and al, 0x10; lea rax, [rip - 0x5b72]; call rax; 
0x000000000001adfd: and al, 0x10; lea rax, [rip - 0xf836]; call rax; 
0x00000000000393b1: and al, 0x10; lea rbp, [r14 - 1]; mov rdi, qword ptr [r14 - 1]; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x000000000000e748: and al, 0x10; lea rcx, [rip + 0x51b4b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000009ff2: and al, 0x10; lea rdi, [rsp + 0x10]; call 0xaaa0; add rsp, 0x28; ret; 
0x0000000000009fa2: and al, 0x10; lea rdi, [rsp + 0x10]; call 0xad10; add rsp, 0x28; ret; 
0x0000000000012937: and al, 0x10; lea rdx, [rip + 0x63658]; lea rax, [rip - 0x7227]; mov esi, 0x100; call rax; 
0x000000000001a278: and al, 0x10; lea rdx, [rsp + 0x50]; call rax; 
0x0000000000059ed9: and al, 0x10; lea rsi, [rip + 0xb0f2]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000001e6da: and al, 0x10; lea rsi, [rsp + 8]; call 0x1c870; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000016040: and al, 0x10; mov byte ptr [rdi + 0x10], cl; add rsp, 0x18; ret; 
0x000000000001a50e: and al, 0x10; mov byte ptr [rsp + 0x47], 0; lea rax, [rip - 0xdac]; call rax; 
0x000000000001dfa3: and al, 0x10; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x288; ret; 
0x0000000000037b67: and al, 0x10; mov ebp, ebx; and ebp, 3; movsxd rax, dword ptr [r12 + rbp*4]; add rax, r12; jmp rax; 
0x000000000001b920: and al, 0x10; mov ecx, 1; call 0x1ae10; add rsp, 0x18; ret; 
0x000000000001da50: and al, 0x10; mov ecx, 1; call 0x1d330; add rsp, 0x18; ret; 
0x0000000000012b76: and al, 0x10; mov edx, 0x30; call 0x9078; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x000000000005778f: and al, 0x10; mov edx, 8; mov rdi, rax; call qword ptr [rip + 0x222a1]; add rsp, 0x18; ret; 
0x0000000000011186: and al, 0x10; mov qword ptr [rax + 0x40], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x1b8; ret; 
0x0000000000010dda: and al, 0x10; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x0000000000016eb7: and al, 0x10; mov qword ptr [rdi + 8], rcx; mov word ptr [rdi], 2; add rsp, 0x18; ret; 
0x0000000000017007: and al, 0x10; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x18; ret; 
0x0000000000016f05: and al, 0x10; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x28; ret; 
0x000000000001e6a8: and al, 0x10; mov qword ptr [rdi], rcx; mov rcx, qword ptr [rsp + 0x18]; mov qword ptr [rdi + 8], rcx; add rsp, 0x28; ret; 
0x00000000000163b3: and al, 0x10; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 8], rcx; mov qword ptr [rdi + 0x10], rsi; add rsp, 0x18; ret; 
0x0000000000013323: and al, 0x10; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x0000000000015293: and al, 0x10; mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x000000000001bda3: and al, 0x10; mov qword ptr [rsp + 0x18], rsi; add rsp, 0x20; ret; 
0x00000000000118a7: and al, 0x10; mov qword ptr [rsp + 0x18], rsi; lea rax, [rip + 0x4806b]; call rax; 
0x000000000003b33b: and al, 0x10; mov qword ptr [rsp + 0x40], rcx; mov qword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x0000000000013abf: and al, 0x10; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000002c099: and al, 0x10; mov r12d, 0x2f; lea rdx, [rip + 0x355ac]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x0000000000012d03: and al, 0x10; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xc8; ret; 
0x000000000000fe39: and al, 0x10; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0xc0; ret; 
0x000000000005a3eb: and al, 0x10; mov rax, qword ptr [rsp + 0x18]; lea rsi, [rip + 0xb320]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a250: and al, 0x10; mov rax, qword ptr [rsp + 0x18]; lea rsi, [rip + 0xb4bb]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059dc2: and al, 0x10; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000e6bd: and al, 0x10; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x70; ret; 
0x000000000000e642: and al, 0x10; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x78; ret; 
0x000000000001376b: and al, 0x10; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x000000000004087a: and al, 0x10; mov rax, rbx; add rsp, 0x70; pop rbx; ret; 
0x000000000000eccf: and al, 0x10; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000ebe7: and al, 0x10; mov rdi, qword ptr [rdi]; call 0xec00; add rsp, 0x18; ret; 
0x000000000001e2ec: and al, 0x10; mov rdi, qword ptr [rdi]; lea rax, [rip - 0xc8]; call rax; 
0x0000000000042780: and al, 0x10; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x00000000000114e6: and al, 0x10; mov rdi, qword ptr [rsp + 8]; lea rax, [rip - 0x5ab4]; call rax; 
0x0000000000011643: and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000001529d: and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x0000000000017419: and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000fe3e: and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0xc0; ret; 
0x000000000005b092: and al, 0x10; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x000000000005b06a: and al, 0x10; mov rdx, r15; call qword ptr [rbx + 0x18]; 
0x000000000005ac34: and al, 0x10; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000005abe2: and al, 0x10; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000005aad0: and al, 0x10; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000000f694: and al, 0x10; mov rsi, qword ptr [rsp + 0x18]; call 0xed30; add rsp, 0x78; ret; 
0x000000000000f714: and al, 0x10; mov rsi, qword ptr [rsp + 0x18]; call 0xeff0; add rsp, 0x78; ret; 
0x0000000000015192: and al, 0x10; mov rsi, qword ptr [rsp + 0x18]; lea rax, [rip + 0x5b60]; call rax; 
0x000000000001bd12: and al, 0x10; mov rsi, qword ptr [rsp + 0x18]; lea rax, [rip + 0xb00]; mov edi, 0x27; call rax; 
0x000000000000d622: and al, 0x10; mov rsi, qword ptr [rsp + 0x18]; lea rax, [rip + 0xc1d0]; lea rdi, [rsp + 0x278]; call rax; 
0x00000000000183f8: and al, 0x10; mov rsi, rax; call 0x18d10; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x48; ret; 
0x000000000001848d: and al, 0x10; mov word ptr [rax], 3; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xb8; ret; 
0x000000000005edb1: and al, 0x10; movaps xmmword ptr [rsp], xmm0; mov rdx, rsp; call qword ptr [rip + 0x1b088]; add rsp, 0x38; ret; 
0x000000000001e41c: and al, 0x10; movups xmmword ptr [rax], xmm0; lea rdx, [rip + 0x57fd0]; add rsp, 0x38; ret; 
0x000000000001a8fc: and al, 0x10; movups xmmword ptr [rax], xmm0; lea rdx, [rip + 0x5ba08]; add rsp, 0x38; ret; 
0x000000000000fbf2: and al, 0x10; movzx eax, byte ptr [rsp + 7]; add rsp, 0x18; ret; 
0x000000000005b5d4: and al, 0x10; shr al, 4; ret; 
0x000000000001b990: and al, 0x10; xor ecx, ecx; call 0x1ae10; add rsp, 0x18; ret; 
0x000000000001da80: and al, 0x10; xor ecx, ecx; call 0x1d330; add rsp, 0x18; ret; 
0x000000000000eb55: and al, 0x13; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000c22c: and al, 0x14; add rsp, 0x28; ret; 
0x0000000000011886: and al, 0x14; call 0xeb00; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000001e662: and al, 0x14; mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001e65e: and al, 0x14; mov eax, dword ptr [rsp + 0x14]; mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001e12f: and al, 0x14; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x20]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x278; ret; 
0x000000000000c221: and al, 0x14; test byte ptr [rsp + 0x1f], 1; jne 0xc233; mov eax, dword ptr [rsp + 0x14]; add rsp, 0x28; ret; 
0x000000000000c3d1: and al, 0x14; test byte ptr [rsp + 0x1f], 1; jne 0xc3e3; mov eax, dword ptr [rsp + 0x14]; add rsp, 0x28; ret; 
0x000000000001e572: and al, 0x15; mov byte ptr [rsp + 0x16], cl; mov byte ptr [rsp + 0x17], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000001e576: and al, 0x16; mov byte ptr [rsp + 0x17], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000013828: and al, 0x16; movzx eax, ax; add rsp, 0x18; ret; 
0x000000000001c858: and al, 0x16; movzx edi, al; call qword ptr [rip + 0x5d3ed]; add rsp, 0x28; ret; 
0x000000000001bf73: and al, 0x16; movzx edi, al; call qword ptr [rip + 0x5dcd2]; add rsp, 0x18; ret; 
0x000000000001bfc9: and al, 0x17; add rsp, 0x28; ret; 
0x0000000000011b1b: and al, 0x17; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x000000000001bfc4: and al, 0x17; dec dword ptr [rdx + 0x48172444]; add esp, 0x28; ret; 
0x0000000000011b17: and al, 0x17; mov al, byte ptr [rsp + 0x17]; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x000000000001e57a: and al, 0x17; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000001dbfa: and al, 0x18; add rsp, 0x118; ret; 
0x0000000000011193: and al, 0x18; add rsp, 0x1b8; ret; 
0x0000000000010fdd: and al, 0x18; add rsp, 0x20; ret; 
0x00000000000119e0: and al, 0x18; add rsp, 0x28; ret; 
0x0000000000011648: and al, 0x18; add rsp, 0x38; ret; 
0x00000000000152a2: and al, 0x18; add rsp, 0x40; ret; 
0x0000000000018405: and al, 0x18; add rsp, 0x48; ret; 
0x0000000000013b8e: and al, 0x18; add rsp, 0x50; ret; 
0x000000000001741e: and al, 0x18; add rsp, 0x58; ret; 
0x000000000000c2e9: and al, 0x18; add rsp, 0x68; ret; 
0x0000000000017a2b: and al, 0x18; add rsp, 0x78; ret; 
0x0000000000013560: and al, 0x18; add rsp, 0x88; ret; 
0x0000000000011cb9: and al, 0x18; add rsp, 0xb8; ret; 
0x000000000000fe43: and al, 0x18; add rsp, 0xc0; ret; 
0x0000000000016498: and al, 0x18; add rsp, 0xc8; ret; 
0x000000000001721d: and al, 0x18; add rsp, 0xd8; ret; 
0x000000000001a98e: and al, 0x18; call 0x18d10; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000c118: and al, 0x18; call 0xc090; and al, 1; movzx eax, al; add rsp, 0x48; ret; 
0x000000000000f699: and al, 0x18; call 0xed30; add rsp, 0x78; ret; 
0x000000000000f719: and al, 0x18; call 0xeff0; add rsp, 0x78; ret; 
0x000000000001c224: and al, 0x18; call qword ptr [rip + 0x5d524]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000001979d: and al, 0x18; call qword ptr [rip + 0x5fceb]; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x0000000000010b8e: and al, 0x18; call qword ptr [rip + 0x68eba]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000014559: and al, 0x18; call rax; 
0x000000000000e163: and al, 0x18; lea rax, [rip + 0x100a4]; call rax; 
0x00000000000118ac: and al, 0x18; lea rax, [rip + 0x4806b]; call rax; 
0x0000000000015197: and al, 0x18; lea rax, [rip + 0x5b60]; call rax; 
0x0000000000015197: and al, 0x18; lea rax, [rip + 0x5b60]; call rax; add rsp, 0x28; ret; 
0x000000000001bd17: and al, 0x18; lea rax, [rip + 0xb00]; mov edi, 0x27; call rax; 
0x000000000000f121: and al, 0x18; lea rax, [rip + 0xb966]; call rax; 
0x000000000000f0dc: and al, 0x18; lea rax, [rip + 0xb9ab]; call rax; 
0x000000000000d627: and al, 0x18; lea rax, [rip + 0xc1d0]; lea rdi, [rsp + 0x278]; call rax; 
0x0000000000010b54: and al, 0x18; lea rax, [rip + 0xd6b3]; call rax; 
0x000000000001a127: and al, 0x18; lea rax, [rip - 0x3e50]; lea rsi, [rsp + 0x58]; call rax; 
0x00000000000141f7: and al, 0x18; lea rcx, [rip + 0x61e00]; lea rax, [rip - 0x8877]; lea rdx, [rsp + 0x28]; call rax; 
0x000000000000c64e: and al, 0x18; lea rdx, [rip + 0x694f1]; lea rax, [rip - 0xf3e]; xor ecx, ecx; mov edi, ecx; call rax; 
0x000000000005a3f0: and al, 0x18; lea rsi, [rip + 0xb320]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a255: and al, 0x18; lea rsi, [rip + 0xb4bb]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059dbb: and al, 0x18; mov byte ptr [rcx], al; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000001ba43: and al, 0x18; mov byte ptr [rdi + 0xc], dl; mov dword ptr [rdi + 8], esi; mov qword ptr [rdi], rcx; add rsp, 0x28; ret; 
0x0000000000017d8a: and al, 0x18; mov byte ptr [rsp + 0x157], 0; lea rax, [rip - 0x188b]; call rax; 
0x000000000001482a: and al, 0x18; mov edx, dword ptr [rsp + 0x1c]; add rsp, 0x78; ret; 
0x000000000000c379: and al, 0x18; mov edx, dword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x000000000000bd22: and al, 0x18; mov qword ptr [rcx], rdx; add rsp, 0x78; ret; 
0x00000000000170f6: and al, 0x18; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x20; ret; 
0x0000000000017146: and al, 0x18; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x20; ret; 
0x000000000001e6b0: and al, 0x18; mov qword ptr [rdi + 8], rcx; add rsp, 0x28; ret; 
0x0000000000010d2a: and al, 0x18; mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x20]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x48; ret; 
0x0000000000009fed: and al, 0x18; mov qword ptr [rsp + 0x10], rax; lea rdi, [rsp + 0x10]; call 0xaaa0; add rsp, 0x28; ret; 
0x0000000000009f9d: and al, 0x18; mov qword ptr [rsp + 0x10], rax; lea rdi, [rsp + 0x10]; call 0xad10; add rsp, 0x28; ret; 
0x000000000000fe34: and al, 0x18; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0xc0; ret; 
0x000000000001bedd: and al, 0x18; mov qword ptr [rsp + 0x20], rax; mov rax, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x98; ret; 
0x00000000000151b7: and al, 0x18; mov qword ptr [rsp + 0x20], rsi; lea rax, [rip + 0x21cb]; call rax; 
0x000000000000f9d7: and al, 0x18; mov qword ptr [rsp + 0x20], rsi; lea rax, [rip + 0x79ab]; call rax; 
0x000000000001a697: and al, 0x18; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x000000000001e361: and al, 0x18; mov qword ptr [rsp], rdi; mov rax, qword ptr [rsp]; add rsp, 0x20; ret; 
0x0000000000015298: and al, 0x18; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x0000000000010fd8: and al, 0x18; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x000000000001e134: and al, 0x18; mov rax, qword ptr [rsp + 0x20]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x278; ret; 
0x000000000000f60e: and al, 0x18; mov rax, qword ptr [rsp + 0x20]; mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x70; ret; 
0x000000000005eec6: and al, 0x18; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x71ef]; mov edx, 9; call qword ptr [rax + 0x18]; 
0x000000000005dd5b: and al, 0x18; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x8315]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000000f68f: and al, 0x18; mov rdi, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call 0xed30; add rsp, 0x78; ret; 
0x000000000000f70f: and al, 0x18; mov rdi, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call 0xeff0; add rsp, 0x78; ret; 
0x000000000000e38a: and al, 0x18; mov rdi, qword ptr [rsp + 0x20]; add rdx, qword ptr [rdi + 0x10]; mov qword ptr [rdi + 0x10], rdx; add rsp, 0xb8; ret; 
0x0000000000010b02: and al, 0x18; mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x2e470]; call rax; 
0x000000000000bd1d: and al, 0x18; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rcx], rdx; add rsp, 0x78; ret; 
0x0000000000010fa8: and al, 0x18; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000001bee7: and al, 0x18; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x98; ret; 
0x0000000000010c19: and al, 0x18; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x2e0c9]; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000019453: and al, 0x18; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x430bf]; lea rdi, [rsp + 0x630]; call rax; 
0x000000000000d36e: and al, 0x18; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x49e74]; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000cdb0: and al, 0x18; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x4a432]; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000e3ea: and al, 0x18; mov rsi, rax; call 0xe280; add rsp, 0x38; ret; 
0x0000000000016e5b: and al, 0x18; mov rsi, rax; call qword ptr [rip + 0x62dba]; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x000000000001482e: and al, 0x1c; add rsp, 0x78; ret; 
0x000000000000c225: and al, 0x1f; add dword ptr [rbp + 9], esi; mov eax, dword ptr [rsp + 0x14]; add rsp, 0x28; ret; 
0x000000000000d878: and al, 0x1f; add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x348; ret; 
0x000000000000d4f8: and al, 0x20; add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x2a89c; lea rdi, [rsp + 0x220]; call rax; 
0x000000000000e38f: and al, 0x20; add rdx, qword ptr [rdi + 0x10]; mov qword ptr [rdi + 0x10], rdx; add rsp, 0xb8; ret; 
0x0000000000017da4: and al, 0x20; add rsp, 0x188; ret; 
0x0000000000010fad: and al, 0x20; add rsp, 0x28; ret; 
0x0000000000016e69: and al, 0x20; add rsp, 0x38; ret; 
0x000000000000c37d: and al, 0x20; add rsp, 0x48; ret; 
0x000000000001a4b3: and al, 0x20; add rsp, 0x58; ret; 
0x000000000000e1c6: and al, 0x20; add rsp, 0x98; ret; 
0x000000000001a11a: and al, 0x20; add rsp, 0xd8; ret; 
0x0000000000018ec7: and al, 0x20; add rsp, 0xf8; ret; 
0x000000000005b097: and al, 0x20; call qword ptr [rbp + 0x18]; 
0x000000000001bb2c: and al, 0x20; call qword ptr [rip + 0x5e324]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x0000000000019755: and al, 0x20; call qword ptr [rip + 0x60373]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000119d5: and al, 0x20; call qword ptr [rip + 0x680f3]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x000000000001441f: and al, 0x20; call rax; 
0x00000000000151bc: and al, 0x20; lea rax, [rip + 0x21cb]; call rax; 
0x0000000000010c1e: and al, 0x20; lea rax, [rip + 0x2e0c9]; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000016483: and al, 0x20; lea rax, [rip + 0x3b14]; lea rdx, [rsp + 0x20]; call rax; 
0x0000000000019458: and al, 0x20; lea rax, [rip + 0x430bf]; lea rdi, [rsp + 0x630]; call rax; 
0x000000000000d373: and al, 0x20; lea rax, [rip + 0x49e74]; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000cdb5: and al, 0x20; lea rax, [rip + 0x4a432]; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000f9dc: and al, 0x20; lea rax, [rip + 0x79ab]; call rax; 
0x000000000000f092: and al, 0x20; lea rax, [rip + 0xb9f5]; call rax; 
0x000000000000f054: and al, 0x20; lea rax, [rip + 0xba33]; call rax; 
0x0000000000016b81: and al, 0x20; lea rax, [rip + 0xd6]; call rax; 
0x000000000001cb86: and al, 0x20; lea rcx, [rip + 0x440dd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001440c: and al, 0x20; lea rcx, [rip + 0x61c2b]; lea rax, [rip - 0x8a8c]; lea rdx, [rsp + 0x20]; call rax; 
0x000000000001bba0: and al, 0x20; lea rsi, [rip + 0x5a7bf]; lea rax, [rip - 0x48b0]; call rax; 
0x000000000001e139: and al, 0x20; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x278; ret; 
0x000000000001db73: and al, 0x20; mov dword ptr [rsp + 0x58], eax; mov edi, dword ptr [rsp + 0x58]; lea rax, [rip + 0x3be8c]; call rax; 
0x000000000001432c: and al, 0x20; mov edx, 0x38; call 0x9078; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x58; ret; 
0x0000000000010d33: and al, 0x20; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x48; ret; 
0x0000000000047517: and al, 0x20; mov qword ptr [rsp + 0x178], rax; lea rsi, [rsp + 0x150]; call qword ptr [rcx + 0x20]; 
0x0000000000014283: and al, 0x20; mov qword ptr [rsp + 0x28], rax; lea rcx, [rip + 0x61d8f]; lea rax, [rip - 0x8908]; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000047469: and al, 0x20; mov qword ptr [rsp + 0x460], rax; mov rdi, qword ptr [rsp + 0x80]; lea rsi, [rsp + 0x430]; mov rax, qword ptr [rsp + 0xb0]; call qword ptr [rax + 0x20]; 
0x000000000001190c: and al, 0x20; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000f613: and al, 0x20; mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x70; ret; 
0x0000000000010fa3: and al, 0x20; mov rax, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000001bee2: and al, 0x20; mov rax, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x98; ret; 
0x0000000000011907: and al, 0x20; mov rax, qword ptr [rsp + 0x20]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000f086: and al, 0x20; mov rax, rdi; add rax, 0x10; mov qword ptr [rsp + 0x20], rax; lea rax, [rip + 0xb9f5]; call rax; 
0x000000000000f048: and al, 0x20; mov rax, rdi; add rax, 0x10; mov qword ptr [rsp + 0x20], rax; lea rax, [rip + 0xba33]; call rax; 
0x000000000003e40f: and al, 0x20; mov rbx, qword ptr [rip + 0x3b5c0]; mov edx, 0x90; call rbx; 
0x0000000000019750: and al, 0x20; mov rcx, qword ptr [rsp + 0x20]; call qword ptr [rip + 0x60373]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000119d0: and al, 0x20; mov rcx, qword ptr [rsp + 0x20]; call qword ptr [rip + 0x680f3]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x000000000005ec3c: and al, 0x20; mov rdi, qword ptr [rbx]; mov rax, qword ptr [rbx + 8]; lea rsi, [rip + 0x39e0]; mov edx, 4; call qword ptr [rax + 0x18]; 
0x000000000005defd: and al, 0x20; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x81a2]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x0000000000011594: and al, 0x20; mov rdi, qword ptr [rsp + 0x10]; lea rax, [rip - 0x5b72]; call rax; 
0x0000000000018987: and al, 0x20; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x1d1b]; call rax; 
0x000000000003b34e: and al, 0x20; mov rdi, r14; call rax; 
0x0000000000011472: and al, 0x20; mov rdx, qword ptr [rsp + 0x28]; add rsp, 0x88; ret; 
0x000000000001e3ad: and al, 0x20; movaps xmmword ptr [rsp], xmm0; mov rdi, rsp; call 0x1e3c0; add rsp, 0x58; ret; 
0x000000000001c8ae: and al, 0x20; shl rdx, 0; call 0x9078; add rsp, 0x28; ret; 
0x000000000005b5e4: and al, 0x20; shr al, 5; ret; 
0x00000000000128d0: and al, 0x23; and al, 1; movzx eax, al; add rsp, 0x28; ret; 
0x00000000000128cc: and al, 0x23; mov al, byte ptr [rsp + 0x23]; and al, 1; movzx eax, al; add rsp, 0x28; ret; 
0x00000000000174af: and al, 0x27; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x00000000000454f8: and al, 0x28; add eax, dword ptr [rax]; add byte ptr [rdi + 0x100], bh; mov esi, 8; call rbx; 
0x0000000000015038: and al, 0x28; add rsp, 0x1c8; ret; 
0x0000000000018086: and al, 0x28; add rsp, 0x478; ret; 
0x000000000001433b: and al, 0x28; add rsp, 0x58; ret; 
0x000000000001adee: and al, 0x28; add rsp, 0x78; ret; 
0x0000000000011477: and al, 0x28; add rsp, 0x88; ret; 
0x000000000000c750: and al, 0x28; add rsp, 0xc8; ret; 
0x000000000001da28: and al, 0x28; call qword ptr [rip + 0x5bd58]; add rsp, 0x68; ret; 
0x000000000001b8f8: and al, 0x28; call qword ptr [rip + 0x5de88]; add rsp, 0x68; ret; 
0x0000000000016a74: and al, 0x28; call qword ptr [rip + 0x63084]; add rsp, 0x148; ret; 
0x0000000000011a78: and al, 0x28; call qword ptr [rip + 0x67d08]; add rsp, 0x68; ret; 
0x000000000000e15a: and al, 0x28; call rax; 
0x000000000001898c: and al, 0x28; lea rax, [rip + 0x1d1b]; call rax; 
0x000000000000d4e1: and al, 0x28; lea rax, [rip + 0x2b0d6]; call rax; 
0x000000000000d2d8: and al, 0x28; lea rax, [rip + 0x2dbcf]; lea rdi, [rsp + 0x1c8]; call rax; 
0x000000000000cd1a: and al, 0x28; lea rax, [rip + 0x2e18d]; lea rdi, [rsp + 0x1c8]; call rax; 
0x00000000000169cc: and al, 0x28; lea rax, [rip + 0x345b]; lea rdi, [rsp + 0x30]; call rax; 
0x0000000000016b06: and al, 0x28; lea rax, [rip + 0x3641]; lea rdi, [rsp + 0x68]; call rax; 
0x00000000000169e1: and al, 0x28; lea rax, [rip + 0x4096]; call rax; 
0x000000000001698a: and al, 0x28; lea rax, [rip + 0x40ed]; call rax; 
0x000000000001c532: and al, 0x28; lea rax, [rip - 0x10f6b]; call rax; 
0x000000000001bbc7: and al, 0x28; lea rax, [rip - 0x5b00]; call rax; 
0x00000000000155a2: and al, 0x28; lea rax, [rip - 0x9fdb]; call rax; 
0x00000000000144a6: and al, 0x28; lea rcx, [rip + 0x61b71]; lea rax, [rip - 0x8b26]; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000014288: and al, 0x28; lea rcx, [rip + 0x61d8f]; lea rax, [rip - 0x8908]; lea rdx, [rsp + 0x28]; call rax; 
0x000000000000d4d2: and al, 0x28; mov edx, 1; call 0xc4b0; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x2b0d6]; call rax; 
0x000000000001121b: and al, 0x28; mov qword ptr [rax + 0x10], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000001b9e5: and al, 0x28; mov qword ptr [rax + 8], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x00000000000170ae: and al, 0x28; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x38; ret; 
0x0000000000016f5e: and al, 0x28; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x38; ret; 
0x0000000000015f3f: and al, 0x28; mov qword ptr [rsp + 0x30], rdx; add rsp, 0x38; ret; 
0x000000000000e2ad: and al, 0x28; mov qword ptr [rsp + 0x30], rdx; call 0xe2c0; add rsp, 0x38; ret; 
0x0000000000010f15: and al, 0x28; mov qword ptr [rsp + 0x30], rdx; mov qword ptr [rdi + 0x10], 0; add rsp, 0x38; ret; 
0x000000000000fa45: and al, 0x28; mov qword ptr [rsp + 0x30], rsi; lea rax, [rip - 0x4483]; call rax; 
0x0000000000015225: and al, 0x28; mov qword ptr [rsp + 0x30], rsi; lea rax, [rip - 0x9c63]; call rax; 
0x000000000001ade9: and al, 0x28; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000005a0aa: and al, 0x28; mov rax, qword ptr [rsp + 0x30]; lea rsi, [rip + 0xb661]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000010b79: and al, 0x28; mov rdi, qword ptr [rsp + 0x10]; lea rax, [rip + 0x2e3f9]; call rax; 
0x000000000003c4dc: and al, 0x28; mov rdi, r15; call qword ptr [rip + 0x3d261]; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000005a092: and al, 0x28; mov rdi, r15; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000001da23: and al, 0x28; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x5bd58]; add rsp, 0x68; ret; 
0x000000000001b8f3: and al, 0x28; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x5de88]; add rsp, 0x68; ret; 
0x0000000000011a73: and al, 0x28; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x67d08]; add rsp, 0x68; ret; 
0x000000000001b1bf: and al, 0x28; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x228; ret; 
0x00000000000196a9: and al, 0x28; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000000bddf: and al, 0x28; movups xmmword ptr [rcx], xmm0; add rsp, 0xb8; ret; 
0x000000000005bb15: and al, 0x2c; add r15, rsi; mov rdi, r13; mov rsi, r15; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x000000000000c371: and al, 0x2f; add dword ptr [rbp + 0xe], esi; mov rax, qword ptr [rsp + 0x18]; mov edx, dword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x000000000001f508: and al, 0x30; add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret; 
0x000000000001410a: and al, 0x30; add rsp, 0x1f8; ret; 
0x000000000001b1c4: and al, 0x30; add rsp, 0x228; ret; 
0x000000000000fbc5: and al, 0x30; add rsp, 0x38; ret; 
0x000000000000e58b: and al, 0x30; call 0x11b30; test al, 1; jne 0xe59b; add rsp, 0x38; ret; 
0x000000000000e2b2: and al, 0x30; call 0xe2c0; add rsp, 0x38; ret; 
0x000000000005bb23: and al, 0x30; call qword ptr [rax + 0x18]; 
0x00000000000197ee: and al, 0x30; call qword ptr [rip + 0x5fe92]; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x0000000000016c8b: and al, 0x30; call qword ptr [rip + 0x62c65]; test al, 1; jne 0x16c9c; add rsp, 0x38; ret; 
0x0000000000010f6e: and al, 0x30; call qword ptr [rip + 0x68712]; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x000000000001436e: and al, 0x30; call rax; 
0x000000000000fa4a: and al, 0x30; lea rax, [rip - 0x4483]; call rax; 
0x000000000001522a: and al, 0x30; lea rax, [rip - 0x9c63]; call rax; 
0x000000000001435b: and al, 0x30; lea rcx, [rip + 0x61cbc]; lea rax, [rip - 0x89db]; lea rdx, [rsp + 0x30]; call rax; 
0x000000000005a0af: and al, 0x30; lea rsi, [rip + 0xb661]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000017ab9: and al, 0x30; mov qword ptr [rax + 8], rcx; mov byte ptr [rax], 1; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x000000000001785b: and al, 0x30; mov qword ptr [rax + 8], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000010f1a: and al, 0x30; mov qword ptr [rdi + 0x10], 0; add rsp, 0x38; ret; 
0x0000000000012d6f: and al, 0x30; mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x38]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x00000000000129f2: and al, 0x30; mov qword ptr [rsp + 0x38], rax; lea rdx, [rip + 0x635b0]; lea rax, [rip + 0x47a09]; lea rsi, [rsp + 0x38]; call rax; 
0x0000000000011573: and al, 0x30; mov qword ptr [rsp + 0x38], rax; mov rax, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; add rsp, 0xb8; ret; 
0x000000000005b941: and al, 0x30; mov rax, qword ptr [rax + 0x20]; mov rdi, r13; mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x00000000000196a4: and al, 0x30; mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000001b960: and al, 0x30; mov rax, rsp; mov dword ptr [rax], 0; call 0x1b1d0; add rsp, 0x38; ret; 
0x000000000001c52d: and al, 0x30; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip - 0x10f6b]; call rax; 
0x000000000001559d: and al, 0x30; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip - 0x9fdb]; call rax; 
0x000000000001157d: and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; add rsp, 0xb8; ret; 
0x000000000001a54b: and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; lea rax, [rip + 0x417]; call rax; 
0x000000000002d7e6: and al, 0x30; mov rsi, qword ptr [rsp + 0x148]; call rbx; 
0x000000000000bdda: and al, 0x30; movups xmm0, xmmword ptr [rsp + 0x28]; movups xmmword ptr [rcx], xmm0; add rsp, 0xb8; ret; 
0x0000000000016479: and al, 0x30; movups xmm0, xmmword ptr [rsp + 0x38]; movaps xmmword ptr [rsp + 0x20], xmm0; lea rax, [rip + 0x3b14]; lea rdx, [rsp + 0x20]; call rax; 
0x000000000002f1f8: and al, 0x30; shl rsi, 4; mov edx, 8; mov rdi, r12; lea rbx, [rip - 0x1a4ad]; call rbx; 
0x0000000000032f9c: and al, 0x30; shl rsi, 4; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x1e251]; call rbx; 
0x0000000000015faa: and al, 0x37; add byte ptr [rax - 0x73], cl; add eax, 0x1c8c; lea rdx, [rsp + 0x18]; call rax; 
0x0000000000015f73: and al, 0x37; add dword ptr [rax - 0x73], ecx; add eax, 0x423; lea rdi, [rsp + 0x18]; call rax; 
0x0000000000017554: and al, 0x37; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x0000000000017411: and al, 0x37; add dword ptr [rbp + 0xf], esi; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x00000000000308db: and al, 0x38; add rax, qword ptr [rdi + 0x60]; lea rdi, [rip + 0x30f64]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000001cd6e: and al, 0x38; add rsp, 0x108; ret; 
0x000000000001699a: and al, 0x38; add rsp, 0x1a8; ret; 
0x0000000000011582: and al, 0x38; add rsp, 0xb8; ret; 
0x000000000000edda: and al, 0x38; call 0x9060; ud2; lea rax, [rip - 0x364a]; call rax; 
0x000000000000f0a2: and al, 0x38; call 0x9060; ud2; lea rax, [rip - 0x3912]; call rax; 
0x0000000000059b13: and al, 0x38; call qword ptr [rip + 0x2032d]; add rsp, 0x68; ret; 
0x0000000000010c2a: and al, 0x38; call rax; 
0x00000000000426d5: and al, 0x38; call rbx; 
0x000000000001a550: and al, 0x38; lea rax, [rip + 0x417]; call rax; 
0x00000000000129f7: and al, 0x38; lea rdx, [rip + 0x635b0]; lea rax, [rip + 0x47a09]; lea rsi, [rsp + 0x38]; call rax; 
0x000000000001a273: and al, 0x38; lea rsi, [rsp + 0x10]; lea rdx, [rsp + 0x50]; call rax; 
0x0000000000015ef9: and al, 0x38; mov byte ptr [rax], 0; add rsp, 0x40; ret; 
0x000000000000fafd: and al, 0x38; mov dword ptr [rsp + 0x40], eax; mov rax, qword ptr [rsp + 0x38]; mov edx, dword ptr [rsp + 0x40]; add rsp, 0x88; ret; 
0x0000000000010c38: and al, 0x38; mov edx, 0xd0; call 0x9078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x000000000000fb06: and al, 0x38; mov edx, dword ptr [rsp + 0x40]; add rsp, 0x88; ret; 
0x000000000000bf30: and al, 0x38; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xd0; ret; 
0x0000000000012d78: and al, 0x38; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x000000000000bcad: and al, 0x38; mov qword ptr [rsp + 0x40], rax; mov qword ptr [rsp + 0x48], rdx; add rsp, 0x50; ret; 
0x0000000000010040: and al, 0x38; mov qword ptr [rsp + 0x40], rax; mov rax, qword ptr [rsp + 0x38]; mov rdx, qword ptr [rsp + 0x40]; add rsp, 0xc8; ret; 
0x000000000000f77e: and al, 0x38; mov qword ptr [rsp + 0x40], rcx; call 0x11a00; add rsp, 0x48; ret; 
0x0000000000015d3f: and al, 0x38; mov qword ptr [rsp + 0x40], rcx; call 0x1b880; add rsp, 0x48; ret; 
0x000000000001c74f: and al, 0x38; mov qword ptr [rsp + 0x40], rcx; call 0x1d9b0; add rsp, 0x48; ret; 
0x0000000000017322: and al, 0x38; mov qword ptr [rsp + 0x40], rdx; add rsp, 0x48; ret; 
0x000000000001be32: and al, 0x38; mov qword ptr [rsp + 0x78], rax; mov qword ptr [rsp + 0x80], rdx; add rsp, 0x88; ret; 
0x000000000000d4a7: and al, 0x38; mov rax, qword ptr [rip + 0x6c310]; call rax; 
0x0000000000011578: and al, 0x38; mov rax, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; add rsp, 0xb8; ret; 
0x0000000000015ef4: and al, 0x38; mov rax, qword ptr [rsp + 0x38]; mov byte ptr [rax], 0; add rsp, 0x40; ret; 
0x0000000000019efc: and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; lea rax, [rip - 0x3fba]; lea rdi, [rsp + 0x20]; call rax; 
0x00000000000187b9: and al, 0x38; mov rdi, qword ptr [rsp + 0x40]; lea rax, [rip + 0x1fa9]; call rax; 
0x000000000001004a: and al, 0x38; mov rdx, qword ptr [rsp + 0x40]; add rsp, 0xc8; ret; 
0x00000000000187b4: and al, 0x38; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; lea rax, [rip + 0x1fa9]; call rax; 
0x000000000001647e: and al, 0x38; movaps xmmword ptr [rsp + 0x20], xmm0; lea rax, [rip + 0x3b14]; lea rdx, [rsp + 0x20]; call rax; 
0x000000000001a2fa: and al, 0x38; movaps xmmword ptr [rsp + 0x70], xmm0; lea rax, [rip - 0x2d98]; lea rsi, [rsp + 0x70]; call rax; 
0x000000000001b5c6: and al, 0x40; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; mov esp, 0x24824; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x0000000000017e0d: and al, 0x40; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0xffffe237; lea rsi, [rsp + 0x140]; call rax; 
0x0000000000010553: and al, 0x40; add rsp, 0x108; ret; 
0x0000000000017327: and al, 0x40; add rsp, 0x48; ret; 
0x000000000000fb0a: and al, 0x40; add rsp, 0x88; ret; 
0x000000000001004f: and al, 0x40; add rsp, 0xc8; ret; 
0x000000000000f783: and al, 0x40; call 0x11a00; add rsp, 0x48; ret; 
0x0000000000015d44: and al, 0x40; call 0x1b880; add rsp, 0x48; ret; 
0x000000000001c754: and al, 0x40; call 0x1d9b0; add rsp, 0x48; ret; 
0x000000000003d0d8: and al, 0x40; call qword ptr [rax + 0x28]; 
0x000000000001dde7: and al, 0x40; call qword ptr [rip + 0x5bbc1]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x000000000000d58c: and al, 0x40; call rax; 
0x00000000000187be: and al, 0x40; lea rax, [rip + 0x1fa9]; call rax; 
0x0000000000019f01: and al, 0x40; lea rax, [rip - 0x3fba]; lea rdi, [rsp + 0x20]; call rax; 
0x0000000000016910: and al, 0x40; lea rsi, [rsp + 0xe0]; call rax; 
0x00000000000165b0: and al, 0x40; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x50; ret; 
0x0000000000014d3e: and al, 0x40; mov edx, dword ptr [rsp + 0x48]; add rsp, 0xf8; ret; 
0x0000000000016fd7: and al, 0x40; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x48; ret; 
0x000000000003b340: and al, 0x40; mov qword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000000bcb2: and al, 0x40; mov qword ptr [rsp + 0x48], rdx; add rsp, 0x50; ret; 
0x0000000000012012: and al, 0x40; mov qword ptr [rsp + 0x48], rdx; mov rax, qword ptr [rsp + 0x40]; mov rdx, qword ptr [rsp + 0x48]; add rsp, 0x248; ret; 
0x000000000003d0c6: and al, 0x40; mov qword ptr [rsp + 0x48], rdx; mov rdi, qword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000001bdbe: and al, 0x40; mov qword ptr [rsp + 8], rdi; mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x3c11f]; call rax; 
0x000000000000fb01: and al, 0x40; mov rax, qword ptr [rsp + 0x38]; mov edx, dword ptr [rsp + 0x40]; add rsp, 0x88; ret; 
0x0000000000010045: and al, 0x40; mov rax, qword ptr [rsp + 0x38]; mov rdx, qword ptr [rsp + 0x40]; add rsp, 0xc8; ret; 
0x00000000000426cb: and al, 0x40; mov rdi, rbp; xor esi, esi; mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000019ef7: and al, 0x40; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; lea rax, [rip - 0x3fba]; lea rdi, [rsp + 0x20]; call rax; 
0x000000000001201c: and al, 0x40; mov rdx, qword ptr [rsp + 0x48]; add rsp, 0x248; ret; 
0x000000000001a04b: and al, 0x40; movaps xmmword ptr [rsp + 0x70], xmm0; lea rax, [rip + 0xc67]; lea rdi, [rsp + 0x58]; lea rdx, [rsp + 0x70]; call rax; 
0x00000000000243db: and al, 0x41; call rsi; 
0x000000000001bb69: and al, 0x44; mov rax, qword ptr [rip + 0x5db9e]; call rax; 
0x000000000001a512: and al, 0x47; add byte ptr [rax - 0x73], cl; add eax, 0xfffff254; call rax; 
0x000000000001a645: and al, 0x47; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x0000000000044bee: and al, 0x48; add al, 0; add byte ptr [rcx], dh; rol byte ptr [rax + 0xf084979], cl; xchg eax, esp; ret 0x8b48; 
0x000000000001b5ce: and al, 0x48; add al, byte ptr [rax]; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x0000000000019d94: and al, 0x48; add dword ptr [rax], eax; add al, ch; ret 0xfef2; 
0x000000000003b345: and al, 0x48; add dword ptr [rax], eax; add byte ptr [rax], al; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000001ab14: and al, 0x48; add edi, 0x20; call qword ptr [rip + 0x5e9b1]; pop rax; ret; 
0x000000000001c8df: and al, 0x48; add esp, 0x10; ret; 
0x000000000001193e: and al, 0x48; add esp, 0x18; ret; 
0x000000000001e36a: and al, 0x48; add esp, 0x20; ret; 
0x000000000001a966: and al, 0x48; add esp, 0x28; ret; 
0x000000000001d274: and al, 0x48; add esp, 0x30; ret; 
0x000000000001bf47: and al, 0x48; add esp, 0x38; ret; 
0x0000000000013cc7: and al, 0x48; add esp, 0x68; ret; 
0x000000000001bd85: and al, 0x48; add rsp, 0x108; ret; 
0x0000000000012021: and al, 0x48; add rsp, 0x248; ret; 
0x000000000000bcb7: and al, 0x48; add rsp, 0x50; ret; 
0x0000000000014d42: and al, 0x48; add rsp, 0xf8; ret; 
0x0000000000019afe: and al, 0x48; lea eax, [rip + 0x100a]; call rax; 
0x0000000000010f87: and al, 0x48; lea eax, [rip + 0x5da1]; call rax; 
0x0000000000010c67: and al, 0x48; lea eax, [rip + 0x60c1]; call rax; 
0x000000000001e594: and al, 0x48; lea eax, [rip + 4]; call rax; 
0x000000000001e594: and al, 0x48; lea eax, [rip + 4]; call rax; pop rcx; ret; 
0x000000000001ba7b: and al, 0x48; lea ecx, [rip + 0x450a5]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000011347: and al, 0x48; lea edi, [rip + 0x4f1b5]; lea rax, [rip - 0x5ce6]; mov esi, 0x23; call rax; 
0x000000000003da8f: and al, 0x48; lea edx, [rsp + 8]; mov qword ptr [rsp + 8], rbp; movups xmm0, xmmword ptr [rcx]; movups xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 0x20]; 
0x0000000000016dcb: and al, 0x48; lea esi, [rsp + 0x10]; call qword ptr [rip + 0x62949]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000019799: and al, 0x48; lea esi, [rsp + 0x18]; call qword ptr [rip + 0x5fceb]; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x000000000001bd36: and al, 0x48; lea rax, [rip + 0x24d1]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000001242d: and al, 0x48; mov dword ptr [rdi + 8], eax; mov qword ptr [rdi], rcx; add rsp, 0x48; ret; 
0x000000000001a693: and al, 0x48; mov dword ptr [rsp + 0x18], eax; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x000000000000fbc1: and al, 0x48; mov dword ptr [rsp + 0x30], eax; add rsp, 0x38; ret; 
0x000000000001bdba: and al, 0x48; mov dword ptr [rsp + 0x40], edi; mov qword ptr [rsp + 8], rdi; mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x3c11f]; call rax; 
0x000000000001daba: and al, 0x48; mov dword ptr [rsp + 8], eax; add rsp, 0x10; ret; 
0x00000000000196f7: and al, 0x48; mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000000bfcc: and al, 0x48; mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x00000000000100bd: and al, 0x48; mov dword ptr [rsp + 8], edx; add rsp, 0x10; ret; 
0x0000000000017c27: and al, 0x48; mov dword ptr [rsp + 8], esi; lea rax, [rip - 0x1774]; call rax; 
0x0000000000017c27: and al, 0x48; mov dword ptr [rsp + 8], esi; lea rax, [rip - 0x1774]; call rax; add rsp, 0x18; ret; 
0x000000000001bd9a: and al, 0x48; mov dword ptr [rsp + 8], esi; mov qword ptr [rsp + 0x10], rax; mov qword ptr [rsp + 0x18], rsi; add rsp, 0x20; ret; 
0x000000000001e5c7: and al, 0x48; mov dword ptr [rsp + 8], esi; mov qword ptr [rsp + 0x10], rdx; add rsp, 0x18; ret; 
0x0000000000013a21: and al, 0x48; mov dword ptr [rsp + 8], esi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000164d1: and al, 0x48; mov dword ptr [rsp + 8], esi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000137f7: and al, 0x48; mov eax, dword ptr [rdi + 8]; mov qword ptr [rsp + 8], rax; add rsp, 0x10; ret; 
0x000000000001c8db: and al, 0x48; mov eax, dword ptr [rsp]; add rsp, 0x10; ret; 
0x000000000001e366: and al, 0x48; mov eax, dword ptr [rsp]; add rsp, 0x20; ret; 
0x000000000001d270: and al, 0x48; mov eax, dword ptr [rsp]; add rsp, 0x30; ret; 
0x000000000001bf43: and al, 0x48; mov eax, dword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000012429: and al, 0x48; mov eax, dword ptr [rsp]; mov qword ptr [rdi + 8], rax; mov qword ptr [rdi], rcx; add rsp, 0x48; ret; 
0x000000000000fbbd: and al, 0x48; mov eax, dword ptr [rsp]; mov qword ptr [rsp + 0x30], rax; add rsp, 0x38; ret; 
0x0000000000019ae7: and al, 0x48; mov eax, edi; mov qword ptr [rsp + 8], rax; lea rax, [rip + 0x3fee9]; call rax; 
0x000000000002aa6a: and al, 0x48; mov ecx, dword ptr [rsp + 7]; mov qword ptr [rdi + 1], rax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x0000000000017e5e: and al, 0x48; mov ecx, dword ptr [rsp + 8]; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000000e267: and al, 0x48; mov edi, dword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xbc70; pop rcx; ret; 
0x00000000000184b4: and al, 0x48; mov edi, dword ptr [rdi]; call qword ptr [rip + 0x61b2a]; pop rax; ret; 
0x000000000000ef08: and al, 0x48; mov edi, dword ptr [rsp + 8]; add rdi, 0x18; lea rax, [rip + 0xf327]; call rax; 
0x000000000000f2cf: and al, 0x48; mov edi, dword ptr [rsp + 8]; add rdi, 0x20; lea rax, [rip + 0xb930]; call rax; 
0x000000000001e3b2: and al, 0x48; mov edi, esp; call 0x1e3c0; add rsp, 0x58; ret; 
0x0000000000037da4: and al, 0x48; mov edi, esp; call qword ptr [rip + 0x41a4a]; pop rcx; ret; 
0x00000000000124f8: and al, 0x48; mov edx, dword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001e5b4: and al, 0x48; mov edx, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000013a2a: and al, 0x48; mov edx, dword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000164da: and al, 0x48; mov edx, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000bfd5: and al, 0x48; mov edx, dword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000000c478: and al, 0x48; mov edx, dword ptr [rsp + 8]; add rsp, 0x40; ret; 
0x0000000000015f36: and al, 0x48; mov edx, dword ptr [rsp + 8]; mov qword ptr [rsp + 0x28], rax; mov qword ptr [rsp + 0x30], rdx; add rsp, 0x38; ret; 
0x000000000005edb6: and al, 0x48; mov edx, esp; call qword ptr [rip + 0x1b088]; add rsp, 0x38; ret; 
0x000000000005aa33: and al, 0x48; mov edx, esp; mov rdi, rax; call qword ptr [rip + 0x1f408]; add rsp, 0x38; ret; 
0x000000000001dbf1: and al, 0x48; mov qword ptr [rax + 0x18], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x118; ret; 
0x0000000000015f6a: and al, 0x48; mov qword ptr [rsp + 0x50], rcx; mov byte ptr [rsp + 0x37], 1; lea rax, [rip + 0x423]; lea rdi, [rsp + 0x18]; call rax; 
0x000000000000d929: and al, 0x48; mov qword ptr [rsp + 0x98], rax; lea rax, [rip + 0x2a466]; lea rdi, [rsp + 0x98]; call rax; 
0x000000000001c9b5: and al, 0x48; mov qword ptr [rsp + 0xa8], rdi; lea rax, [rip - 0x786]; xor esi, esi; call rax; 
0x0000000000012017: and al, 0x48; mov rax, qword ptr [rsp + 0x40]; mov rdx, qword ptr [rsp + 0x48]; add rsp, 0x248; ret; 
0x000000000003d0cb: and al, 0x48; mov rdi, qword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000001c9b0: and al, 0x48; mov rdi, qword ptr [rsp + 0x48]; mov qword ptr [rsp + 0xa8], rdi; lea rax, [rip - 0x786]; xor esi, esi; call rax; 
0x000000000001e38b: and al, 0x48; mov rdx, qword ptr [rsp + 0x50]; lea rax, [rip - 0x2189]; lea rdi, [rsp + 0x20]; call rax; 
0x000000000005a190: and al, 0x49; mov eax, dword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000005a1b5: and al, 0x49; mov eax, dword ptr [rsp + 8]; lea rsi, [rip + 0xb561]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005bccf: and al, 0x4c; add esi, edi; mov rdi, r13; mov rdx, r9; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x000000000000c2e1: and al, 0x4f; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x000000000001a4ab: and al, 0x4f; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x000000000001329f: and al, 0x50; add rsp, 0x118; ret; 
0x0000000000014484: and al, 0x50; add rsp, 0x58; ret; 
0x00000000000192db: and al, 0x50; add rsp, 0x788; ret; 
0x000000000000f914: and al, 0x50; call 0x10ff0; lea rdi, [rsp + 8]; call 0xecb0; add rsp, 0xc8; ret; 
0x0000000000058084: and al, 0x50; call qword ptr [rip + 0x21dbc]; add rsp, 0xa0; pop rbx; ret; 
0x000000000000e03c: and al, 0x50; call qword ptr [rip + 0x6ba0c]; add rsp, 0x218; ret; 
0x000000000000da96: and al, 0x50; call qword ptr [rip + 0x6bfb2]; add rsp, 0x1d8; ret; 
0x000000000000d8e7: and al, 0x50; call rax; 
0x000000000001cd1f: and al, 0x50; lea rax, [rip + 0x58]; call rax; 
0x000000000001e390: and al, 0x50; lea rax, [rip - 0x2189]; lea rdi, [rsp + 0x20]; call rax; 
0x0000000000015f6f: and al, 0x50; mov byte ptr [rsp + 0x37], 1; lea rax, [rip + 0x423]; lea rdi, [rsp + 0x18]; call rax; 
0x00000000000177d7: and al, 0x50; mov qword ptr [rax + 0x18], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x0000000000012b06: and al, 0x50; mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x58]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0xa0; ret; 
0x000000000005b63d: and al, 0x50; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000001e386: and al, 0x50; mov rsi, qword ptr [rsp + 0x48]; mov rdx, qword ptr [rsp + 0x50]; lea rax, [rip - 0x2189]; lea rdi, [rsp + 0x20]; call rax; 
0x0000000000017d8e: and al, 0x57; add dword ptr [rax], eax; add byte ptr [rax], al; lea rax, [rip - 0x188b]; call rax; 
0x00000000000167be: and al, 0x58; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0xffffeae6; xor esi, esi; call rax; 
0x000000000002c9d6: and al, 0x58; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000001861e: and al, 0x58; add rsp, 0x3a8; ret; 
0x0000000000016678: and al, 0x58; call rax; 
0x000000000001db7b: and al, 0x58; lea rax, [rip + 0x3be8c]; call rax; 
0x000000000001a05c: and al, 0x58; lea rdx, [rsp + 0x70]; call rax; 
0x000000000001dde2: and al, 0x58; lea rsi, [rsp + 0x40]; call qword ptr [rip + 0x5bbc1]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x000000000001635d: and al, 0x58; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x0000000000019f8c: and al, 0x58; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x88; ret; 
0x000000000001db77: and al, 0x58; mov edi, dword ptr [rsp + 0x58]; lea rax, [rip + 0x3be8c]; call rax; 
0x0000000000019003: and al, 0x58; mov edx, 0x88; call 0x9078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x278; ret; 
0x00000000000107c3: and al, 0x58; mov qword ptr [rcx + 0x20], rdx; add rsp, 0xb8; ret; 
0x0000000000012b0f: and al, 0x58; mov qword ptr [rdi + 0x38], rcx; add rsp, 0xa0; ret; 
0x00000000000143e6: and al, 0x58; mov qword ptr [rsp + 0x60], rdx; add rsp, 0x68; ret; 
0x0000000000010cc4: and al, 0x58; mov rdx, qword ptr [rsp + 0x60]; mov qword ptr [rsp + 0x68], rax; mov qword ptr [rsp + 0x70], rdx; add rsp, 0x78; ret; 
0x0000000000016702: and al, 0x58; movaps xmmword ptr [rsp + 0x70], xmm0; lea rax, [rip + 0x3a40]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000000eee4: and al, 0x58; ret; 
0x00000000000132d2: and al, 0x59; ret; 
0x000000000002ed57: and al, 0x60; add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret 0xc148; 
0x0000000000047659: and al, 0x60; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret; 
0x00000000000143eb: and al, 0x60; add rsp, 0x68; ret; 
0x000000000001ccc4: and al, 0x60; lea rax, [rip + 0x583]; call rax; 
0x000000000001da1e: and al, 0x60; mov qword ptr [rsp + 0x28], rax; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x5bd58]; add rsp, 0x68; ret; 
0x000000000001b8ee: and al, 0x60; mov qword ptr [rsp + 0x28], rax; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x5de88]; add rsp, 0x68; ret; 
0x0000000000011a6e: and al, 0x60; mov qword ptr [rsp + 0x28], rax; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x67d08]; add rsp, 0x68; ret; 
0x0000000000010cc9: and al, 0x60; mov qword ptr [rsp + 0x68], rax; mov qword ptr [rsp + 0x70], rdx; add rsp, 0x78; ret; 
0x000000000001ccbf: and al, 0x60; mov rdi, qword ptr [rsp + 0x60]; lea rax, [rip + 0x583]; call rax; 
0x00000000000359de: and al, 0x60; mov rsi, rax; call qword ptr [rip + 0x44027]; mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x000000000001dd7f: and al, 0x64; shl rax, 0x20; or rsi, rax; lea rax, [rip - 0x1bff]; call rax; 
0x000000000001da94: and al, 0x66; mov eax, dword ptr [rdi]; pop rcx; ret; 
0x000000000000d910: and al, 0x68; call rax; 
0x0000000000017a1d: and al, 0x68; mov qword ptr [rax + 8], rcx; mov word ptr [rax], 3; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; ret; 
0x0000000000040dfc: and al, 0x68; mov qword ptr [rbx + 0x90], rax; add rsp, 0x108; pop rbx; pop r14; ret; 
0x000000000001bb94: and al, 0x68; mov qword ptr [rsp + 0x20], rdi; call rax; 
0x000000000001addf: and al, 0x68; mov qword ptr [rsp + 0x70], rax; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x0000000000010cce: and al, 0x68; mov qword ptr [rsp + 0x70], rdx; add rsp, 0x78; ret; 
0x000000000001b4f1: and al, 0x68; mov rdx, qword ptr [rsp + 0x70]; add rsp, 0x2c8; ret; 
0x0000000000010ed0: and al, 0x68; mov rdx, qword ptr [rsp + 0x70]; call 0xe3b0; add rsp, 0x78; ret; 
0x000000000000e144: and al, 0x68; movups xmmword ptr [rsi], xmm0; lea rdx, [rip + 0x67cf8]; lea rax, [rip + 0x4c879]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000001ccb9: and al, 0x6f; add byte ptr [rax - 0x77], cl; and al, 0x60; mov rdi, qword ptr [rsp + 0x60]; lea rax, [rip + 0x583]; call rax; 
0x000000000001b4f6: and al, 0x70; add rsp, 0x2c8; ret; 
0x0000000000010cd3: and al, 0x70; add rsp, 0x78; ret; 
0x0000000000010ed5: and al, 0x70; call 0xe3b0; add rsp, 0x78; ret; 
0x000000000001a061: and al, 0x70; call rax; 
0x0000000000016707: and al, 0x70; lea rax, [rip + 0x3a40]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000001a050: and al, 0x70; lea rax, [rip + 0xc67]; lea rdi, [rsp + 0x58]; lea rdx, [rsp + 0x70]; call rax; 
0x000000000001a2ff: and al, 0x70; lea rax, [rip - 0x2d98]; lea rsi, [rsp + 0x70]; call rax; 
0x000000000001caf1: and al, 0x70; mov qword ptr [rsp + 0x130], rdx; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x000000000000bd18: and al, 0x70; mov qword ptr [rsp + 0x18], rdx; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rcx], rdx; add rsp, 0x78; ret; 
0x000000000001ade4: and al, 0x70; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000001caec: and al, 0x70; mov rdx, qword ptr [rsp + 0x70]; mov qword ptr [rsp + 0x130], rdx; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x0000000000010ecb: and al, 0x70; mov rsi, qword ptr [rsp + 0x68]; mov rdx, qword ptr [rsp + 0x70]; call 0xe3b0; add rsp, 0x78; ret; 
0x000000000002ee2a: and al, 0x78; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add dword ptr [r8 + 0x39], ecx; ret 0x860f; 
0x000000000001be37: and al, 0x78; mov qword ptr [rsp + 0x80], rdx; add rsp, 0x88; ret; 
0x000000000001538b: and al, 0x78; mov rdx, qword ptr [rsp + 0x80]; add rsp, 0x148; ret; 
0x0000000000034061: and al, 0x80; add byte ptr [rax], al; add al, ch; xchg eax, ebp; ret 0xfffe; 
0x0000000000054c5a: and al, 0x83; ret 0x8910; 
0x0000000000054edc: and al, 0x83; ret; 
0x000000000000d0e5: and al, 0x88; add byte ptr [rax], al; add bh, bh; adc eax, 0x6c960; add rsp, 0x398; ret; 
0x000000000000cb25: and al, 0x88; add byte ptr [rax], al; add bh, bh; adc eax, 0x6cf20; add rsp, 0x398; ret; 
0x000000000001cb31: and al, 0x89; and al, 8; mov eax, dword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001c051: and al, 0x89; and al, 8; mov eax, dword ptr [rsp + 8]; add rsp, 0xc; ret; 
0x000000000004ae8f: and al, 0x89; js 0x4aebb; mov dword ptr [rax + 0x2c], r10d; pop rbx; pop r14; ret; 
0x000000000001e625: and al, 0x8b; add al, 0x24; add rsp, 0x18; ret; 
0x000000000001cb2e: and al, 0x8b; add al, 0x24; mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001c04e: and al, 0x8b; add al, 0x24; mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0xc; ret; 
0x000000000001c037: and al, 0x8b; add al, 0x24; pop rcx; ret; 
0x000000000002a62f: and al, 0x8b; and al, 3; mov dword ptr [rdi + 9], eax; mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x000000000001daa4: and al, 0x8b; xchg dword ptr [rax + 0x59000000], eax; ret; 
0x000000000001881d: and al, 0x90; add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0xffffd667; lea rdi, [rsp + 0x170]; call rax; 
0x000000000001a07f: and al, 0x90; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; js 0x1a090; lea rax, [rip + 0x961]; call rax; 
0x00000000000516f2: and al, 0x90; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out 0xe8, al; int1; ret 0xffff; 
0x000000000000d92e: and al, 0x98; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x2a466; lea rdi, [rsp + 0x98]; call rax; 
0x000000000001f860: and al, 0x9f; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x000000000001cd5d: and al, 0xa0; add byte ptr [rax], al; add al, ch; stc; ret 0xfffe; 
0x000000000001c9ba: and al, 0xa8; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xfffff87a; xor esi, esi; call rax; 
0x000000000001a10f: and al, 0xa8; add byte ptr [rax], al; add byte ptr [rax - 0x74b7efb8], cl; and al, 0x20; add rsp, 0xd8; ret; 
0x000000000001a0d8: and al, 0xaf; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip - 0x3bc5]; lea rdi, [rsp + 0x98]; call rax; 
0x0000000000019fcd: and al, 0xaf; add byte ptr [rax], al; add byte ptr [rcx], al; lea rax, [rip - 0x259a]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000001a325: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0x5bfa7; lea rax, [rip - 0x3348]; call rax; 
0x000000000000d98d: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; push rsp; and al, 0x50; call rax; 
0x000000000004308e: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x12e8; 
0x000000000004316f: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x31e8; 
0x0000000000042f60: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x40e8; 
0x0000000000043044: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x5ce8; 
0x0000000000043226: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x7ae8; 
0x0000000000043122: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x7ee8; 
0x0000000000042f13: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x8de8; 
0x0000000000042ff7: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xa9e8; 
0x00000000000431ed: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xb3e8; 
0x00000000000430d8: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xc8e8; 
0x0000000000042ec6: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xdae8; 
0x00000000000431b4: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xece8; 
0x0000000000042fad: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xf3e8; 
0x000000000003e430: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rdx + 0xa8], bh; call rbx; 
0x000000000000def8: and al, 0xb0; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rsp; and al, 0x50; call rax; 
0x0000000000033ddd: and al, 0xb4; add byte ptr [rax], al; add byte ptr [rcx], cl; ret 0xc148; 
0x000000000001551c: and al, 0xb8; add byte ptr [rax], al; add bl, ch; ret 0x8b48; 
0x0000000000010211: and al, 0xb8; add byte ptr [rax], al; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000103a1: and al, 0xb8; add byte ptr [rax], al; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4811; 
0x000000000001bad9: and al, 0xb; add rsp, 0x10; ret; 
0x000000000001bad4: and al, 0xb; or dword ptr [rdx + 0x480b2444], ecx; add esp, 0x10; ret; 
0x0000000000045708: and al, 0xc0; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0xc148; 
0x000000000001bae7: and al, 0xc6; or al, 0xb; mov dword ptr [rdi + 8], 0; mov qword ptr [rdi], rsi; pop rcx; ret; 
0x0000000000018eaf: and al, 0xc8; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xffffe2a5; call rax; 
0x000000000000fb4e: and al, 0xc; add rsp, 0x10; ret; 
0x0000000000018ae9: and al, 0xc; lea rax, [rip + 0x2eae]; lea rdi, [rsp + 0x210]; call rax; 
0x000000000000fb4a: and al, 0xc; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; ret; 
0x000000000001c1c8: and al, 0xc; shl rax, 0x20; or rsi, rax; lea rax, [rip + 0x1c28]; call rax; 
0x00000000000118dc: and al, 0xc; shl rcx, 0x20; or rax, rcx; add rsp, 0x28; ret; 
0x000000000000cf60: and al, 0xd0; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x2ae34; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000000c9a0: and al, 0xd0; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x2b3f4; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000002c175: and al, 0xd2; lea rcx, [rip + 0x35536]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c228: and al, 0xd5; add eax, 0x448b4800; and al, 8; add rsp, 0x28; ret; 
0x000000000001c2bd: and al, 0xd7; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x3d6]; call rax; 
0x000000000001532d: and al, 0xd7; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x926]; call rax; 
0x0000000000018da0: and al, 0xd7; add byte ptr [rax], al; add byte ptr [rcx], al; lea rax, [rip + 0x39b3]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000001bb30: and al, 0xe3; add eax, 0x448b4800; and al, 0x18; add rsp, 0x28; ret; 
0x0000000000018f93: and al, 0xe8; add dword ptr [rax], eax; add al, ch; ret; 
0x000000000000ecb4: and al, 0xe8; jbe 0xecc4; add byte ptr [rax], al; pop rax; ret; 
0x000000000000ef64: and al, 0xe8; mov dh, 2; add byte ptr [rax], al; pop rax; ret; 
0x000000000000eed4: and al, 0xe8; mov dh, 8; add byte ptr [rax], al; pop rax; ret; 
0x000000000000e5a8: and al, 0xe8; ret 0x3e; 
0x00000000000368f0: and al, 0xf; adc dword ptr [rbx], eax; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x000000000002186f: and al, 0xf; adc dword ptr [rcx + 8], eax; add rsp, 0x18; ret; 
0x000000000000936f: and al, 0xf; adc dword ptr [rdi + rax*8], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000004b3da: and al, 0xf; adc dword ptr [rdi], eax; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x0000000000019b20: and al, 0xfe; add eax, 0x448b4800; and al, 8; add rsp, 0x28; ret; 
0x000000000001e234: and al, 0xff; adc eax, 0x5b485; pop rax; ret; 
0x000000000001e224: and al, 0xff; adc eax, 0x5b5d5; pop rax; ret; 
0x000000000001e2b4: and al, 0xff; adc eax, 0x5b685; pop rax; ret; 
0x000000000001e2c4: and al, 0xff; adc eax, 0x5b7bd; pop rax; ret; 
0x000000000001e204: and al, 0xff; adc eax, 0x5b845; pop rax; ret; 
0x000000000001e214: and al, 0xff; adc eax, 0x5bb8d; pop rax; ret; 
0x000000000001c1f7: and al, 0xff; adc eax, 0x5d3f2; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001c944: and al, 0xff; adc eax, 0x5d4b5; pop rcx; ret; 
0x000000000001ab34: and al, 0xff; adc eax, 0x5e88d; pop rax; ret; 
0x000000000001ac54: and al, 0xff; adc eax, 0x5e9ed; pop rax; ret; 
0x000000000001aa84: and al, 0xff; adc eax, 0x5ea85; pop rax; ret; 
0x000000000001aa74: and al, 0xff; adc eax, 0x5eefd; pop rax; ret; 
0x000000000001ab04: and al, 0xff; adc eax, 0x5f015; pop rax; ret; 
0x000000000001ad47: and al, 0xff; adc eax, 0x5f1c2; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000019b1d: and al, 0xff; adc eax, 0x5fe24; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000018cf7: and al, 0xff; adc eax, 0x60fa2; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000016e07: and al, 0xff; adc eax, 0x629aa; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000016df4: and al, 0xff; adc eax, 0x62f35; pop rax; ret; 
0x000000000000f484: and al, 0xff; adc eax, 0x6a38d; pop rax; ret; 
0x000000000000ef94: and al, 0xff; adc eax, 0x6ae0d; pop rax; ret; 
0x000000000003b453: and al, 0xff; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x000000000003b44e: and al, 0xff; mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x0000000000011ab6: and al, 1; movzx eax, al; add rsp, 0x10; ret; 
0x000000000000bf61: and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000001ac84: and al, 1; movzx eax, al; add rsp, 0x20; ret; 
0x00000000000128d2: and al, 1; movzx eax, al; add rsp, 0x28; ret; 
0x000000000000c0bc: and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x000000000000c11f: and al, 1; movzx eax, al; add rsp, 0x48; ret; 
0x00000000000141da: and al, 1; movzx eax, al; cmp rax, 0; jne 0x141ea; add rsp, 0x58; ret; 
0x000000000005dbe9: and al, 1; pop rbx; pop r14; pop r15; ret; 
0x000000000005f0cf: and al, 1; pop rcx; ret; 
0x000000000002a7fc: and al, 3; mov dword ptr [rdi + 4], edx; mov dword ptr [rdi + 1], ecx; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x000000000002a632: and al, 3; mov dword ptr [rdi + 9], eax; mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x000000000001c901: and al, 4; add rsp, 0x10; ret; 
0x000000000000ec37: and al, 4; add rsp, 0x28; ret; 
0x0000000000011963: and al, 4; call 0x11870; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000001e61c: and al, 4; call 0x1c040; mov dword ptr [rsp], eax; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001ee4e: and al, 4; call 0x38fd0; pop rcx; ret; 
0x000000000001ec5e: and al, 4; call 0x391a0; pop rcx; ret; 
0x000000000005a6d4: and al, 4; call qword ptr [rip + 0x1f3fc]; pop rcx; ret; 
0x000000000005a690: and al, 4; call qword ptr [rip + 0x1f440]; pop rcx; ret; 
0x000000000005a653: and al, 4; call qword ptr [rip + 0x1f47d]; pop rcx; ret; 
0x000000000005a621: and al, 4; call qword ptr [rip + 0x1f4af]; pop rcx; ret; 
0x000000000005a521: and al, 4; call qword ptr [rip + 0x1f5af]; pop rcx; ret; 
0x000000000005a4dd: and al, 4; call qword ptr [rip + 0x1f5f3]; pop rcx; ret; 
0x000000000005a4a0: and al, 4; call qword ptr [rip + 0x1f630]; pop rcx; ret; 
0x000000000005a46e: and al, 4; call qword ptr [rip + 0x1f662]; pop rcx; ret; 
0x000000000001c033: and al, 4; mov dword ptr [rsp], edi; mov eax, dword ptr [rsp]; pop rcx; ret; 
0x000000000001c8fd: and al, 4; mov eax, dword ptr [rsp + 4]; add rsp, 0x10; ret; 
0x000000000001df99: and al, 4; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x288; ret; 
0x000000000005c186: and al, 4; mov rdi, rsi; mov rsi, rax; call qword ptr [rip + 0x1dd3c]; pop rcx; ret; 
0x000000000005b5c4: and al, 4; shr al, 2; ret; 
0x000000000001ee75: and al, 5; mov edx, 2; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ec85: and al, 5; mov edx, 2; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x000000000001eeb1: and al, 6; mov edx, 3; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ecc1: and al, 6; mov edx, 3; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x000000000001cdba: and al, 7; add byte ptr [rdx + 0x48072444], cl; add esp, 0x150; ret; 
0x0000000000016668: and al, 7; add dword ptr [rax], eax; add byte ptr [rcx], al; lea rax, [rip + 0x37bb]; lea rdi, [rsp + 0x58]; call rax; 
0x000000000001cdbf: and al, 7; add rsp, 0x150; ret; 
0x000000000000fbf7: and al, 7; add rsp, 0x18; ret; 
0x000000000003b458: and al, 7; call qword ptr [rax]; 
0x000000000000fbe8: and al, 7; lea rax, [rsp + 7]; mov qword ptr [rsp + 0x10], rax; movzx eax, byte ptr [rsp + 7]; add rsp, 0x18; ret; 
0x000000000001eef4: and al, 7; mov edx, 4; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ed04: and al, 7; mov edx, 4; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x000000000002aa6e: and al, 7; mov qword ptr [rdi + 1], rax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x000000000000fbed: and al, 7; mov qword ptr [rsp + 0x10], rax; movzx eax, byte ptr [rsp + 7]; add rsp, 0x18; ret; 
0x000000000001a85f: and al, 7; xor al, 0xff; and al, 1; movzx eax, al; add rsp, 0x10; ret; 
0x000000000001015e: and al, 8; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x108; ret; 
0x000000000000fc88: and al, 8; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0xe0; ret; 
0x0000000000051ed1: and al, 8; add cl, ch; ret; 
0x000000000000ef30: and al, 8; add rdi, 0x18; call qword ptr [rip + 0x6ae6c]; add rsp, 0x28; ret; 
0x000000000000ef0c: and al, 8; add rdi, 0x18; lea rax, [rip + 0xf327]; call rax; 
0x000000000000f2f7: and al, 8; add rdi, 0x20; lea rax, [rip + 0xb90c]; call rax; 
0x000000000000f2d3: and al, 8; add rdi, 0x20; lea rax, [rip + 0xb930]; call rax; 
0x000000000000f3fa: and al, 8; add rdi, 0xa8; call 0xf580; add rsp, 0x28; ret; 
0x000000000000f20a: and al, 8; add rdi, 4; call qword ptr [rip + 0x6a3ca]; add rsp, 0x18; ret; 
0x000000000001e169: and al, 8; add rdi, 8; call qword ptr [rip + 0x5b5e3]; add rsp, 0x18; ret; 
0x000000000001a9d3: and al, 8; add rdi, 8; call qword ptr [rip + 0x5f141]; add rsp, 0x18; ret; 
0x0000000000010167: and al, 8; add rsp, 0x108; ret; 
0x00000000000100c1: and al, 8; add rsp, 0x10; ret; 
0x0000000000015ffa: and al, 8; add rsp, 0x18; ret; 
0x0000000000013a2e: and al, 8; add rsp, 0x20; ret; 
0x0000000000011916: and al, 8; add rsp, 0x28; ret; 
0x000000000000bfd9: and al, 8; add rsp, 0x30; ret; 
0x000000000001acf6: and al, 8; add rsp, 0x38; ret; 
0x000000000000c47c: and al, 8; add rsp, 0x40; ret; 
0x0000000000010b17: and al, 8; add rsp, 0x48; ret; 
0x0000000000013969: and al, 8; add rsp, 0x88; ret; 
0x000000000001a392: and al, 8; add rsp, 0xb8; ret; 
0x000000000001c058: and al, 8; add rsp, 0xc; ret; 
0x000000000000fc91: and al, 8; add rsp, 0xe0; ret; 
0x000000000005f303: and al, 8; add rsp, rax; leave; ret; 
0x00000000000139f7: and al, 8; call 0x137f0; mov qword ptr [rsp + 0x10], rax; add rsp, 0x18; ret; 
0x000000000001e6df: and al, 8; call 0x1c870; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000000a04a: and al, 8; call 0xa850; add rsp, 0x28; ret; 
0x000000000000c3f7: and al, 8; call 0xec40; add rsp, 0x28; ret; 
0x000000000000f91e: and al, 8; call 0xecb0; add rsp, 0xc8; ret; 
0x000000000000eea4: and al, 8; call 0xeed0; add rsp, 0x28; ret; 
0x000000000000f1a4: and al, 8; call 0xf1e0; add rsp, 0x28; ret; 
0x000000000000f454: and al, 8; call 0xf4d0; add rsp, 0x28; ret; 
0x0000000000059dc7: and al, 8; call qword ptr [rax + 0x18]; 
0x000000000004278c: and al, 8; call qword ptr [rax + 0x20]; 
0x000000000001e5e7: and al, 8; call qword ptr [rip + 0x5b5d1]; add rsp, 0x18; ret; 
0x000000000001e27c: and al, 8; call qword ptr [rip + 0x5bd2c]; add rsp, 0x28; ret; 
0x000000000001a95b: and al, 8; call qword ptr [rip + 0x5f07d]; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000001abac: and al, 8; call qword ptr [rip + 0x5f2dc]; add rsp, 0x28; ret; 
0x000000000001aac8: and al, 8; call qword ptr [rip + 0x5f460]; add rsp, 0x28; ret; 
0x000000000000f567: and al, 8; call qword ptr [rip + 0x6a5b1]; add rsp, 0x18; ret; 
0x000000000000ec87: and al, 8; call qword ptr [rip + 0x6ae91]; add rsp, 0x18; ret; 
0x000000000000c0b4: and al, 8; call qword ptr [rip + 0x6dd8c]; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x0000000000010b07: and al, 8; lea rax, [rip + 0x2e470]; call rax; 
0x000000000001bdc8: and al, 8; lea rax, [rip + 0x3c11f]; call rax; 
0x0000000000019aee: and al, 8; lea rax, [rip + 0x3fee9]; call rax; 
0x000000000001e25c: and al, 8; lea rax, [rip + 0x5b]; call rax; 
0x000000000001aaa8: and al, 8; lea rax, [rip + 0x8f]; call rax; 
0x000000000001ab8c: and al, 8; lea rax, [rip + 0xbb]; call rax; 
0x0000000000017c2b: and al, 8; lea rax, [rip - 0x1774]; call rax; 
0x0000000000017c2b: and al, 8; lea rax, [rip - 0x1774]; call rax; add rsp, 0x18; ret; 
0x0000000000019687: and al, 8; lea rax, [rip - 0x2960]; call rax; 
0x0000000000019f4b: and al, 8; lea rax, [rip - 0x3a34]; call rax; 
0x00000000000114eb: and al, 8; lea rax, [rip - 0x5ab4]; call rax; 
0x000000000004a6fe: and al, 8; lea rbx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000000dfe4: and al, 8; lea rcx, [rip + 0x5206b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000128fd: and al, 8; lea rdx, [rip + 0x6367a]; lea rax, [rip - 0x71ed]; mov esi, 0x100; call rax; 
0x000000000005a9b0: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x1f48b]; add rsp, 0x48; ret; 
0x000000000005a960: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x1f4db]; add rsp, 0x48; ret; 
0x000000000005a910: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x1f52b]; add rsp, 0x48; ret; 
0x000000000005a55d: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x1f8de]; add rsp, 0x48; ret; 
0x0000000000056a80: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x233bb]; add rsp, 0x48; ret; 
0x000000000004d5c0: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x2c87b]; add rsp, 0x48; ret; 
0x0000000000022a20: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x5741b]; add rsp, 0x48; ret; 
0x00000000000229d0: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x5746b]; add rsp, 0x48; ret; 
0x0000000000022980: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x574bb]; add rsp, 0x48; ret; 
0x0000000000022930: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x5750b]; add rsp, 0x48; ret; 
0x000000000001efbd: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x5ae7e]; add rsp, 0x48; ret; 
0x000000000001ef7d: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x5aebe]; add rsp, 0x48; ret; 
0x000000000001ef3d: and al, 8; lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x5aefe]; add rsp, 0x48; ret; 
0x000000000001629f: and al, 8; lea rsi, [rip + 0x5fe88]; lea rax, [rip - 0xacbf]; call rax; 
0x000000000000e8fe: and al, 8; lea rsi, [rip + 0x675d1]; lea rax, [rip - 0x331e]; call rax; 
0x000000000000c59f: and al, 8; lea rsi, [rip + 0x69588]; lea rax, [rip - 0xfbf]; call rax; 
0x000000000005a1b9: and al, 8; lea rsi, [rip + 0xb561]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000015fa6: and al, 8; mov byte ptr [rsp + 0x37], 0; lea rax, [rip + 0x1c8c]; lea rdx, [rsp + 0x18]; call rax; 
0x000000000000fb46: and al, 8; mov dword ptr [rsp + 0xc], edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; ret; 
0x000000000001c8f7: and al, 8; mov eax, dword ptr [rdi]; mov dword ptr [rsp + 4], eax; mov eax, dword ptr [rsp + 4]; add rsp, 0x10; ret; 
0x000000000001cb34: and al, 8; mov eax, dword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001e666: and al, 8; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001c054: and al, 8; mov eax, dword ptr [rsp + 8]; add rsp, 0xc; ret; 
0x0000000000016038: and al, 8; mov qword ptr [rdi + 8], rcx; mov cl, byte ptr [rsp + 0x10]; mov byte ptr [rdi + 0x10], cl; add rsp, 0x18; ret; 
0x0000000000010dd1: and al, 8; mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x0000000000017e62: and al, 8; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000000c18d: and al, 8; mov qword ptr [rsp + 0x10], rax; add rsp, 0x28; ret; 
0x000000000000f618: and al, 8; mov qword ptr [rsp + 0x10], rax; add rsp, 0x70; ret; 
0x0000000000019ac5: and al, 8; mov qword ptr [rsp + 0x10], rax; call qword ptr [rip + 0x5fdc6]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000016e85: and al, 8; mov qword ptr [rsp + 0x10], rax; call qword ptr [rip + 0x628fe]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001bd9e: and al, 8; mov qword ptr [rsp + 0x10], rax; mov qword ptr [rsp + 0x18], rsi; add rsp, 0x20; ret; 
0x000000000000e6b8: and al, 8; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x70; ret; 
0x000000000000e63d: and al, 8; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x78; ret; 
0x0000000000013766: and al, 8; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x000000000000ecca: and al, 8; mov qword ptr [rsp + 0x10], rax; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x0000000000016eb2: and al, 8; mov qword ptr [rsp + 0x10], rcx; mov qword ptr [rdi + 8], rcx; mov word ptr [rdi], 2; add rsp, 0x18; ret; 
0x0000000000017002: and al, 8; mov qword ptr [rsp + 0x10], rcx; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x18; ret; 
0x000000000000f227: and al, 8; mov qword ptr [rsp + 0x10], rdi; add rdi, 0x40; lea rax, [rip + 0xb857]; call rax; 
0x00000000000124a7: and al, 8; mov qword ptr [rsp + 0x10], rdi; call 0xef70; add rsp, 0x18; ret; 
0x00000000000124c7: and al, 8; mov qword ptr [rsp + 0x10], rdi; call 0xf490; add rsp, 0x18; ret; 
0x000000000000efa7: and al, 8; mov qword ptr [rsp + 0x10], rdi; cmp qword ptr [rdi], 0; jne 0xefb9; add rsp, 0x18; ret; 
0x000000000000eef7: and al, 8; mov qword ptr [rsp + 0x10], rdi; lea rax, [rip + 0xf33b]; call rax; 
0x000000000001e247: and al, 8; mov qword ptr [rsp + 0x10], rdi; lea rax, [rip - 0x1aa5]; call rax; 
0x000000000001ab77: and al, 8; mov qword ptr [rsp + 0x10], rdi; lea rax, [rip - 0x3ec5]; call rax; 
0x000000000001e2e7: and al, 8; mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rdi]; lea rax, [rip - 0xc8]; call rax; 
0x000000000001e5cb: and al, 8; mov qword ptr [rsp + 0x10], rdx; add rsp, 0x18; ret; 
0x0000000000011987: and al, 8; mov qword ptr [rsp + 0x10], rsi; call 0x11690; add rsp, 0x18; ret; 
0x000000000001ad07: and al, 8; mov qword ptr [rsp + 0x10], rsi; call 0x1a870; add rsp, 0x18; ret; 
0x000000000001c957: and al, 8; mov qword ptr [rsp + 0x10], rsi; call 0x1e370; add rsp, 0x18; ret; 
0x0000000000015f3a: and al, 8; mov qword ptr [rsp + 0x28], rax; mov qword ptr [rsp + 0x30], rdx; add rsp, 0x38; ret; 
0x0000000000010f10: and al, 8; mov qword ptr [rsp + 0x28], rax; mov qword ptr [rsp + 0x30], rdx; mov qword ptr [rdi + 0x10], 0; add rsp, 0x38; ret; 
0x000000000001bd31: and al, 8; mov qword ptr [rsp + 0x48], rax; lea rax, [rip + 0x24d1]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000003da93: and al, 8; mov qword ptr [rsp + 8], rbp; movups xmm0, xmmword ptr [rcx]; movups xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 0x20]; 
0x000000000001c8d6: and al, 8; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x10; ret; 
0x000000000001d26b: and al, 8; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x30; ret; 
0x000000000001bf3e: and al, 8; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000001447b: and al, 8; mov rax, qword ptr [rax + 8]; mov qword ptr [rsp + 0x50], rax; add rsp, 0x58; ret; 
0x000000000001df9e: and al, 8; mov rax, qword ptr [rsp + 0x10]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x288; ret; 
0x000000000005abdd: and al, 8; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000005aacb: and al, 8; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000001a69c: and al, 8; mov rax, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x0000000000011911: and al, 8; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000196fb: and al, 8; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000001c8d1: and al, 8; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x10; ret; 
0x000000000001d266: and al, 8; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x30; ret; 
0x000000000001bf39: and al, 8; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000013a25: and al, 8; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000164d5: and al, 8; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000bfd0: and al, 8; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x0000000000013668: and al, 8; mov rcx, qword ptr [rax + 0x10]; call 0x13370; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000005ac2f: and al, 8; mov rcx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000001e322: and al, 8; mov rdi, qword ptr [rax]; call qword ptr [rip + 0x5b0db]; add rsp, 0x28; ret; 
0x000000000001e2ff: and al, 8; mov rdi, qword ptr [rax]; lea rax, [rip - 0xaab]; call rax; 
0x000000000000ed05: and al, 8; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0x12540; add rsp, 0x28; ret; 
0x000000000000f151: and al, 8; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0x126b0; add rsp, 0x28; ret; 
0x000000000001e1c9: and al, 8; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call qword ptr [rip + 0x5bcb0]; add rsp, 0x28; ret; 
0x000000000001ab51: and al, 8; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call qword ptr [rip + 0x5f218]; add rsp, 0x28; ret; 
0x000000000001e1a2: and al, 8; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; lea rax, [rip - 0xac2]; call rax; 
0x0000000000016b7c: and al, 8; mov rdi, qword ptr [rsp + 0x20]; lea rax, [rip + 0xd6]; call rax; 
0x000000000001bdc3: and al, 8; mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x3c11f]; call rax; 
0x0000000000015cb2: and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x60; ret; 
0x000000000000e6c2: and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x70; ret; 
0x000000000000e647: and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x78; ret; 
0x0000000000013770: and al, 8; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x0000000000014b5a: and al, 8; mov rdx, qword ptr [rsp + 0x10]; call 0xc300; add rsp, 0x28; ret; 
0x000000000001d318: and al, 8; mov rsi, qword ptr [rsp + 0x10]; lea rax, [rip - 0x11d56]; call rax; 
0x000000000001adf8: and al, 8; mov rsi, qword ptr [rsp + 0x10]; lea rax, [rip - 0xf836]; call rax; 
0x000000000002f217: and al, 8; mov rsi, qword ptr [rsp + 0x570]; call rbx; 
0x0000000000013d86: and al, 8; mov rsi, rax; call 0x13ba0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x000000000003da98: and al, 8; movups xmm0, xmmword ptr [rcx]; movups xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 0x20]; 
0x0000000000036d65: and al, 8; movups xmmword ptr [rax], xmm0; inc rax; add rsp, 0x20; pop rbx; ret; 
0x000000000003a609: and al, 8; movzx eax, byte ptr [rax]; lea rcx, [rip + 0x275ff]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003a393: and al, 8; movzx esi, byte ptr [rdx]; mov edx, 6; movsxd rsi, dword ptr [r12 + rsi*4]; add rsi, r12; jmp rsi; 
0x0000000000037d8e: and al, byte ptr [rax + rax]; pop rcx; ret; 
0x000000000002a17c: and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000005b94b: and al, byte ptr [rax]; add byte ptr [rax], al; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000005de41: and al, byte ptr [rcx - 0x3a]; add dword ptr [rax], eax; mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000002a2df: and al, cl; ret; 
0x000000000001bb2d: and bh, bh; adc eax, 0x5e324; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x000000000001ab18: and bh, bh; adc eax, 0x5e9b1; pop rax; ret; 
0x0000000000019756: and bh, bh; adc eax, 0x60373; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000119d6: and bh, bh; adc eax, 0x680f3; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x0000000000016490: and bh, bh; shr bl, 1; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0xc8; ret; 
0x000000000000ee9e: and bl, ch; in al, 0x48; mov edi, dword ptr [rsp + 8]; call 0xeed0; add rsp, 0x28; ret; 
0x000000000000f19e: and bl, ch; in al, 0x48; mov edi, dword ptr [rsp + 8]; call 0xf1e0; add rsp, 0x28; ret; 
0x000000000000f44e: and bl, ch; in al, 0x48; mov edi, dword ptr [rsp + 8]; call 0xf4d0; add rsp, 0x28; ret; 
0x000000000000ec32: and bl, ch; in al, 0x8b; and al, 4; add rsp, 0x28; ret; 
0x000000000001a36e: and bl, ch; lea rax, [rip + 0x7f8]; lea rdi, [rsp + 0x38]; call rax; 
0x000000000004ac39: and byte ptr [rax + 1], bh; ret; 
0x000000000002d3cc: and byte ptr [rax + 1], cl; ret 0xc148; 
0x000000000004cd6c: and byte ptr [rax - 0x73], cl; adc eax, 0x16e74; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000151bd: and byte ptr [rax - 0x73], cl; add eax, 0x21cb; call rax; 
0x000000000003721c: and byte ptr [rax - 0x73], cl; add eax, 0x2a874; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x0000000000010c1f: and byte ptr [rax - 0x73], cl; add eax, 0x2e0c9; lea rdi, [rsp + 0x38]; call rax; 
0x000000000001a8ca: and byte ptr [rax - 0x73], cl; add eax, 0x392e; lea rdi, [rsp + 0x10]; call rax; 
0x0000000000016484: and byte ptr [rax - 0x73], cl; add eax, 0x3b14; lea rdx, [rsp + 0x20]; call rax; 
0x0000000000019459: and byte ptr [rax - 0x73], cl; add eax, 0x430bf; lea rdi, [rsp + 0x630]; call rax; 
0x000000000000d374: and byte ptr [rax - 0x73], cl; add eax, 0x49e74; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000cdb6: and byte ptr [rax - 0x73], cl; add eax, 0x4a432; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000f9dd: and byte ptr [rax - 0x73], cl; add eax, 0x79ab; call rax; 
0x000000000001455e: and byte ptr [rax - 0x73], cl; add eax, 0x9cba; lea rdi, [rsp + 0x18]; call rax; 
0x00000000000144be: and byte ptr [rax - 0x73], cl; add eax, 0x9d5a; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000014373: and byte ptr [rax - 0x73], cl; add eax, 0x9ea5; lea rdi, [rsp + 0x30]; call rax; 
0x00000000000142a0: and byte ptr [rax - 0x73], cl; add eax, 0x9f78; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000f2fc: and byte ptr [rax - 0x73], cl; add eax, 0xb90c; call rax; 
0x000000000000f2d8: and byte ptr [rax - 0x73], cl; add eax, 0xb930; call rax; 
0x000000000000f093: and byte ptr [rax - 0x73], cl; add eax, 0xb9f5; call rax; 
0x000000000000f055: and byte ptr [rax - 0x73], cl; add eax, 0xba33; call rax; 
0x0000000000016b82: and byte ptr [rax - 0x73], cl; add eax, 0xd6; call rax; 
0x000000000001e3ea: and byte ptr [rax - 0x73], cl; add eax, 0xfffffe0e; lea rdi, [rsp + 0x10]; call rax; 
0x000000000001cb87: and byte ptr [rax - 0x73], cl; or eax, 0x440dd; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001440d: and byte ptr [rax - 0x73], cl; or eax, 0x61c2b; lea rax, [rip - 0x8a8c]; lea rdx, [rsp + 0x20]; call rax; 
0x000000000001bba1: and byte ptr [rax - 0x73], cl; xor eax, 0x5a7bf; lea rax, [rip - 0x48b0]; call rax; 
0x0000000000010fa4: and byte ptr [rax - 0x75], cl; and al, 0x18; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000001bee3: and byte ptr [rax - 0x75], cl; and al, 0x18; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x98; ret; 
0x0000000000019751: and byte ptr [rax - 0x75], cl; and al, 0x20; call qword ptr [rip + 0x60373]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000119d1: and byte ptr [rax - 0x75], cl; and al, 0x20; call qword ptr [rip + 0x680f3]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x0000000000011908: and byte ptr [rax - 0x75], cl; and al, 0x20; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000005ec3d: and byte ptr [rax - 0x75], cl; cmp ecx, dword ptr [rax - 0x75]; or byte ptr [r8 - 0x73], cl; xor eax, 0x39e0; mov edx, 4; call qword ptr [rax + 0x18]; 
0x0000000000010b50: and byte ptr [rax - 0x75], cl; jl 0x10b79; sbb byte ptr [rax - 0x73], cl; add eax, 0xd6b3; call rax; 
0x0000000000011595: and byte ptr [rax - 0x75], cl; jl 0x115be; adc byte ptr [rax - 0x73], cl; add eax, 0xffffa48e; call rax; 
0x0000000000018988: and byte ptr [rax - 0x75], cl; jl 0x189b1; sub byte ptr [rax - 0x73], cl; add eax, 0x1d1b; call rax; 
0x000000000001aaa4: and byte ptr [rax - 0x75], cl; jl 0x1aacd; or byte ptr [rax - 0x73], cl; add eax, 0x8f; call rax; 
0x000000000001ab88: and byte ptr [rax - 0x75], cl; jl 0x1abb1; or byte ptr [rax - 0x73], cl; add eax, 0xbb; call rax; 
0x000000000001e258: and byte ptr [rax - 0x75], cl; jl 0x1e281; or byte ptr [rax - 0x73], cl; add eax, 0x5b; call rax; 
0x000000000005defe: and byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rip + 0x81a2]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x0000000000011473: and byte ptr [rax - 0x75], cl; push rsp; and al, 0x28; add rsp, 0x88; ret; 
0x000000000003e410: and byte ptr [rax - 0x75], cl; sbb eax, 0x3b5c0; mov edx, 0x90; call rbx; 
0x0000000000014284: and byte ptr [rax - 0x77], cl; and al, 0x28; lea rcx, [rip + 0x61d8f]; lea rax, [rip - 0x8908]; lea rdx, [rsp + 0x28]; call rax; 
0x000000000000f614: and byte ptr [rax - 0x77], cl; and al, 8; mov qword ptr [rsp + 0x10], rax; add rsp, 0x70; ret; 
0x000000000001190d: and byte ptr [rax - 0x77], cl; and al, 8; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000f087: and byte ptr [rax - 0x77], cl; clc; add rax, 0x10; mov qword ptr [rsp + 0x20], rax; lea rax, [rip + 0xb9f5]; call rax; 
0x000000000000f049: and byte ptr [rax - 0x77], cl; clc; add rax, 0x10; mov qword ptr [rsp + 0x20], rax; lea rax, [rip + 0xba33]; call rax; 
0x000000000005bd88: and byte ptr [rax - 0x77], cl; fistp qword ptr [rsi + 0x27]; mov r13, rax; call rax; 
0x000000000004bba9: and byte ptr [rax - 0x77], cl; lodsb al, byte ptr [rsi]; ret; 
0x00000000000136d8: and byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000004e9ff: and byte ptr [rax - 0x77], cl; ret 0x948; 
0x000000000002e7cd: and byte ptr [rax - 0x7d], cl; ret; 
0x000000000005b542: and byte ptr [rax - 1], cl; ret; 
0x000000000002a0d0: and byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000003f02d: and byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x000000000004f845: and byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000027fd2: and byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000001eb7d: and byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000005dc43: and byte ptr [rbx + 4], dh; xor eax, eax; pop rcx; ret; 
0x000000000005dde0: and byte ptr [rbx - 0x3d], bl; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x792f]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000042790: and byte ptr [rcx + rax], dh; movzx eax, al; lea eax, [rax + rax*8]; add rsp, 0x28; ret; 
0x000000000005b946: and byte ptr [rcx + rcx*4 - 0x11], cl; mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000003b34f: and byte ptr [rcx + rcx*4 - 9], cl; call rax; 
0x000000000001db74: and byte ptr [rcx - 0x74a7dbbc], cl; jl 0x1dba0; pop rax; lea rax, [rip + 0x3be8c]; call rax; 
0x0000000000059a13: and byte ptr [rcx - 0xff6b708], cl; ret; 
0x000000000000cc04: and byte ptr [rcx], al; add byte ptr [rax], al; call rax; 
0x0000000000024821: and byte ptr [rcx], dh; jmp qword ptr [rsi + 0x66]; 
0x000000000001e3ae: and byte ptr [rdi], cl; sub dword ptr [rsp], eax; mov rdi, rsp; call 0x1e3c0; add rsp, 0x58; ret; 
0x000000000003cf37: and byte ptr [rdi], cl; test dword ptr [rax + 0x4c000001], eax; mov edi, edi; call rax; 
0x000000000005ef9e: and byte ptr [rdi], cl; xchg eax, edx; rol dword ptr [rbx - 0x7c7e39], 0x21; setb al; or al, cl; ret; 
0x000000000003cf36: and byte ptr [rdi], r9b; test dword ptr [rax + 0x4c000001], eax; mov edi, edi; call rax; 
0x000000000001432d: and byte ptr [rdx + 0x38], bh; call 0x9078; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x58; ret; 
0x000000000004ae3c: and byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000000d508: and byte ptr [rdx], al; add byte ptr [rax], al; call rax; 
0x000000000000d4f9: and byte ptr [rdx], al; add byte ptr [rax], al; lea rax, [rip + 0x2a89c]; lea rdi, [rsp + 0x220]; call rax; 
0x0000000000018b92: and byte ptr [rdx], al; add byte ptr [rax], al; lea rdx, [rip + 0x5d683]; lea rax, [rip - 0x1ae4]; lea rsi, [rsp + 0x220]; call rax; 
0x000000000001bcec: and byte ptr [rip - 0x72b80000], ah; jl 0x1bd18; push rax; call rax; 
0x000000000002a362: and cl, al; movzx eax, cl; ret; 
0x0000000000040b88: and cl, byte ptr [rax - 0x73]; or eax, 0x2110c; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x0000000000059fe6: and cl, byte ptr [rax - 0x75]; jge 0x59feb; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb720]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000004f1a0: and cl, byte ptr [rax - 1]; ret; 
0x000000000000d6ea: and cl, byte ptr [rbx]; add dword ptr [rax], eax; lea rdi, [rsp + 0x248]; call rax; 
0x000000000000d84a: and dl, bl; add byte ptr [rax], al; lea rdi, [rsp + 0x278]; call rax; 
0x000000000005be3e: and dl, byte ptr [rsi + 0x63480000]; or al, 0x88; add rcx, rax; jmp rcx; 
0x000000000002a159: and dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000005703a: and dword ptr [rcx], esi; fisttp dword ptr [rax - 0x77]; ret 0x8ae9; 
0x000000000005efa7: and dword ptr [rdi], ecx; xchg eax, edx; ror byte ptr [rax], 0xc8; ret; 
0x000000000003623b: and dword ptr [rsp + rax], edi; add byte ptr [rdi], cl; or ebp, ebx; add byte ptr [rax - 0x77], cl; ret; 
0x000000000000a4d8: and eax, 0; cmp qword ptr [rax - 8], 0; sete al; pop rcx; ret; 
0x0000000000035c27: and eax, 0; mov rbx, rax; dec qword ptr [rax - 8]; mov rdi, r14; call qword ptr [rbp]; 
0x0000000000056a32: and eax, 0x22d51; ret; 
0x0000000000056a12: and eax, 0x22d71; ret; 
0x00000000000569de: and eax, 0x233b5; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000018f8f: and eax, 0x24bc8b48; call 0xffffffffe8018f9a; ret; 
0x000000000004d3a0: and eax, 0x2cb2b; nop word ptr cs:[rax + rax]; nop; ret; 
0x000000000004b156: and eax, 0x2e62d; ret; 
0x000000000004b11e: and eax, 0x2e665; ret; 
0x000000000004b0ed: and eax, 0x2e696; ret; 
0x000000000004b08e: and eax, 0x2ecc5; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x000000000004a886: and eax, 0x2eefd; ret; 
0x000000000004a7ce: and eax, 0x2efb5; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000eea7: and eax, 0x48000000; add esp, 0x28; ret; 
0x000000000002a136: and eax, 0x48000000; add esp, 8; pop rbx; pop r14; ret; 
0x0000000000057ec3: and eax, 0x48ceff48; mov dword ptr [rdi], esi; ret; 
0x0000000000014367: and eax, 0x48ffff76; lea edx, [rsp + 0x30]; call rax; 
0x0000000000026766: and eax, 0x5301d; ret; 
0x0000000000026754: and eax, 0x5302f; pop rbx; ret; 
0x00000000000266fe: and eax, 0x53085; pop rbx; ret; 
0x00000000000266b8: and eax, 0x530cb; pop rbx; ret; 
0x0000000000026678: and eax, 0x5310b; ret; 
0x0000000000020e21: and eax, 0x58962; pop rbx; pop r14; pop r15; ret; 
0x0000000000020d12: and eax, 0x58a71; pop rbx; pop r14; pop r15; ret; 
0x0000000000020b8f: and eax, 0x58bf4; pop rbx; ret; 
0x0000000000020b02: and eax, 0x58c81; pop rbx; pop r14; pop r15; ret; 
0x0000000000020a64: and eax, 0x58d1f; pop rbx; pop r14; pop r15; ret; 
0x0000000000020a06: and eax, 0x58d7d; ret; 
0x000000000002094d: and eax, 0x58e36; ret; 
0x0000000000020879: and eax, 0x58f92; pop rbx; ret; 
0x000000000002083a: and eax, 0x58fd1; nop; cmp dword ptr [rdi], 2; jae 0x20846; ret; 
0x000000000002072a: and eax, 0x59059; ret; 
0x000000000002066b: and eax, 0x59118; ret; 
0x0000000000020646: and eax, 0x591c5; ret; 
0x0000000000020609: and eax, 0x59202; ret; 
0x0000000000020538: and eax, 0x5924b; ret; 
0x00000000000203f4: and eax, 0x5938f; pop rbx; ret; 
0x0000000000020562: and eax, 0x59401; ret; 
0x0000000000020316: and eax, 0x5946d; ret; 
0x00000000000201ad: and eax, 0x595d6; ret; 
0x0000000000020189: and eax, 0x595fa; ret; 
0x0000000000020133: and eax, 0x59650; ret; 
0x0000000000020118: and eax, 0x5966b; ret; 
0x0000000000020092: and eax, 0x596f1; ret; 
0x0000000000020073: and eax, 0x59710; ret; 
0x000000000001fffd: and eax, 0x59786; pop rbx; pop r14; pop r15; ret; 
0x00000000000200db: and eax, 0x59888; pop rbx; ret; 
0x000000000001feb1: and eax, 0x5995a; nop word ptr cs:[rax + rax]; mov qword ptr [rsi + 0x10], rdi; ret; 
0x000000000001fddc: and eax, 0x599a7; pop rbx; ret; 
0x000000000001fc88: and eax, 0x59afb; pop rbx; ret; 
0x000000000001fc22: and eax, 0x59b61; ret; 
0x000000000001fb16: and eax, 0x59c6d; pop rbx; ret; 
0x000000000001fa59: and eax, 0x59d2a; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001fa23: and eax, 0x59d60; ret; 
0x000000000001f9ca: and eax, 0x59db9; ret; 
0x000000000001f9a8: and eax, 0x59ddb; ret; 
0x000000000001f986: and eax, 0x59dfd; ret; 
0x000000000001f96a: and eax, 0x59e19; ret; 
0x000000000001f8e8: and eax, 0x59e9b; ret; 
0x000000000001f9ff: and eax, 0x59f64; ret; 
0x000000000001f77c: and eax, 0x5a007; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001f721: and eax, 0x5a062; ret; 
0x000000000001f3e1: and eax, 0x5a3a2; pop rbx; pop r14; pop r15; ret; 
0x000000000001f2e8: and eax, 0x5a49b; ret; 
0x000000000001f1e8: and eax, 0x5a59b; ret; 
0x000000000001bc12: and eax, 0x8d480000; jl 0x1bc3d; push rax; call rax; 
0x000000000001bced: and eax, 0x8d480000; jl 0x1bd18; push rax; call rax; 
0x00000000000275e2: and eax, 0x8d482e77; add eax, 0x39944; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x00000000000207dd: and eax, 0xbfffffff; cmp eax, 0x80000000; je 0x207ea; ret; 
0x000000000004abc3: and eax, 0xc9bc0f66; movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x0000000000053e2f: and eax, 3; lea rax, [rip + 0x10df7]; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x00000000000370b4: and eax, 3; lea rcx, [rip + 0x2a9ca]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000036dc1: and eax, 3; lea rcx, [rip + 0x2acad]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000368af: and eax, 3; lea rcx, [rip + 0x2b1af]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000036881: and eax, 3; lea rcx, [rip + 0x2b1dd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000037d74: and eax, dword ptr [rax + rax]; cmp eax, 4; jne 0x37d85; lea rax, [rip + 0x42305]; pop rcx; ret; 
0x0000000000037d80: and eax, dword ptr [rax + rax]; pop rcx; ret; 
0x000000000002a008: and eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000011357: and eax, dword ptr [rax]; add byte ptr [rax], al; call rax; 
0x00000000000576a6: and eax, ecx; ret; 
0x0000000000039350: and ebp, 3; lea rcx, [rip + 0x287f2]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x0000000000037b6b: and ebp, 3; movsxd rax, dword ptr [r12 + rbp*4]; add rax, r12; jmp rax; 
0x000000000001cdb5: and ebp, ebx; adc esi, eax; and al, 7; add byte ptr [rdx + 0x48072444], cl; add esp, 0x150; ret; 
0x0000000000037d87: and ebp, edi; dec dword ptr [rax - 0x73]; add eax, 0x422f7; pop rcx; ret; 
0x000000000001e2fb: and ecx, dword ptr [rax - 0x75]; and al, 8; mov rdi, qword ptr [rax]; lea rax, [rip - 0xaab]; call rax; 
0x00000000000128cd: and ecx, dword ptr [rdx + 0x24232444]; add dword ptr [rdi], ecx; mov dh, 0xc0; add rsp, 0x28; ret; 
0x000000000004cd80: and esi, 0xfffe; cmp si, 2; sete al; ret; 
0x000000000004eec4: and esi, eax; or byte ptr [r8], r8b; mov qword ptr [rdi], 0; pop rbx; ret; 
0x00000000000128d1: and esp, dword ptr [rcx + rax]; movzx eax, al; add rsp, 0x28; ret; 
0x0000000000053e2e: and r8d, 3; lea rax, [rip + 0x10df7]; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x0000000000037d73: and rax, qword ptr [r8 + rax]; cmp eax, 4; jne 0x37d85; lea rax, [rip + 0x42305]; pop rcx; ret; 
0x00000000000576a5: and rax, rcx; ret; 
0x000000000003bb4d: bnd call qword ptr [rip + 0x3e0c4]; add rsp, 0x80; pop rbx; pop r14; pop r15; ret; 
0x0000000000039c15: bnd jmp rdx; 
0x0000000000011682: bnd jns 0x11684; dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x58; ret; 
0x000000000004aadc: bsf ax, ax; movzx edx, ax; mov eax, 1; ret; 
0x000000000004abd9: bsf ax, dx; movzx edx, ax; add rdx, rcx; mov eax, 1; ret; 
0x000000000004abc4: bsf cx, cx; movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000004ac09: bsf cx, cx; movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x000000000004abf1: bsf cx, cx; movzx edx, cx; add rdx, rax; mov eax, 1; ret; 
0x000000000004aadd: bsf eax, eax; movzx edx, ax; mov eax, 1; ret; 
0x000000000004abda: bsf eax, edx; movzx edx, ax; add rdx, rcx; mov eax, 1; ret; 
0x000000000004abc5: bsf ecx, ecx; movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000004ac0a: bsf ecx, ecx; movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x000000000004abf2: bsf ecx, ecx; movzx edx, cx; add rdx, rax; mov eax, 1; ret; 
0x000000000000c0e0: call 0x10d40; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000c145: call 0x10d60; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000f916: call 0x10ff0; lea rdi, [rsp + 8]; call 0xecb0; add rsp, 0xc8; ret; 
0x000000000000ea24: call 0x11490; add rsp, 0x1c8; ret; 
0x00000000000115b5: call 0x115e0; pop rcx; ret; 
0x000000000001198e: call 0x11690; add rsp, 0x18; ret; 
0x0000000000011965: call 0x11870; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000f785: call 0x11a00; add rsp, 0x48; ret; 
0x000000000000e58d: call 0x11b30; test al, 1; jne 0xe59b; add rsp, 0x38; ret; 
0x0000000000012453: call 0x11f50; mov rdi, rax; mov rsi, rdx; call 0xf9d0; add rsp, 0x18; ret; 
0x0000000000013633: call 0x124c0; add rsp, 0x98; ret; 
0x000000000000ed0e: call 0x12540; add rsp, 0x28; ret; 
0x000000000000f15a: call 0x126b0; add rsp, 0x28; ret; 
0x0000000000013cbf: call 0x12a30; mov rax, qword ptr [rsp]; add rsp, 0x68; ret; 
0x00000000000137a9: call 0x13340; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x00000000000132fa: call 0x13340; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001366e: call 0x13370; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x00000000000137d9: call 0x133a0; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x00000000000132ca: call 0x133a0; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000013bfd: call 0x137c0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x88; ret; 
0x0000000000013819: call 0x137f0; mov ax, word ptr [rax + 0x21a]; mov word ptr [rsp + 0x16], ax; movzx eax, ax; add rsp, 0x18; ret; 
0x00000000000139f9: call 0x137f0; mov qword ptr [rsp + 0x10], rax; add rsp, 0x18; ret; 
0x0000000000013d8b: call 0x13ba0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x000000000000c8e9: call 0x14500; add rsp, 0x128; ret; 
0x00000000000141a0: call 0x145a0; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000015cde: call 0x151b0; add rsp, 0x18; ret; 
0x0000000000018c09: call 0x15f10; mov rdi, rax; mov rsi, rdx; call 0x1bd90; add rsp, 0x18; ret; 
0x0000000000016297: call 0x161b0; mov rdi, qword ptr [rsp + 8]; lea rsi, [rip + 0x5fe88]; lea rax, [rip - 0xacbf]; call rax; 
0x00000000000183fd: call 0x18d10; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x48; ret; 
0x000000000001a990: call 0x18d10; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000001bbbf: call 0x18d10; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip - 0x5b00]; call rax; 
0x000000000001ad0e: call 0x1a870; add rsp, 0x18; ret; 
0x0000000000019711: call 0x1a8a0; pop rcx; ret; 
0x000000000001acee: call 0x1a930; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000001b927: call 0x1ae10; add rsp, 0x18; ret; 
0x000000000001b96b: call 0x1b1d0; add rsp, 0x38; ret; 
0x0000000000015d46: call 0x1b880; add rsp, 0x48; ret; 
0x0000000000018c14: call 0x1bd90; add rsp, 0x18; ret; 
0x000000000001bb82: call 0x1be50; mov rsi, rax; lea rax, [rip + 0x4098f]; lea rdi, [rsp + 0x68]; mov qword ptr [rsp + 0x20], rdi; call rax; 
0x000000000001e61e: call 0x1c040; mov dword ptr [rsp], eax; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001e2a5: call 0x1c7a0; pop rax; ret; 
0x000000000001e6e1: call 0x1c870; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001e2d5: call 0x1d220; pop rax; ret; 
0x000000000001da57: call 0x1d330; add rsp, 0x18; ret; 
0x000000000001c756: call 0x1d9b0; add rsp, 0x48; ret; 
0x000000000001c95e: call 0x1e370; add rsp, 0x18; ret; 
0x000000000001e3b6: call 0x1e3c0; add rsp, 0x58; ret; 
0x0000000000022724: call 0x1ed20; xor eax, eax; pop rcx; ret; 
0x000000000003691b: call 0x20db0; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x0000000000022734: call 0x234e0; xor eax, eax; pop rcx; ret; 
0x00000000000458e3: call 0x24509431; call 0xffffffff834c6e5f; ret; 
0x000000000001f04c: call 0x28c67399; pop rbx; pop rbp; ret; 
0x000000000001f091: call 0x35cf0; ud2; nop dword ptr [rax + rax]; ret; 
0x000000000001ee50: call 0x38fd0; pop rcx; ret; 
0x000000000001ec60: call 0x391a0; pop rcx; ret; 
0x000000000000ca00: call 0x4800ca05; lea edx, [rsp + 0x88]; call rax; 
0x000000000000cfc0: call 0x4800cfc5; lea edx, [rsp + 0x88]; call rax; 
0x000000000000da49: call 0x4800da4e; lea esi, [rsp + 0xd0]; call rax; 
0x00000000000192d4: call 0x480198df; mov eax, dword ptr [rsp + 0x50]; add rsp, 0x788; ret; 
0x000000000001ba74: call 0x48163183; mov eax, dword ptr [rsp]; lea rcx, [rip + 0x450a5]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb7f: call 0x48174287; mov eax, dword ptr [rsp + 0x20]; lea rcx, [rip + 0x440dd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000e741: call 0x48435e49; mov eax, dword ptr [rsp + 0x10]; lea rcx, [rip + 0x51b4b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000056a44: call 0x574b0; xor eax, eax; pop rcx; ret; 
0x000000000005a414: call 0x5a2f0; mov rax, rbx; pop rbx; ret; 
0x000000000005dc83: call 0x5db10; pop rcx; ret; 
0x0000000000019a6f: call 0x9060; ud2; lea rax, [rip + 0x1083]; lea rdi, [rsp + 0xb0]; call rax; 
0x000000000001bce2: call 0x9060; ud2; lea rax, [rip + 0x2520]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000001a3be: call 0x9060; ud2; lea rax, [rip + 0x8c4]; lea rdi, [rsp + 0x18]; call rax; 
0x0000000000019d99: call 0x9060; ud2; lea rax, [rip + 0xd59]; lea rdi, [rsp + 0xb0]; call rax; 
0x000000000000eddc: call 0x9060; ud2; lea rax, [rip - 0x364a]; call rax; 
0x000000000000f0a4: call 0x9060; ud2; lea rax, [rip - 0x3912]; call rax; 
0x0000000000016980: call 0x9060; ud2; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x40ed]; call rax; 
0x000000000001c78a: call 0x9070; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000001c8b4: call 0x9078; add rsp, 0x28; ret; 
0x0000000000010c3f: call 0x9078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x000000000001900a: call 0x9078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x278; ret; 
0x0000000000011681: call 0x9078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x0000000000014333: call 0x9078; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x58; ret; 
0x0000000000012b7d: call 0x9078; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x000000000000bc42: call 0x9080; call 0xbbb0; mov byte ptr [rip + 0x6e3e5], 1; pop rbp; ret; 
0x0000000000037d85: call 0x9f70; lea rax, [rip + 0x422f7]; pop rcx; ret; 
0x00000000000378f5: call 0x9fc0; lea rax, [rip + 0x4274f]; pop rcx; ret; 
0x000000000000a04c: call 0xa850; add rsp, 0x28; ret; 
0x0000000000009ff9: call 0xaaa0; add rsp, 0x28; ret; 
0x0000000000009fa9: call 0xad10; add rsp, 0x28; ret; 
0x000000000000bc47: call 0xbbb0; mov byte ptr [rip + 0x6e3e5], 1; pop rbp; ret; 
0x000000000000e26f: call 0xbc70; pop rcx; ret; 
0x000000000000bf88: call 0xc060; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000c11a: call 0xc090; and al, 1; movzx eax, al; add rsp, 0x48; ret; 
0x0000000000014b61: call 0xc300; add rsp, 0x28; ret; 
0x000000000000d4d9: call 0xc4b0; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x2b0d6]; call rax; 
0x000000000000e8f6: call 0xc4b0; mov rdi, qword ptr [rsp + 8]; lea rsi, [rip + 0x675d1]; lea rax, [rip - 0x331e]; call rax; 
0x000000000000c597: call 0xc4b0; mov rdi, qword ptr [rsp + 8]; lea rsi, [rip + 0x69588]; lea rax, [rip - 0xfbf]; call rax; 
0x000000000000e5d1: call 0xe1f0; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000e3ef: call 0xe280; add rsp, 0x38; ret; 
0x000000000000e2b4: call 0xe2c0; add rsp, 0x38; ret; 
0x0000000000010ed7: call 0xe3b0; add rsp, 0x78; ret; 
0x0000000000010d8c: call 0xe3b0; xor eax, eax; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x0000000000011888: call 0xeb00; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000ee65: call 0xeb70; pop rax; ret; 
0x000000000000ebec: call 0xec00; add rsp, 0x18; ret; 
0x000000000000c3f9: call 0xec40; add rsp, 0x28; ret; 
0x000000000000f135: call 0xeca0; pop rax; ret; 
0x000000000000f920: call 0xecb0; add rsp, 0xc8; ret; 
0x000000000000dc1b: call 0xecdc1f; lea rax, [rip + 0x2a999]; lea rdi, [rsp + 0x120]; call rax; 
0x000000000000f69b: call 0xed30; add rsp, 0x78; ret; 
0x000000000000eea6: call 0xeed0; add rsp, 0x28; ret; 
0x00000000000124ae: call 0xef70; add rsp, 0x18; ret; 
0x000000000000ef75: call 0xef90; pop rax; ret; 
0x000000000000f71b: call 0xeff0; add rsp, 0x78; ret; 
0x000000000000dae7: call 0xf00daec; sub dword ptr [rsp + 0x100], eax; lea rax, [rip + 0x85d6]; lea rdi, [rsp + 0x100]; call rax; 
0x000000000000f1d5: call 0xf170; pop rax; ret; 
0x000000000000f1a6: call 0xf1e0; add rsp, 0x28; ret; 
0x000000000000ef65: call 0xf220; pop rax; ret; 
0x00000000000124ce: call 0xf490; add rsp, 0x18; ret; 
0x000000000000f456: call 0xf4d0; add rsp, 0x28; ret; 
0x000000000000f403: call 0xf580; add rsp, 0x28; ret; 
0x000000000000f1e5: call 0xf730; pop rax; ret; 
0x000000000000eed5: call 0xf790; pop rax; ret; 
0x000000000000f4d5: call 0xf7f0; pop rax; ret; 
0x000000000000eca5: call 0xf850; pop rax; ret; 
0x000000000000ecb5: call 0xf930; pop rax; ret; 
0x000000000001245e: call 0xf9d0; add rsp, 0x18; ret; 
0x000000000000e0b9: call 0xfb80; pop rcx; ret; 
0x00000000000458e8: call 0xffffffff834c6e5f; ret; 
0x0000000000017c31: call 0xffffffffd1017c35; add rsp, 0x18; ret; 
0x0000000000018f94: call 0xffffffffe8018f9a; ret; 
0x000000000003c940: call 0xffffffffff795692; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000003c9c9: call 0xffffffffff79571b; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000003ca40: call 0xffffffffff795792; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000003ca6e: call 0xffffffffff7957c0; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000005823f: call qword ptr [rax + 0x18]; 
0x000000000005ef77: call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; pop r14; pop r15; ret; 
0x000000000005ddda: call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000005a115: call qword ptr [rax + 0x18]; mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x000000000003daa2: call qword ptr [rax + 0x20]; 
0x000000000004278e: call qword ptr [rax + 0x20]; xor al, 1; movzx eax, al; lea eax, [rax + rax*8]; add rsp, 0x28; ret; 
0x00000000000359f9: call qword ptr [rax + 0x28]; 
0x000000000001f3b2: call qword ptr [rax]; 
0x000000000005b099: call qword ptr [rbp + 0x18]; 
0x000000000005ae7a: call qword ptr [rbp + 0x20]; 
0x000000000005bdc1: call qword ptr [rbp + 0x634a0000]; xor al, 0xb9; add rsi, rcx; jmp rsi; 
0x0000000000035c39: call qword ptr [rbp]; 
0x0000000000058591: call qword ptr [rbx + 0x18]; 
0x000000000005ae01: call qword ptr [rbx + 0x20]; 
0x00000000000544c3: call qword ptr [rbx]; 
0x000000000004a90f: call qword ptr [rcx + 0x18]; 
0x0000000000047529: call qword ptr [rcx + 0x20]; 
0x000000000004eb53: call qword ptr [rdi + 0x3e]; 
0x00000000000505d9: call qword ptr [rdi]; 
0x00000000000505d9: call qword ptr [rdi]; ja 0x50af9; lea rbx, [rip + 0x13e00]; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000003c4ed: call qword ptr [rdx + 0x18]; 
0x000000000005ee86: call qword ptr [rip + 0x1a64c]; add rsp, 0x88; ret; 
0x000000000005ebe8: call qword ptr [rip + 0x1a8ea]; add rsp, 0x28; ret; 
0x000000000005eab8: call qword ptr [rip + 0x1aa1a]; add rsp, 0x28; ret; 
0x000000000005e98a: call qword ptr [rip + 0x1ab48]; add rsp, 0x30; pop rbx; ret; 
0x000000000005e851: call qword ptr [rip + 0x1ac81]; add rsp, 0x28; ret; 
0x000000000005e764: call qword ptr [rip + 0x1ad6e]; add rsp, 0x28; ret; 
0x000000000005e6b6: call qword ptr [rip + 0x1ae1c]; add rsp, 0x88; ret; 
0x000000000005e660: call qword ptr [rip + 0x1ae72]; add rsp, 0x88; ret; 
0x000000000005e481: call qword ptr [rip + 0x1b051]; add rsp, 0x88; ret; 
0x000000000005edba: call qword ptr [rip + 0x1b088]; add rsp, 0x38; ret; 
0x000000000005e42b: call qword ptr [rip + 0x1b0a7]; add rsp, 0x88; ret; 
0x000000000005e300: call qword ptr [rip + 0x1b1d2]; add rsp, 0x88; ret; 
0x000000000005e260: call qword ptr [rip + 0x1b272]; add rsp, 0x88; ret; 
0x000000000005e1cd: call qword ptr [rip + 0x1b305]; add rsp, 0x88; ret; 
0x000000000005e13d: call qword ptr [rip + 0x1b395]; add rsp, 0x88; ret; 
0x000000000005e0ab: call qword ptr [rip + 0x1b427]; add rsp, 0x88; ret; 
0x000000000005e01b: call qword ptr [rip + 0x1b4b7]; add rsp, 0x88; ret; 
0x000000000005d493: call qword ptr [rip + 0x1bf5f]; ud2; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000005c18e: call qword ptr [rip + 0x1dd3c]; pop rcx; ret; 
0x000000000005b5ad: call qword ptr [rip + 0x1e895]; add rsp, 0x38; ret; 
0x000000000005a6d6: call qword ptr [rip + 0x1f3fc]; pop rcx; ret; 
0x000000000005aa3a: call qword ptr [rip + 0x1f408]; add rsp, 0x38; ret; 
0x000000000005a692: call qword ptr [rip + 0x1f440]; pop rcx; ret; 
0x000000000005a655: call qword ptr [rip + 0x1f47d]; pop rcx; ret; 
0x000000000005a9b7: call qword ptr [rip + 0x1f48b]; add rsp, 0x48; ret; 
0x000000000005a623: call qword ptr [rip + 0x1f4af]; pop rcx; ret; 
0x000000000005a967: call qword ptr [rip + 0x1f4db]; add rsp, 0x48; ret; 
0x000000000005a917: call qword ptr [rip + 0x1f52b]; add rsp, 0x48; ret; 
0x000000000005a523: call qword ptr [rip + 0x1f5af]; pop rcx; ret; 
0x000000000005a4df: call qword ptr [rip + 0x1f5f3]; pop rcx; ret; 
0x000000000005a4a2: call qword ptr [rip + 0x1f630]; pop rcx; ret; 
0x000000000005a470: call qword ptr [rip + 0x1f662]; pop rcx; ret; 
0x000000000005a564: call qword ptr [rip + 0x1f8de]; add rsp, 0x48; ret; 
0x0000000000059b15: call qword ptr [rip + 0x2032d]; add rsp, 0x68; ret; 
0x0000000000057fa7: call qword ptr [rip + 0x21bf3]; mov rax, rbx; pop rbx; ret; 
0x000000000005815c: call qword ptr [rip + 0x21d6e]; add rsp, 0xa0; pop rbx; ret; 
0x0000000000058086: call qword ptr [rip + 0x21dbc]; add rsp, 0xa0; pop rbx; ret; 
0x0000000000057799: call qword ptr [rip + 0x222a1]; add rsp, 0x18; ret; 
0x0000000000056cb1: call qword ptr [rip + 0x22dd9]; ud2; nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; mov rdx, qword ptr [rdi + 0x10]; ret; 
0x0000000000056a87: call qword ptr [rip + 0x233bb]; add rsp, 0x48; ret; 
0x0000000000053735: call qword ptr [rip + 0x25c75]; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x000000000004d5c7: call qword ptr [rip + 0x2c87b]; add rsp, 0x48; ret; 
0x0000000000049f5d: call qword ptr [rip + 0x2f605]; pop rbx; ret; 
0x000000000003e5d1: call qword ptr [rip + 0x3ae71]; mov eax, dword ptr [rax]; pop rcx; ret; 
0x000000000003dda1: call qword ptr [rip + 0x3be49]; pop rcx; ret; 
0x000000000003d0b6: call qword ptr [rip + 0x3c32c]; ud2; mov rdi, r15; call rax; 
0x000000000003d0b0: call qword ptr [rip + 0x3c6d2]; call qword ptr [rip + 0x3c32c]; ud2; mov rdi, r15; call rax; 
0x000000000003cd70: call qword ptr [rip + 0x3d0ea]; ud2; nop dword ptr [rax + rax]; mov rax, rdi; lea rdx, [rip + 0x3a7f6]; ret; 
0x000000000003c510: call qword ptr [rip + 0x3d232]; mov r15, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000003c4e1: call qword ptr [rip + 0x3d261]; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000003bb4e: call qword ptr [rip + 0x3e0c4]; add rsp, 0x80; pop rbx; pop r14; pop r15; ret; 
0x000000000003867d: call qword ptr [rip + 0x413d5]; test rax, rax; jne 0x38698; add rsp, 0xb0; pop rbx; ret; 
0x0000000000037da8: call qword ptr [rip + 0x41a4a]; pop rcx; ret; 
0x0000000000036d13: call qword ptr [rip + 0x42a6f]; lea rax, [rip + 0x400a0]; pop rcx; ret; 
0x0000000000035e47: call qword ptr [rip + 0x435cb]; mov rdi, rbx; call qword ptr [rip + 0x43f3a]; add rsp, 0x10; pop rbx; ret; 
0x0000000000035e50: call qword ptr [rip + 0x43f3a]; add rsp, 0x10; pop rbx; ret; 
0x00000000000359e3: call qword ptr [rip + 0x44027]; mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x000000000002b99c: call qword ptr [rip + 0x4e24e]; pop rcx; ret; 
0x000000000002b977: call qword ptr [rip + 0x4e273]; pop rcx; ret; 
0x0000000000022a27: call qword ptr [rip + 0x5741b]; add rsp, 0x48; ret; 
0x00000000000229d7: call qword ptr [rip + 0x5746b]; add rsp, 0x48; ret; 
0x0000000000022987: call qword ptr [rip + 0x574bb]; add rsp, 0x48; ret; 
0x0000000000022937: call qword ptr [rip + 0x5750b]; add rsp, 0x48; ret; 
0x0000000000020d82: call qword ptr [rip + 0x58f08]; mov qword ptr [r14 + 0x10], rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001f045: call qword ptr [rip + 0x5a73d]; mov eax, ebp; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000001efc4: call qword ptr [rip + 0x5ae7e]; add rsp, 0x48; ret; 
0x000000000001ef84: call qword ptr [rip + 0x5aebe]; add rsp, 0x48; ret; 
0x000000000001ef44: call qword ptr [rip + 0x5aefe]; add rsp, 0x48; ret; 
0x000000000001e327: call qword ptr [rip + 0x5b0db]; add rsp, 0x28; ret; 
0x000000000001e935: call qword ptr [rip + 0x5b1ad]; ud2; nop dword ptr [rax]; movabs rax, 0x5203149ad97ccfc6; ret; 
0x000000000001e235: call qword ptr [rip + 0x5b485]; pop rax; ret; 
0x000000000001e5e9: call qword ptr [rip + 0x5b5d1]; add rsp, 0x18; ret; 
0x000000000001e225: call qword ptr [rip + 0x5b5d5]; pop rax; ret; 
0x000000000001e16f: call qword ptr [rip + 0x5b5e3]; add rsp, 0x18; ret; 
0x000000000001e2b5: call qword ptr [rip + 0x5b685]; pop rax; ret; 
0x000000000001e2c5: call qword ptr [rip + 0x5b7bd]; pop rax; ret; 
0x000000000001e205: call qword ptr [rip + 0x5b845]; pop rax; ret; 
0x000000000001e215: call qword ptr [rip + 0x5bb8d]; pop rax; ret; 
0x000000000001dde9: call qword ptr [rip + 0x5bbc1]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x000000000001e1d2: call qword ptr [rip + 0x5bcb0]; add rsp, 0x28; ret; 
0x000000000001e27e: call qword ptr [rip + 0x5bd2c]; add rsp, 0x28; ret; 
0x000000000001da2a: call qword ptr [rip + 0x5bd58]; add rsp, 0x68; ret; 
0x000000000001d22f: call qword ptr [rip + 0x5c4ab]; mov rdi, rsp; call qword ptr [rip + 0x5cd82]; add rsp, 0x18; ret; 
0x000000000001d238: call qword ptr [rip + 0x5cd82]; add rsp, 0x18; ret; 
0x000000000001c7a7: call qword ptr [rip + 0x5d063]; pop rax; ret; 
0x000000000001c85d: call qword ptr [rip + 0x5d3ed]; add rsp, 0x28; ret; 
0x000000000001c1f8: call qword ptr [rip + 0x5d3f2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001c945: call qword ptr [rip + 0x5d4b5]; pop rcx; ret; 
0x000000000001c226: call qword ptr [rip + 0x5d524]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000001bd7c: call qword ptr [rip + 0x5dcce]; mov rax, qword ptr [rsp + 0x48]; add rsp, 0x108; ret; 
0x000000000001bf78: call qword ptr [rip + 0x5dcd2]; add rsp, 0x18; ret; 
0x000000000001bff1: call qword ptr [rip + 0x5dd01]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001b8fa: call qword ptr [rip + 0x5de88]; add rsp, 0x68; ret; 
0x000000000001bb2e: call qword ptr [rip + 0x5e324]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x000000000001ab35: call qword ptr [rip + 0x5e88d]; pop rax; ret; 
0x000000000001ab19: call qword ptr [rip + 0x5e9b1]; pop rax; ret; 
0x000000000001ac55: call qword ptr [rip + 0x5e9ed]; pop rax; ret; 
0x000000000001aa85: call qword ptr [rip + 0x5ea85]; pop rax; ret; 
0x000000000001aa75: call qword ptr [rip + 0x5eefd]; pop rax; ret; 
0x000000000001ab05: call qword ptr [rip + 0x5f015]; pop rax; ret; 
0x000000000001a95d: call qword ptr [rip + 0x5f07d]; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000001a9d9: call qword ptr [rip + 0x5f141]; add rsp, 0x18; ret; 
0x000000000001ad48: call qword ptr [rip + 0x5f1c2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001ab5a: call qword ptr [rip + 0x5f218]; add rsp, 0x28; ret; 
0x000000000001abae: call qword ptr [rip + 0x5f2dc]; add rsp, 0x28; ret; 
0x000000000001aaca: call qword ptr [rip + 0x5f460]; add rsp, 0x28; ret; 
0x0000000000019e21: call qword ptr [rip + 0x5f641]; pop rax; ret; 
0x000000000001979f: call qword ptr [rip + 0x5fceb]; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x0000000000019acc: call qword ptr [rip + 0x5fdc6]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000019b1e: call qword ptr [rip + 0x5fe24]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000197f0: call qword ptr [rip + 0x5fe92]; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x0000000000019757: call qword ptr [rip + 0x60373]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000192d2: call qword ptr [rip + 0x606e8]; mov rax, qword ptr [rsp + 0x50]; add rsp, 0x788; ret; 
0x000000000001906c: call qword ptr [rip + 0x60db6]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000018615: call qword ptr [rip + 0x60df5]; mov rax, qword ptr [rsp + 0x58]; add rsp, 0x3a8; ret; 
0x0000000000018cf8: call qword ptr [rip + 0x60fa2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001807d: call qword ptr [rip + 0x619f5]; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x478; ret; 
0x000000000001839d: call qword ptr [rip + 0x61acd]; add rsp, 0x88; ret; 
0x00000000000184b8: call qword ptr [rip + 0x61b2a]; pop rax; ret; 
0x00000000000182fc: call qword ptr [rip + 0x61c4e]; xor eax, eax; add rsp, 0x18; ret; 
0x0000000000016e8c: call qword ptr [rip + 0x628fe]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000016dd1: call qword ptr [rip + 0x62949]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000016e08: call qword ptr [rip + 0x629aa]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000016c8d: call qword ptr [rip + 0x62c65]; test al, 1; jne 0x16c9c; add rsp, 0x38; ret; 
0x0000000000016e60: call qword ptr [rip + 0x62dba]; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x0000000000016df5: call qword ptr [rip + 0x62f35]; pop rax; ret; 
0x0000000000016a76: call qword ptr [rip + 0x63084]; add rsp, 0x148; ret; 
0x0000000000016385: call qword ptr [rip + 0x6337d]; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000015e81: call qword ptr [rip + 0x63a59]; pop rcx; ret; 
0x0000000000015ff1: call qword ptr [rip + 0x63ab1]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000015ea5: call qword ptr [rip + 0x63f85]; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000015cd2: call qword ptr [rip + 0x64060]; mov rdi, rax; mov rsi, rdx; call 0x151b0; add rsp, 0x18; ret; 
0x0000000000011a7a: call qword ptr [rip + 0x67d08]; add rsp, 0x68; ret; 
0x0000000000011935: call qword ptr [rip + 0x67e45]; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x00000000000119d7: call qword ptr [rip + 0x680f3]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x0000000000010f70: call qword ptr [rip + 0x68712]; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x0000000000010b90: call qword ptr [rip + 0x68eba]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000000fbb4: call qword ptr [rip + 0x69d5e]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; mov qword ptr [rsp + 0x30], rax; add rsp, 0x38; ret; 
0x000000000000f485: call qword ptr [rip + 0x6a38d]; pop rax; ret; 
0x000000000000f210: call qword ptr [rip + 0x6a3ca]; add rsp, 0x18; ret; 
0x000000000000f569: call qword ptr [rip + 0x6a5b1]; add rsp, 0x18; ret; 
0x000000000000ef95: call qword ptr [rip + 0x6ae0d]; pop rax; ret; 
0x000000000000ef36: call qword ptr [rip + 0x6ae6c]; add rsp, 0x28; ret; 
0x000000000000ec89: call qword ptr [rip + 0x6ae91]; add rsp, 0x18; ret; 
0x000000000000e03e: call qword ptr [rip + 0x6ba0c]; add rsp, 0x218; ret; 
0x000000000000e244: call qword ptr [rip + 0x6bb16]; and al, 1; movzx eax, al; add rsp, 0x48; ret; 
0x000000000000e0d1: call qword ptr [rip + 0x6be69]; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000da98: call qword ptr [rip + 0x6bfb2]; add rsp, 0x1d8; ret; 
0x000000000000d0ea: call qword ptr [rip + 0x6c960]; add rsp, 0x398; ret; 
0x000000000000cb2a: call qword ptr [rip + 0x6cf20]; add rsp, 0x398; ret; 
0x000000000000c8d9: call qword ptr [rip + 0x6cf81]; mov rdi, rax; lea rsi, [rip + 0x69307]; call 0x14500; add rsp, 0x128; ret; 
0x000000000000bf5b: call qword ptr [rip + 0x6d727]; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000c075: call qword ptr [rip + 0x6dcf5]; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000c0b6: call qword ptr [rip + 0x6dd8c]; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x000000000000a81b: call qword ptr [rip + 0x6f147]; test rax, rax; jle 0xa7ca; pop rbx; ret; 
0x0000000000059b87: call qword ptr [rsi + 0x18]; 
0x000000000005b4eb: call qword ptr [rsi + 0x20]; 
0x00000000000537cf: call r15; mov rax, rbx; pop rbx; pop r14; pop r15; ret; 
0x0000000000009014: call rax; 
0x0000000000017c34: call rax; add rsp, 0x18; ret; 
0x00000000000151a0: call rax; add rsp, 0x28; ret; 
0x0000000000009014: call rax; add rsp, 8; ret; 
0x000000000001c1d8: call rax; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001e59c: call rax; pop rcx; ret; 
0x0000000000019dba: call rax; ud2; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x158; ret; 
0x0000000000019a90: call rax; ud2; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x178; ret; 
0x0000000000014d37: call rax; ud2; mov rax, qword ptr [rsp + 0x40]; mov edx, dword ptr [rsp + 0x48]; add rsp, 0xf8; ret; 
0x000000000001a38b: call rax; ud2; mov rax, qword ptr [rsp + 8]; add rsp, 0xb8; ret; 
0x000000000003562a: call rbp; cmp eax, -1; jne 0x356f8; call rbx; 
0x0000000000021003: call rbx; 
0x00000000000423b6: call rcx; 
0x000000000000a5b2: call rdi; 
0x000000000000ec49: call rdi; add rsp, 0x18; ret; 
0x00000000000537d0: call rdi; mov rax, rbx; pop rbx; pop r14; pop r15; ret; 
0x000000000003464d: call rdx; 
0x000000000000a926: call rsi; 
0x0000000000009eed: call rsp; 
0x000000000000d352: cdq; add byte ptr [rax], al; lea rdi, [rsp + 0x190]; call rax; 
0x00000000000275e9: cdq; add eax, dword ptr [rax]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x0000000000012b54: cdq; fiadd dword ptr [rax + rax]; lea rdx, [rip + 0x63471]; lea rax, [rip - 0x74f6]; mov esi, 0x2b; call rax; 
0x000000000000cd93: cdq; lahf; add byte ptr [rax], al; lea rdi, [rsp + 0x190]; call rax; 
0x000000000005b889: cdq; sahf; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005951a: clc; adc byte ptr [rcx + 0xf], al; xchg eax, edx; ret; 
0x0000000000009f7b: clc; add al, 0x75; add eax, 0x28c48348; ret; 
0x0000000000037d78: clc; add al, 0x75; or dword ptr [rax - 0x73], ecx; add eax, 0x42305; pop rcx; ret; 
0x00000000000378e8: clc; add al, 0x75; or dword ptr [rax - 0x73], ecx; add eax, 0x4275d; pop rcx; ret; 
0x0000000000019f44: clc; add byte ptr [rbp + 0x10], dh; mov rdi, qword ptr [rsp + 8]; lea rax, [rip - 0x3a34]; call rax; 
0x000000000001cd18: clc; add byte ptr [rbp + 0x14], dh; mov rdi, qword ptr [rsp + 0x50]; lea rax, [rip + 0x58]; call rax; 
0x00000000000129dc: clc; add byte ptr [rbp + 0xa], dh; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x0000000000015209: clc; add byte ptr [rbp + 0xb], dh; lea rax, [rip + 0x41a4c]; call rax; 
0x000000000000fa29: clc; add byte ptr [rbp + 0xb], dh; lea rax, [rip + 0x4722c]; call rax; 
0x000000000000f4b3: clc; add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x000000000000fa0d: clc; add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x00000000000141e1: clc; add byte ptr [rbp + 5], dh; add rsp, 0x58; ret; 
0x000000000001c40a: clc; add byte ptr [rbp + rcx - 0x15], dh; sub ecx, dword ptr [rax - 0x73]; add eax, 0x3a849; call rax; 
0x000000000001547a: clc; add byte ptr [rbp + rcx - 0x15], dh; sub ecx, dword ptr [rax - 0x73]; add eax, 0x417d9; call rax; 
0x000000000000d65d: clc; add byte ptr [rsp + rbx - 0x15], dh; pop rbp; lea rax, [rip - 0x1eca]; call rax; 
0x000000000005a567: clc; add dword ptr [rax], eax; add rsp, 0x48; ret; 
0x0000000000039092: clc; add dword ptr [rbp + 0x3b], esi; lea r14, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003785f: clc; add dword ptr [rbp + 0x3b], esi; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000391cc: clc; add dword ptr [rbp + 0x3b], esi; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000043922: clc; add dword ptr [rbp + 0x3c], esi; lea rbp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000037fcb: clc; add dword ptr [rbp + 0x3e], esi; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001f3a2: clc; add dword ptr [rbp + 0x40], esi; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001ffbe: clc; add dword ptr [rbp + 0x40], esi; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003ec59: clc; add dword ptr [rbp + 0x52], esi; lea rbx, [r15 - 1]; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x0000000000019eb9: clc; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x0000000000035e84: clc; add dword ptr [rdx + rbp + 0x31], esi; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x000000000002a329: clc; add eax, 0x8d481677; or eax, 0x37178; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a2b9: clc; add eax, 0x8d481677; or eax, 0x371d0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a259: clc; add eax, 0x8d481a77; or eax, 0x37218; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000f08a: clc; add rax, 0x10; mov qword ptr [rsp + 0x20], rax; lea rax, [rip + 0xb9f5]; call rax; 
0x000000000000f04c: clc; add rax, 0x10; mov qword ptr [rsp + 0x20], rax; lea rax, [rip + 0xba33]; call rax; 
0x000000000003e478: clc; add rsp, 0x2e0; pop rbx; pop r14; pop r15; ret; 
0x000000000004caee: clc; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000422cd: clc; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x00000000000370b3: clc; and eax, 3; lea rcx, [rip + 0x2a9ca]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000368ae: clc; and eax, 3; lea rcx, [rip + 0x2b1af]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000036880: clc; and eax, 3; lea rcx, [rip + 0x2b1dd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000005aad5: clc; call qword ptr [rax + 0x18]; 
0x000000000001c85c: clc; call qword ptr [rip + 0x5d3ed]; add rsp, 0x28; ret; 
0x000000000001bf77: clc; call qword ptr [rip + 0x5dcd2]; add rsp, 0x18; ret; 
0x0000000000021002: clc; call rbx; 
0x0000000000039b88: clc; cmp byte ptr [rax], cl; sete al; pop rcx; ret; 
0x000000000005f1f9: clc; div r8; mov r10, rax; mov rax, r10; mov rdx, r11; ret; 
0x0000000000014294: clc; jbe 0x14296; dec dword ptr [rax - 0x73]; push rsp; and al, 0x28; call rax; 
0x000000000000bbc0: clc; je 0xbbd8; mov rax, qword ptr [rip + 0x6d8a6]; test rax, rax; je 0xbbd8; jmp rax; 
0x000000000000e14c: clc; jl 0xe155; add byte ptr [rax - 0x73], cl; add eax, 0x4c879; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000029938: clc; jmp rax; 
0x000000000002b616: clc; lea rbp, [rip + 0x35f1e]; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x000000000003cd82: clc; lea rdx, [rip + 0x3a7f6]; ret; 
0x000000000005ba40: clc; lea rdx, [rip + 0x98c8]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000005aa02: clc; lea rdx, [rip - 0x325a]; ret; 
0x0000000000016523: clc; mov byte ptr [rdi], 2; pop rcx; ret; 
0x0000000000016513: clc; mov byte ptr [rdi], 3; pop rcx; ret; 
0x0000000000017f32: clc; mov dword ptr [rdi], 0; mov dword ptr [rdi + 4], 0; mov dword ptr [rdi + 8], 0; mov dword ptr [rdi + 0xc], 0; ret; 
0x0000000000019aea: clc; mov qword ptr [rsp + 8], rax; lea rax, [rip + 0x3fee9]; call rax; 
0x000000000001c1f3: clc; mov qword ptr [rsp], rax; call qword ptr [rip + 0x5d3f2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001ad43: clc; mov qword ptr [rsp], rax; call qword ptr [rip + 0x5f1c2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000018cf3: clc; mov qword ptr [rsp], rax; call qword ptr [rip + 0x60fa2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000016e03: clc; mov qword ptr [rsp], rax; call qword ptr [rip + 0x629aa]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001dab6: clc; mov qword ptr [rsp], rax; mov qword ptr [rsp + 8], rax; add rsp, 0x10; ret; 
0x00000000000100b9: clc; mov qword ptr [rsp], rax; mov qword ptr [rsp + 8], rdx; add rsp, 0x10; ret; 
0x000000000001c872: clc; mov rcx, qword ptr [rsi]; mov qword ptr [rdi], rcx; mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; ret; 
0x0000000000026633: clc; mov rdx, r14; pop rbx; pop r14; pop r15; ret; 
0x0000000000054b76: clc; or dword ptr [rcx], edi; ret 0x830f; 
0x0000000000059a15: clc; or rax, rsi; ret; 
0x000000000004ccf1: clc; pop rcx; ret; 
0x000000000004045f: clc; push qword ptr [rbx + rax*2 - 0x77]; ret 0x2b8; 
0x000000000005b0b8: clc; push qword ptr [rcx + rdx + 0x4c]; mov edi, edi; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x00000000000226db: clc; ret; 
0x0000000000029927: clc; sub esi, dword ptr [rdi + 0x15]; lea rdi, [rip + 0x377ca]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000001e964: clc; test eax, 0x89a76c34; ret; 
0x000000000005a6d8: cld; add dword ptr [rax], eax; pop rcx; ret; 
0x00000000000197a2: cld; add eax, 0x448b4800; and al, 8; add rsp, 0x48; ret; 
0x000000000003e524: cld; dec dword ptr [rax - 0x77]; ret; 
0x000000000003e95b: cld; dec dword ptr [rdi]; or ecx, dword ptr [rax - 0x77]; ret; 
0x0000000000058c57: cld; or cl, byte ptr [rdi]; xchg eax, edx; ret; 
0x00000000000109a2: cli; add al, 0; lea rdx, [rip + 0x655a4]; lea rax, [rip - 0x5343]; mov esi, 0x49; call rax; 
0x000000000000f4ab: cli; add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x000000000001451c: cli; add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x0000000000014260: cli; add byte ptr [rax + 0xf], cl; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x58; ret; 
0x000000000002a2d7: cli; add byte ptr [rcx], al; add byte ptr [rax], al; setb al; and al, cl; ret; 
0x000000000003b447: cli; add dword ptr [rbp + 0x3f], esi; lea r15, [r12 - 1]; mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x000000000005b06e: cli; call qword ptr [rbx + 0x18]; 
0x000000000005f3c1: cli; inc dword ptr [rax]; endbr64; sub rsp, 8; add rsp, 8; ret; 
0x000000000005f3a2: cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000005e54b: cli; jmp rax; 
0x000000000005bea4: cli; jmp rcx; 
0x000000000002a6b7: cli; jne 0x2a658; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000002a715: cli; jne 0x2a87a; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000004f8c8: cli; lea rsi, [rip + 0x14a78]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000003498b: cli; push rsi; ja 0x349fe; movsxd rcx, dword ptr [r14 + rdx*4]; add rcx, r14; jmp rcx; 
0x00000000000567bf: cli; ret; 
0x000000000003cc62: cli; rol dword ptr [rbx], 1; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000005f3c7: cli; sub rsp, 8; add rsp, 8; ret; 
0x0000000000009003: cli; sub rsp, 8; mov rax, qword ptr [rip + 0x70979]; test rax, rax; je 0x9016; call rax; 
0x0000000000018cfb: clts; add byte ptr [rax - 0x75], cl; add al, 0x24; pop rcx; ret; 
0x000000000005a91a: cmc; add dword ptr [rax], eax; add rsp, 0x48; ret; 
0x000000000005a4e2: cmc; add dword ptr [rax], eax; pop rcx; ret; 
0x000000000003934f: cmc; and ebp, 3; lea rcx, [rip + 0x287f2]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x000000000000c077: cmc; fadd qword ptr [rsi]; add byte ptr [rcx + rax], ah; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000018617: cmc; or eax, 0x8b480006; and al, 0x58; add rsp, 0x3a8; ret; 
0x000000000001807f: cmc; sbb dword ptr [rsi], eax; add byte ptr [rax - 0x75], cl; and al, 0x28; add rsp, 0x478; ret; 
0x000000000004aa57: cmova ebx, eax; mov rax, rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004aa56: cmova rbx, rax; mov rax, rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000057ebc: cmovae eax, ecx; test rsi, rsi; je 0x57ee9; dec rsi; mov qword ptr [rdi], rsi; ret; 
0x000000000004f107: cmovae eax, edx; shl rax, 0x20; or rax, rcx; ret; 
0x0000000000057e54: cmovae ecx, eax; mov eax, 0x110000; lea rsi, [rip + 0xd485]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000004f106: cmovae rax, rdx; shl rax, 0x20; or rax, rcx; ret; 
0x000000000004aa00: cmovb eax, edi; cmp rsi, rdx; cmovb rax, rdi; mov rdx, rcx; ret; 
0x000000000004aa07: cmovb eax, edi; mov rdx, rcx; ret; 
0x000000000004a9ff: cmovb rax, rdi; cmp rsi, rdx; cmovb rax, rdi; mov rdx, rcx; ret; 
0x000000000004aa06: cmovb rax, rdi; mov rdx, rcx; ret; 
0x00000000000129d7: cmove eax, ecx; cmp rax, 0; jne 0x129ea; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x0000000000014263: cmove eax, ecx; cmp rax, 0; jne 0x14271; add rsp, 0x58; ret; 
0x000000000001451f: cmove eax, ecx; cmp rax, 0; jne 0x1452d; add rsp, 0x38; ret; 
0x00000000000151e8: cmove eax, ecx; cmp rax, 0; jne 0x151f6; add rsp, 0x38; ret; 
0x0000000000015204: cmove eax, ecx; cmp rax, 0; jne 0x15218; lea rax, [rip + 0x41a4c]; call rax; 
0x0000000000019f3f: cmove eax, ecx; cmp rax, 0; jne 0x19f58; mov rdi, qword ptr [rsp + 8]; lea rax, [rip - 0x3a34]; call rax; 
0x000000000001aa0d: cmove eax, ecx; cmp rax, 0; jne 0x1aa1b; add rsp, 0x18; ret; 
0x000000000001aa4a: cmove eax, ecx; cmp rax, 0; jne 0x1aa58; add rsp, 0x18; ret; 
0x000000000001abee: cmove eax, ecx; cmp rax, 0; jne 0x1abfc; add rsp, 0x18; ret; 
0x000000000001ac2d: cmove eax, ecx; cmp rax, 0; jne 0x1ac3b; add rsp, 0x18; ret; 
0x000000000001cd13: cmove eax, ecx; cmp rax, 0; jne 0x1cd30; mov rdi, qword ptr [rsp + 0x50]; lea rax, [rip + 0x58]; call rax; 
0x000000000000f4ae: cmove eax, ecx; cmp rax, 0; jne 0xf4bc; add rsp, 0x18; ret; 
0x000000000000f50d: cmove eax, ecx; cmp rax, 0; jne 0xf51b; add rsp, 0x18; ret; 
0x000000000000f599: cmove eax, ecx; cmp rax, 0; jne 0xf5a7; add rsp, 0x18; ret; 
0x000000000000fa08: cmove eax, ecx; cmp rax, 0; jne 0xfa16; add rsp, 0x38; ret; 
0x000000000000fa24: cmove eax, ecx; cmp rax, 0; jne 0xfa38; lea rax, [rip + 0x4722c]; call rax; 
0x0000000000019eb4: cmove eax, ecx; cmp rax, 1; jne 0x19ec7; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x000000000002aab5: cmove edx, eax; mov rax, rcx; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000059f83: cmove esi, eax; sete dl; or rdx, 2; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x000000000005a182: cmove esi, ecx; mov edx, 2; sub rdx, rax; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x00000000000129d6: cmove rax, rcx; cmp rax, 0; jne 0x129ea; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x0000000000014262: cmove rax, rcx; cmp rax, 0; jne 0x14271; add rsp, 0x58; ret; 
0x000000000001451e: cmove rax, rcx; cmp rax, 0; jne 0x1452d; add rsp, 0x38; ret; 
0x00000000000151e7: cmove rax, rcx; cmp rax, 0; jne 0x151f6; add rsp, 0x38; ret; 
0x0000000000015203: cmove rax, rcx; cmp rax, 0; jne 0x15218; lea rax, [rip + 0x41a4c]; call rax; 
0x0000000000019f3e: cmove rax, rcx; cmp rax, 0; jne 0x19f58; mov rdi, qword ptr [rsp + 8]; lea rax, [rip - 0x3a34]; call rax; 
0x000000000001aa0c: cmove rax, rcx; cmp rax, 0; jne 0x1aa1b; add rsp, 0x18; ret; 
0x000000000001aa49: cmove rax, rcx; cmp rax, 0; jne 0x1aa58; add rsp, 0x18; ret; 
0x000000000001abed: cmove rax, rcx; cmp rax, 0; jne 0x1abfc; add rsp, 0x18; ret; 
0x000000000001ac2c: cmove rax, rcx; cmp rax, 0; jne 0x1ac3b; add rsp, 0x18; ret; 
0x000000000001cd12: cmove rax, rcx; cmp rax, 0; jne 0x1cd30; mov rdi, qword ptr [rsp + 0x50]; lea rax, [rip + 0x58]; call rax; 
0x000000000000f4ad: cmove rax, rcx; cmp rax, 0; jne 0xf4bc; add rsp, 0x18; ret; 
0x000000000000f50c: cmove rax, rcx; cmp rax, 0; jne 0xf51b; add rsp, 0x18; ret; 
0x000000000000f598: cmove rax, rcx; cmp rax, 0; jne 0xf5a7; add rsp, 0x18; ret; 
0x000000000000fa07: cmove rax, rcx; cmp rax, 0; jne 0xfa16; add rsp, 0x38; ret; 
0x000000000000fa23: cmove rax, rcx; cmp rax, 0; jne 0xfa38; lea rax, [rip + 0x4722c]; call rax; 
0x0000000000019eb3: cmove rax, rcx; cmp rax, 1; jne 0x19ec7; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x000000000002aab4: cmove rdx, rax; mov rax, rcx; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000059f82: cmove rsi, rax; sete dl; or rdx, 2; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x000000000005a181: cmove rsi, rcx; mov edx, 2; sub rdx, rax; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x0000000000022c05: cmovl edi, dword ptr [rcx]; ret 0x860f; 
0x00000000000423b3: cmovne ecx, eax; call rcx; 
0x00000000000423b2: cmovne rcx, rax; call rcx; 
0x0000000000058f1b: cmovns edi, edi; ret 0xff48; 
0x0000000000056a27: cmovs ecx, dword ptr [rbx + 0x1ba087f]; add byte ptr [rax], al; add bh, bh; and eax, 0x22d51; ret; 
0x0000000000056a07: cmovs ecx, dword ptr [rbx + 0x1ba087f]; add byte ptr [rax], al; add bh, bh; and eax, 0x22d71; ret; 
0x0000000000020087: cmovs ecx, dword ptr [rbx + 0x1ba087f]; add byte ptr [rax], al; add bh, bh; and eax, 0x596f1; ret; 
0x000000000001fc17: cmovs ecx, dword ptr [rbx + 0x1ba087f]; add byte ptr [rax], al; add bh, bh; and eax, 0x59b61; ret; 
0x000000000002017e: cmovs ecx, dword ptr [rbx + 0x1ba107f]; add byte ptr [rax], al; add bh, bh; and eax, 0x595fa; ret; 
0x0000000000020128: cmovs ecx, dword ptr [rbx + 0x1ba107f]; add byte ptr [rax], al; add bh, bh; and eax, 0x59650; ret; 
0x0000000000016034: cmovs ecx, dword ptr [rbx + 0x4808244c]; mov dword ptr [rdi + 8], ecx; mov cl, byte ptr [rsp + 0x10]; mov byte ptr [rdi + 0x10], cl; add rsp, 0x18; ret; 
0x0000000000010dcd: cmovs ecx, dword ptr [rbx + 0x4808244c]; mov dword ptr [rdi + 8], ecx; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000001a9cf: cmovs ecx, dword ptr [rbx + 0x4808247c]; add edi, 8; call qword ptr [rip + 0x5f141]; add rsp, 0x18; ret; 
0x0000000000017415: cmovs ecx, dword ptr [rbx + 0x48102444]; mov edx, dword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000001e6ac: cmovs ecx, dword ptr [rbx + 0x4818244c]; mov dword ptr [rdi + 8], ecx; add rsp, 0x28; ret; 
0x0000000000010d26: cmovs ecx, dword ptr [rbx + 0x4818244c]; mov dword ptr [rdi + 8], ecx; mov rcx, qword ptr [rsp + 0x20]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x48; ret; 
0x0000000000053e87: cmovs edi, edi; ret 0x214c; 
0x000000000005f0c3: cmovs edi, edi; ret 0x3949; 
0x0000000000053da1: cmovs edi, edi; ret 0x8948; 
0x000000000000910a: cmp al, 0; jne 0x90f0; test dx, dx; setne al; pop rbx; ret; 
0x000000000002a4b1: cmp al, 0x10; add byte ptr [rdi], cl; test cl, bl; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x3948; 
0x0000000000027742: cmp al, 0x13; add byte ptr [rdi], cl; test byte ptr [rsi], dl; or dword ptr [rax], eax; add byte ptr [rcx - 1], cl; ret 0x394c; 
0x000000000001ab13: cmp al, 0x24; add rdi, 0x20; call qword ptr [rip + 0x5e9b1]; pop rax; ret; 
0x00000000000115b3: cmp al, 0x24; call 0x115e0; pop rcx; ret; 
0x000000000001e2a3: cmp al, 0x24; call 0x1c7a0; pop rax; ret; 
0x000000000001e2d3: cmp al, 0x24; call 0x1d220; pop rax; ret; 
0x000000000000ee63: cmp al, 0x24; call 0xeb70; pop rax; ret; 
0x000000000000f133: cmp al, 0x24; call 0xeca0; pop rax; ret; 
0x000000000000ef73: cmp al, 0x24; call 0xef90; pop rax; ret; 
0x000000000000f1d3: cmp al, 0x24; call 0xf170; pop rax; ret; 
0x000000000000ef63: cmp al, 0x24; call 0xf220; pop rax; ret; 
0x000000000000f1e3: cmp al, 0x24; call 0xf730; pop rax; ret; 
0x000000000000eed3: cmp al, 0x24; call 0xf790; pop rax; ret; 
0x000000000000f4d3: cmp al, 0x24; call 0xf7f0; pop rax; ret; 
0x000000000000eca3: cmp al, 0x24; call 0xf850; pop rax; ret; 
0x000000000000ecb3: cmp al, 0x24; call 0xf930; pop rax; ret; 
0x000000000001e233: cmp al, 0x24; call qword ptr [rip + 0x5b485]; pop rax; ret; 
0x000000000001e223: cmp al, 0x24; call qword ptr [rip + 0x5b5d5]; pop rax; ret; 
0x000000000001e2b3: cmp al, 0x24; call qword ptr [rip + 0x5b685]; pop rax; ret; 
0x000000000001e2c3: cmp al, 0x24; call qword ptr [rip + 0x5b7bd]; pop rax; ret; 
0x000000000001e203: cmp al, 0x24; call qword ptr [rip + 0x5b845]; pop rax; ret; 
0x000000000001e213: cmp al, 0x24; call qword ptr [rip + 0x5bb8d]; pop rax; ret; 
0x000000000001c943: cmp al, 0x24; call qword ptr [rip + 0x5d4b5]; pop rcx; ret; 
0x000000000001ab33: cmp al, 0x24; call qword ptr [rip + 0x5e88d]; pop rax; ret; 
0x000000000001ac53: cmp al, 0x24; call qword ptr [rip + 0x5e9ed]; pop rax; ret; 
0x000000000001aa83: cmp al, 0x24; call qword ptr [rip + 0x5ea85]; pop rax; ret; 
0x000000000001aa73: cmp al, 0x24; call qword ptr [rip + 0x5eefd]; pop rax; ret; 
0x000000000001ab03: cmp al, 0x24; call qword ptr [rip + 0x5f015]; pop rax; ret; 
0x0000000000019b1c: cmp al, 0x24; call qword ptr [rip + 0x5fe24]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000016df3: cmp al, 0x24; call qword ptr [rip + 0x62f35]; pop rax; ret; 
0x000000000000f483: cmp al, 0x24; call qword ptr [rip + 0x6a38d]; pop rax; ret; 
0x000000000000ef93: cmp al, 0x24; call qword ptr [rip + 0x6ae0d]; pop rax; ret; 
0x00000000000389ba: cmp al, 0x24; call rbx; 
0x0000000000019afd: cmp al, 0x24; lea rax, [rip + 0x100a]; call rax; 
0x0000000000010f86: cmp al, 0x24; lea rax, [rip + 0x5da1]; call rax; 
0x0000000000010c66: cmp al, 0x24; lea rax, [rip + 0x60c1]; call rax; 
0x000000000001e593: cmp al, 0x24; lea rax, [rip + 4]; call rax; 
0x000000000001e593: cmp al, 0x24; lea rax, [rip + 4]; call rax; pop rcx; ret; 
0x0000000000016dca: cmp al, 0x24; lea rsi, [rsp + 0x10]; call qword ptr [rip + 0x62949]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000019798: cmp al, 0x24; lea rsi, [rsp + 0x18]; call qword ptr [rip + 0x5fceb]; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x000000000001da93: cmp al, 0x24; mov ax, word ptr [rdi]; pop rcx; ret; 
0x000000000001daa3: cmp al, 0x24; mov eax, dword ptr [rdi + 0x80]; pop rcx; ret; 
0x000000000001c036: cmp al, 0x24; mov eax, dword ptr [rsp]; pop rcx; ret; 
0x000000000001c7a3: cmp al, 0x24; mov edi, dword ptr [rdi]; call qword ptr [rip + 0x5d063]; pop rax; ret; 
0x000000000001bdb9: cmp al, 0x24; mov qword ptr [rsp + 0x40], rdi; mov qword ptr [rsp + 8], rdi; mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x3c11f]; call rax; 
0x0000000000017c26: cmp al, 0x24; mov qword ptr [rsp + 8], rsi; lea rax, [rip - 0x1774]; call rax; 
0x0000000000017c26: cmp al, 0x24; mov qword ptr [rsp + 8], rsi; lea rax, [rip - 0x1774]; call rax; add rsp, 0x18; ret; 
0x000000000001e5c6: cmp al, 0x24; mov qword ptr [rsp + 8], rsi; mov qword ptr [rsp + 0x10], rdx; add rsp, 0x18; ret; 
0x0000000000013a20: cmp al, 0x24; mov qword ptr [rsp + 8], rsi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000164d0: cmp al, 0x24; mov qword ptr [rsp + 8], rsi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000005a18f: cmp al, 0x24; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x000000000005a1b4: cmp al, 0x24; mov rax, qword ptr [r12 + 8]; lea rsi, [rip + 0xb561]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x00000000000137f6: cmp al, 0x24; mov rax, qword ptr [rdi + 8]; mov qword ptr [rsp + 8], rax; add rsp, 0x10; ret; 
0x000000000001e365: cmp al, 0x24; mov rax, qword ptr [rsp]; add rsp, 0x20; ret; 
0x00000000000184b3: cmp al, 0x24; mov rdi, qword ptr [rdi]; call qword ptr [rip + 0x61b2a]; pop rax; ret; 
0x0000000000037da3: cmp al, 0x24; mov rdi, rsp; call qword ptr [rip + 0x41a4a]; pop rcx; ret; 
0x000000000000eee3: cmp al, 0x24; pop rax; ret; 
0x000000000003befc: cmp al, 0x2b; call rax; 
0x00000000000454ce: cmp al, 0x40; mov esi, 8; mov rdi, r15; lea rbx, [rip - 0x3078f]; call rbx; 
0x0000000000043925: cmp al, 0x48; lea ebp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002a9e3: cmp al, 0x4b; jne 0x2aa65; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x20; ret; 
0x000000000003d3d5: cmp al, 0x91; add rdi, rcx; jmp rdi; 
0x000000000002b021: cmp al, 0x98; add rdi, r8; jmp rdi; 
0x00000000000505ea: cmp al, 0xbb; add rdi, rbx; jmp rdi; 
0x000000000005c190: cmp al, 0xdd; add dword ptr [rax], eax; pop rcx; ret; 
0x0000000000026f16: cmp al, 0xf; xchg eax, esp; ret 0x8d48; 
0x000000000000ad6b: cmp al, 1; add byte ptr [rax], al; mov ecx, eax; movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x000000000003623c: cmp al, 4; add byte ptr [rdi], cl; or ebp, ebx; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003dd53: cmp al, byte ptr [r15 + 0x11]; sete al; pop rbx; pop r14; pop r15; ret; 
0x000000000003dd54: cmp al, byte ptr [rdi + 0x11]; sete al; pop rbx; pop r14; pop r15; ret; 
0x0000000000015ff4: cmp al, byte ptr [rsi]; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; ret; 
0x0000000000059b14: cmp bh, bh; adc eax, 0x2032d; add rsp, 0x68; ret; 
0x000000000001e326: cmp bh, bh; adc eax, 0x5b0db; add rsp, 0x28; ret; 
0x000000000003e522: cmp bh, byte ptr [rbx - 0x76b70004]; ret; 
0x00000000000091b6: cmp bh, byte ptr [rcx + 2]; jne 0x9170; cmp r11, 3; jne 0x9170; pop rbx; ret; 
0x0000000000035e52: cmp bh, byte ptr [rdi]; add al, 0; add rsp, 0x10; pop rbx; ret; 
0x0000000000046379: cmp bh, dh; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000039e61: cmp bl, 6; je 0x39f6e; movzx ecx, byte ptr [r10]; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x000000000001e42b: cmp bl, al; lea rax, [rip - 0x12c94]; call rax; 
0x000000000001a90b: cmp bl, al; lea rax, [rip - 0xf174]; call rax; 
0x0000000000010f7e: cmp bl, al; sub rsp, 0x28; mov qword ptr [rsp], rdi; lea rax, [rip + 0x5da1]; call rax; 
0x000000000005a9e2: cmp byte ptr [r11], r8b; mov qword ptr [rdi + 0x10], 0; mov qword ptr [rdi + 0x20], 0; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000005b085: cmp byte ptr [r13 + 0x31], r8b; in al, 0xeb; test eax, 0x48ff894c; mov esi, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x000000000002b133: cmp byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000129f8: cmp byte ptr [rax - 0x73], cl; adc eax, 0x635b0; lea rax, [rip + 0x47a09]; lea rsi, [rsp + 0x38]; call rax; 
0x000000000001a551: cmp byte ptr [rax - 0x73], cl; add eax, 0x417; call rax; 
0x000000000001e303: cmp byte ptr [rax - 0x73], cl; add eax, 0xfffff555; call rax; 
0x000000000001a274: cmp byte ptr [rax - 0x73], cl; je 0x1a29d; adc byte ptr [rax - 0x73], cl; push rsp; and al, 0x50; call rax; 
0x000000000000d4a8: cmp byte ptr [rax - 0x75], cl; add eax, 0x6c310; call rax; 
0x0000000000011579: cmp byte ptr [rax - 0x75], cl; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; add rsp, 0xb8; ret; 
0x0000000000015ef5: cmp byte ptr [rax - 0x75], cl; and al, 0x38; mov byte ptr [rax], 0; add rsp, 0x40; ret; 
0x0000000000019efd: cmp byte ptr [rax - 0x75], cl; and al, 0x40; lea rax, [rip - 0x3fba]; lea rdi, [rsp + 0x20]; call rax; 
0x00000000000187b5: cmp byte ptr [rax - 0x75], cl; je 0x187de; cmp byte ptr [rax - 0x75], cl; jl 0x187e3; lea rax, [rip + 0x1fa9]; call rax; 
0x00000000000187ba: cmp byte ptr [rax - 0x75], cl; jl 0x187e3; lea rax, [rip + 0x1fa9]; call rax; 
0x000000000001ab55: cmp byte ptr [rax - 0x75], cl; jo 0x1ab62; call qword ptr [rip + 0x5f218]; add rsp, 0x28; ret; 
0x000000000001e1a6: cmp byte ptr [rax - 0x75], cl; jo 0x1e1b3; lea rax, [rip - 0xac2]; call rax; 
0x000000000001e1cd: cmp byte ptr [rax - 0x75], cl; jo 0x1e1da; call qword ptr [rip + 0x5bcb0]; add rsp, 0x28; ret; 
0x000000000000e26a: cmp byte ptr [rax - 0x75], cl; jo 0xe277; call 0xbc70; pop rcx; ret; 
0x000000000000ed09: cmp byte ptr [rax - 0x75], cl; jo 0xed16; call 0x12540; add rsp, 0x28; ret; 
0x000000000000f155: cmp byte ptr [rax - 0x75], cl; jo 0xf162; call 0x126b0; add rsp, 0x28; ret; 
0x000000000005ef66: cmp byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x73], cl; xor eax, 0x67ae; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005dde5: cmp byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x73], cl; xor eax, 0x792f; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ddc9: cmp byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x73], cl; xor eax, 0x794c; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005b6c1: cmp byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x73], cl; xor eax, 0xa053; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a104: cmp byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x73], cl; xor eax, 0xb610; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a42e: cmp byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x73], cl; xor eax, 0xb2ea; mov edx, 1; jmp rax; 
0x000000000001004b: cmp byte ptr [rax - 0x75], cl; push rsp; and al, 0x40; add rsp, 0xc8; ret; 
0x000000000000f77f: cmp byte ptr [rax - 0x77], cl; and al, 0x40; call 0x11a00; add rsp, 0x48; ret; 
0x0000000000015d40: cmp byte ptr [rax - 0x77], cl; and al, 0x40; call 0x1b880; add rsp, 0x48; ret; 
0x000000000001c750: cmp byte ptr [rax - 0x77], cl; and al, 0x40; call 0x1d9b0; add rsp, 0x48; ret; 
0x000000000000bcae: cmp byte ptr [rax - 0x77], cl; and al, 0x40; mov qword ptr [rsp + 0x48], rdx; add rsp, 0x50; ret; 
0x0000000000010041: cmp byte ptr [rax - 0x77], cl; and al, 0x40; mov rax, qword ptr [rsp + 0x38]; mov rdx, qword ptr [rsp + 0x40]; add rsp, 0xc8; ret; 
0x000000000001be33: cmp byte ptr [rax - 0x77], cl; and al, 0x78; mov qword ptr [rsp + 0x80], rdx; add rsp, 0x88; ret; 
0x0000000000019683: cmp byte ptr [rax - 0x77], cl; jl 0x196ac; or byte ptr [rax - 0x73], cl; add eax, 0xffffd6a0; call rax; 
0x00000000000165a9: cmp byte ptr [rax - 0x77], cl; or byte ptr [rdx - 0x77bfdbb4], cl; adc byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x50; ret; 
0x0000000000017323: cmp byte ptr [rax - 0x77], cl; push rsp; and al, 0x40; add rsp, 0x48; ret; 
0x00000000000315bb: cmp byte ptr [rax - 1], cl; ret 0x8948; 
0x000000000001432f: cmp byte ptr [rax], al; add byte ptr [rax], al; call 0x9078; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x58; ret; 
0x0000000000039b89: cmp byte ptr [rax], cl; sete al; pop rcx; ret; 
0x000000000005b086: cmp byte ptr [rbp + 0x31], al; in al, 0xeb; test eax, 0x48ff894c; mov esi, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x0000000000043c83: cmp byte ptr [rbp + 1], cl; ret 0xff31; 
0x0000000000009c15: cmp byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000000a199: cmp byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x000000000000fb07: cmp byte ptr [rbx + 0x48402454], cl; add esp, 0x88; ret; 
0x000000000005a9e3: cmp byte ptr [rbx], al; mov qword ptr [rdi + 0x10], 0; mov qword ptr [rdi + 0x20], 0; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000000fafe: cmp byte ptr [rcx + 0x48402444], cl; mov eax, dword ptr [rsp + 0x38]; mov edx, dword ptr [rsp + 0x40]; add rsp, 0x88; ret; 
0x000000000001dddf: cmp byte ptr [rcx + 0x48582444], cl; lea esi, [rsp + 0x40]; call qword ptr [rip + 0x5bbc1]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x0000000000053731: cmp byte ptr [rcx + rcx*4 - 9], cl; call qword ptr [rip + 0x25c75]; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x0000000000021545: cmp byte ptr [rcx - 0x7d], cl; ret 0xebe0; 
0x0000000000021751: cmp byte ptr [rcx - 0x7d], cl; ret 0xebf0; 
0x000000000001cb02: cmp byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x000000000005a420: cmp byte ptr [rdi + 8], 0; je 0x5a429; mov al, 1; ret; 
0x0000000000039b7b: cmp byte ptr [rdi], 0x2e; je 0x39b89; xor eax, eax; pop rcx; ret; 
0x000000000001647f: cmp byte ptr [rdi], cl; sub dword ptr [rsp + 0x20], eax; lea rax, [rip + 0x3b14]; lea rdx, [rsp + 0x20]; call rax; 
0x000000000001a2fb: cmp byte ptr [rdi], cl; sub dword ptr [rsp + 0x70], eax; lea rax, [rip - 0x2d98]; lea rsi, [rsp + 0x70]; call rax; 
0x0000000000010c39: cmp byte ptr [rdx + 0xd0], bh; call 0x9078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x000000000001f963: cmp byte ptr [rdx + 8], 0xff; and eax, 0x59e19; ret; 
0x0000000000024cb4: cmp byte ptr [rip - 0x7cb80000], al; sar al, 0x75; ret 0x280f; 
0x0000000000024d74: cmp byte ptr [rip - 0x7cb80000], al; sar al, 0x75; ret 0xc031; 
0x0000000000024e04: cmp byte ptr [rip - 0x7cb80000], al; sar eax, 0x75; ret 0xc749; 
0x000000000004d3f7: cmp byte ptr [rsi + rax], 0xbf; jle 0x4d412; add rsi, rax; mov rax, rsi; pop rcx; ret; 
0x000000000000a6d9: cmp byte ptr [rsp + rsi*2], al; ret; 
0x000000000004f0e7: cmp cl, 0x1a; jae 0x4f0f6; xor ecx, ecx; shl rax, 0x20; or rax, rcx; ret; 
0x000000000002a68b: cmp cl, 0x4b; jne 0x2a5fa; mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000002a824: cmp cl, 0x4b; jne 0x2a835; mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000003dcea: cmp cl, bl; jne 0x3dd74; lea rax, [rip + 0x23f7b]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000003c50c: cmp cl, byte ptr [rcx + rcx*4 - 1]; call qword ptr [rip + 0x3d232]; mov r15, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x00000000000233c1: cmp cl, byte ptr [rcx - 0x7d]; sal al, 0x84; ror byte ptr [rdi], 0x95; ret; 
0x0000000000026a16: cmp cl, byte ptr [rdi]; xchg eax, esp; ret 0x8948; 
0x0000000000020ff7: cmp cl, ch; xor al, 1; add byte ptr [rax], al; nop dword ptr [rax]; movzx edi, al; call rbx; 
0x0000000000015efa: cmp dh, al; add byte ptr [rax], al; add rsp, 0x40; ret; 
0x00000000000091b5: cmp dil, byte ptr [r9 + 2]; jne 0x9170; cmp r11, 3; jne 0x9170; pop rbx; ret; 
0x000000000002a6b6: cmp dl, 0x4b; jne 0x2a658; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000002a714: cmp dl, 0x4b; jne 0x2a87a; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x00000000000207ba: cmp dl, byte ptr [rbp + rax + 0x5c415b00]; pop r13; pop r14; pop r15; ret; 
0x000000000003260c: cmp dl, byte ptr [rip - 0x72b80000]; adc eax, 0x2f275; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000009108: cmp dword ptr [r8 + rax], edi; jne 0x90f0; test dx, dx; setne al; pop rbx; ret; 
0x0000000000009109: cmp dword ptr [rax + rax], edi; jne 0x90f0; test dx, dx; setne al; pop rbx; ret; 
0x00000000000395fe: cmp dword ptr [rax - 0x6bf0cfc1], eax; ret; 
0x000000000001691d: cmp dword ptr [rax - 0x73], ecx; add eax, 0xffff4e7b; call rax; 
0x000000000000a4de: cmp dword ptr [rax - 8], 0; sete al; pop rcx; ret; 
0x000000000005ecfb: cmp dword ptr [rax], eax; add byte ptr [rdx + 4], bh; add rsp, 0x28; pop rbx; pop r14; jmp rax; 
0x000000000005ec49: cmp dword ptr [rax], eax; add byte ptr [rdx + 4], bh; call qword ptr [rax + 0x18]; 
0x000000000003cf30: cmp dword ptr [rbx + 0x10], 0; mov rax, qword ptr [r14 + 0x20]; jne 0x3d0be; mov rdi, r15; call rax; 
0x000000000002080f: cmp dword ptr [rbx + 0x10], 2; jae 0x20835; pop rbx; ret; 
0x0000000000020809: cmp dword ptr [rbx + 8], 2; jae 0x20826; cmp dword ptr [rbx + 0x10], 2; jae 0x20835; pop rbx; ret; 
0x000000000000efaf: cmp dword ptr [rdi], 0; jne 0xefb9; add rsp, 0x18; ret; 
0x0000000000020840: cmp dword ptr [rdi], 2; jae 0x20846; ret; 
0x000000000001aa46: cmp dword ptr [rdi], 3; cmove rax, rcx; cmp rax, 0; jne 0x1aa58; add rsp, 0x18; ret; 
0x000000000000f595: cmp dword ptr [rdi], 4; cmove rax, rcx; cmp rax, 0; jne 0xf5a7; add rsp, 0x18; ret; 
0x00000000000270c6: cmp dword ptr [rdi], ecx; xchg eax, esp; ret 0x8948; 
0x000000000005b0b7: cmp eax, -1; je 0x5b0cd; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000003562c: cmp eax, -1; jne 0x356f8; call rbx; 
0x00000000000129db: cmp eax, 0; jne 0x129ea; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x00000000000141e0: cmp eax, 0; jne 0x141ea; add rsp, 0x58; ret; 
0x0000000000014267: cmp eax, 0; jne 0x14271; add rsp, 0x58; ret; 
0x0000000000014523: cmp eax, 0; jne 0x1452d; add rsp, 0x38; ret; 
0x00000000000151ec: cmp eax, 0; jne 0x151f6; add rsp, 0x38; ret; 
0x0000000000015208: cmp eax, 0; jne 0x15218; lea rax, [rip + 0x41a4c]; call rax; 
0x0000000000019f43: cmp eax, 0; jne 0x19f58; mov rdi, qword ptr [rsp + 8]; lea rax, [rip - 0x3a34]; call rax; 
0x000000000001aa11: cmp eax, 0; jne 0x1aa1b; add rsp, 0x18; ret; 
0x000000000001aa4e: cmp eax, 0; jne 0x1aa58; add rsp, 0x18; ret; 
0x000000000001abf2: cmp eax, 0; jne 0x1abfc; add rsp, 0x18; ret; 
0x000000000001ac31: cmp eax, 0; jne 0x1ac3b; add rsp, 0x18; ret; 
0x000000000001cd17: cmp eax, 0; jne 0x1cd30; mov rdi, qword ptr [rsp + 0x50]; lea rax, [rip + 0x58]; call rax; 
0x000000000000f4b2: cmp eax, 0; jne 0xf4bc; add rsp, 0x18; ret; 
0x000000000000f511: cmp eax, 0; jne 0xf51b; add rsp, 0x18; ret; 
0x000000000000f59d: cmp eax, 0; jne 0xf5a7; add rsp, 0x18; ret; 
0x000000000000fa0c: cmp eax, 0; jne 0xfa16; add rsp, 0x38; ret; 
0x000000000000fa28: cmp eax, 0; jne 0xfa38; lea rax, [rip + 0x4722c]; call rax; 
0x00000000000301ff: cmp eax, 0x18; ja 0x300ef; lea rcx, [rip + 0x31511]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000301ab: cmp eax, 0x1a; ja 0x300ef; lea rcx, [rip + 0x315c9]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000039908: cmp eax, 0x2825f; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x0000000000029926: cmp eax, 0x2b; ja 0x29940; lea rdi, [rip + 0x377ca]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000003188f: cmp eax, 0x2ff5c; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x00000000000308e3: cmp eax, 0x30f64; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000002992d: cmp eax, 0x377ca; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000001cb9a: cmp eax, 0x440dd; lea rdx, [rip + 0x5981a]; lea rax, [rip - 0x1153d]; mov esi, 0x28; call rax; 
0x000000000001c0ec: cmp eax, 0x44b5f; lea rdx, [rip + 0x5a2b0]; lea rax, [rip - 0x10a8f]; mov esi, 0x19; call rax; 
0x00000000000188c7: cmp eax, 0x480005d9; lea eax, [rip - 0x1952]; lea rsi, [rsp + 0x190]; call rax; 
0x000000000001acef: cmp eax, 0x48fffffc; mov eax, dword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000003bff1: cmp eax, 0x49de8949; dec esi; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020e8b: cmp eax, 0x49fe894d; dec esi; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x0000000000015ddc: cmp eax, 0x4aa0f; lea rdx, [rip + 0x60320]; lea rax, [rip - 0xa77f]; mov esi, 0x19; call rax; 
0x0000000000014d1f: cmp eax, 0x4b9d5; lea rdx, [rip + 0x613c5]; lea rax, [rip - 0x96c2]; mov esi, 0x49; call rax; 
0x0000000000014c28: cmp eax, 0x4bacc; lea rdx, [rip + 0x614bc]; lea rax, [rip - 0x95cb]; mov esi, 0x49; call rax; 
0x0000000000013072: cmp eax, 0x4d57a; lea rdx, [rip + 0x62f6a]; lea rax, [rip - 0x7a15]; mov esi, 0x2b; call rax; 
0x0000000000012b53: cmp eax, 0x4da99; lea rdx, [rip + 0x63471]; lea rax, [rip - 0x74f6]; mov esi, 0x2b; call rax; 
0x00000000000113ec: cmp eax, 0x4f18f; lea rdx, [rip + 0x64b70]; lea rax, [rip - 0x5d8f]; mov esi, 0x19; call rax; 
0x000000000001134a: cmp eax, 0x4f1b5; lea rax, [rip - 0x5ce6]; mov esi, 0x23; call rax; 
0x00000000000109a0: cmp eax, 0x4fac5; lea rdx, [rip + 0x655a4]; lea rax, [rip - 0x5343]; mov esi, 0x49; call rax; 
0x00000000000108ad: cmp eax, 0x4fbb8; lea rdx, [rip + 0x65697]; lea rax, [rip - 0x5250]; mov esi, 0x49; call rax; 
0x00000000000105b0: cmp eax, 0x4feb5; lea rdx, [rip + 0x65994]; lea rax, [rip - 0x4f53]; mov esi, 0x49; call rax; 
0x00000000000104bd: cmp eax, 0x4ffa8; lea rdx, [rip + 0x65a87]; lea rax, [rip - 0x4e60]; mov esi, 0x49; call rax; 
0x0000000000010089: cmp eax, 0x50342; lea rdx, [rip + 0x65ea3]; lea rax, [rip - 0x4a2c]; mov esi, 0x49; call rax; 
0x000000000000fb16: cmp eax, 0x5081b; lea rdx, [rip + 0x663ce]; lea rax, [rip - 0x44b9]; mov esi, 0x49; call rax; 
0x000000000000c77d: cmp eax, 0x538fe; lea rdx, [rip + 0x693ef]; lea rax, [rip - 0x1120]; mov esi, 0x1c; call rax; 
0x000000000000bc3d: cmp eax, 0x6e3be; call 0x9080; call 0xbbb0; mov byte ptr [rip + 0x6e3e5], 1; pop rbp; ret; 
0x00000000000207e2: cmp eax, 0x80000000; je 0x207ea; ret; 
0x000000000001f047: cmp eax, 0x890005a7; call 0x28c67399; pop rbx; pop rbp; ret; 
0x000000000000dd6f: cmp eax, 0xebffffe7; add byte ptr [rax - 0x73], cl; add eax, 0x2a844; lea rdi, [rsp + 0x98]; call rax; 
0x00000000000365a7: cmp eax, 0xf000435; or ecx, dword ptr [rax - 0x77]; ret; 
0x0000000000038e3d: cmp eax, 0xff7b8d4c; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000000e0b2: cmp eax, 0xfffffc29; xor ecx, ecx; call 0xfb80; pop rcx; ret; 
0x0000000000019eb8: cmp eax, 1; jne 0x19ec7; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x000000000001f3a1: cmp eax, 1; jne 0x1f3e6; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001ffbd: cmp eax, 1; jne 0x20002; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020a24: cmp eax, 1; jne 0x20a69; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020ac2: cmp eax, 1; jne 0x20b07; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020cd2: cmp eax, 1; jne 0x20d17; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020de1: cmp eax, 1; jne 0x20e26; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003785e: cmp eax, 1; jne 0x3789e; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000037fca: cmp eax, 1; jne 0x3800d; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000038985: cmp eax, 1; jne 0x3886f; lea r12, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000039091: cmp eax, 1; jne 0x390d1; lea r14, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x00000000000391cb: cmp eax, 1; jne 0x3920b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003ad5b: cmp eax, 1; jne 0x3ad9b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003ae1b: cmp eax, 1; jne 0x3ae5b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003ec58: cmp eax, 1; jne 0x3ecaf; lea rbx, [r15 - 1]; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x0000000000043921: cmp eax, 1; jne 0x43962; lea rbp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000043a78: cmp eax, 1; jne 0x43ab8; lea r14, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000047906: cmp eax, 1; jne 0x444d6; lea rbx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000048ded: cmp eax, 1; jne 0x48e2d; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000378e7: cmp eax, 4; jne 0x378f5; lea rax, [rip + 0x4275d]; pop rcx; ret; 
0x0000000000037d77: cmp eax, 4; jne 0x37d85; lea rax, [rip + 0x42305]; pop rcx; ret; 
0x0000000000009f7a: cmp eax, 4; jne 0x9f84; add rsp, 0x28; ret; 
0x0000000000009fca: cmp eax, 4; jne 0x9fd4; add rsp, 0x28; ret; 
0x000000000000a01a: cmp eax, 4; jne 0xa024; add rsp, 0x28; ret; 
0x000000000002a258: cmp eax, 5; ja 0x2a277; lea rcx, [rip + 0x37218]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a2b8: cmp eax, 5; ja 0x2a2d3; lea rcx, [rip + 0x371d0]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a328: cmp eax, 5; ja 0x2a343; lea rcx, [rip + 0x37178]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029ea4: cmp eax, 7; ja 0x2a232; lea rcx, [rip + 0x375a8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a6d9: cmp eax, 7; ja 0x2a747; lea rcx, [rip + 0x36df7]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a8a9: cmp eax, 7; ja 0x2a90e; lea rcx, [rip + 0x36c47]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000032715: cmp eax, 7; ja 0x32450; lea rcx, [rip + 0x2f187]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003258d: cmp eax, 7; ja 0x33b3c; lea rcx, [rip + 0x2f2cf]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000005c959: cmp eax, dword ptr [rax + rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000000f989: cmp eax, dword ptr [rax]; add bl, ch; sbb eax, 0x58c48348; ret; 
0x0000000000016489: cmp eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; push rsp; and al, 0x20; call rax; 
0x000000000000aafb: cmp eax, dword ptr [rcx]; add byte ptr [rax], al; mov ecx, eax; movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x0000000000011ab1: cmp eax, dword ptr [rsi]; setl al; and al, 1; movzx eax, al; add rsp, 0x10; ret; 
0x000000000004a9fd: cmp eax, ecx; cmovb rax, rdi; cmp rsi, rdx; cmovb rax, rdi; mov rdx, rcx; ret; 
0x000000000004cd45: cmp eax, ecx; jae 0x4cd52; mov qword ptr [rdi + 0x18], 0; ret; 
0x0000000000011b81: cmp eax, ecx; seta al; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x000000000000bbbf: cmp eax, edi; je 0xbbd8; mov rax, qword ptr [rip + 0x6d8a6]; test rax, rax; je 0xbbd8; jmp rax; 
0x000000000005ecd4: cmp ebp, dword ptr [rax]; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x00000000000091bc: cmp ebx, 3; jne 0x9170; pop rbx; ret; 
0x00000000000275e0: cmp ecx, 0x25; ja 0x27613; lea rax, [rip + 0x39944]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000002828c: cmp ecx, 0x2b; ja 0x28349; movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x0000000000038e39: cmp ecx, 1; jne 0x38e7b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000038f39: cmp ecx, 1; jne 0x38f7b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000318ea: cmp ecx, 5; ja 0x3182b; lea rdx, [rip + 0x2ff0a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000318c4: cmp ecx, 5; ja 0x3182b; lea rdx, [rip + 0x2ff48]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000318a2: cmp ecx, 5; ja 0x3182b; lea rdx, [rip + 0x2ff86]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000032607: cmp ecx, 7; ja 0x33b4a; lea rdx, [rip + 0x2f275]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000039c49: cmp ecx, dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000000c189: cmp ecx, dword ptr [rax - 0x75]; and al, 8; mov qword ptr [rsp + 0x10], rax; add rsp, 0x28; ret; 
0x000000000005ec40: cmp ecx, dword ptr [rax - 0x75]; or byte ptr [r8 - 0x73], cl; xor eax, 0x39e0; mov edx, 4; call qword ptr [rax + 0x18]; 
0x00000000000582e7: cmp ecx, dword ptr [rax - 0x75]; or byte ptr [r8 - 0x73], cl; xor eax, 0xd30b; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000005822e: cmp ecx, dword ptr [rax - 0x75]; or byte ptr [r8 - 0x73], cl; xor eax, 0xd3c2; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000037862: cmp ecx, dword ptr [rbp + rcx*4 + 0x73]; dec dword ptr [rax - 0x75]; jnp 0x3786a; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000039095: cmp ecx, dword ptr [rbp + rcx*4 + 0x75]; dec dword ptr [rax - 0x75]; jge 0x3909d; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000043a7c: cmp ecx, dword ptr [rbp + rcx*4 + 0x75]; dec dword ptr [rax - 0x75]; jge 0x43a84; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x00000000000391cf: cmp ecx, dword ptr [rbp + rcx*4 + 0x7b]; dec dword ptr [rax - 0x75]; jnp 0x391d7; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003ad5f: cmp ecx, dword ptr [rbp + rcx*4 + 0x7b]; dec dword ptr [rax - 0x75]; jnp 0x3ad67; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003ae1f: cmp ecx, dword ptr [rbp + rcx*4 + 0x7b]; dec dword ptr [rax - 0x75]; jnp 0x3ae27; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000048df1: cmp ecx, dword ptr [rbp + rcx*4 + 0x7b]; dec dword ptr [rax - 0x75]; jnp 0x48df9; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000026c86: cmp ecx, dword ptr [rdi]; xchg eax, esp; ret 0x8948; 
0x000000000004aab5: cmp ecx, eax; jb 0x4aaa0; ret; 
0x000000000005f0c8: cmp ecx, edx; jne 0x5f0b0; mov rax, r9; and al, 1; pop rcx; ret; 
0x0000000000053f0a: cmp ecx, esi; jae 0x5402c; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x00000000000505d8: cmp edi, 0x17; ja 0x50af9; lea rbx, [rip + 0x13e00]; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000005dc41: cmp edi, 0x20; jae 0x5dc4a; xor eax, eax; pop rcx; ret; 
0x000000000005efa5: cmp edi, 0x21; setb al; or al, cl; ret; 
0x000000000005dc4c: cmp edi, 0x7f; jae 0x5dc53; pop rcx; ret; 
0x000000000005dd44: cmp edi, 0xfffd01f0; setb al; pop rcx; ret; 
0x000000000005f1a9: cmp edi, eax; sbb rsi, r9; sbb r10, -1; mov rax, r10; mov rdx, r11; ret; 
0x0000000000039b62: cmp edi, esi; jne 0x39b6a; xor eax, eax; pop rcx; ret; 
0x000000000001425f: cmp edx, 0; cmove rax, rcx; cmp rax, 0; jne 0x14271; add rsp, 0x58; ret; 
0x000000000001451b: cmp edx, 0; cmove rax, rcx; cmp rax, 0; jne 0x1452d; add rsp, 0x38; ret; 
0x000000000001aa09: cmp edx, 0; cmove rax, rcx; cmp rax, 0; jne 0x1aa1b; add rsp, 0x18; ret; 
0x000000000001abea: cmp edx, 0; cmove rax, rcx; cmp rax, 0; jne 0x1abfc; add rsp, 0x18; ret; 
0x000000000001ac29: cmp edx, 0; cmove rax, rcx; cmp rax, 0; jne 0x1ac3b; add rsp, 0x18; ret; 
0x000000000000f4aa: cmp edx, 0; cmove rax, rcx; cmp rax, 0; jne 0xf4bc; add rsp, 0x18; ret; 
0x000000000000f509: cmp edx, 0; cmove rax, rcx; cmp rax, 0; jne 0xf51b; add rsp, 0x18; ret; 
0x000000000002a2d6: cmp edx, 0x100; setb al; and al, cl; ret; 
0x000000000003498a: cmp edx, 0x56; ja 0x349fe; movsxd rcx, dword ptr [r14 + rdx*4]; add rcx, r14; jmp rcx; 
0x000000000003b446: cmp edx, 1; jne 0x3b48a; lea r15, [r12 - 1]; mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x000000000004ccf9: cmp edx, 6; jae 0x4cd07; add rdi, 0x10; mov rax, rdi; pop rcx; ret; 
0x000000000004cc89: cmp edx, dword ptr [rax]; inc qword ptr [rbx + 8]; add rsp, 0x18; pop rbx; pop r14; ret; 
0x00000000000540a3: cmp edx, esi; jae 0x54195; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + r10], al; pop rax; ret; 
0x000000000004cd87: cmp esi, 2; sete al; ret; 
0x00000000000268d5: cmp esi, eax; jne 0x268f0; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000269af: cmp esi, eax; jne 0x269ca; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026a7c: cmp esi, eax; jne 0x26a97; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026b3e: cmp esi, eax; jne 0x26b59; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026c1b: cmp esi, eax; jne 0x26c36; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026cec: cmp esi, eax; jne 0x26d07; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026dca: cmp esi, eax; jne 0x26de5; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026eab: cmp esi, eax; jne 0x26ec6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026f7d: cmp esi, eax; jne 0x26f98; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000002705b: cmp esi, eax; jne 0x27076; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000002712c: cmp esi, eax; jne 0x27147; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000271fc: cmp esi, eax; jne 0x27217; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004ad5e: cmp esi, eax; jne 0x4ad79; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004b28c: cmp esi, eax; jne 0x4b2a7; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004b35f: cmp esi, eax; jne 0x4b37a; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000056b9e: cmp esi, eax; jne 0x56bb9; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000009c0e: cmp esi, eax; jne 0x9c29; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000009ceb: cmp esi, eax; jne 0x9d06; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000009dbc: cmp esi, eax; jne 0x9dd7; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000b47e: cmp esi, eax; jne 0xb499; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000b59e: cmp esi, eax; jne 0xb5b9; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000ef01: cmp esi, ebx; add byte ptr [rax], al; call rax; 
0x000000000005cf43: cmp esi, edi; jne 0x5cf30; ret; 
0x000000000004aa04: cmp esi, edx; cmovb rax, rdi; mov rdx, rcx; ret; 
0x000000000000a4dd: cmp qword ptr [rax - 8], 0; sete al; pop rcx; ret; 
0x000000000003cf2f: cmp qword ptr [rbx + 0x10], 0; mov rax, qword ptr [r14 + 0x20]; jne 0x3d0be; mov rdi, r15; call rax; 
0x000000000000efae: cmp qword ptr [rdi], 0; jne 0xefb9; add rsp, 0x18; ret; 
0x00000000000540a2: cmp r10, rsi; jae 0x54195; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + r10], al; pop rax; ret; 
0x000000000004cc88: cmp r10d, dword ptr [rax]; inc qword ptr [rbx + 8]; add rsp, 0x18; pop rbx; pop r14; ret; 
0x00000000000091bb: cmp r11, 3; jne 0x9170; pop rbx; ret; 
0x0000000000039e60: cmp r11b, 6; je 0x39f6e; movzx ecx, byte ptr [r10]; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x000000000004a9fc: cmp r8, rcx; cmovb rax, rdi; cmp rsi, rdx; cmovb rax, rdi; mov rdx, rcx; ret; 
0x000000000005f0c7: cmp r9, rdx; jne 0x5f0b0; mov rax, r9; and al, 1; pop rcx; ret; 
0x000000000005b0b6: cmp rax, -1; je 0x5b0cd; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x00000000000129da: cmp rax, 0; jne 0x129ea; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x00000000000141df: cmp rax, 0; jne 0x141ea; add rsp, 0x58; ret; 
0x0000000000014266: cmp rax, 0; jne 0x14271; add rsp, 0x58; ret; 
0x0000000000014522: cmp rax, 0; jne 0x1452d; add rsp, 0x38; ret; 
0x00000000000151eb: cmp rax, 0; jne 0x151f6; add rsp, 0x38; ret; 
0x0000000000015207: cmp rax, 0; jne 0x15218; lea rax, [rip + 0x41a4c]; call rax; 
0x0000000000019f42: cmp rax, 0; jne 0x19f58; mov rdi, qword ptr [rsp + 8]; lea rax, [rip - 0x3a34]; call rax; 
0x000000000001aa10: cmp rax, 0; jne 0x1aa1b; add rsp, 0x18; ret; 
0x000000000001aa4d: cmp rax, 0; jne 0x1aa58; add rsp, 0x18; ret; 
0x000000000001abf1: cmp rax, 0; jne 0x1abfc; add rsp, 0x18; ret; 
0x000000000001ac30: cmp rax, 0; jne 0x1ac3b; add rsp, 0x18; ret; 
0x000000000001cd16: cmp rax, 0; jne 0x1cd30; mov rdi, qword ptr [rsp + 0x50]; lea rax, [rip + 0x58]; call rax; 
0x000000000000f4b1: cmp rax, 0; jne 0xf4bc; add rsp, 0x18; ret; 
0x000000000000f510: cmp rax, 0; jne 0xf51b; add rsp, 0x18; ret; 
0x000000000000f59c: cmp rax, 0; jne 0xf5a7; add rsp, 0x18; ret; 
0x000000000000fa0b: cmp rax, 0; jne 0xfa16; add rsp, 0x38; ret; 
0x000000000000fa27: cmp rax, 0; jne 0xfa38; lea rax, [rip + 0x4722c]; call rax; 
0x0000000000019eb7: cmp rax, 1; jne 0x19ec7; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x000000000002a257: cmp rax, 5; ja 0x2a277; lea rcx, [rip + 0x37218]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a2b7: cmp rax, 5; ja 0x2a2d3; lea rcx, [rip + 0x371d0]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a327: cmp rax, 5; ja 0x2a343; lea rcx, [rip + 0x37178]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029ea3: cmp rax, 7; ja 0x2a232; lea rcx, [rip + 0x375a8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000011ab0: cmp rax, qword ptr [rsi]; setl al; and al, 1; movzx eax, al; add rsp, 0x10; ret; 
0x000000000004cd44: cmp rax, rcx; jae 0x4cd52; mov qword ptr [rdi + 0x18], 0; ret; 
0x0000000000011b80: cmp rax, rcx; seta al; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x000000000000bbbe: cmp rax, rdi; je 0xbbd8; mov rax, qword ptr [rip + 0x6d8a6]; test rax, rax; je 0xbbd8; jmp rax; 
0x00000000000318e9: cmp rcx, 5; ja 0x3182b; lea rdx, [rip + 0x2ff0a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000318c3: cmp rcx, 5; ja 0x3182b; lea rdx, [rip + 0x2ff48]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000318a1: cmp rcx, 5; ja 0x3182b; lea rdx, [rip + 0x2ff86]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000004aab4: cmp rcx, r8; jb 0x4aaa0; ret; 
0x0000000000053f09: cmp rcx, rsi; jae 0x5402c; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x000000000005f1a8: cmp rdi, r8; sbb rsi, r9; sbb r10, -1; mov rax, r10; mov rdx, r11; ret; 
0x0000000000039b61: cmp rdi, rsi; jne 0x39b6a; xor eax, eax; pop rcx; ret; 
0x000000000001425e: cmp rdx, 0; cmove rax, rcx; cmp rax, 0; jne 0x14271; add rsp, 0x58; ret; 
0x000000000001451a: cmp rdx, 0; cmove rax, rcx; cmp rax, 0; jne 0x1452d; add rsp, 0x38; ret; 
0x000000000001aa08: cmp rdx, 0; cmove rax, rcx; cmp rax, 0; jne 0x1aa1b; add rsp, 0x18; ret; 
0x000000000001abe9: cmp rdx, 0; cmove rax, rcx; cmp rax, 0; jne 0x1abfc; add rsp, 0x18; ret; 
0x000000000001ac28: cmp rdx, 0; cmove rax, rcx; cmp rax, 0; jne 0x1ac3b; add rsp, 0x18; ret; 
0x000000000000f4a9: cmp rdx, 0; cmove rax, rcx; cmp rax, 0; jne 0xf4bc; add rsp, 0x18; ret; 
0x000000000000f508: cmp rdx, 0; cmove rax, rcx; cmp rax, 0; jne 0xf51b; add rsp, 0x18; ret; 
0x000000000002a2d5: cmp rdx, 0x100; setb al; and al, cl; ret; 
0x000000000004ccf8: cmp rdx, 6; jae 0x4cd07; add rdi, 0x10; mov rax, rdi; pop rcx; ret; 
0x00000000000268d4: cmp rsi, rax; jne 0x268f0; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000269ae: cmp rsi, rax; jne 0x269ca; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026a7b: cmp rsi, rax; jne 0x26a97; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026b3d: cmp rsi, rax; jne 0x26b59; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026c1a: cmp rsi, rax; jne 0x26c36; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026ceb: cmp rsi, rax; jne 0x26d07; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026dc9: cmp rsi, rax; jne 0x26de5; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026eaa: cmp rsi, rax; jne 0x26ec6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026f7c: cmp rsi, rax; jne 0x26f98; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000002705a: cmp rsi, rax; jne 0x27076; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000002712b: cmp rsi, rax; jne 0x27147; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000271fb: cmp rsi, rax; jne 0x27217; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004ad5d: cmp rsi, rax; jne 0x4ad79; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004b28b: cmp rsi, rax; jne 0x4b2a7; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004b35e: cmp rsi, rax; jne 0x4b37a; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000056b9d: cmp rsi, rax; jne 0x56bb9; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000009c0d: cmp rsi, rax; jne 0x9c29; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000009cea: cmp rsi, rax; jne 0x9d06; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000009dbb: cmp rsi, rax; jne 0x9dd7; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000b47d: cmp rsi, rax; jne 0xb499; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000b59d: cmp rsi, rax; jne 0xb5b9; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000005cf42: cmp rsi, rdi; jne 0x5cf30; ret; 
0x000000000004aa03: cmp rsi, rdx; cmovb rax, rdi; mov rdx, rcx; ret; 
0x000000000004cd86: cmp si, 2; sete al; ret; 
0x000000000001aa45: cmp word ptr [rdi], 3; cmove rax, rcx; cmp rax, 0; jne 0x1aa58; add rsp, 0x18; ret; 
0x0000000000032592: cmpsb byte ptr [rsi], byte ptr [rdi]; adc eax, 0x8d480000; or eax, 0x2f2cf; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000a016: cmpsb byte ptr [rsi], byte ptr [rdi]; add byte ptr [rdi], al; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x000000000005ee89: cmpsb byte ptr [rsi], byte ptr [rdi]; add dword ptr [rax], eax; add rsp, 0x88; ret; 
0x000000000000bbc6: cmpsb byte ptr [rsi], byte ptr [rdi]; fadd dword ptr [rsi]; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x000000000000d716: cmpsb byte ptr [rsi], byte ptr [rdi]; scasb al, byte ptr [rdi]; add al, byte ptr [rax]; lea rdi, [rsp + 0x2e8]; call rax; 
0x000000000000de27: cmpsd dword ptr [rsi], dword ptr [rdi]; add al, byte ptr [rax]; lea rdi, [rsp + 0x128]; call rax; 
0x000000000000dea5: cmpsd dword ptr [rsi], dword ptr [rdi]; add al, byte ptr [rax]; lea rdi, [rsp + 0x158]; call rax; 
0x000000000000dded: cmpsd dword ptr [rsi], dword ptr [rdi]; add al, byte ptr [rax]; lea rdi, [rsp + 0xf8]; call rax; 
0x000000000001f048: cmpsd dword ptr [rsi], dword ptr [rdi]; add eax, 0x48e88900; add esp, 0x28; pop rbx; pop rbp; ret; 
0x000000000003cd87: cmpsd dword ptr [rsi], dword ptr [rdi]; add eax, dword ptr [rax]; ret; 
0x000000000005df7b: cmpsd dword ptr [rsi], dword ptr [rdi]; ja 0x5df7e; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x000000000001a32d: cmpsd dword ptr [rsi], dword ptr [rdi]; mov edi, 0x8d480005; add eax, 0xffffccb8; call rax; 
0x0000000000022735: cmpsd dword ptr [rsi], dword ptr [rdi]; or eax, 0xc0310000; pop rcx; ret; 
0x000000000002d2fd: cmpsd dword ptr [rsi], dword ptr [rdi]; ret; 
0x000000000000e1cb: cwde; add byte ptr [rax], al; add bl, al; lea rax, [rip - 0x2a37]; call rax; 
0x000000000000d92f: cwde; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x2a466; lea rdi, [rsp + 0x98]; call rax; 
0x000000000004cdaf: cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000005c258: cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000005ba45: cwde; add byte ptr [rax], al; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000058f76: cwde; add dword ptr [rax], eax; add byte ptr [rcx - 1], cl; ret 0xff48; 
0x000000000001cba3: cwde; add eax, 0x58d4800; ret; 
0x000000000001fe97: cwde; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x000000000000d0f3: cwde; add eax, dword ptr [rax]; add bl, al; lea rax, [rip + 0x8fd1]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000cb33: cwde; add eax, dword ptr [rax]; add bl, al; lea rax, [rip + 0x9591]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000002b022: cwde; add rdi, r8; jmp rdi; 
0x000000000005bb1f: dec byte ptr [rax - 0x75]; and al, 0x30; call qword ptr [rax + 0x18]; 
0x000000000005e585: dec byte ptr [rax - 0x77]; ret 0x8348; 
0x00000000000224b6: dec byte ptr [rax - 0x7d]; ret 0x48fe; 
0x000000000002d48d: dec byte ptr [rcx + 0x39]; fimul dword ptr [rdi]; xchg byte ptr [rsp + rcx - 0x72b80000], ch; add dword ptr [r9 + 0x39], ecx; ret 0x860f; 
0x000000000005bcd2: dec byte ptr [rcx + rcx*4 - 0x11]; mov rdx, r9; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x0000000000059300: dec byte ptr [rdi]; mov dh, 0x72; add dword ptr [rax - 0x7d], ecx; ret 0x4802; 
0x0000000000036e3e: dec dword ptr [r8 - 0x7d]; ret; 
0x000000000002981a: dec dword ptr [rax + 0x21]; ret; 
0x0000000000038ccb: dec dword ptr [rax + 0x29]; ret; 
0x000000000000b0d0: dec dword ptr [rax + 0x39]; ret; 
0x000000000000fbe5: dec dword ptr [rax + 0x48072444]; lea eax, [rsp + 7]; mov qword ptr [rsp + 0x10], rax; movzx eax, byte ptr [rsp + 7]; add rsp, 0x18; ret; 
0x000000000002ae15: dec dword ptr [rax + 1]; ret; 
0x000000000002c94a: dec dword ptr [rax - 0x39]; ret 0xffff; 
0x00000000000318f2: dec dword ptr [rax - 0x73]; adc eax, 0x2ff0a; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000318cc: dec dword ptr [rax - 0x73]; adc eax, 0x2ff48; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000000dcbd: dec dword ptr [rax - 0x73]; add eax, 0x1054b; lea rdi, [rsp + 0xe8]; call rax; 
0x000000000000dc74: dec dword ptr [rax - 0x73]; add eax, 0x10594; lea rdi, [rsp + 0xe8]; call rax; 
0x000000000000d457: dec dword ptr [rax - 0x73]; add eax, 0x10db1; lea rdi, [rsp + 0x100]; call rax; 
0x000000000000ce99: dec dword ptr [rax - 0x73]; add eax, 0x1136f; lea rdi, [rsp + 0x100]; call rax; 
0x00000000000188f2: dec dword ptr [rax - 0x73]; add eax, 0x1d66; lea rdi, [rsp + 0x140]; call rax; 
0x0000000000018724: dec dword ptr [rax - 0x73]; add eax, 0x1f34; lea rdi, [rsp + 0xd0]; call rax; 
0x0000000000037d89: dec dword ptr [rax - 0x73]; add eax, 0x422f7; pop rcx; ret; 
0x000000000001692d: dec dword ptr [rax - 0x73]; add eax, 0x423b; lea rdi, [rsp + 0x40]; call rax; 
0x00000000000378f9: dec dword ptr [rax - 0x73]; add eax, 0x4274f; pop rcx; ret; 
0x0000000000019423: dec dword ptr [rax - 0x73]; add eax, 0x4de5; lea rdi, [rsp + 0x560]; call rax; 
0x000000000000d846: dec dword ptr [rax - 0x73]; add eax, 0xd322; lea rdi, [rsp + 0x278]; call rax; 
0x000000000001a383: dec dword ptr [rax - 0x73]; add eax, 0xffff1415; call rax; 
0x0000000000019664: dec dword ptr [rax - 0x73]; add eax, 0xffff2134; call rax; 
0x0000000000018bc5: dec dword ptr [rax - 0x73]; add eax, 0xffff2bd3; call rax; 
0x0000000000016c41: dec dword ptr [rax - 0x73]; add eax, 0xffff4b57; call rax; 
0x000000000000e077: dec dword ptr [rax - 0x73]; add eax, 0xffffd721; call rax; 
0x000000000000dc48: dec dword ptr [rax - 0x73]; add eax, 0xffffdb50; call rax; 
0x000000000000c77a: dec dword ptr [rax - 0x73]; cmp eax, 0x538fe; lea rdx, [rip + 0x693ef]; lea rax, [rip - 0x1120]; mov esi, 0x1c; call rax; 
0x0000000000037bd3: dec dword ptr [rax - 0x73]; imul edi, edi, 0x48; mov edi, dword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001a12f: dec dword ptr [rax - 0x73]; je 0x1a158; pop rax; call rax; 
0x000000000005a08e: dec dword ptr [rax - 0x73]; je 0x5a0b7; sub byte ptr [rcx + rcx*4 - 1], cl; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000019a50: dec dword ptr [rax - 0x73]; mov ah, 0x24; adc byte ptr [rcx], al; add byte ptr [rax], al; call rax; 
0x0000000000018ba3: dec dword ptr [rax - 0x73]; mov ah, 0x24; and byte ptr [rdx], al; add byte ptr [rax], al; call rax; 
0x000000000003405d: dec dword ptr [rax - 0x73]; mov esp, 0x8024; add al, ch; xchg eax, ebp; ret 0xfffe; 
0x000000000003271d: dec dword ptr [rax - 0x73]; or eax, 0x2f187; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000030207: dec dword ptr [rax - 0x73]; or eax, 0x31511; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000301b3: dec dword ptr [rax - 0x73]; or eax, 0x315c9; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004790e: dec dword ptr [rax - 0x73]; pop rbp; dec dword ptr [rax - 0x75]; jge 0x47916; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000001441b: dec dword ptr [rax - 0x73]; push rsp; and al, 0x20; call rax; 
0x0000000000014206: dec dword ptr [rax - 0x73]; push rsp; and al, 0x28; call rax; 
0x000000000001436a: dec dword ptr [rax - 0x73]; push rsp; and al, 0x30; call rax; 
0x0000000000046d33: dec dword ptr [rax - 0x73]; sbb eax, 0xfffce025; call rbx; 
0x00000000000454d7: dec dword ptr [rax - 0x73]; sbb eax, 0xfffcf871; call rbx; 
0x0000000000032fa9: dec dword ptr [rax - 0x73]; sbb eax, 0xfffe1daf; call rbx; 
0x000000000002d7d4: dec dword ptr [rax - 0x73]; sbb eax, 0xfffe7584; call rbx; 
0x00000000000137ad: dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x18; ret; 
0x000000000001c78e: dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x28; ret; 
0x0000000000013cc3: dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x68; ret; 
0x0000000000010c43: dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x118; ret; 
0x0000000000013672: dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x18; ret; 
0x000000000001900e: dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x278; ret; 
0x0000000000011685: dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x58; ret; 
0x0000000000013c01: dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x88; ret; 
0x0000000000013d8f: dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x98; ret; 
0x0000000000011182: dec dword ptr [rax - 0x75]; and al, 0x10; mov qword ptr [rax + 0x40], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x1b8; ret; 
0x0000000000018ec3: dec dword ptr [rax - 0x75]; and al, 0x20; add rsp, 0xf8; ret; 
0x0000000000015034: dec dword ptr [rax - 0x75]; and al, 0x28; add rsp, 0x1c8; ret; 
0x0000000000014337: dec dword ptr [rax - 0x75]; and al, 0x28; add rsp, 0x58; ret; 
0x000000000000c74c: dec dword ptr [rax - 0x75]; and al, 0x28; add rsp, 0xc8; ret; 
0x0000000000014106: dec dword ptr [rax - 0x75]; and al, 0x30; add rsp, 0x1f8; ret; 
0x000000000001a994: dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x28; ret; 
0x000000000001acf2: dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x38; ret; 
0x0000000000012b81: dec dword ptr [rax - 0x75]; and al, 8; add rsp, 0x48; ret; 
0x000000000005a096: dec dword ptr [rax - 0x75]; and al, 8; call qword ptr [rax + 0x18]; 
0x000000000005b08e: dec dword ptr [rax - 0x75]; je 0x5b0b7; adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x20; call qword ptr [rbp + 0x18]; 
0x0000000000039099: dec dword ptr [rax - 0x75]; jge 0x3909d; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000043a80: dec dword ptr [rax - 0x75]; jge 0x43a84; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000047912: dec dword ptr [rax - 0x75]; jge 0x47916; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000004a703: dec dword ptr [rax - 0x75]; jge 0x4a707; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000001629b: dec dword ptr [rax - 0x75]; jl 0x162c4; or byte ptr [rax - 0x73], cl; xor eax, 0x5fe88; lea rax, [rip - 0xacbf]; call rax; 
0x000000000001bbc3: dec dword ptr [rax - 0x75]; jl 0x1bbec; sub byte ptr [rax - 0x73], cl; add eax, 0xffffa500; call rax; 
0x000000000000c59b: dec dword ptr [rax - 0x75]; jl 0xc5c4; or byte ptr [rax - 0x73], cl; xor eax, 0x69588; lea rax, [rip - 0xfbf]; call rax; 
0x000000000000d4dd: dec dword ptr [rax - 0x75]; jl 0xd506; sub byte ptr [rax - 0x73], cl; add eax, 0x2b0d6; call rax; 
0x000000000000e8fa: dec dword ptr [rax - 0x75]; jl 0xe923; or byte ptr [rax - 0x73], cl; xor eax, 0x675d1; lea rax, [rip - 0x331e]; call rax; 
0x000000000001f3a9: dec dword ptr [rax - 0x75]; jnp 0x1f3ad; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001ffc5: dec dword ptr [rax - 0x75]; jnp 0x1ffc9; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020a2c: dec dword ptr [rax - 0x75]; jnp 0x20a30; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020aca: dec dword ptr [rax - 0x75]; jnp 0x20ace; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020cda: dec dword ptr [rax - 0x75]; jnp 0x20cde; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020de9: dec dword ptr [rax - 0x75]; jnp 0x20ded; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000366e2: dec dword ptr [rax - 0x75]; jnp 0x366e6; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000037866: dec dword ptr [rax - 0x75]; jnp 0x3786a; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000037bd7: dec dword ptr [rax - 0x75]; jnp 0x37bdb; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000037fd2: dec dword ptr [rax - 0x75]; jnp 0x37fd6; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000038991: dec dword ptr [rax - 0x75]; jnp 0x38995; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000038e41: dec dword ptr [rax - 0x75]; jnp 0x38e45; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000038f41: dec dword ptr [rax - 0x75]; jnp 0x38f45; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000391d3: dec dword ptr [rax - 0x75]; jnp 0x391d7; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003ad63: dec dword ptr [rax - 0x75]; jnp 0x3ad67; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003ae23: dec dword ptr [rax - 0x75]; jnp 0x3ae27; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000043929: dec dword ptr [rax - 0x75]; jnp 0x4392d; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000048df5: dec dword ptr [rax - 0x75]; jnp 0x48df9; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000389b3: dec dword ptr [rax - 0x75]; push rax; adc byte ptr [rcx - 0x75], cl; cmp al, 0x24; call rbx; 
0x00000000000139fd: dec dword ptr [rax - 0x77]; and al, 0x10; add rsp, 0x18; ret; 
0x0000000000036f89: dec dword ptr [rax - 0x77]; fimul word ptr [rax - 0x77]; ret 0x15ff; 
0x000000000004ccc7: dec dword ptr [rax - 0x77]; fucomip st(0); nop; ret; 
0x0000000000038394: dec dword ptr [rax - 0x77]; fucomip st(0); ret; 
0x0000000000059fd2: dec dword ptr [rax - 0x77]; out dx, al; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000024896: dec dword ptr [rax - 0x77]; ret 0x8348; 
0x0000000000046c2a: dec dword ptr [rax - 0x77]; ret 0xd2eb; 
0x000000000002727f: dec dword ptr [rax - 0x77]; ret; 
0x0000000000032740: dec dword ptr [rax - 0x77]; retf 0x148; ret 0x840f; 
0x000000000003851e: dec dword ptr [rax - 0x7b]; fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x000000000003cfb5: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; test dword ptr [rax], 0x89480000; ret; 
0x000000000003bfe1: dec dword ptr [rax - 0x7b]; sal byte ptr [rax + rcx*2 + 0x48], 0x89; ret; 
0x000000000003d064: dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rcx*2 + 0x48], 0x89; ret; 
0x0000000000052ce3: dec dword ptr [rax - 0x7d]; ret 0xc103; 
0x0000000000036e3f: dec dword ptr [rax - 0x7d]; ret; 
0x000000000001f374: dec dword ptr [rax - 0x7f]; ret; 
0x0000000000026223: dec dword ptr [rax - 1]; ret; 
0x0000000000035c30: dec dword ptr [rax - 8]; mov rdi, r14; call qword ptr [rbp]; 
0x000000000002d0de: dec dword ptr [rbp + 1]; ret 0xd231; 
0x000000000003898d: dec dword ptr [rbp + rcx*4 + 0x63]; dec dword ptr [rax - 0x75]; jnp 0x38995; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001df96: dec dword ptr [rbx + 0x4804244c]; mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x288; ret; 
0x000000000001e12c: dec dword ptr [rbx + 0x4814244c]; mov edi, dword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x20]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x278; ret; 
0x0000000000043c7b: dec dword ptr [rbx + rcx*4 + 0x42]; or byte ptr [rbx + rbp*2 - 0x2a], cl; cmp byte ptr [rbp + 1], cl; ret 0xff31; 
0x000000000001e622: dec dword ptr [rcx + 0x48b2404]; and al, 0x48; add esp, 0x18; ret; 
0x0000000000035f2f: dec dword ptr [rcx + rcx*4 - 0x10]; lea rax, [r14 - 0x20]; pop rbx; pop r14; pop r15; ret; 
0x000000000005f1b1: dec dword ptr [rcx + rcx*4 - 0x30]; mov rdx, r11; ret; 
0x0000000000059fcf: dec dword ptr [rcx + rcx*4 - 1]; mov rsi, rbp; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000003e475: dec dword ptr [rcx + rcx*4 - 8]; add rsp, 0x2e0; pop rbx; pop r14; pop r15; ret; 
0x0000000000035c35: dec dword ptr [rcx + rcx*4 - 9]; call qword ptr [rbp]; 
0x000000000001e65b: dec dword ptr [rcx - 0x74ebdbbc]; and al, 0x14; mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000003b454: dec dword ptr [rcx - 0x75]; and al, 7; call qword ptr [rax]; 
0x000000000003ec60: dec dword ptr [rcx - 0x75]; jg 0x3ec64; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000003b44f: dec dword ptr [rcx - 0x75]; jl 0x3b478; dec dword ptr [rcx - 0x75]; and al, 7; call qword ptr [rax]; 
0x00000000000393b6: dec dword ptr [rcx - 0x75]; jle 0x393ba; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x000000000003d3c8: dec dword ptr [rdi]; mov dh, 0xd1; lea rcx, [rip + 0x2488d]; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x000000000002c10e: dec dword ptr [rdi]; mov ebx, edi; add dword ptr [rax], eax; add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000012fe9: dec dword ptr [rdi]; or ebp, ebx; add rsp, 0x68; ret; 
0x0000000000018cdb: dec dword ptr [rdi]; or ebp, ebx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000001a759: dec dword ptr [rdi]; or ebp, ebx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000001a5a2: dec dword ptr [rdi]; or ebp, ebx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; ret; 
0x000000000001cd66: dec dword ptr [rdi]; or ebp, ebx; out dx, eax; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x108; ret; 
0x0000000000019a73: dec dword ptr [rdi]; or ecx, dword ptr [rax - 0x73]; add eax, 0x1083; lea rdi, [rsp + 0xb0]; call rax; 
0x000000000001bce6: dec dword ptr [rdi]; or ecx, dword ptr [rax - 0x73]; add eax, 0x2520; lea rdi, [rsp + 0x50]; call rax; 
0x000000000001a3c2: dec dword ptr [rdi]; or ecx, dword ptr [rax - 0x73]; add eax, 0x8c4; lea rdi, [rsp + 0x18]; call rax; 
0x0000000000019d9d: dec dword ptr [rdi]; or ecx, dword ptr [rax - 0x73]; add eax, 0xd59; lea rdi, [rsp + 0xb0]; call rax; 
0x000000000000f0a8: dec dword ptr [rdi]; or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc6ee; call rax; 
0x000000000000ede0: dec dword ptr [rdi]; or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc9b6; call rax; 
0x0000000000016984: dec dword ptr [rdi]; or ecx, dword ptr [rax - 0x75]; jl 0x169af; sub byte ptr [rax - 0x73], cl; add eax, 0x40ed; call rax; 
0x000000000003e95c: dec dword ptr [rdi]; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000001967c: dec dword ptr [rdi]; or edx, dword ptr [rax + 0x38ec8348]; mov qword ptr [rsp + 8], rdi; lea rax, [rip - 0x2960]; call rax; 
0x000000000001e29d: dec dword ptr [rdi]; or edx, dword ptr [rax + 0x48]; mov dword ptr [rsp], edi; call 0x1c7a0; pop rax; ret; 
0x00000000000389ad: dec dword ptr [rdi]; test byte ptr [rsi + rdi*8 - 0x74b70001], ch; push rax; adc byte ptr [rcx - 0x75], cl; cmp al, 0x24; call rbx; 
0x000000000001bfc6: dec dword ptr [rdx + 0x48172444]; add esp, 0x28; ret; 
0x000000000005769d: dec ecx; mov rax, rdx; neg rax; and rax, rcx; ret; 
0x0000000000057fa5: dec edx; call qword ptr [rip + 0x21bf3]; mov rax, rbx; pop rbx; ret; 
0x000000000005ae71: dec esi; je 0x5ae83; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000005adf1: dec esi; je 0x5b064; mov rdi, rbp; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x00000000000207d9: dec esi; mov eax, esi; and eax, 0xbfffffff; cmp eax, 0x80000000; je 0x207ea; ret; 
0x0000000000057ec5: dec esi; mov qword ptr [rdi], rsi; ret; 
0x0000000000020e90: dec esi; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000003bff6: dec esi; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000038485: dec esp; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000024895: dec qword ptr [rax - 0x77]; ret 0x8348; 
0x0000000000035c2f: dec qword ptr [rax - 8]; mov rdi, r14; call qword ptr [rbp]; 
0x0000000000038484: dec r12; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000005ae70: dec r14; je 0x5ae83; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000005adf0: dec r14; je 0x5b064; mov rdi, rbp; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x0000000000020e8f: dec r14; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000003bff5: dec r14; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000005769c: dec rcx; mov rax, rdx; neg rax; and rax, rcx; ret; 
0x0000000000057fa4: dec rdx; call qword ptr [rip + 0x21bf3]; mov rax, rbx; pop rbx; ret; 
0x0000000000057ec4: dec rsi; mov qword ptr [rdi], rsi; ret; 
0x0000000000057ec1: div byte ptr [rbp + 0x48]; dec esi; mov qword ptr [rdi], rsi; ret; 
0x000000000004a882: div byte ptr [rsi + rax - 1]; and eax, 0x2eefd; ret; 
0x0000000000026762: div byte ptr [rsi + rax - 1]; and eax, 0x5301d; ret; 
0x0000000000039b63: div dword ptr [rbp + 4]; xor eax, eax; pop rcx; ret; 
0x000000000005f1fb: div eax; mov r10, rax; mov rax, r10; mov rdx, r11; ret; 
0x000000000005f1c5: div eax; mov r10, rax; xor r11d, r11d; mov rax, r10; mov rdx, r11; ret; 
0x000000000005f2c3: div eax; xor esi, esi; mov r11, rdx; mov rax, r11; mov rdx, rsi; ret; 
0x000000000005f1fa: div r8; mov r10, rax; mov rax, r10; mov rdx, r11; ret; 
0x000000000005f1c4: div r8; mov r10, rax; xor r11d, r11d; mov rax, r10; mov rdx, r11; ret; 
0x000000000005f2c2: div r8; xor esi, esi; mov r11, rdx; mov rax, r11; mov rdx, rsi; ret; 
0x000000000005f380: endbr64; ret; 
0x000000000005f3c4: endbr64; sub rsp, 8; add rsp, 8; ret; 
0x0000000000009000: endbr64; sub rsp, 8; mov rax, qword ptr [rip + 0x70979]; test rax, rax; je 0x9016; call rax; 
0x000000000004c784: fadd dword ptr [rax + rax]; add byte ptr [rax + 0x6b], cl; ret; 
0x0000000000017dc1: fadd dword ptr [rax]; add byte ptr [rax], al; call rax; 
0x0000000000017d67: fadd dword ptr [rax]; add byte ptr [rax], al; lea rdx, [rsp + 0xf0]; call rax; 
0x000000000000c9f8: fadd dword ptr [rax]; add byte ptr [rax], al; lea rsi, [rsp + 0xe8]; lea rdx, [rsp + 0x88]; call rax; 
0x0000000000017222: fadd dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000036dc0: fadd dword ptr [rbx - 0x72b7fc20]; or eax, 0x2acad; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000daa1: fadd dword ptr [rcx]; add byte ptr [rax], al; ret; 
0x000000000000bbc7: fadd dword ptr [rsi]; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x000000000001bd7f: fadd qword ptr [rip + 0x448b4800]; and al, 0x48; add rsp, 0x108; ret; 
0x0000000000046740: fadd qword ptr [rip - 0x76b80000]; ret 0x8948; 
0x000000000000c078: fadd qword ptr [rsi]; add byte ptr [rcx + rax], ah; movzx eax, al; add rsp, 0x18; ret; 
0x000000000005a969: fcomi st(4); add dword ptr [rax], eax; add rsp, 0x48; ret; 
0x00000000000378a2: fcomp dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x000000000005764d: fcomp dword ptr [rbx + 0x41]; pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000005a566: fdivp st(0); add dword ptr [rax], eax; add rsp, 0x48; ret; 
0x000000000001abb0: fdivr st(2), st(0); add eax, 0xc4834800; sub bl, al; lea rax, [rip - 0xf420]; call rax; 
0x0000000000012b55: fiadd dword ptr [rax + rax]; lea rdx, [rip + 0x63471]; lea rax, [rip - 0x74f6]; mov esi, 0x2b; call rax; 
0x0000000000050134: ficomp dword ptr [rbx + 0x41]; pop rsp; pop r13; pop r14; pop r15; ret; 
0x00000000000144b2: fidiv dword ptr [rdi + rdi*8 - 1]; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000059518: fild dword ptr [rbx + 0xf4110f8]; xchg eax, edx; ret; 
0x000000000003bf29: fild dword ptr [rbx]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000058c54: fild dword ptr [rcx - 0x7d]; cld; or cl, byte ptr [rdi]; xchg eax, edx; ret; 
0x0000000000018612: fild dword ptr [rip - 0xaea0100]; or eax, 0x8b480006; and al, 0x58; add rsp, 0x3a8; ret; 
0x000000000004222d: fild word ptr [rsi + rdi*8 - 1]; pop rbx; ret; 
0x0000000000038952: fimul dword ptr [rax + 0x29]; ret 0x8b49; 
0x000000000005278a: fimul dword ptr [rax - 0x73]; xor eax, 0x11e1e; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000000e185: fimul dword ptr [rax - 0x75]; jl 0xe1ae; adc byte ptr [rax - 0x73], cl; add eax, 0x49e4e; lea rsi, [rsp + 0x28]; call rax; 
0x000000000002d490: fimul dword ptr [rdi]; xchg byte ptr [rsp + rcx - 0x72b80000], ch; add dword ptr [r9 + 0x39], ecx; ret 0x860f; 
0x0000000000049ee7: fimul dword ptr [rdi]; xchg eax, ebp; ret 0xf41; 
0x0000000000020caa: fimul dword ptr [rdx + 0x415b0005]; pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000019db2: fimul word ptr [rax - 0x73]; add eax, 0xffff19e6; call rax; 
0x0000000000019a88: fimul word ptr [rax - 0x73]; add eax, 0xffff1d10; call rax; 
0x0000000000043095: fimul word ptr [rax - 0x77]; ret 0x12e8; 
0x0000000000036f8c: fimul word ptr [rax - 0x77]; ret 0x15ff; 
0x000000000005546f: fimul word ptr [rax - 0x77]; ret 0x17eb; 
0x0000000000042b79: fimul word ptr [rax - 0x77]; ret 0x2ee8; 
0x0000000000043176: fimul word ptr [rax - 0x77]; ret 0x31e8; 
0x0000000000042f67: fimul word ptr [rax - 0x77]; ret 0x40e8; 
0x0000000000042c5c: fimul word ptr [rax - 0x77]; ret 0x4be8; 
0x0000000000042a58: fimul word ptr [rax - 0x77]; ret 0x4fe8; 
0x000000000004304b: fimul word ptr [rax - 0x77]; ret 0x5ce8; 
0x0000000000042aa1: fimul word ptr [rax - 0x77]; ret 0x6e8; 
0x0000000000042b30: fimul word ptr [rax - 0x77]; ret 0x77e8; 
0x000000000004322d: fimul word ptr [rax - 0x77]; ret 0x7ae8; 
0x0000000000043129: fimul word ptr [rax - 0x77]; ret 0x7ee8; 
0x0000000000042f1a: fimul word ptr [rax - 0x77]; ret 0x8de8; 
0x0000000000042a0f: fimul word ptr [rax - 0x77]; ret 0x98e8; 
0x0000000000042c05: fimul word ptr [rax - 0x77]; ret 0xa2e8; 
0x0000000000042ffe: fimul word ptr [rax - 0x77]; ret 0xa9e8; 
0x0000000000042c9d: fimul word ptr [rax - 0x77]; ret 0xae8; 
0x00000000000431f4: fimul word ptr [rax - 0x77]; ret 0xb3e8; 
0x0000000000042ae7: fimul word ptr [rax - 0x77]; ret 0xc0e8; 
0x00000000000430df: fimul word ptr [rax - 0x77]; ret 0xc8e8; 
0x0000000000042cd2: fimul word ptr [rax - 0x77]; ret 0xd5e8; 
0x0000000000042ecd: fimul word ptr [rax - 0x77]; ret 0xdae8; 
0x00000000000429c9: fimul word ptr [rax - 0x77]; ret 0xdee8; 
0x0000000000042bbf: fimul word ptr [rax - 0x77]; ret 0xe8e8; 
0x00000000000431bb: fimul word ptr [rax - 0x77]; ret 0xece8; 
0x0000000000042fb4: fimul word ptr [rax - 0x77]; ret 0xf3e8; 
0x0000000000022c01: fimul word ptr [rcx - 0x73]; push rdi; cmovl edi, dword ptr [rcx]; ret 0x860f; 
0x00000000000203a5: fist word ptr [rbx + 0x415b0005]; pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000005bd8b: fistp qword ptr [rsi + 0x27]; mov r13, rax; call rax; 
0x0000000000026751: fistp word ptr [rbx - 1]; and eax, 0x5302f; pop rbx; ret; 
0x00000000000266fb: fistp word ptr [rbx - 1]; and eax, 0x53085; pop rbx; ret; 
0x00000000000266b5: fistp word ptr [rbx - 1]; and eax, 0x530cb; pop rbx; ret; 
0x00000000000395b7: fisttp dword ptr [rax - 0x73]; or eax, 0x2859d; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000018fb4: fisttp dword ptr [rax - 0x73]; xor eax, 0x5d28c; lea rax, [rip - 0xd9d3]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000003789f: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x000000000005703c: fisttp dword ptr [rax - 0x77]; ret 0x8ae9; 
0x000000000005f1cc: fisttp dword ptr [rcx + rcx*4 - 0x30]; mov rdx, r11; ret; 
0x0000000000038521: fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x0000000000039899: fisttp qword ptr [rax + 0x39]; ret; 
0x000000000001e31e: fisttp qword ptr [rax - 0x75]; and al, 8; mov rdi, qword ptr [rax]; call qword ptr [rip + 0x5b0db]; add rsp, 0x28; ret; 
0x00000000000476c4: fisttp qword ptr [rax - 0x75]; je 0x476ed; sbb cl, ch; ret 0xfff8; 
0x0000000000043ca7: fisttp qword ptr [rax - 0x7d]; ret; 
0x000000000004ef08: fisttp qword ptr [rcx + 1]; ror dword ptr [rcx - 9], 1; fmul dword ptr [rcx + rcx*4 + 0xf]; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x000000000005b51f: fisttp word ptr [rax - 0x39]; ret; 
0x000000000005f35c: fisttp word ptr [rax - 0x7d]; ret; 
0x00000000000422cb: fisttp word ptr [rcx - 0x3b7cb708]; js 0x4232e; pop rbp; ret; 
0x00000000000567bc: fisub dword ptr [rsi + 0xf]; cli; ret; 
0x000000000001bf6b: fld dword ptr [rip - 0x3976b800]; mov al, byte ptr [rsp + 0x16]; movzx edi, al; call qword ptr [rip + 0x5dcd2]; add rsp, 0x18; ret; 
0x000000000001cb8b: fld qword ptr [rax + 4]; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000001cb9b: fld qword ptr [rax + 4]; add byte ptr [rax - 0x73], cl; adc eax, 0x5981a; lea rax, [rip - 0x1153d]; mov esi, 0x28; call rax; 
0x0000000000037b6a: fld qword ptr [rbx + 0x634903e5]; add al, 0xac; add rax, r12; jmp rax; 
0x000000000003c107: fld qword ptr [rbx]; add byte ptr [rbp + 0x480675c0], al; mov eax, dword ptr [rsp]; pop rcx; ret; 
0x000000000001bff4: fld qword ptr [rip + 0x448b4800]; and al, 8; add rsp, 0x18; ret; 
0x000000000000c0b9: fld qword ptr [rsi]; add byte ptr [rcx + rax], ah; movzx eax, al; add rsp, 0x38; ret; 
0x0000000000056cb3: fldcw word ptr [rip + 0xb0f0002]; nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; mov rdx, qword ptr [rdi + 0x10]; ret; 
0x000000000000d34d: fmul dword ptr [rax - 0x73]; add eax, 0x99db; lea rdi, [rsp + 0x190]; call rax; 
0x000000000000cd8f: fmul dword ptr [rax - 0x73]; add eax, 0x9f99; lea rdi, [rsp + 0x190]; call rax; 
0x000000000002f082: fmul dword ptr [rax - 0x75]; sbb dword ptr [rax + 0x39], ecx; ret; 
0x0000000000009284: fmul dword ptr [rax - 0x77]; ret 0xc148; 
0x00000000000475bf: fmul dword ptr [rax - 0x77]; ret; 
0x000000000003cfd0: fmul dword ptr [rbp + rcx*4 + 0x73]; dec dword ptr [rax - 0x7d]; ret; 
0x000000000004fd83: fmul dword ptr [rbx + 1]; add byte ptr [rbp + rcx*4 + 0x2d], cl; ret 0xbf; 
0x000000000004ef0e: fmul dword ptr [rcx + rcx*4 + 0xf]; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x000000000000a2cb: fmul dword ptr [rcx + rcx*4 - 0xe]; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004a8da: fmul dword ptr [rcx + rcx*4 - 0xe]; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000005f2ff: fmul qword ptr [rax - 0x7b]; and al, 8; add rsp, rax; leave; ret; 
0x0000000000022d10: fmul qword ptr [rcx - 9]; fsub st(1), st(0); retf 3; add byte ptr [rax - 1], cl; ret; 
0x0000000000036887: fnsave dword ptr [rcx + 0x63480002]; add al, 0x81; add rax, rcx; jmp rax; 
0x0000000000015483: fst dword ptr [rdi]; add al, 0; call rax; 
0x0000000000040637: fst qword ptr [rsi - 0x76b7fffd]; ret; 
0x000000000004b49a: fsub st(0); add al, 0; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xf41; 
0x0000000000022d13: fsub st(1), st(0); retf 3; add byte ptr [rax - 1], cl; ret; 
0x000000000003e520: fsubp st(0); cmp bh, byte ptr [rbx - 0x76b70004]; ret; 
0x0000000000047eb7: fsubp st(0); ret; 
0x0000000000039606: fucomi st(3); xor dword ptr [rbx + 0x48d88901], esi; add esp, 0x20; pop rbx; ret; 
0x000000000004ccca: fucomip st(0); nop; ret; 
0x000000000000aa98: fucomip st(0); ret 0xffe5; 
0x0000000000038397: fucomip st(0); ret; 
0x000000000000dd18: hlt; add al, 1; add byte ptr [rax - 0x73], cl; jl 0xdd44; push rax; call rax; 
0x000000000005aa3d: hlt; add dword ptr [rax], eax; add rsp, 0x38; ret; 
0x000000000005a96a: hlt; add dword ptr [rax], eax; add rsp, 0x48; ret; 
0x000000000005a626: hlt; add dword ptr [rax], eax; pop rcx; ret; 
0x000000000001aacd: hlt; add eax, 0xc4834800; sub bl, al; lea rax, [rip - 0xf33c]; call rax; 
0x00000000000285cb: hlt; add eax, dword ptr [rax]; add byte ptr [rcx], dh; jmp qword ptr [rsi + 0x66]; 
0x000000000004d9c8: hlt; ret 2; 
0x000000000003c559: idiv bh; dec dword ptr [rax - 0x77]; ret; 
0x000000000004cd32: idiv byte ptr [rax + 5]; add qword ptr [rdi + 0x18], rsi; ret; 
0x000000000001c784: idiv byte ptr [rdx + 0x80]; call 0x9070; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000005ee80: idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1a64c]; add rsp, 0x88; ret; 
0x000000000005e65a: idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1ae72]; add rsp, 0x88; ret; 
0x000000000005e425: idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b0a7]; add rsp, 0x88; ret; 
0x000000000005e2fa: idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b1d2]; add rsp, 0x88; ret; 
0x000000000005e25a: idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b272]; add rsp, 0x88; ret; 
0x000000000005e1c7: idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b305]; add rsp, 0x88; ret; 
0x000000000005e137: idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b395]; add rsp, 0x88; ret; 
0x000000000005e0a5: idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b427]; add rsp, 0x88; ret; 
0x000000000005e015: idiv dword ptr [rsi + 1]; call qword ptr [rip + 0x1b4b7]; add rsp, 0x88; ret; 
0x000000000005e849: idiv dword ptr [rsi + 1]; xor ecx, ecx; call qword ptr [rip + 0x1ac81]; add rsp, 0x28; ret; 
0x000000000005e75c: idiv dword ptr [rsi + 1]; xor ecx, ecx; call qword ptr [rip + 0x1ad6e]; add rsp, 0x28; ret; 
0x000000000005e6ae: idiv dword ptr [rsi + 1]; xor ecx, ecx; call qword ptr [rip + 0x1ae1c]; add rsp, 0x88; ret; 
0x000000000005e479: idiv dword ptr [rsi + 1]; xor ecx, ecx; call qword ptr [rip + 0x1b051]; add rsp, 0x88; ret; 
0x0000000000053734: idiv edi; adc eax, 0x25c75; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x000000000003d0af: idiv edi; adc eax, 0x3c6d2; call qword ptr [rip + 0x3c32c]; ud2; mov rdi, r15; call rax; 
0x000000000002c948: idiv edi; dec dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000002b92b: idiv edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000051078: imul al; ret 0xfff4; 
0x000000000002a6e1: imul dword ptr [rbp + 3]; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000001900b: imul eax, dword ptr [rax], 0x8b48ffff; and al, 0x10; add rsp, 0x278; ret; 
0x000000000002a426: imul eax, dword ptr [rcx], 0xff480000; ret 0x3948; 
0x000000000002ee23: imul eax, dword ptr [rdi], 0x8c894c00; and al, 0x78; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add dword ptr [r8 + 0x39], ecx; ret 0x860f; 
0x000000000005adf5: imul eax, dword ptr [rdx], 0; add byte ptr [rax - 0x77], cl; out dx, eax; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x0000000000019b31: imul ebx, dword ptr [rdi + rdi*8], -1; call rax; 
0x000000000002a6dd: imul ecx, dword ptr [rax - 0x73], 0x36df70d; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000000e0d3: imul edi, dword ptr [rsi + 0x1240006], 0x48c0b60f; add esp, 0x18; ret; 
0x000000000000e033: imul edi, eax, 0x2bebffff; lea rdi, [rsp + 0x50]; call qword ptr [rip + 0x6ba0c]; add rsp, 0x218; ret; 
0x000000000005926f: imul edi, edi, -1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000037bd6: imul edi, edi, 0x48; mov edi, dword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000014d2f: imul edi, edi, 0x49beff; add byte ptr [rax], al; call rax; 
0x00000000000235df: imul edx, dword ptr [rax], 0x31; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x00000000000575af: imul edx, dword ptr [rax], 0x48; add esp, 0x10; pop rbx; pop r14; pop rbp; ret; 
0x0000000000057e8b: imul edx, esp, 0x63480000; or al, 0x8e; add rcx, rsi; jmp rcx; 
0x000000000005c253: imul esi, dword ptr [rax], 0x48; add esp, 0x98; pop rbx; pop rbp; ret; 
0x00000000000229d9: imul esi, dword ptr [rbp + rax], 0x48; add esp, 0x48; ret; 
0x00000000000194b1: imul esi, dword ptr [rbx], 0; add byte ptr [rdi + 0x27], bh; mov edx, 0x1b; call rax; 
0x000000000000dfe9: imul esp, dword ptr [rax], 5; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000000eea0: in al, 0x48; mov edi, dword ptr [rsp + 8]; call 0xeed0; add rsp, 0x28; ret; 
0x000000000000f1a0: in al, 0x48; mov edi, dword ptr [rsp + 8]; call 0xf1e0; add rsp, 0x28; ret; 
0x000000000000f450: in al, 0x48; mov edi, dword ptr [rsp + 8]; call 0xf4d0; add rsp, 0x28; ret; 
0x000000000005f0cb: in al, 0x4c; mov eax, ecx; and al, 1; pop rcx; ret; 
0x000000000005f2fc: in al, 0x4c; sub esp, ebx; test qword ptr [rsp + 8], rsp; add rsp, rax; leave; ret; 
0x000000000000ec34: in al, 0x8b; and al, 4; add rsp, 0x28; ret; 
0x000000000005b089: in al, 0xeb; test eax, 0x48ff894c; mov esi, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x0000000000041fc2: in al, 0xf; test byte ptr [rcx + 0x48000000], ch; mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004ccc5: in al, 0xff; dec dword ptr [rax - 0x77]; fucomip st(0); nop; ret; 
0x000000000004b090: in al, dx; add al, byte ptr [rax]; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000019682: in al, dx; cmp byte ptr [rax - 0x77], cl; jl 0x196ac; or byte ptr [rax - 0x73], cl; add eax, 0xffffd6a0; call rax; 
0x0000000000038483: in al, dx; dec r12; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000039fdc: in al, dx; jnp 0x39fe1; add byte ptr [rax + 0x63], cl; adc al, 0x88; add rdx, rax; jmp rdx; 
0x0000000000010c62: in al, dx; js 0x10cad; mov dword ptr [rsp], edi; lea rax, [rip + 0x60c1]; call rax; 
0x000000000004a903: in al, dx; mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x0000000000009006: in al, dx; or byte ptr [rax - 0x75], cl; add eax, 0x70979; test rax, rax; je 0x9016; call rax; 
0x0000000000017c22: in al, dx; sbb byte ptr [rax - 0x77], cl; cmp al, 0x24; mov qword ptr [rsp + 8], rsi; lea rax, [rip - 0x1774]; call rax; 
0x000000000000eb02: in al, dx; sbb byte ptr [rcx - 0x76f3db84], cl; jl 0xeb2f; adc al, 0x83; jmp qword ptr [rax]; 
0x0000000000010f82: in al, dx; sub byte ptr [rax - 0x77], cl; cmp al, 0x24; lea rax, [rip + 0x5da1]; call rax; 
0x000000000000a012: in al, dx; sub byte ptr [rbx + 0x700a605], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x0000000000009fc2: in al, dx; sub byte ptr [rbx + 0x700b605], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x0000000000009f72: in al, dx; sub byte ptr [rbx + 0x7014605], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x0000000000019427: in eax, 0x4d; add byte ptr [rax], al; lea rdi, [rsp + 0x560]; call rax; 
0x0000000000018ba1: in eax, 0xff; dec dword ptr [rax - 0x73]; mov ah, 0x24; and byte ptr [rdx], al; add byte ptr [rax], al; call rax; 
0x0000000000039351: in eax, 3; lea rcx, [rip + 0x287f2]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x0000000000037b6c: in eax, 3; movsxd rax, dword ptr [r12 + rbp*4]; add rax, r12; jmp rax; 
0x000000000005ac2a: in eax, 4; mov rdi, qword ptr [rsp + 8]; mov rcx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000001698f: in eax, dx; add byte ptr [rax], al; call rax; 
0x00000000000105b2: inc byte ptr [rax + rax]; lea rdx, [rip + 0x65994]; lea rax, [rip - 0x4f53]; mov esi, 0x49; call rax; 
0x0000000000057037: inc byte ptr [rbx + rsi*2]; and dword ptr [rcx], esi; fisttp dword ptr [rax - 0x77]; ret 0x8ae9; 
0x0000000000039568: inc byte ptr [rbx]; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000005904a: inc byte ptr [rcx + 0xf]; mov dh, 0x42; add dword ptr [rcx - 0x7d], ecx; ret 0x4c02; 
0x000000000004cd88: inc byte ptr [rdx]; sete al; ret; 
0x0000000000019b21: inc byte ptr [rip + 0x448b4800]; and al, 8; add rsp, 0x28; ret; 
0x00000000000197f3: inc byte ptr [rip + 0xf012400]; mov dh, 0xc0; add rsp, 0x38; ret; 
0x00000000000104bf: inc dword ptr [rax + rax]; lea rdx, [rip + 0x65a87]; lea rax, [rip - 0x4e60]; mov esi, 0x49; call rax; 
0x00000000000567d5: inc dword ptr [rax]; add byte ptr [rcx], ch; ret 0x148d; 
0x000000000004cd83: inc dword ptr [rax]; add byte ptr [rsi - 0x7d], ah; inc byte ptr [rdx]; sete al; ret; 
0x000000000005f3c2: inc dword ptr [rax]; endbr64; sub rsp, 8; add rsp, 8; ret; 
0x000000000000a4e3: inc dword ptr [rax]; sete al; pop rcx; ret; 
0x00000000000333b5: inc dword ptr [rbp + 0x31]; shr cl, 0x84; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000029925: inc dword ptr [rbx + 0x15772bf8]; lea rdi, [rip + 0x377ca]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000004cc8c: inc dword ptr [rbx + 8]; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000003bc1f: inc dword ptr [rbx - 0x50]; mov rax, rcx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002828b: inc dword ptr [rbx - 0x78f0d407]; mov ah, 0; add byte ptr [rax], al; movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x0000000000054e52: inc dword ptr [rcx + 0xf]; mov dh, 0x43; add dword ptr [rcx - 0x7d], ecx; ret; 
0x000000000005790f: inc dword ptr [rcx + 0xf]; scasd eax, dword ptr [rdi]; ret 0xd001; 
0x0000000000020321: inc dword ptr [rdi + 0x10]; ret; 
0x000000000000a04d: inc dword ptr [rdi]; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000001f2c1: inc dword ptr [rdi]; ret; 
0x00000000000318ab: inc dword ptr [rdx]; add byte ptr [rax + 0x63], cl; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x0000000000031891: inc dword ptr [rdx]; add byte ptr [rax + 0x63], cl; xor al, 0xb7; add rsi, rdi; jmp rsi; 
0x0000000000036d6b: inc eax; add rsp, 0x20; pop rbx; ret; 
0x000000000000f11c: inc eax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb966]; call rax; 
0x000000000000f0d7: inc eax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb9ab]; call rax; 
0x000000000004aaaf: inc ecx; inc rdx; cmp rcx, r8; jb 0x4aaa0; ret; 
0x000000000004aab2: inc edx; cmp rcx, r8; jb 0x4aaa0; ret; 
0x0000000000040b38: inc esi; mov qword ptr [rbx + 0x10], rsi; pop rbx; pop r14; pop r15; ret; 
0x000000000004cbbe: inc esi; mov qword ptr [rbx + 0x18], rsi; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000004cc8b: inc qword ptr [rbx + 8]; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000003bc1e: inc qword ptr [rbx - 0x50]; mov rax, rcx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002828a: inc qword ptr [rbx - 0x78f0d407]; mov ah, 0; add byte ptr [rax], al; movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x0000000000020320: inc qword ptr [rdi + 0x10]; ret; 
0x000000000001f2c0: inc qword ptr [rdi]; ret; 
0x00000000000318d0: inc qword ptr [rdx]; add byte ptr [rax + 0x63], cl; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x0000000000036d6a: inc rax; add rsp, 0x20; pop rbx; ret; 
0x000000000000f11b: inc rax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb966]; call rax; 
0x000000000000f0d6: inc rax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb9ab]; call rax; 
0x000000000004aaae: inc rcx; inc rdx; cmp rcx, r8; jb 0x4aaa0; ret; 
0x000000000004aab1: inc rdx; cmp rcx, r8; jb 0x4aaa0; ret; 
0x0000000000040b37: inc rsi; mov qword ptr [rbx + 0x10], rsi; pop rbx; pop r14; pop r15; ret; 
0x000000000004cbbd: inc rsi; mov qword ptr [rbx + 0x18], rsi; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000001f093: insb byte ptr [rdi], dx; add dword ptr [rax], eax; ud2; nop dword ptr [rax + rax]; ret; 
0x000000000002a8b2: insb byte ptr [rdi], dx; add eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000426ca: insb byte ptr [rdi], dx; and al, 0x40; mov rdi, rbp; xor esi, esi; mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x000000000005b63c: insb byte ptr [rdi], dx; and al, 0x50; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000003da97: insb byte ptr [rdi], dx; and al, 8; movups xmm0, xmmword ptr [rcx]; movups xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 0x20]; 
0x0000000000037bf0: insb byte ptr [rdi], dx; sar ebp, 1; push qword ptr [rdx + rcx + 0x48]; mov edx, dword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000001f90b: insd dword ptr [rdi], dx; add byte ptr [rax], al; ret; 
0x000000000002a6e2: insd dword ptr [rdi], dx; add eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000e04f: insd dword ptr [rdi], dx; movsd dword ptr [rdi], dword ptr [rsi]; add al, byte ptr [rax]; lea rdi, [rsp + 0x1c8]; call rax; 
0x000000000004e9b3: int 0x77; sub cl, byte ptr [rax - 0x77]; ret; 
0x000000000002353c: int 0x80; 
0x0000000000034c6d: int 2; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000001a39f: int 7; add byte ptr [rax], al; lea rdi, [rsp + 0x38]; call rax; 
0x000000000001134c: int1; add al, 0; lea rax, [rip - 0x5ce6]; mov esi, 0x23; call rax; 
0x00000000000113ee: int1; add al, 0; lea rdx, [rip + 0x64b70]; lea rax, [rip - 0x5d8f]; mov esi, 0x19; call rax; 
0x0000000000032722: int1; add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000036e38: int1; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; dec dword ptr [r8 - 0x7d]; ret; 
0x000000000001ad4b: int1; add eax, 0x48b4800; and al, 0x59; ret; 
0x000000000005cf41: int1; cmp rsi, rdi; jne 0x5cf30; ret; 
0x00000000000567d4: int1; inc dword ptr [rax]; add byte ptr [rcx], ch; ret 0x148d; 
0x0000000000053f0b: int1; jae 0x5402c; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x0000000000034995: int1; jmp rcx; 
0x000000000005a184: int1; mov edx, 2; sub rdx, rax; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x00000000000516fb: int1; ret 0xffff; 
0x0000000000032599: iretd; add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000c661: iretd; call rax; 
0x000000000000f11a: iretd; inc rax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb966]; call rax; 
0x000000000000f0d5: iretd; inc rax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb9ab]; call rax; 
0x000000000003d3d9: iretd; jmp rdi; 
0x000000000005b740: iretd; mov r12, rdx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x0000000000014204: ja 0x14205; dec dword ptr [rax - 0x73]; push rsp; and al, 0x28; call rax; 
0x00000000000163be: ja 0x163d0; add rsp, 0x18; ret; 
0x0000000000018c15: ja 0x18c48; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000001ba49: ja 0x1ba53; mov qword ptr [rdi], rcx; add rsp, 0x28; ret; 
0x000000000001ba76: ja 0x1ba8c; mov rax, qword ptr [rsp]; lea rcx, [rip + 0x450a5]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb81: ja 0x1cb98; mov rax, qword ptr [rsp + 0x20]; lea rcx, [rip + 0x440dd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001e8e0: ja 0x1e8fa; add rsp, 0x10; pop rbx; ret; 
0x00000000000275e3: ja 0x27613; lea rax, [rip + 0x39944]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000002828f: ja 0x28349; movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x000000000002992f: ja 0x29934; add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x0000000000029929: ja 0x29940; lea rdi, [rip + 0x377ca]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000002998a: ja 0x29a9e; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x0000000000029ea7: ja 0x2a232; lea rcx, [rip + 0x375a8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a25b: ja 0x2a277; lea rcx, [rip + 0x37218]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a2bb: ja 0x2a2d3; lea rcx, [rip + 0x371d0]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a32b: ja 0x2a343; lea rcx, [rip + 0x37178]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a6dc: ja 0x2a747; lea rcx, [rip + 0x36df7]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a85a: ja 0x2a868; mov dword ptr [rdi + 9], edx; mov byte ptr [rdi], cl; mov qword ptr [rdi + 1], rax; add rsp, 0x10; ret; 
0x000000000002a8ac: ja 0x2a90e; lea rcx, [rip + 0x36c47]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002b612: ja 0x2b68f; add rax, rdi; lea rbp, [rip + 0x35f1e]; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x0000000000030202: ja 0x300ef; lea rcx, [rip + 0x31511]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000301ae: ja 0x300ef; lea rcx, [rip + 0x315c9]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000318ed: ja 0x3182b; lea rdx, [rip + 0x2ff0a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000318c7: ja 0x3182b; lea rdx, [rip + 0x2ff48]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000318a5: ja 0x3182b; lea rdx, [rip + 0x2ff86]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000032718: ja 0x32450; lea rcx, [rip + 0x2f187]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000032590: ja 0x33b3c; lea rcx, [rip + 0x2f2cf]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003260a: ja 0x33b4a; lea rdx, [rip + 0x2f275]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003498d: ja 0x349fe; movsxd rcx, dword ptr [r14 + rdx*4]; add rcx, r14; jmp rcx; 
0x000000000003d2e9: ja 0x3d2c1; movzx ecx, cl; lea rdx, [rip + 0x24937]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003d3c3: ja 0x3d2c1; movzx edx, cl; lea rcx, [rip + 0x2488d]; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x0000000000040b85: ja 0x40b9f; mov al, 0x22; lea rcx, [rip + 0x2110c]; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x000000000004cd37: ja 0x4cd51; ret; 
0x000000000004cd6b: ja 0x4cd8d; lea rdx, [rip + 0x16e74]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000004cd6a: ja 0x4cde3; and byte ptr [rax - 0x73], cl; adc eax, 0x16e74; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000505db: ja 0x50af9; lea rbx, [rip + 0x13e00]; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000005df7c: ja 0x5df7e; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x000000000005f2fb: ja 0x5f2e1; sub rsp, r11; test qword ptr [rsp + 8], rsp; add rsp, rax; leave; ret; 
0x000000000000a8a9: ja 0xa9dd; mov ecx, eax; movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x000000000000aaf9: ja 0xac3a; mov ecx, eax; movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x000000000000ad69: ja 0xaeab; mov ecx, eax; movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x000000000000afd9: ja 0xb2b5; mov eax, eax; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000000dfdf: ja 0xdff6; mov rax, qword ptr [rsp + 8]; lea rcx, [rip + 0x5206b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000e743: ja 0xe787; mov rax, qword ptr [rsp + 0x10]; lea rcx, [rip + 0x51b4b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001f3a8: jae 0x1f3a9; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002080d: jae 0x20826; cmp dword ptr [rbx + 0x10], 2; jae 0x20835; pop rbx; ret; 
0x0000000000020813: jae 0x20835; pop rbx; ret; 
0x0000000000020843: jae 0x20846; ret; 
0x0000000000020ac9: jae 0x20aca; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b979: jae 0x2b95d; add al, 0; pop rcx; ret; 
0x0000000000037865: jae 0x37866; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000039fd2: jae 0x39fdc; mov edi, 6; lea rax, [rip + 0x27bec]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000003cfd3: jae 0x3cfd4; add rbx, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000003d07a: jae 0x3d07b; add rbx, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000003f028: jae 0x3f08a; add rsp, 0x20; pop rbx; pop r14; pop r15; ret; 
0x0000000000040b3c: jae 0x40b4e; pop rbx; pop r14; pop r15; ret; 
0x0000000000040e57: jae 0x40e61; add rsp, 0x108; pop rbx; pop r14; ret; 
0x0000000000049f49: jae 0x49f4f; xor eax, eax; pop rbx; ret; 
0x000000000004cbc2: jae 0x4cbdc; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000004ccfc: jae 0x4cd07; add rdi, 0x10; mov rax, rdi; pop rcx; ret; 
0x000000000004cd47: jae 0x4cd52; mov qword ptr [rdi + 0x18], 0; ret; 
0x000000000004cda5: jae 0x4cdb7; mov eax, 0x110001; add rsp, 0x98; pop rbx; pop r14; ret; 
0x000000000004f0ea: jae 0x4f0f6; xor ecx, ecx; shl rax, 0x20; or rax, rcx; ret; 
0x000000000004f330: jae 0x4f352; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000053f0c: jae 0x5402c; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x00000000000540a5: jae 0x54195; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + r10], al; pop rax; ret; 
0x0000000000058585: jae 0x58557; add byte ptr [rax], al; mov edx, 2; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x000000000005aad4: jae 0x5aace; call qword ptr [rax + 0x18]; 
0x000000000005dc44: jae 0x5dc4a; xor eax, eax; pop rcx; ret; 
0x000000000005dc4f: jae 0x5dc53; pop rcx; ret; 
0x000000000005ded9: jae 0x5deb0; mov byte ptr [r8 + 1], 2; mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000001532a: jb 0x152f2; test byte ptr [rdi + rdx*8], ah; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x926]; call rax; 
0x000000000001c2ba: jb 0x1c282; test byte ptr [rdi + rdx*8], ah; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x3d6]; call rax; 
0x000000000001f74a: jb 0x1f7bb; add byte ptr [rax], al; ret; 
0x000000000002a261: jb 0x2a266; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x0000000000039b5f: jb 0x39b90; cmp rdi, rsi; jne 0x39b6a; xor eax, eax; pop rcx; ret; 
0x000000000004aab7: jb 0x4aaa0; ret; 
0x000000000005b7b0: jb 0x5b751; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005e262: jb 0x5e216; add dword ptr [rax], eax; add rsp, 0x88; ret; 
0x000000000005e662: jb 0x5e612; add dword ptr [rax], eax; add rsp, 0x88; ret; 
0x0000000000014295: jbe 0x14296; dec dword ptr [rax - 0x73]; push rsp; and al, 0x28; call rax; 
0x0000000000014368: jbe 0x14369; dec dword ptr [rax - 0x73]; push rsp; and al, 0x30; call rax; 
0x000000000005a2ac: jbe 0x5a262; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000000ecb6: jbe 0xecc4; add byte ptr [rax], al; pop rax; ret; 
0x000000000000f786: jbe 0xf7aa; add byte ptr [rax], al; add rsp, 0x48; ret; 
0x0000000000010b01: je 0x10b27; sbb byte ptr [rax - 0x75], cl; jl 0x10b2c; or byte ptr [rax - 0x73], cl; add eax, 0x2e470; call rax; 
0x0000000000010b78: je 0x10b9e; sub byte ptr [rax - 0x75], cl; jl 0x10ba3; adc byte ptr [rax - 0x73], cl; add eax, 0x2e3f9; call rax; 
0x0000000000010c1d: je 0x10c43; and byte ptr [rax - 0x73], cl; add eax, 0x2e0c9; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000010c37: je 0x10c5d; cmp byte ptr [rdx + 0xd0], bh; call 0x9078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x0000000000010fcf: je 0x10ff5; adc byte ptr [rax + 1], cl; test dword ptr [rax - 0x77], 0x4818247c; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x00000000000114e5: je 0x1150b; adc byte ptr [rax - 0x75], cl; jl 0x11510; or byte ptr [rax - 0x73], cl; add eax, 0xffffa54c; call rax; 
0x0000000000011593: je 0x115b9; and byte ptr [rax - 0x75], cl; jl 0x115be; adc byte ptr [rax - 0x73], cl; add eax, 0xffffa48e; call rax; 
0x00000000000118ab: je 0x118d1; sbb byte ptr [rax - 0x73], cl; add eax, 0x4806b; call rax; 
0x0000000000012b75: je 0x12b9b; adc byte ptr [rdx + 0x30], bh; call 0x9078; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x0000000000013a24: je 0x13a4a; or byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x0000000000013a54: je 0x13a7a; or byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x0000000000013a84: je 0x13aaa; or byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000144b3: je 0x144b4; dec dword ptr [rax - 0x73]; push rsp; and al, 0x28; call rax; 
0x0000000000015196: je 0x151bc; sbb byte ptr [rax - 0x73], cl; add eax, 0x5b60; call rax; 
0x0000000000015196: je 0x151bc; sbb byte ptr [rax - 0x73], cl; add eax, 0x5b60; call rax; add rsp, 0x28; ret; 
0x00000000000151bb: je 0x151e1; and byte ptr [rax - 0x73], cl; add eax, 0x21cb; call rax; 
0x0000000000015229: je 0x1524f; xor byte ptr [rax - 0x73], cl; add eax, 0xffff639d; call rax; 
0x000000000001559c: je 0x155c2; xor byte ptr [rax - 0x75], cl; jl 0x155c7; sub byte ptr [rax - 0x73], cl; add eax, 0xffff6025; call rax; 
0x0000000000015fee: je 0x16014; adc bh, bh; adc eax, 0x63ab1; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000164d4: je 0x164fa; or byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000169cb: je 0x169f1; sub byte ptr [rax - 0x73], cl; add eax, 0x345b; lea rdi, [rsp + 0x30]; call rax; 
0x0000000000016b05: je 0x16b2b; sub byte ptr [rax - 0x73], cl; add eax, 0x3641; lea rdi, [rsp + 0x68]; call rax; 
0x0000000000016b7b: je 0x16ba1; or byte ptr [rax - 0x75], cl; jl 0x16ba6; and byte ptr [rax - 0x73], cl; add eax, 0xd6; call rax; 
0x0000000000016dce: je 0x16df4; adc bh, bh; adc eax, 0x62949; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000017c2a: je 0x17c50; or byte ptr [rax - 0x73], cl; add eax, 0xffffe88c; call rax; 
0x0000000000017c2a: je 0x17c50; or byte ptr [rax - 0x73], cl; add eax, 0xffffe88c; call rax; add rsp, 0x18; ret; 
0x0000000000017c6d: je 0x17c93; adc byte ptr [rax - 0x73], cl; add eax, 0x799; lea rdi, [rsp + 0x28]; call rax; 
0x000000000001839a: je 0x183c0; adc bh, bh; adc eax, 0x61acd; add rsp, 0x88; ret; 
0x00000000000187b8: je 0x187de; cmp byte ptr [rax - 0x75], cl; jl 0x187e3; lea rax, [rip + 0x1fa9]; call rax; 
0x0000000000018986: je 0x189ac; and byte ptr [rax - 0x75], cl; jl 0x189b1; sub byte ptr [rax - 0x73], cl; add eax, 0x1d1b; call rax; 
0x0000000000018ae8: je 0x18b0e; or al, 0x48; lea eax, [rip + 0x2eae]; lea rdi, [rsp + 0x210]; call rax; 
0x0000000000019457: je 0x1947d; and byte ptr [rax - 0x73], cl; add eax, 0x430bf; lea rdi, [rsp + 0x630]; call rax; 
0x000000000001979c: je 0x197c2; sbb bh, bh; adc eax, 0x5fceb; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x000000000001a132: je 0x1a158; pop rax; call rax; 
0x000000000001a277: je 0x1a29d; adc byte ptr [rax - 0x73], cl; push rsp; and al, 0x50; call rax; 
0x000000000001a54a: je 0x1a570; xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; lea rax, [rip + 0x417]; call rax; 
0x000000000001a884: je 0x1a8aa; or byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x000000000001a95a: je 0x1a980; or bh, bh; adc eax, 0x5f07d; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000001adfc: je 0x1ae22; adc byte ptr [rax - 0x73], cl; add eax, 0xffff07ca; call rax; 
0x000000000001bb2b: je 0x1bb51; and bh, bh; adc eax, 0x5e324; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x000000000001bc0a: je 0x1bc0d; add byte ptr [rax], al; lea rax, [rip + 0x25fb]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000001bd16: je 0x1bd3c; sbb byte ptr [rax - 0x73], cl; add eax, 0xb00; mov edi, 0x27; call rax; 
0x000000000001bd9d: je 0x1bdc3; or byte ptr [rax - 0x77], cl; and al, 0x10; mov qword ptr [rsp + 0x18], rsi; add rsp, 0x20; ret; 
0x000000000001bfee: je 0x1c014; adc bh, bh; adc eax, 0x5dd01; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001c52c: je 0x1c552; xor byte ptr [rax - 0x75], cl; jl 0x1c557; sub byte ptr [rax - 0x73], cl; add eax, 0xfffef095; call rax; 
0x000000000001c95b: je 0x1c981; adc al, ch; or eax, 0x4800001a; add esp, 0x18; ret; 
0x000000000001d31c: je 0x1d342; adc byte ptr [rax - 0x73], cl; add eax, 0xfffee2aa; call rax; 
0x000000000001dde6: je 0x1de0c; call qword ptr [rip + 0x5bbc1]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x000000000001e38a: je 0x1e3b0; mov rdx, qword ptr [rsp + 0x50]; lea rax, [rip - 0x2189]; lea rdi, [rsp + 0x20]; call rax; 
0x000000000001e5ca: je 0x1e5f0; or byte ptr [rax - 0x77], cl; push rsp; and al, 0x10; add rsp, 0x18; ret; 
0x000000000001ee4d: je 0x1ee73; add al, 0xe8; jnp 0x1edf4; add dword ptr [rax], eax; pop rcx; ret; 
0x00000000000207e7: je 0x207ea; ret; 
0x0000000000022871: je 0x22897; add al, 0xe8; push rdi; add dword ptr [eax], eax; pop rcx; ret; 
0x0000000000029e27: je 0x29e2c; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000002b620: je 0x2b5d7; add byte ptr [rax + 1], cl; out dx, al; jmp rsi; 
0x000000000002c170: je 0x2c1d4; lea rax, [r12 - 0x2e]; lea rcx, [rip + 0x35536]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000035e86: je 0x35eb2; xor eax, eax; pop rbx; pop r14; pop r15; ret; 
0x0000000000035f89: je 0x35f8d; pop rcx; ret; 
0x0000000000037220: je 0x371ca; add al, byte ptr [rax]; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x0000000000037bf4: je 0x37c00; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000000389ae: je 0x38860; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [r12]; call rbx; 
0x00000000000393d3: je 0x393df; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000039b7e: je 0x39b89; xor eax, eax; pop rcx; ret; 
0x0000000000039e64: je 0x39f6e; movzx ecx, byte ptr [r10]; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x000000000003b34d: je 0x3b373; and byte ptr [rcx + rcx*4 - 9], cl; call rax; 
0x000000000003bef8: je 0x3bf09; mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000003cfae: je 0x3cfd4; adc al, ch; sbb bh, byte ptr [rdi - 0x7ab70001]; ror byte ptr [rdi], 0x84; test dword ptr [rax], 0x89480000; ret; 
0x000000000003e40e: je 0x3e434; and byte ptr [rax - 0x75], cl; sbb eax, 0x3b5c0; mov edx, 0x90; call rbx; 
0x000000000003e9a7: je 0x3e9b4; mov qword ptr [rbx + 8], rax; xor eax, eax; mov qword ptr [rbx], rax; pop rbx; ret; 
0x0000000000041fc3: je 0x42072; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x0000000000042429: je 0x4242e; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000042960: je 0x42965; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x0000000000044f82: je 0x44fa8; sbb byte ptr [rax - 0x75], cl; xchg al, dl; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x820f; 
0x00000000000476c7: je 0x476ed; sbb cl, ch; ret 0xfff8; 
0x000000000004aada: je 0x4aae9; bsf ax, ax; movzx edx, ax; mov eax, 1; ret; 
0x000000000004abef: je 0x4ac01; bsf cx, cx; movzx edx, cx; add rdx, rax; mov eax, 1; ret; 
0x000000000004cce5: je 0x4ccf4; mov rdx, qword ptr [rdi + 0x18]; mov rdi, qword ptr [rdi + 0x10]; mov rax, rdi; pop rcx; ret; 
0x000000000004cd70: je 0x4cde0; add dword ptr [rax], eax; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000004ce5d: je 0x4ce8c; mov eax, 0x110000; add rsp, 0x98; pop rbx; pop r14; ret; 
0x000000000004d5fd: je 0x4d602; mov al, 1; ret; 
0x0000000000053716: je 0x53725; mov al, 1; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x000000000005366f: je 0x5372a; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x0000000000057ded: je 0x57df9; mov al, 1; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000057ec2: je 0x57ee9; dec rsi; mov qword ptr [rdi], rsi; ret; 
0x0000000000059358: je 0x5937e; sbb byte ptr [rax - 0x77], cl; ret 0x15ff; 
0x00000000000598e0: je 0x598f0; mov word ptr [rbx], 2; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x00000000000599e7: je 0x599f6; movups xmm0, xmmword ptr [rsi + 4]; movups xmmword ptr [rax + 1], xmm0; mov cl, 1; mov byte ptr [rax], cl; ret; 
0x000000000005a091: je 0x5a0b7; sub byte ptr [rcx + rcx*4 - 1], cl; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000005a333: je 0x5a350; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb3d7]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a424: je 0x5a429; mov al, 1; ret; 
0x000000000005a46d: je 0x5a493; add al, 0xff; adc eax, 0x1f662; pop rcx; ret; 
0x000000000005a49f: je 0x5a4c5; add al, 0xff; adc eax, 0x1f630; pop rcx; ret; 
0x000000000005a4dc: je 0x5a502; add al, 0xff; adc eax, 0x1f5f3; pop rcx; ret; 
0x000000000005a520: je 0x5a546; add al, 0xff; adc eax, 0x1f5af; pop rcx; ret; 
0x000000000005a620: je 0x5a646; add al, 0xff; adc eax, 0x1f4af; pop rcx; ret; 
0x000000000005a652: je 0x5a678; add al, 0xff; adc eax, 0x1f47d; pop rcx; ret; 
0x000000000005a68f: je 0x5a6b5; add al, 0xff; adc eax, 0x1f440; pop rcx; ret; 
0x000000000005a6d3: je 0x5a6f9; add al, 0xff; adc eax, 0x1f3fc; pop rcx; ret; 
0x000000000005aac6: je 0x5aae1; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000005abd8: je 0x5abef; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000005ae73: je 0x5ae83; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000005adf3: je 0x5b064; mov rdi, rbp; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x000000000005b069: je 0x5b08f; adc byte ptr [rcx + rcx*4 - 6], cl; call qword ptr [rbx + 0x18]; 
0x000000000005b091: je 0x5b0b7; adc byte ptr [rax - 0x75], cl; push rsp; and al, 0x20; call qword ptr [rbp + 0x18]; 
0x000000000005b0ba: je 0x5b0cd; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000005dd38: je 0x5dd3e; xor eax, eax; pop rcx; ret; 
0x000000000005ddb4: je 0x5ddbc; add rsp, 0x20; pop rbx; ret; 
0x000000000005ec0f: je 0x5ec11; add byte ptr [rdx + 5], bh; jmp rax; 
0x000000000005f12f: je 0x5f131; add byte ptr [rdx + 0xb], bh; jmp rax; 
0x0000000000009012: je 0x9016; call rax; 
0x0000000000009012: je 0x9016; call rax; add rsp, 8; ret; 
0x000000000000bbcd: je 0xbbd8; jmp rax; 
0x000000000000bbc1: je 0xbbd8; mov rax, qword ptr [rip + 0x6d8a6]; test rax, rax; je 0xbbd8; jmp rax; 
0x000000000000bc0e: je 0xbc18; jmp rax; 
0x000000000000bc02: je 0xbc18; mov rax, qword ptr [rip + 0x6e295]; test rax, rax; je 0xbc18; jmp rax; 
0x000000000000bdd9: je 0xbdff; xor byte ptr [rdi], cl; adc byte ptr [rsp + 0x28], al; movups xmmword ptr [rcx], xmm0; add rsp, 0xb8; ret; 
0x000000000000cd19: je 0xcd3f; sub byte ptr [rax - 0x73], cl; add eax, 0x2e18d; lea rdi, [rsp + 0x1c8]; call rax; 
0x000000000000cdb4: je 0xcdda; and byte ptr [rax - 0x73], cl; add eax, 0x4a432; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000d2d7: je 0xd2fd; sub byte ptr [rax - 0x73], cl; add eax, 0x2dbcf; lea rdi, [rsp + 0x1c8]; call rax; 
0x000000000000d378: je 0xd318; add al, 0; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000d372: je 0xd398; and byte ptr [rax - 0x73], cl; add eax, 0x49e74; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000d626: je 0xd64c; sbb byte ptr [rax - 0x73], cl; add eax, 0xc1d0; lea rdi, [rsp + 0x278]; call rax; 
0x000000000000f9db: je 0xfa01; and byte ptr [rax - 0x73], cl; add eax, 0x79ab; call rax; 
0x000000000000fa49: je 0xfa6f; xor byte ptr [rax - 0x73], cl; add eax, 0xffffbb7d; call rax; 
0x0000000000020e94: jg 0x20e95; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000002874b: jg 0x287c1; ret 0xdb85; 
0x0000000000031180: jg 0x311c6; ret 0x4808; 
0x0000000000036d0c: jg 0x36d1e; mov edx, 1; call qword ptr [rip + 0x42a6f]; lea rax, [rip + 0x400a0]; pop rcx; ret; 
0x0000000000039c0c: jg 0x39c10; add byte ptr [rax + 0x63], cl; adc al, 0x96; add rdx, rsi; jmp rdx; 
0x000000000003ec63: jg 0x3ec64; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000004a7a9: jg 0x4a7d3; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000004cced: jg 0x4ccff; mov rax, rdi; pop rcx; ret; 
0x000000000005dc75: jg 0x5dc77; add byte ptr [rdx + 0x28], bh; mov r8d, 0x11f; call 0x5db10; pop rcx; ret; 
0x000000000001a95f: jge 0x1a951; add eax, 0x48b4800; and al, 0x48; add esp, 0x28; ret; 
0x0000000000037bfc: jge 0x37bfe; call rbx; 
0x0000000000038489: jge 0x3848a; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003909c: jge 0x3909d; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x00000000000393db: jge 0x393dd; call rbx; 
0x0000000000041fcb: jge 0x41fcd; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x00000000000423a5: jge 0x423aa; add byte ptr [rax - 0x7b], cl; ror byte ptr [rax - 0x73], 0xd; mov esi, 0x48ffff9b; cmovne ecx, eax; call rcx; 
0x0000000000043a83: jge 0x43a84; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000047915: jge 0x47916; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000004a706: jge 0x4a707; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000057e9d: jge 0x57e9f; add byte ptr [rax], al; ret; 
0x0000000000059f8f: jge 0x59f91; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000059f9e: jge 0x59fa0; mov rax, qword ptr [rbp + 8]; mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x0000000000059fb3: jge 0x59fb5; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb754]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059fe9: jge 0x59feb; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb720]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000005a337: jge 0x5a339; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb3d7]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a365: jge 0x5a367; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb3b5]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a657: jge 0x5a64d; add dword ptr [rax], eax; pop rcx; ret; 
0x000000000005b880: jge 0x5b882; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9e99]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b89b: jge 0x5b89d; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9c6b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000000d4ef: jge 0xd499; add al, byte ptr [rax]; call rax; 
0x0000000000010b06: jl 0x10b2c; or byte ptr [rax - 0x73], cl; add eax, 0x2e470; call rax; 
0x0000000000010b53: jl 0x10b79; sbb byte ptr [rax - 0x73], cl; add eax, 0xd6b3; call rax; 
0x0000000000010b7d: jl 0x10ba3; adc byte ptr [rax - 0x73], cl; add eax, 0x2e3f9; call rax; 
0x0000000000010b8d: jl 0x10bb3; sbb bh, bh; adc eax, 0x68eba; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000010fd7: jl 0x10ffd; sbb byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x20; ret; 
0x00000000000114ea: jl 0x11510; or byte ptr [rax - 0x73], cl; add eax, 0xffffa54c; call rax; 
0x0000000000011598: jl 0x115be; adc byte ptr [rax - 0x73], cl; add eax, 0xffffa48e; call rax; 
0x00000000000118a6: jl 0x118cc; adc byte ptr [rax - 0x77], cl; je 0x118d1; sbb byte ptr [rax - 0x73], cl; add eax, 0x4806b; call rax; 
0x00000000000124ab: jl 0x124d1; adc al, ch; mov ebp, 0x48ffffca; add esp, 0x18; ret; 
0x00000000000124cb: jl 0x124f1; adc al, ch; mov ebp, 0x48ffffcf; add esp, 0x18; ret; 
0x00000000000128fc: jl 0x12922; or byte ptr [rax - 0x73], cl; adc eax, 0x6367a; lea rax, [rip - 0x71ed]; mov esi, 0x100; call rax; 
0x0000000000012936: jl 0x1295c; adc byte ptr [rax - 0x73], cl; adc eax, 0x63658; lea rax, [rip - 0x7227]; mov esi, 0x100; call rax; 
0x00000000000141f6: jl 0x1421c; sbb byte ptr [rax - 0x73], cl; or eax, 0x61e00; lea rax, [rip - 0x8877]; lea rdx, [rsp + 0x28]; call rax; 
0x000000000001432b: jl 0x14351; and byte ptr [rdx + 0x38], bh; call 0x9078; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x58; ret; 
0x0000000000015191: jl 0x151b7; adc byte ptr [rax - 0x75], cl; je 0x151bc; sbb byte ptr [rax - 0x73], cl; add eax, 0x5b60; call rax; 
0x00000000000151b6: jl 0x151dc; sbb byte ptr [rax - 0x77], cl; je 0x151e1; and byte ptr [rax - 0x73], cl; add eax, 0x21cb; call rax; 
0x0000000000015224: jl 0x1524a; sub byte ptr [rax - 0x77], cl; je 0x1524f; xor byte ptr [rax - 0x73], cl; add eax, 0xffff639d; call rax; 
0x00000000000155a1: jl 0x155c7; sub byte ptr [rax - 0x73], cl; add eax, 0xffff6025; call rax; 
0x000000000001629e: jl 0x162c4; or byte ptr [rax - 0x73], cl; xor eax, 0x5fe88; lea rax, [rip - 0xacbf]; call rax; 
0x0000000000016677: jl 0x1669d; pop rax; call rax; 
0x000000000001690f: jl 0x16935; lea rsi, [rsp + 0xe0]; call rax; 
0x0000000000016989: jl 0x169af; sub byte ptr [rax - 0x73], cl; add eax, 0x40ed; call rax; 
0x00000000000169e0: jl 0x16a06; sub byte ptr [rax - 0x73], cl; add eax, 0x4096; call rax; 
0x0000000000016a73: jl 0x16a99; sub bh, bh; adc eax, 0x63084; add rsp, 0x148; ret; 
0x0000000000016b80: jl 0x16ba6; and byte ptr [rax - 0x73], cl; add eax, 0xd6; call rax; 
0x00000000000187bd: jl 0x187e3; lea rax, [rip + 0x1fa9]; call rax; 
0x000000000001898b: jl 0x189b1; sub byte ptr [rax - 0x73], cl; add eax, 0x1d1b; call rax; 
0x0000000000019686: jl 0x196ac; or byte ptr [rax - 0x73], cl; add eax, 0xffffd6a0; call rax; 
0x0000000000019f4a: jl 0x19f70; or byte ptr [rax - 0x73], cl; add eax, 0xffffc5cc; call rax; 
0x000000000001a05b: jl 0x1a081; pop rax; lea rdx, [rsp + 0x70]; call rax; 
0x000000000001a126: jl 0x1a14c; sbb byte ptr [rax - 0x73], cl; add eax, 0xffffc1b0; lea rsi, [rsp + 0x58]; call rax; 
0x000000000001a50d: jl 0x1a533; adc dh, al; and al, 0x47; add byte ptr [rax - 0x73], cl; add eax, 0xfffff254; call rax; 
0x000000000001aaa7: jl 0x1aacd; or byte ptr [rax - 0x73], cl; add eax, 0x8f; call rax; 
0x000000000001aac7: jl 0x1aaed; or bh, bh; adc eax, 0x5f460; add rsp, 0x28; ret; 
0x000000000001ab76: jl 0x1ab9c; or byte ptr [rax - 0x77], cl; jl 0x1aba1; adc byte ptr [rax - 0x73], cl; add eax, 0xffffc13b; call rax; 
0x000000000001ab7b: jl 0x1aba1; adc byte ptr [rax - 0x73], cl; add eax, 0xffffc13b; call rax; 
0x000000000001ab8b: jl 0x1abb1; or byte ptr [rax - 0x73], cl; add eax, 0xbb; call rax; 
0x000000000001abab: jl 0x1abd1; or bh, bh; adc eax, 0x5f2dc; add rsp, 0x28; ret; 
0x000000000001ac9b: jl 0x1acc1; adc byte ptr [rcx], dh; shr byte ptr [rax - 0x14fd8aff], 5; add rsp, 0x18; ret; 
0x000000000001adf7: jl 0x1ae1d; or byte ptr [rax - 0x75], cl; je 0x1ae22; adc byte ptr [rax - 0x73], cl; add eax, 0xffff07ca; call rax; 
0x000000000001bb68: jl 0x1bb8e; mov rax, qword ptr [rip + 0x5db9e]; call rax; 
0x000000000001bb9f: jl 0x1bbc5; and byte ptr [rax - 0x73], cl; xor eax, 0x5a7bf; lea rax, [rip - 0x48b0]; call rax; 
0x000000000001bbc6: jl 0x1bbec; sub byte ptr [rax - 0x73], cl; add eax, 0xffffa500; call rax; 
0x000000000001bc17: jl 0x1bc3d; push rax; call rax; 
0x000000000001bcf2: jl 0x1bd18; push rax; call rax; 
0x000000000001bd41: jl 0x1bd67; push rax; call rax; 
0x000000000001bdbd: jl 0x1bde3; mov qword ptr [rsp + 8], rdi; mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x3c11f]; call rax; 
0x000000000001bdc2: jl 0x1bde8; or byte ptr [rax - 0x75], cl; jl 0x1bded; or byte ptr [rax - 0x73], cl; add eax, 0x3c11f; call rax; 
0x000000000001bdc7: jl 0x1bded; or byte ptr [rax - 0x73], cl; add eax, 0x3c11f; call rax; 
0x000000000001c032: jl 0x1c058; add al, 0x89; cmp al, 0x24; mov eax, dword ptr [rsp]; pop rcx; ret; 
0x000000000001c531: jl 0x1c557; sub byte ptr [rax - 0x73], cl; add eax, 0xfffef095; call rax; 
0x000000000001c8f6: jl 0x1c91c; or byte ptr [rbx + 0x24448907], cl; add al, 0x8b; and al, 4; add rsp, 0x10; ret; 
0x000000000001c9b4: jl 0x1c9da; mov qword ptr [rsp + 0xa8], rdi; lea rax, [rip - 0x786]; xor esi, esi; call rax; 
0x000000000001cd1e: jl 0x1cd44; push rax; lea rax, [rip + 0x58]; call rax; 
0x000000000001d317: jl 0x1d33d; or byte ptr [rax - 0x75], cl; je 0x1d342; adc byte ptr [rax - 0x73], cl; add eax, 0xfffee2aa; call rax; 
0x000000000001db7a: jl 0x1dba0; pop rax; lea rax, [rip + 0x3be8c]; call rax; 
0x000000000001df9d: jl 0x1dfc3; or byte ptr [rax - 0x75], cl; and al, 0x10; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x288; ret; 
0x000000000001e133: jl 0x1e159; sbb byte ptr [rax - 0x75], cl; and al, 0x20; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x278; ret; 
0x000000000001e246: jl 0x1e26c; or byte ptr [rax - 0x77], cl; jl 0x1e271; adc byte ptr [rax - 0x73], cl; add eax, 0xffffe55b; call rax; 
0x000000000001e24b: jl 0x1e271; adc byte ptr [rax - 0x73], cl; add eax, 0xffffe55b; call rax; 
0x000000000001e25b: jl 0x1e281; or byte ptr [rax - 0x73], cl; add eax, 0x5b; call rax; 
0x000000000001e27b: jl 0x1e2a1; or bh, bh; adc eax, 0x5bd2c; add rsp, 0x28; ret; 
0x000000000001e296: jl 0x1e2bc; sbb al, ch; ret 0xfead; 
0x000000000001e360: jl 0x1e386; sbb byte ptr [rax - 0x77], cl; cmp al, 0x24; mov rax, qword ptr [rsp]; add rsp, 0x20; ret; 
0x000000000001e5e6: jl 0x1e60c; or bh, bh; adc eax, 0x5b5d1; add rsp, 0x18; ret; 
0x000000000002f216: jl 0x2f23c; or byte ptr [rax - 0x75], cl; mov ah, 0x24; jo 0x2f224; add byte ptr [rax], al; call rbx; 
0x000000000003b44d: jl 0x3b473; dec dword ptr [rcx - 0x75]; jl 0x3b478; dec dword ptr [rcx - 0x75]; and al, 7; call qword ptr [rax]; 
0x000000000003b452: jl 0x3b478; dec dword ptr [rcx - 0x75]; and al, 7; call qword ptr [rax]; 
0x000000000003e838: jl 0x3e85e; adc byte ptr [rax - 0x77], cl; out 0x41, al; call rdi; 
0x000000000004277f: jl 0x427a5; adc byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000004568d: jl 0x45695; or byte ptr [rax - 1], cl; ret; 
0x000000000004ca05: jl 0x4ca2b; xor al, ch; ret; 
0x0000000000059dc1: jl 0x59de7; adc byte ptr [rax - 0x75], cl; and al, 8; call qword ptr [rax + 0x18]; 
0x0000000000059ed8: jl 0x59efe; adc byte ptr [rax - 0x73], cl; xor eax, 0xb0f2; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000005a0a9: jl 0x5a0cf; sub byte ptr [rax - 0x75], cl; and al, 0x30; lea rsi, [rip + 0xb661]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a24f: jl 0x5a275; adc byte ptr [rax - 0x75], cl; and al, 0x18; lea rsi, [rip + 0xb4bb]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a3ea: jl 0x5a410; adc byte ptr [rax - 0x75], cl; and al, 0x18; lea rsi, [rip + 0xb320]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005aaca: jl 0x5aaf0; or byte ptr [rax - 0x75], cl; and al, 0x10; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000005abdc: jl 0x5ac02; or byte ptr [rax - 0x75], cl; and al, 0x10; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000005ac2e: jl 0x5ac54; or byte ptr [rax - 0x75], cl; and al, 0x10; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000005dd5a: jl 0x5dd80; sbb byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rip + 0x8315]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000005defc: jl 0x5df22; and byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rip + 0x81a2]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000000a049: jl 0xa06f; or al, ch; inc dword ptr [rdi]; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000000c59e: jl 0xc5c4; or byte ptr [rax - 0x73], cl; xor eax, 0x69588; lea rax, [rip - 0xfbf]; call rax; 
0x000000000000d4d1: jl 0xd4f7; sub byte ptr [rdx + 1], bh; call 0xc4b0; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x2b0d6]; call rax; 
0x000000000000d4e0: jl 0xd506; sub byte ptr [rax - 0x73], cl; add eax, 0x2b0d6; call rax; 
0x000000000000d8e6: jl 0xd90c; push rax; call rax; 
0x000000000000da95: jl 0xdabb; push rax; call qword ptr [rip + 0x6bfb2]; add rsp, 0x1d8; ret; 
0x000000000000dd1e: jl 0xdd44; push rax; call rax; 
0x000000000000e03b: jl 0xe061; push rax; call qword ptr [rip + 0x6ba0c]; add rsp, 0x218; ret; 
0x000000000000e14d: jl 0xe155; add byte ptr [rax - 0x73], cl; add eax, 0x4c879; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000e162: jl 0xe188; sbb byte ptr [rax - 0x73], cl; add eax, 0x100a4; call rax; 
0x000000000000e188: jl 0xe1ae; adc byte ptr [rax - 0x73], cl; add eax, 0x49e4e; lea rsi, [rsp + 0x28]; call rax; 
0x000000000000e8fd: jl 0xe923; or byte ptr [rax - 0x73], cl; xor eax, 0x675d1; lea rax, [rip - 0x331e]; call rax; 
0x000000000000eb05: jl 0xeb2b; or al, 0x89; jl 0xeb2f; adc al, 0x83; jmp qword ptr [rax]; 
0x000000000000eb09: jl 0xeb2f; adc al, 0x83; jmp qword ptr [rax]; 
0x000000000000ec46: jl 0xec6c; adc bh, bh; xlatb; add rsp, 0x18; ret; 
0x000000000000ec86: jl 0xecac; or bh, bh; adc eax, 0x6ae91; add rsp, 0x18; ret; 
0x000000000000eea3: jl 0xeec9; or al, ch; and eax, 0x48000000; add esp, 0x28; ret; 
0x000000000000eef6: jl 0xef1c; or byte ptr [rax - 0x77], cl; jl 0xef21; adc byte ptr [rax - 0x73], cl; add eax, 0xf33b; call rax; 
0x000000000000eefb: jl 0xef21; adc byte ptr [rax - 0x73], cl; add eax, 0xf33b; call rax; 
0x000000000000f1a3: jl 0xf1c9; or al, ch; xor eax, 0x48000000; add esp, 0x28; ret; 
0x000000000000f22b: jl 0xf251; adc byte ptr [rax - 0x7d], cl; mov dword ptr [rax + 0x48], 0xb857058d; add byte ptr [rax], al; call rax; 
0x000000000000f453: jl 0xf479; or al, ch; jne 0xf459; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000000f566: jl 0xf58c; or bh, bh; adc eax, 0x6a5b1; add rsp, 0x18; ret; 
0x000000000000f9d6: jl 0xf9fc; sbb byte ptr [rax - 0x77], cl; je 0xfa01; and byte ptr [rax - 0x73], cl; add eax, 0x79ab; call rax; 
0x000000000000fa44: jl 0xfa6a; sub byte ptr [rax - 0x77], cl; je 0xfa6f; xor byte ptr [rax - 0x73], cl; add eax, 0xffffbb7d; call rax; 
0x000000000000fb45: jl 0xfb6b; or byte ptr [rcx - 0x74f3db84], cl; and al, 0xc; add rsp, 0x10; ret; 
0x000000000000fb49: jl 0xfb6f; or al, 0x8b; and al, 0xc; add rsp, 0x10; ret; 
0x000000000000fb65: jl 0xfb8b; or byte ptr [rcx - 0x74f3db84], cl; and al, 0xc; add rsp, 0x10; ret; 
0x000000000000fb69: jl 0xfb8f; or al, 0x8b; and al, 0xc; add rsp, 0x10; ret; 
0x0000000000011938: jle 0x11940; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x18; ret; 
0x000000000001fec2: jle 0x1fed4; ret; 
0x00000000000268e3: jle 0x268ed; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000269bd: jle 0x269c7; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026a8a: jle 0x26a94; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026b4c: jle 0x26b56; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026c29: jle 0x26c33; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026cfa: jle 0x26d04; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026dd8: jle 0x26de2; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026eb9: jle 0x26ec3; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026f8b: jle 0x26f95; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000027069: jle 0x27073; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000002713a: jle 0x27144; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000002720a: jle 0x27214; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000002a9e6: jle 0x2aa30; mov dword ptr [rdi + 8], ecx; mov byte ptr [rdi], 0x4b; add rsp, 0x20; ret; 
0x00000000000393b9: jle 0x393ba; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x000000000003d3ec: jle 0x3d3fe; mov rax, qword ptr [rsi + 0x18]; call qword ptr [rax + 0x28]; 
0x000000000004ad6c: jle 0x4ad76; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004b29a: jle 0x4b2a4; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004b36d: jle 0x4b377; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004d3fb: jle 0x4d412; add rsi, rax; mov rax, rsi; pop rcx; ret; 
0x0000000000056bac: jle 0x56bb6; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000005a2c0: jle 0x5a2ca; mov rdi, qword ptr [r15]; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xb243]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000009c1c: jle 0x9c26; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000009cf9: jle 0x9d03; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000009dca: jle 0x9dd4; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000a824: jle 0xa7ca; pop rbx; ret; 
0x000000000000b48c: jle 0xb496; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000b5ac: jle 0xb5b6; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000022f8d: jmp qword ptr [rax - 2]; 
0x000000000000eb0d: jmp qword ptr [rax]; 
0x000000000004e1ad: jmp qword ptr [rbp + 1]; 
0x000000000003df0a: jmp qword ptr [rcx]; 
0x000000000004f8bd: jmp qword ptr [rdi]; 
0x000000000005ba27: jmp qword ptr [rdx]; 
0x000000000000eaf2: jmp qword ptr [rsi + 0x2e]; 
0x0000000000026026: jmp qword ptr [rsi + 0x41]; 
0x0000000000023079: jmp qword ptr [rsi + 0x44]; 
0x0000000000009511: jmp qword ptr [rsi + 0x66]; 
0x000000000000a509: jmp qword ptr [rsi + 0xf]; 
0x00000000000596b6: jmp qword ptr [rsi + 1]; 
0x00000000000090f5: jmp qword ptr [rsi - 0x2d]; 
0x000000000002ad53: jmp qword ptr [rsi - 0x39]; 
0x00000000000596a9: jmp qword ptr [rsi - 0x46]; 
0x00000000000559e6: jmp qword ptr [rsi - 0x47]; 
0x000000000001dd2d: jmp qword ptr [rsi - 0x70]; 
0x000000000001381d: jmp qword ptr [rsi - 0x75]; 
0x0000000000031f7c: jmp qword ptr [rsi - 0x7d]; 
0x000000000000afe8: jmp rax; 
0x0000000000053e40: jmp rbx; 
0x000000000000a8b8: jmp rcx; 
0x000000000002b026: jmp rdi; 
0x000000000002b9c1: jmp rdx; 
0x000000000002b626: jmp rsi; 
0x00000000000129de: jne 0x129ea; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x0000000000012b4f: jne 0x12b6f; lea rdi, [rip + 0x4da99]; lea rdx, [rip + 0x63471]; lea rax, [rip - 0x74f6]; mov esi, 0x2b; call rax; 
0x000000000001306e: jne 0x1308e; lea rdi, [rip + 0x4d57a]; lea rdx, [rip + 0x62f6a]; lea rax, [rip - 0x7a15]; mov esi, 0x2b; call rax; 
0x00000000000141e3: jne 0x141ea; add rsp, 0x58; ret; 
0x000000000001426a: jne 0x14271; add rsp, 0x58; ret; 
0x0000000000014419: jne 0x1441a; dec dword ptr [rax - 0x73]; push rsp; and al, 0x20; call rax; 
0x0000000000014476: jne 0x1448b; mov rax, qword ptr [rsp + 8]; mov rax, qword ptr [rax + 8]; mov qword ptr [rsp + 0x50], rax; add rsp, 0x58; ret; 
0x0000000000014526: jne 0x1452d; add rsp, 0x38; ret; 
0x00000000000151ef: jne 0x151f6; add rsp, 0x38; ret; 
0x000000000001520b: jne 0x15218; lea rax, [rip + 0x41a4c]; call rax; 
0x0000000000016c95: jne 0x16c9c; add rsp, 0x38; ret; 
0x0000000000017218: jne 0x17227; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xd8; ret; 
0x00000000000172e7: jne 0x172f6; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xd8; ret; 
0x0000000000017414: jne 0x17425; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x00000000000174b2: jne 0x174be; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x0000000000017557: jne 0x17563; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x00000000000194ab: jne 0x194b1; add byte ptr [rax - 0x73], cl; add eax, 0x336b; mov edi, 0x27; mov edx, 0x1b; call rax; 
0x0000000000019ebb: jne 0x19ec7; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x0000000000019f46: jne 0x19f58; mov rdi, qword ptr [rsp + 8]; lea rax, [rip - 0x3a34]; call rax; 
0x000000000001a4ae: jne 0x1a4ba; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x000000000001a648: jne 0x1a654; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x000000000001aa14: jne 0x1aa1b; add rsp, 0x18; ret; 
0x000000000001aa51: jne 0x1aa58; add rsp, 0x18; ret; 
0x000000000001abf5: jne 0x1abfc; add rsp, 0x18; ret; 
0x000000000001ac34: jne 0x1ac3b; add rsp, 0x18; ret; 
0x000000000001cd1a: jne 0x1cd30; mov rdi, qword ptr [rsp + 0x50]; lea rax, [rip + 0x58]; call rax; 
0x000000000001f3a4: jne 0x1f3e6; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001ffc0: jne 0x20002; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020a27: jne 0x20a69; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020ac5: jne 0x20b07; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020cd5: jne 0x20d17; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020de4: jne 0x20e26; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020e8a: jne 0x20ec9; mov r14, r15; dec r14; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x00000000000226d4: jne 0x226dd; shr rdi, 8; mov eax, edi; ret; 
0x00000000000268d7: jne 0x268f0; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000269b1: jne 0x269ca; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026a7e: jne 0x26a97; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026b40: jne 0x26b59; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026c1d: jne 0x26c36; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026cee: jne 0x26d07; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026dcc: jne 0x26de5; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026ead: jne 0x26ec6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026f7f: jne 0x26f98; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000002705d: jne 0x27076; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000002712e: jne 0x27147; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000271fe: jne 0x27217; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000029eb1: jne 0x29eb6; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000002a68e: jne 0x2a5fa; mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000002a6b9: jne 0x2a658; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000002a827: jne 0x2a835; mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000002a717: jne 0x2a87a; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000002a9e5: jne 0x2aa65; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x20; ret; 
0x00000000000323fa: jne 0x32400; add byte ptr [rax - 1], cl; ret; 
0x0000000000032613: jne 0x32607; add al, byte ptr [rax]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003562f: jne 0x356f8; call rbx; 
0x0000000000037861: jne 0x3789e; lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000378ea: jne 0x378f5; lea rax, [rip + 0x4275d]; pop rcx; ret; 
0x0000000000037bce: jne 0x37b40; lea rbp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000037d7a: jne 0x37d85; lea rax, [rip + 0x42305]; pop rcx; ret; 
0x0000000000037fcd: jne 0x3800d; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003847f: jne 0x384c6; mov r12, rbp; dec r12; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000038686: jne 0x38698; add rsp, 0xb0; pop rbx; ret; 
0x0000000000038988: jne 0x3886f; lea r12, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000038e3c: jne 0x38e7b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000038f3c: jne 0x38f7b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000039098: jne 0x39099; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000039094: jne 0x390d1; lea r14, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x00000000000391ce: jne 0x3920b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000039b64: jne 0x39b6a; xor eax, eax; pop rcx; ret; 
0x000000000003a612: jne 0x3a616; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000003ad5e: jne 0x3ad9b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003ae1e: jne 0x3ae5b; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003b449: jne 0x3b48a; lea r15, [r12 - 1]; mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x000000000003bff0: jne 0x3c02f; mov r14, rbx; dec r14; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003c10c: jne 0x3c114; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000003c2ee: jne 0x3c32d; mov r14, rbx; dec r14; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003c40e: jne 0x3c44d; mov r14, rbx; dec r14; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003c943: jne 0x3c944; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000003c9cc: jne 0x3c9cd; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000003ca43: jne 0x3ca44; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000003ca71: jne 0x3ca72; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000003cf38: jne 0x3d0be; mov rdi, r15; call rax; 
0x000000000003dcec: jne 0x3dd74; lea rax, [rip + 0x23f7b]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000003e609: jne 0x3e622; movzx eax, byte ptr [rip + 0x3bb16]; lea rdx, [rip + 0x3bb07]; lea rax, [rip + 0x3bb09]; pop rcx; ret; 
0x000000000003ec5b: jne 0x3ecaf; lea rbx, [r15 - 1]; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x0000000000040c36: jne 0x40c4a; mov qword ptr [rbx], 3; add rsp, 0x108; pop rbx; pop r14; ret; 
0x0000000000043924: jne 0x43962; lea rbp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000043a7f: jne 0x43a80; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000043a7b: jne 0x43ab8; lea r14, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000047909: jne 0x444d6; lea rbx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000048df0: jne 0x48e2d; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000004ad60: jne 0x4ad79; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004b28e: jne 0x4b2a7; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004b361: jne 0x4b37a; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004efbf: jne 0x4efcb; mov byte ptr [rdi + 1], 0; mov al, 1; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000004f0a4: jne 0x4f0b0; mov byte ptr [rdi + 1], 0; mov al, 1; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000004f32c: jne 0x4f33a; mov qword ptr [rbx + 0x20], r14; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000053737: jne 0x53795; add al, byte ptr [rax]; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x0000000000056ba0: jne 0x56bb9; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000057eda: jne 0x57edc; add byte ptr [rax], al; ret; 
0x000000000005a089: jne 0x59f3a; lea rsi, [rsp + 0x28]; mov rdi, r15; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000059faf: jne 0x59f3a; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb754]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059f9a: jne 0x59f3a; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x0000000000059fca: jne 0x59f3a; mov rdi, r15; mov rsi, rbp; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000059fe5: jne 0x5a009; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb720]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000005a1b0: jne 0x5a1dd; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; lea rsi, [rip + 0xb561]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a2a0: jne 0x5a2c2; mov rdi, qword ptr [r15]; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xb476]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a361: jne 0x5a381; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb3b5]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7a4: jne 0x5b7c0; mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x9f72]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7be: jne 0x5b7d8; mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x9d45]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b87c: jne 0x5b899; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9e99]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b897: jne 0x5b8b2; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9c6b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005cf45: jne 0x5cf30; ret; 
0x000000000005ddc5: jne 0x5dde3; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x794c]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005de54: jne 0x5de64; mov byte ptr [r8 + 1], 1; mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000005de8c: jne 0x5de70; mov qword ptr [r8 + 8], rax; xor eax, eax; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000005df6f: jne 0x5df8b; mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x77a7]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df96: jne 0x5df98; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x000000000005df89: jne 0x5dfa3; mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x757a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ecae: jne 0x5ecca; mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x6a68]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ecc8: jne 0x5ece2; mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x683b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005f0ca: jne 0x5f0b0; mov rax, r9; and al, 1; pop rcx; ret; 
0x000000000000910c: jne 0x90f0; test dx, dx; setne al; pop rbx; ret; 
0x00000000000091b9: jne 0x9170; cmp r11, 3; jne 0x9170; pop rbx; ret; 
0x00000000000091bf: jne 0x9170; pop rbx; ret; 
0x0000000000009c10: jne 0x9c29; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000009ced: jne 0x9d06; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000009dbe: jne 0x9dd7; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000009f7d: jne 0x9f84; add rsp, 0x28; ret; 
0x0000000000009fcd: jne 0x9fd4; add rsp, 0x28; ret; 
0x000000000000a01d: jne 0xa024; add rsp, 0x28; ret; 
0x000000000000b480: jne 0xb499; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000b5a0: jne 0xb5b9; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000c228: jne 0xc233; mov eax, dword ptr [rsp + 0x14]; add rsp, 0x28; ret; 
0x000000000000c2e4: jne 0xc2f0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x000000000000c374: jne 0xc384; mov rax, qword ptr [rsp + 0x18]; mov edx, dword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x000000000000c3d8: jne 0xc3e3; mov eax, dword ptr [rsp + 0x14]; add rsp, 0x28; ret; 
0x000000000000cf8b: jne 0xcf8d; add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x2a949; call rax; 
0x000000000000e594: jne 0xe59b; add rsp, 0x38; ret; 
0x000000000000e904: jne 0xe90c; add byte ptr [rax - 0x73], cl; add eax, 0xffffcce2; call rax; 
0x000000000000efb2: jne 0xefb9; add rsp, 0x18; ret; 
0x000000000000f457: jne 0xf459; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000000f4b5: jne 0xf4bc; add rsp, 0x18; ret; 
0x000000000000f514: jne 0xf51b; add rsp, 0x18; ret; 
0x000000000000f5a0: jne 0xf5a7; add rsp, 0x18; ret; 
0x000000000000fa0f: jne 0xfa16; add rsp, 0x38; ret; 
0x000000000000fa2b: jne 0xfa38; lea rax, [rip + 0x4722c]; call rax; 
0x0000000000011336: jno 0x11348; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xc8; ret; 
0x0000000000016267: jno 0x16289; mov qword ptr [rcx + 0x28], rdx; add rsp, 0xa8; ret; 
0x0000000000020d13: jno 0x20c9f; add eax, 0x5e415b00; pop r15; ret; 
0x000000000002a2c1: jno 0x2a2c6; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000002a331: jno 0x2a336; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000002a399: jno 0x2a39e; add byte ptr [rcx + 0x63], cl; add al, 0x81; add rax, r9; jmp rax; 
0x0000000000039653: jno 0x3965f; add al, 0; mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x000000000003e5d3: jno 0x3e583; add eax, dword ptr [rax]; mov eax, dword ptr [rax]; pop rcx; ret; 
0x0000000000056a13: jno 0x56a42; add al, byte ptr [rax]; ret; 
0x000000000005eed3: jno 0x5eed5; add byte ptr [rdx + 9], bh; call qword ptr [rax + 0x18]; 
0x000000000000c567: jno 0xc589; mov qword ptr [rcx + 0x28], rdx; add rsp, 0xa8; ret; 
0x00000000000121a2: jnp 0x121aa; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000001ee51: jnp 0x1edf4; add dword ptr [rax], eax; pop rcx; ret; 
0x000000000001f3ac: jnp 0x1f3ad; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001ffc4: jnp 0x1ffc5; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000001ffc8: jnp 0x1ffc9; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002080a: jnp 0x20814; add dh, byte ptr [rbx + 0x17]; cmp dword ptr [rbx + 0x10], 2; jae 0x20835; pop rbx; ret; 
0x0000000000020810: jnp 0x20822; add dh, byte ptr [rbx + 0x20]; pop rbx; ret; 
0x0000000000020a2b: jnp 0x20a2c; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020a2f: jnp 0x20a30; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020acd: jnp 0x20ace; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020cd9: jnp 0x20cda; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020cdd: jnp 0x20cde; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020de8: jnp 0x20de9; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000020dec: jnp 0x20ded; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b613: jnp 0x2b65d; add eax, edi; lea rbp, [rip + 0x35f1e]; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x00000000000366e1: jnp 0x366e2; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000366e5: jnp 0x366e6; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000037869: jnp 0x3786a; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000037bda: jnp 0x37bdb; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000037fd1: jnp 0x37fd2; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000037fd5: jnp 0x37fd6; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000038994: jnp 0x38995; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000038e40: jnp 0x38e41; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000038e44: jnp 0x38e45; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000038f40: jnp 0x38f41; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000038f44: jnp 0x38f45; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000391d2: jnp 0x391d3; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000391d6: jnp 0x391d7; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000039fdd: jnp 0x39fe1; add byte ptr [rax + 0x63], cl; adc al, 0x88; add rdx, rax; jmp rdx; 
0x000000000003a067: jnp 0x3a06b; add byte ptr [rax + 0x63], cl; or al, 0x8a; add rcx, rdx; jmp rcx; 
0x000000000003ad62: jnp 0x3ad63; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003ad66: jnp 0x3ad67; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003ae22: jnp 0x3ae23; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003ae26: jnp 0x3ae27; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003bffa: jnp 0x3bffb; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003c2f8: jnp 0x3c2f9; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003c418: jnp 0x3c419; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003cf31: jnp 0x3cf43; add byte ptr [rcx - 0x75], cl; and byte ptr [rdi], r9b; test dword ptr [rax + 0x4c000001], eax; mov edi, edi; call rax; 
0x000000000003d0cf: jnp 0x3d0e1; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000003dcf5: jnp 0x3dd36; add al, byte ptr [rax]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000004392c: jnp 0x4392d; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000048df4: jnp 0x48df5; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000048df8: jnp 0x48df9; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000004a80d: jnp 0x4a837; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000004d5c9: jnp 0x4d593; add al, byte ptr [rax]; add rsp, 0x48; ret; 
0x0000000000057ed0: jnp 0x57ed2; add byte ptr [rax], al; ret; 
0x000000000000c9cb: jnp 0xc9cd; add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x2af09; call rax; 
0x000000000000d961: jnp 0xd902; add al, byte ptr [rax]; call rax; 
0x000000000000dd41: jnp 0xdceb; add al, byte ptr [rax]; lea rdi, [rsp + 0x68]; call rax; 
0x0000000000011332: jns 0x1133c; mov qword ptr [rcx + 0x10], rsi; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xc8; ret; 
0x0000000000011683: jns 0x11684; dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x58; ret; 
0x0000000000016263: jns 0x1626d; mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0xa8; ret; 
0x000000000001bb64: jns 0x1bb51; add byte ptr [rbx + 0x4844247c], cl; mov eax, dword ptr [rip + 0x5db9e]; call rax; 
0x0000000000044bf6: jns 0x44c41; or byte ptr [rdi], cl; xchg eax, esp; ret 0x8b48; 
0x000000000005ddd2: jns 0x5ddd4; add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; 
0x000000000005ddd2: jns 0x5ddd4; add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000005ddee: jns 0x5ddf0; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x000000000005ddee: jns 0x5ddf0; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x00000000000091b7: jns 0x91bb; jne 0x9170; cmp r11, 3; jne 0x9170; pop rbx; ret; 
0x000000000000c563: jns 0xc56d; mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0xa8; ret; 
0x000000000000e153: jns 0xe11d; add al, 0; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000010b0c: jo 0x10af2; add al, byte ptr [rax]; call rax; 
0x0000000000010cd4: jo 0x10d1e; add esp, 0x78; ret; 
0x0000000000010ecc: jo 0x10f16; mov esi, dword ptr [rsp + 0x68]; mov rdx, qword ptr [rsp + 0x70]; call 0xe3b0; add rsp, 0x78; ret; 
0x0000000000016708: jo 0x16752; lea eax, [rip + 0x3a40]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000001882d: jo 0x18830; add byte ptr [rax], al; call rax; 
0x0000000000018848: jo 0x1884b; add byte ptr [rax], al; call rax; 
0x000000000001a051: jo 0x1a09b; lea eax, [rip + 0xc67]; lea rdi, [rsp + 0x58]; lea rdx, [rsp + 0x70]; call rax; 
0x000000000001a300: jo 0x1a34a; lea eax, [rip - 0x2d98]; lea rsi, [rsp + 0x70]; call rax; 
0x000000000001ab58: jo 0x1ab62; call qword ptr [rip + 0x5f218]; add rsp, 0x28; ret; 
0x000000000001ade5: jo 0x1ae2f; mov dword ptr [rsp + 0x28], eax; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000001b4f7: jo 0x1b541; add esp, 0x2c8; ret; 
0x000000000001caed: jo 0x1cb37; mov edx, dword ptr [rsp + 0x70]; mov qword ptr [rsp + 0x130], rdx; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x000000000001caf2: jo 0x1cb3c; mov dword ptr [rsp + 0x130], edx; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x000000000001d305: jo 0x1d34f; mov dword ptr [rsp + 0x28], eax; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000001e1a9: jo 0x1e1b3; lea rax, [rip - 0xac2]; call rax; 
0x000000000001e1d0: jo 0x1e1da; call qword ptr [rip + 0x5bcb0]; add rsp, 0x28; ret; 
0x0000000000020914: jo 0x208a4; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x00000000000226a9: jo 0x226b0; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000002f21d: jo 0x2f224; add byte ptr [rax], al; call rbx; 
0x000000000003c75a: jo 0x3c7b7; pop r12; pop r14; pop r15; pop rbp; ret; 
0x000000000003cd55: jo 0x3cd5f; lea rdx, [rip + 0x3a822]; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000040882: jo 0x408df; ret; 
0x000000000004088d: jo 0x408ea; ret; 
0x0000000000047510: jo 0x47513; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x20]; mov qword ptr [rsp + 0x178], rax; lea rsi, [rsp + 0x150]; call qword ptr [rcx + 0x20]; 
0x0000000000050b33: jo 0x50b90; pop r12; pop r14; pop r15; pop rbp; ret; 
0x00000000000567cc: jo 0x567a7; jmp qword ptr [rsi + 0xf]; 
0x0000000000056d39: jo 0x56d4b; ret; 
0x0000000000056d56: jo 0x56d68; ret; 
0x0000000000056d6e: jo 0x56d80; ret; 
0x0000000000056d88: jo 0x56d9a; ret; 
0x0000000000059cb3: jo 0x59d10; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000005a14a: jo 0x5a1a7; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000005a313: jo 0x5a370; pop r12; pop r14; pop r15; pop rbp; ret; 
0x000000000005f09d: jo 0x5f09f; add byte ptr [rax - 0x77], cl; ret 0x6666; 
0x000000000000bd19: jo 0xbd63; mov dword ptr [rsp + 0x18], edx; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rcx], rdx; add rsp, 0x78; ret; 
0x000000000000bf59: jo 0xbf63; call qword ptr [rip + 0x6d727]; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000d19c: jo 0xd1ae; add dword ptr [rax], eax; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000e26d: jo 0xe277; call 0xbc70; pop rcx; ret; 
0x000000000000ed0c: jo 0xed16; call 0x12540; add rsp, 0x28; ret; 
0x000000000000f158: jo 0xf162; call 0x126b0; add rsp, 0x28; ret; 
0x0000000000013073: jp 0x1304a; add al, 0; lea rdx, [rip + 0x62f6a]; lea rax, [rip - 0x7a15]; mov esi, 0x2b; call rax; 
0x000000000003a066: jp 0x3a0e3; add al, byte ptr [rax]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000005df95: jp 0x5e00c; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000010c63: js 0x10cad; mov dword ptr [rsp], edi; lea rax, [rip + 0x60c1]; call rax; 
0x00000000000142a4: js 0x14245; add byte ptr [rax], al; lea rdi, [rsp + 0x28]; call rax; 
0x000000000001538c: js 0x153d6; mov edx, dword ptr [rsp + 0x80]; add rsp, 0x148; ret; 
0x000000000001808b: js 0x18091; add byte ptr [rax], al; ret; 
0x0000000000019017: js 0x1901b; add byte ptr [rax], al; ret; 
0x0000000000019a9c: js 0x19a9f; add byte ptr [rax], al; ret; 
0x000000000001a086: js 0x1a090; lea rax, [rip + 0x961]; call rax; 
0x000000000001adf3: js 0x1adb8; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [rsp + 0x10]; lea rax, [rip - 0xf836]; call rax; 
0x000000000001be38: js 0x1be82; mov dword ptr [rsp + 0x80], edx; add rsp, 0x88; ret; 
0x000000000001c31c: js 0x1c366; mov edx, dword ptr [rsp + 0x80]; add rsp, 0x148; ret; 
0x000000000001d313: js 0x1d2d8; mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [rsp + 0x10]; lea rax, [rip - 0x11d56]; call rax; 
0x000000000001e144: js 0x1e148; add byte ptr [rax], al; ret; 
0x000000000002a330: js 0x2a3a3; add eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000039b08: js 0x39a8a; add al, byte ptr [rax]; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000003c94b: js 0x3c94c; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000003c9d4: js 0x3c9d5; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000003ca4b: js 0x3ca4c; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000003ca79: js 0x3ca7a; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000003cfdb: js 0x3cfdc; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000003d082: js 0x3d083; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000003d4f3: js 0x3d550; pop r12; pop r14; pop r15; ret; 
0x000000000003e772: js 0x3e7cf; pop r14; pop r15; pop rbp; ret; 
0x00000000000422d1: js 0x4232e; pop rbp; ret; 
0x000000000004751d: js 0x47520; add byte ptr [rax], al; lea rsi, [rsp + 0x150]; call qword ptr [rcx + 0x20]; 
0x000000000004ae91: js 0x4aebb; mov dword ptr [rax + 0x2c], r10d; pop rbx; pop r14; ret; 
0x000000000004cd33: js 0x4cd3a; add qword ptr [rdi + 0x18], rsi; ret; 
0x000000000004f8cc: js 0x4f918; add dword ptr [rax], eax; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000005d668: js 0x5d672; mov qword ptr [rax + 0x10], r8; mov qword ptr [rax + 0x18], rcx; pop rbx; pop rbp; ret; 
0x000000000000cb43: js 0xcb46; add byte ptr [rax], al; call rax; 
0x000000000000cb60: js 0xcb63; add byte ptr [rax], al; call rax; 
0x000000000000cbe6: js 0xcbe9; add byte ptr [rax], al; call rax; 
0x000000000000d103: js 0xd106; add byte ptr [rax], al; call rax; 
0x000000000000d120: js 0xd123; add byte ptr [rax], al; call rax; 
0x000000000000d1a4: js 0xd1a7; add byte ptr [rax], al; call rax; 
0x000000000000d634: js 0xd638; add byte ptr [rax], al; call rax; 
0x000000000000d852: js 0xd856; add byte ptr [rax], al; call rax; 
0x000000000000f404: js 0xf407; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000005408a: js 0xffffffff834d479c; ret 0x4c02; 
0x000000000000d962: lahf; add al, byte ptr [rax]; call rax; 
0x000000000000cd94: lahf; add byte ptr [rax], al; lea rdi, [rsp + 0x190]; call rax; 
0x00000000000142a5: lahf; add byte ptr [rax], al; lea rdi, [rsp + 0x28]; call rax; 
0x000000000005b7b1: lahf; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000001f861: lahf; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x000000000000d57d: lahf; out dx, eax; add al, 0; lea rdi, [rsp + 0x260]; mov qword ptr [rsp + 0x40], rdi; call rax; 
0x000000000004c837: lahf; xor byte ptr [rip - 0xb80000], al; ret 0x3948; 
0x0000000000053dee: lar ecx, word ptr [rax - 1]; ret 0x8948; 
0x0000000000053ded: lar r9d, word ptr [rax - 1]; ret 0x8948; 
0x0000000000021706: lcall [rbx + 0x41]; pop rsi; pop r15; ret; 
0x0000000000042796: lea eax, [rax + rax*8]; add rsp, 0x28; ret; 
0x0000000000035f41: lea eax, [rax - 0x20]; pop rbx; pop r14; pop r15; ret; 
0x0000000000039e71: lea eax, [rax]; add rax, r13; jmp rax; 
0x000000000002835b: lea eax, [rbx]; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000004096b: lea eax, [rbx]; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000000e166: lea eax, [rip + 0x100a4]; call rax; 
0x0000000000019b00: lea eax, [rip + 0x100a]; call rax; 
0x000000000000dd16: lea eax, [rip + 0x104f4]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000000dcbf: lea eax, [rip + 0x1054b]; lea rdi, [rsp + 0xe8]; call rax; 
0x000000000000dc76: lea eax, [rip + 0x10594]; lea rdi, [rsp + 0xe8]; call rax; 
0x000000000000dc34: lea eax, [rip + 0x105d6]; lea rdi, [rsp + 0x100]; call rax; 
0x000000000000dbb2: lea eax, [rip + 0x10658]; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000019a77: lea eax, [rip + 0x1083]; lea rdi, [rsp + 0xb0]; call rax; 
0x000000000000d8de: lea eax, [rip + 0x1092c]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000000d729: lea eax, [rip + 0x10ae1]; lea rdi, [rsp + 0x248]; call rax; 
0x000000000000d6e8: lea eax, [rip + 0x10b22]; lea rdi, [rsp + 0x248]; call rax; 
0x000000000000d5d9: lea eax, [rip + 0x10c31]; lea rdi, [rsp + 0x248]; call rax; 
0x000000000000d459: lea eax, [rip + 0x10db1]; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000053e33: lea eax, [rip + 0x10df7]; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x000000000000d1b8: lea eax, [rip + 0x11052]; lea rdi, [rsp + 0x120]; call rax; 
0x000000000000d19a: lea eax, [rip + 0x11070]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000d116: lea eax, [rip + 0x110f4]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000cf04: lea eax, [rip + 0x11306]; lea rdi, [rsp + 0x88]; call rax; 
0x000000000000ce9b: lea eax, [rip + 0x1136f]; lea rdi, [rsp + 0x100]; call rax; 
0x000000000000cbfa: lea eax, [rip + 0x11610]; lea rdi, [rsp + 0x120]; call rax; 
0x000000000000cbdc: lea eax, [rip + 0x1162e]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000cb56: lea eax, [rip + 0x116b4]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000c944: lea eax, [rip + 0x118c6]; lea rdi, [rsp + 0x88]; call rax; 
0x000000000001c1d2: lea eax, [rip + 0x1c28]; call rax; 
0x000000000001c1d2: lea eax, [rip + 0x1c28]; call rax; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000015fae: lea eax, [rip + 0x1c8c]; lea rdx, [rsp + 0x18]; call rax; 
0x000000000001898f: lea eax, [rip + 0x1d1b]; call rax; 
0x00000000000188f4: lea eax, [rip + 0x1d66]; lea rdi, [rsp + 0x140]; call rax; 
0x0000000000018726: lea eax, [rip + 0x1f34]; lea rdi, [rsp + 0xd0]; call rax; 
0x00000000000187c1: lea eax, [rip + 0x1fa9]; call rax; 
0x0000000000018bb1: lea eax, [rip + 0x2059]; lea rdi, [rsp + 0x140]; call rax; 
0x0000000000018b6f: lea eax, [rip + 0x209b]; lea rdi, [rsp + 0x140]; call rax; 
0x00000000000151bf: lea eax, [rip + 0x21cb]; call rax; 
0x000000000001890c: lea eax, [rip + 0x22fe]; lea rdi, [rsp + 0x140]; call rax; 
0x000000000003dcf3: lea eax, [rip + 0x23f7b]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000001679a: lea eax, [rip + 0x24a0]; mov edi, 4; call rax; 
0x000000000001bd49: lea eax, [rip + 0x24c1]; lea rdi, [rsp + 0x80]; call rax; 
0x000000000001873e: lea eax, [rip + 0x24cc]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000001bd39: lea eax, [rip + 0x24d1]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000001bcea: lea eax, [rip + 0x2520]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000001bc0f: lea eax, [rip + 0x25fb]; lea rdi, [rsp + 0x50]; call rax; 
0x0000000000039fda: lea eax, [rip + 0x27bec]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x0000000000039b06: lea eax, [rip + 0x28078]; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000000deca: lea eax, [rip + 0x29a10]; call rax; 
0x000000000000d95f: lea eax, [rip + 0x29f7b]; call rax; 
0x000000000000d917: lea eax, [rip + 0x2a453]; call rax; 
0x000000000000d934: lea eax, [rip + 0x2a466]; lea rdi, [rsp + 0x98]; call rax; 
0x000000000000e04d: lea eax, [rip + 0x2a56d]; lea rdi, [rsp + 0x1c8]; call rax; 
0x000000000000dea2: lea eax, [rip + 0x2a718]; lea rdi, [rsp + 0x158]; call rax; 
0x000000000000de24: lea eax, [rip + 0x2a796]; lea rdi, [rsp + 0x128]; call rax; 
0x000000000000ddea: lea eax, [rip + 0x2a7d0]; lea rdi, [rsp + 0xf8]; call rax; 
0x000000000000ddb0: lea eax, [rip + 0x2a80a]; lea rdi, [rsp + 0xc8]; call rax; 
0x000000000000dd76: lea eax, [rip + 0x2a844]; lea rdi, [rsp + 0x98]; call rax; 
0x000000000003721e: lea eax, [rip + 0x2a874]; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x000000000000dd3f: lea eax, [rip + 0x2a87b]; lea rdi, [rsp + 0x68]; call rax; 
0x000000000000d4ed: lea eax, [rip + 0x2a87d]; call rax; 
0x000000000000d4fe: lea eax, [rip + 0x2a89c]; lea rdi, [rsp + 0x220]; call rax; 
0x000000000000cf91: lea eax, [rip + 0x2a949]; call rax; 
0x000000000000dc21: lea eax, [rip + 0x2a999]; lea rdi, [rsp + 0x120]; call rax; 
0x000000000000db77: lea eax, [rip + 0x2aa43]; lea rdi, [rsp + 0x160]; call rax; 
0x000000000000da81: lea eax, [rip + 0x2ab39]; lea rdi, [rsp + 0x190]; call rax; 
0x000000000000d907: lea eax, [rip + 0x2acb3]; lea rdi, [rsp + 0x68]; call rax; 
0x000000000000d7aa: lea eax, [rip + 0x2ae10]; lea rdi, [rsp + 0x2a8]; call rax; 
0x000000000000cf43: lea eax, [rip + 0x2ae27]; call rax; 
0x000000000000cf66: lea eax, [rip + 0x2ae34]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000000d714: lea eax, [rip + 0x2aea6]; lea rdi, [rsp + 0x2e8]; call rax; 
0x000000000000c9d1: lea eax, [rip + 0x2af09]; call rax; 
0x000000000000d4e4: lea eax, [rip + 0x2b0d6]; call rax; 
0x000000000000d40d: lea eax, [rip + 0x2b1ad]; lea rdi, [rsp + 0x2e8]; call rax; 
0x000000000000c983: lea eax, [rip + 0x2b3e7]; call rax; 
0x000000000000c9a6: lea eax, [rip + 0x2b3f4]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000000d0d0: lea eax, [rip + 0x2b4ea]; lea rdi, [rsp + 0x348]; call rax; 
0x000000000000cf30: lea eax, [rip + 0x2b68a]; lea rdi, [rsp + 0xa0]; call rax; 
0x000000000000ce4f: lea eax, [rip + 0x2b76b]; lea rdi, [rsp + 0x2e8]; call rax; 
0x000000000000cb10: lea eax, [rip + 0x2baaa]; lea rdi, [rsp + 0x348]; call rax; 
0x000000000000c970: lea eax, [rip + 0x2bc4a]; lea rdi, [rsp + 0xa0]; call rax; 
0x0000000000017d78: lea eax, [rip + 0x2cb2]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000d2db: lea eax, [rip + 0x2dbcf]; lea rdi, [rsp + 0x1c8]; call rax; 
0x0000000000010c21: lea eax, [rip + 0x2e0c9]; lea rdi, [rsp + 0x38]; call rax; 
0x000000000000cd1d: lea eax, [rip + 0x2e18d]; lea rdi, [rsp + 0x1c8]; call rax; 
0x0000000000010b81: lea eax, [rip + 0x2e3f9]; call rax; 
0x0000000000010b0a: lea eax, [rip + 0x2e470]; call rax; 
0x0000000000018aec: lea eax, [rip + 0x2eae]; lea rdi, [rsp + 0x210]; call rax; 
0x00000000000194af: lea eax, [rip + 0x336b]; mov edi, 0x27; mov edx, 0x1b; call rax; 
0x00000000000169cf: lea eax, [rip + 0x345b]; lea rdi, [rsp + 0x30]; call rax; 
0x000000000002c376: lea eax, [rip + 0x35308]; movsxd rcx, dword ptr [r8 + rbp*4]; add rcx, r8; jmp rcx; 
0x0000000000016b09: lea eax, [rip + 0x3641]; lea rdi, [rsp + 0x68]; call rax; 
0x000000000002b019: lea eax, [rip + 0x3655d]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x000000000001666f: lea eax, [rip + 0x37bb]; lea rdi, [rsp + 0x58]; call rax; 
0x000000000001a8cc: lea eax, [rip + 0x392e]; lea rdi, [rsp + 0x10]; call rax; 
0x00000000000275e6: lea eax, [rip + 0x39944]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x0000000000018da7: lea eax, [rip + 0x39b3]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000001670a: lea eax, [rip + 0x3a40]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000001c411: lea eax, [rip + 0x3a849]; call rax; 
0x000000000001c3f3: lea eax, [rip + 0x3a867]; call rax; 
0x0000000000016486: lea eax, [rip + 0x3b14]; lea rdx, [rsp + 0x20]; call rax; 
0x000000000003e61a: lea eax, [rip + 0x3bb09]; pop rcx; ret; 
0x000000000001db7e: lea eax, [rip + 0x3be8c]; call rax; 
0x000000000001bdcb: lea eax, [rip + 0x3c11f]; call rax; 
0x000000000001c2c4: lea eax, [rip + 0x3d6]; call rax; 
0x0000000000019af1: lea eax, [rip + 0x3fee9]; call rax; 
0x0000000000036d1a: lea eax, [rip + 0x400a0]; pop rcx; ret; 
0x00000000000169e4: lea eax, [rip + 0x4096]; call rax; 
0x000000000001bb8b: lea eax, [rip + 0x4098f]; lea rdi, [rsp + 0x68]; mov qword ptr [rsp + 0x20], rdi; call rax; 
0x000000000001698d: lea eax, [rip + 0x40ed]; call rax; 
0x000000000001a553: lea eax, [rip + 0x417]; call rax; 
0x0000000000015481: lea eax, [rip + 0x417d9]; call rax; 
0x0000000000015463: lea eax, [rip + 0x417f7]; call rax; 
0x000000000001520e: lea eax, [rip + 0x41a4c]; call rax; 
0x0000000000037d8b: lea eax, [rip + 0x422f7]; pop rcx; ret; 
0x0000000000037d7d: lea eax, [rip + 0x42305]; pop rcx; ret; 
0x0000000000015f77: lea eax, [rip + 0x423]; lea rdi, [rsp + 0x18]; call rax; 
0x000000000001692f: lea eax, [rip + 0x423b]; lea rdi, [rsp + 0x40]; call rax; 
0x00000000000378fb: lea eax, [rip + 0x4274f]; pop rcx; ret; 
0x00000000000378ed: lea eax, [rip + 0x4275d]; pop rcx; ret; 
0x000000000001945b: lea eax, [rip + 0x430bf]; lea rdi, [rsp + 0x630]; call rax; 
0x000000000000fa2e: lea eax, [rip + 0x4722c]; call rax; 
0x0000000000012a01: lea eax, [rip + 0x47a09]; lea rsi, [rsp + 0x38]; call rax; 
0x00000000000118af: lea eax, [rip + 0x4806b]; call rax; 
0x000000000000e18c: lea eax, [rip + 0x49e4e]; lea rsi, [rsp + 0x28]; call rax; 
0x000000000000d376: lea eax, [rip + 0x49e74]; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000cdb8: lea eax, [rip + 0x4a432]; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000e151: lea eax, [rip + 0x4c879]; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000019425: lea eax, [rip + 0x4de5]; lea rdi, [rsp + 0x560]; call rax; 
0x0000000000016907: lea eax, [rip + 0x4e3]; lea rdi, [rsp + 0x40]; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000000d57b: lea eax, [rip + 0x4ef9f]; lea rdi, [rsp + 0x260]; mov qword ptr [rsp + 0x40], rdi; call rax; 
0x000000000001ccc7: lea eax, [rip + 0x583]; call rax; 
0x000000000001cd22: lea eax, [rip + 0x58]; call rax; 
0x000000000001519a: lea eax, [rip + 0x5b60]; call rax; 
0x000000000001519a: lea eax, [rip + 0x5b60]; call rax; add rsp, 0x28; ret; 
0x000000000001e25f: lea eax, [rip + 0x5b]; call rax; 
0x00000000000209d6: lea eax, [rip + 0x5c415b00]; pop r13; pop r14; pop r15; ret; 
0x0000000000010f89: lea eax, [rip + 0x5da1]; call rax; 
0x0000000000020a66: lea eax, [rip + 0x5e415b00]; pop r15; ret; 
0x0000000000010c69: lea eax, [rip + 0x60c1]; call rax; 
0x000000000000ea1e: lea eax, [rip + 0x6746c]; call 0x11490; add rsp, 0x1c8; ret; 
0x0000000000017c71: lea eax, [rip + 0x799]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000f9df: lea eax, [rip + 0x79ab]; call rax; 
0x000000000001a39d: lea eax, [rip + 0x7cd]; lea rdi, [rsp + 0x38]; call rax; 
0x000000000001a372: lea eax, [rip + 0x7f8]; lea rdi, [rsp + 0x38]; call rax; 
0x000000000000daf4: lea eax, [rip + 0x85d6]; lea rdi, [rsp + 0x100]; call rax; 
0x000000000001a3c6: lea eax, [rip + 0x8c4]; lea rdi, [rsp + 0x18]; call rax; 
0x000000000001aaab: lea eax, [rip + 0x8f]; call rax; 
0x000000000000d0f9: lea eax, [rip + 0x8fd1]; lea rdi, [rsp + 0x178]; call rax; 
0x0000000000015334: lea eax, [rip + 0x926]; call rax; 
0x000000000005bfad: lea eax, [rip + 0x94b1]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bf4d: lea eax, [rip + 0x9511]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bf14: lea eax, [rip + 0x954a]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bed6: lea eax, [rip + 0x9588]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000000cb39: lea eax, [rip + 0x9591]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000001a089: lea eax, [rip + 0x961]; call rax; 
0x000000000005be3c: lea eax, [rip + 0x9622]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bdfd: lea eax, [rip + 0x9661]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000000d34f: lea eax, [rip + 0x99db]; lea rdi, [rsp + 0x190]; call rax; 
0x0000000000014560: lea eax, [rip + 0x9cba]; lea rdi, [rsp + 0x18]; call rax; 
0x00000000000144c0: lea eax, [rip + 0x9d5a]; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000014375: lea eax, [rip + 0x9ea5]; lea rdi, [rsp + 0x30]; call rax; 
0x00000000000142a2: lea eax, [rip + 0x9f78]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000cd91: lea eax, [rip + 0x9f99]; lea rdi, [rsp + 0x190]; call rax; 
0x000000000001bd1a: lea eax, [rip + 0xb00]; mov edi, 0x27; call rax; 
0x000000000000f233: lea eax, [rip + 0xb857]; call rax; 
0x000000000000f2fe: lea eax, [rip + 0xb90c]; call rax; 
0x000000000000f2da: lea eax, [rip + 0xb930]; call rax; 
0x000000000000f124: lea eax, [rip + 0xb966]; call rax; 
0x000000000000f0df: lea eax, [rip + 0xb9ab]; call rax; 
0x000000000000f095: lea eax, [rip + 0xb9f5]; call rax; 
0x000000000000f057: lea eax, [rip + 0xba33]; call rax; 
0x000000000001ab8f: lea eax, [rip + 0xbb]; call rax; 
0x000000000000d62a: lea eax, [rip + 0xc1d0]; lea rdi, [rsp + 0x278]; call rax; 
0x000000000001a053: lea eax, [rip + 0xc67]; lea rdi, [rsp + 0x58]; lea rdx, [rsp + 0x70]; call rax; 
0x000000000000d848: lea eax, [rip + 0xd322]; lea rdi, [rsp + 0x278]; call rax; 
0x000000000000d7bd: lea eax, [rip + 0xd3ad]; lea rdi, [rsp + 0x290]; call rax; 
0x000000000000d73f: lea eax, [rip + 0xd42b]; lea rdi, [rsp + 0x290]; call rax; 
0x0000000000019da1: lea eax, [rip + 0xd59]; lea rdi, [rsp + 0xb0]; call rax; 
0x0000000000016b84: lea eax, [rip + 0xd6]; call rax; 
0x0000000000010b57: lea eax, [rip + 0xd6b3]; call rax; 
0x000000000000ef13: lea eax, [rip + 0xf327]; call rax; 
0x000000000000eeff: lea eax, [rip + 0xf33b]; call rax; 
0x000000000001e596: lea eax, [rip + 4]; call rax; 
0x000000000001e596: lea eax, [rip + 4]; call rax; pop rcx; ret; 
0x000000000001bcd0: lea eax, [rip - 0x10536]; call rax; 
0x000000000001c0f9: lea eax, [rip - 0x10a8f]; mov esi, 0x19; call rax; 
0x000000000001c535: lea eax, [rip - 0x10f6b]; call rax; 
0x000000000000c78a: lea eax, [rip - 0x1120]; mov esi, 0x1c; call rax; 
0x000000000001cba7: lea eax, [rip - 0x1153d]; mov esi, 0x28; call rax; 
0x000000000001d320: lea eax, [rip - 0x11d56]; call rax; 
0x000000000001e1de: lea eax, [rip - 0x12a44]; call rax; 
0x000000000001e28a: lea eax, [rip - 0x12af0]; call rax; 
0x000000000001e333: lea eax, [rip - 0x12b99]; call rax; 
0x000000000001e42e: lea eax, [rip - 0x12c94]; call rax; 
0x000000000000cbef: lea eax, [rip - 0x1455]; call rax; 
0x00000000000167c4: lea eax, [rip - 0x151a]; xor esi, esi; call rax; 
0x0000000000017c2e: lea eax, [rip - 0x1774]; call rax; 
0x0000000000017c2e: lea eax, [rip - 0x1774]; call rax; add rsp, 0x18; ret; 
0x0000000000017d95: lea eax, [rip - 0x188b]; call rax; 
0x00000000000188cc: lea eax, [rip - 0x1952]; lea rsi, [rsp + 0x190]; call rax; 
0x0000000000017d5d: lea eax, [rip - 0x1993]; lea rdi, [rsp + 0xd8]; lea rdx, [rsp + 0xf0]; call rax; 
0x000000000000d1ad: lea eax, [rip - 0x1a13]; call rax; 
0x000000000001e24f: lea eax, [rip - 0x1aa5]; call rax; 
0x0000000000018b9e: lea eax, [rip - 0x1ae4]; lea rsi, [rsp + 0x220]; call rax; 
0x000000000001dd89: lea eax, [rip - 0x1bff]; call rax; 
0x0000000000018eb5: lea eax, [rip - 0x1d5b]; call rax; 
0x0000000000017e13: lea eax, [rip - 0x1dc9]; lea rsi, [rsp + 0x140]; call rax; 
0x000000000000d664: lea eax, [rip - 0x1eca]; call rax; 
0x000000000001e3ec: lea eax, [rip - 0x1f2]; lea rdi, [rsp + 0x10]; call rax; 
0x000000000001e393: lea eax, [rip - 0x2189]; lea rdi, [rsp + 0x20]; call rax; 
0x00000000000199a7: lea eax, [rip - 0x235d]; lea rdi, [rsp + 0xc0]; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000000dc4a: lea eax, [rip - 0x24b0]; call rax; 
0x0000000000019fd4: lea eax, [rip - 0x259a]; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000019648: lea eax, [rip - 0x272e]; call rax; 
0x0000000000019cc9: lea eax, [rip - 0x273f]; lea rdi, [rsp + 0xc0]; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000000e079: lea eax, [rip - 0x28df]; call rax; 
0x000000000001968a: lea eax, [rip - 0x2960]; call rax; 
0x0000000000018823: lea eax, [rip - 0x2999]; lea rdi, [rsp + 0x170]; call rax; 
0x0000000000019a4b: lea eax, [rip - 0x2a31]; lea rsi, [rsp + 0x110]; call rax; 
0x000000000000e1d1: lea eax, [rip - 0x2a37]; call rax; 
0x000000000001a302: lea eax, [rip - 0x2d98]; lea rsi, [rsp + 0x70]; call rax; 
0x000000000000e908: lea eax, [rip - 0x331e]; call rax; 
0x000000000001a332: lea eax, [rip - 0x3348]; call rax; 
0x000000000000ed19: lea eax, [rip - 0x357f]; call rax; 
0x000000000000ede4: lea eax, [rip - 0x364a]; call rax; 
0x000000000000eeb1: lea eax, [rip - 0x3717]; call rax; 
0x000000000000ef42: lea eax, [rip - 0x37a8]; call rax; 
0x000000000000f0ac: lea eax, [rip - 0x3912]; call rax; 
0x000000000000f1b1: lea eax, [rip - 0x3a17]; call rax; 
0x0000000000019f4e: lea eax, [rip - 0x3a34]; call rax; 
0x000000000000f26e: lea eax, [rip - 0x3ad4]; call rax; 
0x000000000001a0df: lea eax, [rip - 0x3bc5]; lea rdi, [rsp + 0x98]; call rax; 
0x000000000000f461: lea eax, [rip - 0x3cc7]; call rax; 
0x000000000001a12a: lea eax, [rip - 0x3e50]; lea rsi, [rsp + 0x58]; call rax; 
0x000000000001ab7f: lea eax, [rip - 0x3ec5]; call rax; 
0x0000000000019f04: lea eax, [rip - 0x3fba]; lea rdi, [rsp + 0x20]; call rax; 
0x000000000000f9c6: lea eax, [rip - 0x422c]; call rax; 
0x000000000000fa4d: lea eax, [rip - 0x4483]; call rax; 
0x000000000000fb23: lea eax, [rip - 0x44b9]; mov esi, 0x49; call rax; 
0x000000000001bbaa: lea eax, [rip - 0x48b0]; call rax; 
0x0000000000010096: lea eax, [rip - 0x4a2c]; mov esi, 0x49; call rax; 
0x00000000000104ca: lea eax, [rip - 0x4e60]; mov esi, 0x49; call rax; 
0x00000000000105bd: lea eax, [rip - 0x4f53]; mov esi, 0x49; call rax; 
0x00000000000108ba: lea eax, [rip - 0x5250]; mov esi, 0x49; call rax; 
0x00000000000109ad: lea eax, [rip - 0x5343]; mov esi, 0x49; call rax; 
0x0000000000010ba1: lea eax, [rip - 0x5407]; call rax; 
0x00000000000114ee: lea eax, [rip - 0x5ab4]; call rax; 
0x000000000001bbca: lea eax, [rip - 0x5b00]; call rax; 
0x000000000001159c: lea eax, [rip - 0x5b72]; call rax; 
0x0000000000011350: lea eax, [rip - 0x5ce6]; mov esi, 0x23; call rax; 
0x00000000000113f9: lea eax, [rip - 0x5d8f]; mov esi, 0x19; call rax; 
0x0000000000012907: lea eax, [rip - 0x71ed]; mov esi, 0x100; call rax; 
0x0000000000012941: lea eax, [rip - 0x7227]; mov esi, 0x100; call rax; 
0x0000000000012b60: lea eax, [rip - 0x74f6]; mov esi, 0x2b; call rax; 
0x000000000001c9c0: lea eax, [rip - 0x786]; xor esi, esi; call rax; 
0x000000000001307f: lea eax, [rip - 0x7a15]; mov esi, 0x2b; call rax; 
0x0000000000014201: lea eax, [rip - 0x8877]; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000014292: lea eax, [rip - 0x8908]; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000014365: lea eax, [rip - 0x89db]; lea rdx, [rsp + 0x30]; call rax; 
0x0000000000014416: lea eax, [rip - 0x8a8c]; lea rdx, [rsp + 0x20]; call rax; 
0x00000000000144b0: lea eax, [rip - 0x8b26]; lea rdx, [rsp + 0x28]; call rax; 
0x00000000000142c4: lea eax, [rip - 0x8b2a]; call rax; 
0x000000000001454b: lea eax, [rip - 0x8bc1]; mov esi, 0x2b; lea rdx, [rsp + 0x18]; call rax; 
0x0000000000014397: lea eax, [rip - 0x8bfd]; call rax; 
0x00000000000144e2: lea eax, [rip - 0x8d48]; call rax; 
0x0000000000014582: lea eax, [rip - 0x8de8]; call rax; 
0x000000000001477e: lea eax, [rip - 0x8fe4]; call rax; 
0x0000000000014c35: lea eax, [rip - 0x95cb]; mov esi, 0x49; call rax; 
0x0000000000014d2c: lea eax, [rip - 0x96c2]; mov esi, 0x49; call rax; 
0x000000000001522d: lea eax, [rip - 0x9c63]; call rax; 
0x00000000000155a5: lea eax, [rip - 0x9fdb]; call rax; 
0x0000000000015de9: lea eax, [rip - 0xa77f]; mov esi, 0x19; call rax; 
0x000000000001e305: lea eax, [rip - 0xaab]; call rax; 
0x000000000001e1ac: lea eax, [rip - 0xac2]; call rax; 
0x00000000000162a9: lea eax, [rip - 0xacbf]; call rax; 
0x000000000001691f: lea eax, [rip - 0xb185]; call rax; 
0x0000000000016c43: lea eax, [rip - 0xb4a9]; call rax; 
0x000000000001734f: lea eax, [rip - 0xb9c5]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000001e2f2: lea eax, [rip - 0xc8]; call rax; 
0x0000000000018bc7: lea eax, [rip - 0xd42d]; call rax; 
0x0000000000018fbd: lea eax, [rip - 0xd9d3]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000001a516: lea eax, [rip - 0xdac]; call rax; 
0x0000000000019666: lea eax, [rip - 0xdecc]; call rax; 
0x0000000000019a8a: lea eax, [rip - 0xe2f0]; call rax; 
0x0000000000019a8a: lea eax, [rip - 0xe2f0]; call rax; ud2; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x178; ret; 
0x0000000000019b2f: lea eax, [rip - 0xe395]; call rax; 
0x0000000000019db4: lea eax, [rip - 0xe61a]; call rax; 
0x0000000000019db4: lea eax, [rip - 0xe61a]; call rax; ud2; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x158; ret; 
0x000000000001a385: lea eax, [rip - 0xebeb]; call rax; 
0x000000000001a385: lea eax, [rip - 0xebeb]; call rax; ud2; mov rax, qword ptr [rsp + 8]; add rsp, 0xb8; ret; 
0x000000000001a90e: lea eax, [rip - 0xf174]; call rax; 
0x000000000001aad6: lea eax, [rip - 0xf33c]; call rax; 
0x000000000000c658: lea eax, [rip - 0xf3e]; xor ecx, ecx; mov edi, ecx; call rax; 
0x000000000001abba: lea eax, [rip - 0xf420]; call rax; 
0x000000000001ae00: lea eax, [rip - 0xf836]; call rax; 
0x000000000000c5a9: lea eax, [rip - 0xfbf]; call rax; 
0x0000000000035f34: lea eax, [rsi - 0x20]; pop rbx; pop r14; pop r15; ret; 
0x0000000000009feb: lea eax, [rsp + 0x18]; mov qword ptr [rsp + 0x10], rax; lea rdi, [rsp + 0x10]; call 0xaaa0; add rsp, 0x28; ret; 
0x0000000000009f9b: lea eax, [rsp + 0x18]; mov qword ptr [rsp + 0x10], rax; lea rdi, [rsp + 0x10]; call 0xad10; add rsp, 0x28; ret; 
0x000000000005c184: lea eax, [rsp + 4]; mov rdi, rsi; mov rsi, rax; call qword ptr [rip + 0x1dd3c]; pop rcx; ret; 
0x000000000000fbeb: lea eax, [rsp + 7]; mov qword ptr [rsp + 0x10], rax; movzx eax, byte ptr [rsp + 7]; add rsp, 0x18; ret; 
0x000000000005b0b3: lea eax, [rsp + rsi]; cmp rax, -1; je 0x5b0cd; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000002c173: lea eax, [rsp - 0x2e]; lea rcx, [rip + 0x35536]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000037bd5: lea ebp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b618: lea ebp, [rip + 0x35f1e]; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x00000000000393b4: lea ebp, [rsi - 1]; mov rdi, qword ptr [r14 - 1]; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x0000000000047910: lea ebx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003ec5e: lea ebx, [rdi - 1]; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x00000000000505e2: lea ebx, [rip + 0x13e00]; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000002d7d6: lea ebx, [rip - 0x18a7c]; call rbx; 
0x000000000002f207: lea ebx, [rip - 0x1a4ad]; call rbx; 
0x0000000000032fab: lea ebx, [rip - 0x1e251]; call rbx; 
0x0000000000037bee: lea ebx, [rip - 0x22e94]; je 0x37c00; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000000393cd: lea ebx, [rip - 0x24673]; je 0x393df; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000000454d9: lea ebx, [rip - 0x3078f]; call rbx; 
0x0000000000045b12: lea ebx, [rip - 0x30db8]; call rbx; 
0x0000000000046d35: lea ebx, [rip - 0x31fdb]; call rbx; 
0x000000000003d3cf: lea ecx, [rax + 2]; add byte ptr [rax + 0x63], cl; cmp al, 0x91; add rdi, rcx; jmp rdi; 
0x0000000000028289: lea ecx, [rax - 1]; cmp ecx, 0x2b; ja 0x28349; movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x0000000000057699: lea ecx, [rdx + rsi]; dec rcx; mov rax, rdx; neg rax; and rax, rcx; ret; 
0x00000000000543d2: lea ecx, [rip + 0x10868]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000050e04: lea ecx, [rip + 0x1363e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000040b8a: lea ecx, [rip + 0x2110c]; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x000000000004037e: lea ecx, [rip + 0x21908]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003d3cd: lea ecx, [rip + 0x2488d]; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x000000000003a60f: lea ecx, [rip + 0x275ff]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000395b9: lea ecx, [rip + 0x2859d]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000039354: lea ecx, [rip + 0x287f2]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x00000000000370b8: lea ecx, [rip + 0x2a9ca]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000036dc5: lea ecx, [rip + 0x2acad]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000368b3: lea ecx, [rip + 0x2b1af]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000036885: lea ecx, [rip + 0x2b1dd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003577e: lea ecx, [rip + 0x2c2d4]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000034c6a: lea ecx, [rip + 0x2cdd0]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000034c0e: lea ecx, [rip + 0x2ce14]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003271f: lea ecx, [rip + 0x2f187]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000032597: lea ecx, [rip + 0x2f2cf]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000030209: lea ecx, [rip + 0x31511]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000301b5: lea ecx, [rip + 0x315c9]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002fad2: lea ecx, [rip + 0x31c30]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor edx, edx; jmp rax; 
0x000000000002c178: lea ecx, [rip + 0x35536]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002b9b4: lea ecx, [rip + 0x35be2]; movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x000000000002aeaf: lea ecx, [rip + 0x36667]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a8af: lea ecx, [rip + 0x36c47]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a6df: lea ecx, [rip + 0x36df7]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a396: lea ecx, [rip + 0x37128]; movsxd rax, dword ptr [r9 + rax*4]; add rax, r9; jmp rax; 
0x000000000002a32e: lea ecx, [rip + 0x37178]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a2be: lea ecx, [rip + 0x371d0]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a25e: lea ecx, [rip + 0x37218]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029e24: lea ecx, [rip + 0x37406]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029eae: lea ecx, [rip + 0x375a8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000028358: lea ecx, [rip + 0x38d1a]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb89: lea ecx, [rip + 0x440dd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001ba7d: lea ecx, [rip + 0x450a5]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000e74b: lea ecx, [rip + 0x51b4b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000dfe7: lea ecx, [rip + 0x5206b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000017348: lea ecx, [rip + 0x5edfa]; lea rax, [rip - 0xb9c5]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x0000000000014544: lea ecx, [rip + 0x61ad6]; lea rax, [rip - 0x8bc1]; mov esi, 0x2b; lea rdx, [rsp + 0x18]; call rax; 
0x00000000000144a9: lea ecx, [rip + 0x61b71]; lea rax, [rip - 0x8b26]; lea rdx, [rsp + 0x28]; call rax; 
0x000000000001440f: lea ecx, [rip + 0x61c2b]; lea rax, [rip - 0x8a8c]; lea rdx, [rsp + 0x20]; call rax; 
0x000000000001435e: lea ecx, [rip + 0x61cbc]; lea rax, [rip - 0x89db]; lea rdx, [rsp + 0x30]; call rax; 
0x000000000001428b: lea ecx, [rip + 0x61d8f]; lea rax, [rip - 0x8908]; lea rdx, [rsp + 0x28]; call rax; 
0x00000000000141fa: lea ecx, [rip + 0x61e00]; lea rax, [rip - 0x8877]; lea rdx, [rsp + 0x28]; call rax; 
0x000000000005dc72: lea ecx, [rip + 0x7fce]; mov edx, 0x28; mov r8d, 0x11f; call 0x5db10; pop rcx; ret; 
0x000000000005dca9: lea ecx, [rip + 0x81e2]; mov edx, 0x2c; mov r8d, 0xc4; call 0x5db10; pop rcx; ret; 
0x000000000005bdbf: lea ecx, [rip + 0x95ff]; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x00000000000423ac: lea ecx, [rip - 0x6442]; cmovne rcx, rax; call rcx; 
0x000000000004aaab: lea ecx, [rsi + rdx]; inc rcx; inc rdx; cmp rcx, r8; jb 0x4aaa0; ret; 
0x000000000005778d: lea ecx, [rsp + 0x10]; mov edx, 8; mov rdi, rax; call qword ptr [rip + 0x222a1]; add rsp, 0x18; ret; 
0x000000000003b339: lea ecx, [rsp + 0x10]; mov qword ptr [rsp + 0x40], rcx; mov qword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x0000000000018ad8: lea ecx, [rsp + 0x1f8]; call rax; 
0x00000000000454cd: lea edi, [rax + rax*2]; mov esi, 8; mov rdi, r15; lea rbx, [rip - 0x3078f]; call rbx; 
0x000000000001ffc3: lea edi, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000393cf: lea edi, [rcx + 0xa74fffd]; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000039c0b: lea edi, [rdi + 2]; add byte ptr [rax + 0x63], cl; adc al, 0x96; add rdx, rsi; jmp rdx; 
0x0000000000039907: lea edi, [rip + 0x2825f]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000003188e: lea edi, [rip + 0x2ff5c]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x00000000000308e2: lea edi, [rip + 0x30f64]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000002992c: lea edi, [rip + 0x377ca]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000001cb99: lea edi, [rip + 0x440dd]; lea rdx, [rip + 0x5981a]; lea rax, [rip - 0x1153d]; mov esi, 0x28; call rax; 
0x000000000001c0eb: lea edi, [rip + 0x44b5f]; lea rdx, [rip + 0x5a2b0]; lea rax, [rip - 0x10a8f]; mov esi, 0x19; call rax; 
0x0000000000015ddb: lea edi, [rip + 0x4aa0f]; lea rdx, [rip + 0x60320]; lea rax, [rip - 0xa77f]; mov esi, 0x19; call rax; 
0x0000000000014d1e: lea edi, [rip + 0x4b9d5]; lea rdx, [rip + 0x613c5]; lea rax, [rip - 0x96c2]; mov esi, 0x49; call rax; 
0x0000000000014c27: lea edi, [rip + 0x4bacc]; lea rdx, [rip + 0x614bc]; lea rax, [rip - 0x95cb]; mov esi, 0x49; call rax; 
0x0000000000013071: lea edi, [rip + 0x4d57a]; lea rdx, [rip + 0x62f6a]; lea rax, [rip - 0x7a15]; mov esi, 0x2b; call rax; 
0x0000000000012b52: lea edi, [rip + 0x4da99]; lea rdx, [rip + 0x63471]; lea rax, [rip - 0x74f6]; mov esi, 0x2b; call rax; 
0x00000000000113eb: lea edi, [rip + 0x4f18f]; lea rdx, [rip + 0x64b70]; lea rax, [rip - 0x5d8f]; mov esi, 0x19; call rax; 
0x0000000000011349: lea edi, [rip + 0x4f1b5]; lea rax, [rip - 0x5ce6]; mov esi, 0x23; call rax; 
0x000000000001099f: lea edi, [rip + 0x4fac5]; lea rdx, [rip + 0x655a4]; lea rax, [rip - 0x5343]; mov esi, 0x49; call rax; 
0x00000000000108ac: lea edi, [rip + 0x4fbb8]; lea rdx, [rip + 0x65697]; lea rax, [rip - 0x5250]; mov esi, 0x49; call rax; 
0x00000000000105af: lea edi, [rip + 0x4feb5]; lea rdx, [rip + 0x65994]; lea rax, [rip - 0x4f53]; mov esi, 0x49; call rax; 
0x00000000000104bc: lea edi, [rip + 0x4ffa8]; lea rdx, [rip + 0x65a87]; lea rax, [rip - 0x4e60]; mov esi, 0x49; call rax; 
0x0000000000010088: lea edi, [rip + 0x50342]; lea rdx, [rip + 0x65ea3]; lea rax, [rip - 0x4a2c]; mov esi, 0x49; call rax; 
0x000000000000fb15: lea edi, [rip + 0x5081b]; lea rdx, [rip + 0x663ce]; lea rax, [rip - 0x44b9]; mov esi, 0x49; call rax; 
0x000000000000c77c: lea edi, [rip + 0x538fe]; lea rdx, [rip + 0x693ef]; lea rax, [rip - 0x1120]; mov esi, 0x1c; call rax; 
0x000000000000e0b1: lea edi, [rip - 0x3d7]; xor ecx, ecx; call 0xfb80; pop rcx; ret; 
0x000000000000cea2: lea edi, [rsp + 0x100]; call rax; 
0x0000000000009ff5: lea edi, [rsp + 0x10]; call 0xaaa0; add rsp, 0x28; ret; 
0x0000000000009fa5: lea edi, [rsp + 0x10]; call 0xad10; add rsp, 0x28; ret; 
0x000000000001a8d3: lea edi, [rsp + 0x10]; call rax; 
0x000000000000cc01: lea edi, [rsp + 0x120]; call rax; 
0x000000000000de2b: lea edi, [rsp + 0x128]; call rax; 
0x00000000000188fb: lea edi, [rsp + 0x140]; call rax; 
0x000000000000dea9: lea edi, [rsp + 0x158]; call rax; 
0x000000000000db7e: lea edi, [rsp + 0x160]; call rax; 
0x000000000001882a: lea edi, [rsp + 0x170]; call rax; 
0x000000000000cb40: lea edi, [rsp + 0x178]; call rax; 
0x0000000000014567: lea edi, [rsp + 0x18]; call rax; 
0x000000000000cd98: lea edi, [rsp + 0x190]; call rax; 
0x000000000000cd24: lea edi, [rsp + 0x1c8]; call rax; 
0x0000000000019f0b: lea edi, [rsp + 0x20]; call rax; 
0x0000000000018af3: lea edi, [rsp + 0x210]; call rax; 
0x000000000000d505: lea edi, [rsp + 0x220]; call rax; 
0x000000000000d5e0: lea edi, [rsp + 0x248]; call rax; 
0x000000000000d582: lea edi, [rsp + 0x260]; mov qword ptr [rsp + 0x40], rdi; call rax; 
0x000000000000d631: lea edi, [rsp + 0x278]; call rax; 
0x000000000000e158: lea edi, [rsp + 0x28]; call rax; 
0x000000000000d746: lea edi, [rsp + 0x290]; call rax; 
0x000000000000d7b1: lea edi, [rsp + 0x2a8]; call rax; 
0x000000000000ce56: lea edi, [rsp + 0x2e8]; call rax; 
0x000000000001437c: lea edi, [rsp + 0x30]; call rax; 
0x000000000000cdbf: lea edi, [rsp + 0x328]; call rax; 
0x000000000000cb17: lea edi, [rsp + 0x348]; call rax; 
0x0000000000010c28: lea edi, [rsp + 0x38]; call rax; 
0x0000000000016936: lea edi, [rsp + 0x40]; call rax; 
0x000000000001690e: lea edi, [rsp + 0x40]; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000000e03a: lea edi, [rsp + 0x50]; call qword ptr [rip + 0x6ba0c]; add rsp, 0x218; ret; 
0x000000000000da94: lea edi, [rsp + 0x50]; call qword ptr [rip + 0x6bfb2]; add rsp, 0x1d8; ret; 
0x000000000000d8e5: lea edi, [rsp + 0x50]; call rax; 
0x000000000001942c: lea edi, [rsp + 0x560]; call rax; 
0x0000000000016676: lea edi, [rsp + 0x58]; call rax; 
0x000000000001a05a: lea edi, [rsp + 0x58]; lea rdx, [rsp + 0x70]; call rax; 
0x00000000000194e9: lea edi, [rsp + 0x600]; lea rsi, [rsp + 0x618]; call rax; 
0x00000000000359dc: lea edi, [rsp + 0x60]; mov rsi, rax; call qword ptr [rip + 0x44027]; mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x0000000000019462: lea edi, [rsp + 0x630]; call rax; 
0x000000000000d90e: lea edi, [rsp + 0x68]; call rax; 
0x000000000001bb92: lea edi, [rsp + 0x68]; mov qword ptr [rsp + 0x20], rdi; call rax; 
0x000000000001bd50: lea edi, [rsp + 0x80]; call rax; 
0x000000000000d0e3: lea edi, [rsp + 0x88]; call qword ptr [rip + 0x6c960]; add rsp, 0x398; ret; 
0x000000000000cb23: lea edi, [rsp + 0x88]; call qword ptr [rip + 0x6cf20]; add rsp, 0x398; ret; 
0x000000000000c94b: lea edi, [rsp + 0x88]; call rax; 
0x0000000000016711: lea edi, [rsp + 0x90]; call rax; 
0x000000000000d93b: lea edi, [rsp + 0x98]; call rax; 
0x000000000000c977: lea edi, [rsp + 0xa0]; call rax; 
0x0000000000019a7e: lea edi, [rsp + 0xb0]; call rax; 
0x00000000000199ae: lea edi, [rsp + 0xc0]; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000000ddb7: lea edi, [rsp + 0xc8]; call rax; 
0x000000000000c9ad: lea edi, [rsp + 0xd0]; call rax; 
0x0000000000017d64: lea edi, [rsp + 0xd8]; lea rdx, [rsp + 0xf0]; call rax; 
0x000000000000dc7d: lea edi, [rsp + 0xe8]; call rax; 
0x000000000000ddf1: lea edi, [rsp + 0xf8]; call rax; 
0x000000000000a048: lea edi, [rsp + 8]; call 0xa850; add rsp, 0x28; ret; 
0x000000000000f91c: lea edi, [rsp + 8]; call 0xecb0; add rsp, 0xc8; ret; 
0x000000000003b44c: lea edi, [rsp - 1]; mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x000000000004abcc: lea edx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000004ac11: lea edx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x000000000004ac33: lea edx, [rcx + rax]; add rdx, 0x20; mov eax, 1; ret; 
0x0000000000054753: lea edx, [rip + 0x1054b]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004cd6e: lea edx, [rip + 0x16e74]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000004b3a3: lea edx, [rip + 0x18eef]; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000003d2ef: lea edx, [rip + 0x24937]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003a064: lea edx, [rip + 0x27b7a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000032611: lea edx, [rip + 0x2f275]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000318f4: lea edx, [rip + 0x2ff0a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000318ce: lea edx, [rip + 0x2ff48]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000318a8: lea edx, [rip + 0x2ff86]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002c39c: lea edx, [rip + 0x352f2]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002c0a2: lea edx, [rip + 0x355ac]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000003cd84: lea edx, [rip + 0x3a7f6]; ret; 
0x000000000003cd58: lea edx, [rip + 0x3a822]; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000003cd07: lea edx, [rip + 0x3a853]; mov rax, rbx; add rsp, 0x50; pop rbx; ret; 
0x000000000003cc48: lea edx, [rip + 0x3a912]; add rsp, 0x58; pop rbx; pop r14; ret; 
0x000000000003e613: lea edx, [rip + 0x3bb07]; lea rax, [rip + 0x3bb09]; pop rcx; ret; 
0x000000000001e422: lea edx, [rip + 0x57fd0]; add rsp, 0x38; ret; 
0x000000000001cba0: lea edx, [rip + 0x5981a]; lea rax, [rip - 0x1153d]; mov esi, 0x28; call rax; 
0x000000000001c0f2: lea edx, [rip + 0x5a2b0]; lea rax, [rip - 0x10a8f]; mov esi, 0x19; call rax; 
0x000000000001a902: lea edx, [rip + 0x5ba08]; add rsp, 0x38; ret; 
0x000000000001a32b: lea edx, [rip + 0x5bfa7]; lea rax, [rip - 0x3348]; call rax; 
0x0000000000019a44: lea edx, [rip + 0x5c85e]; lea rax, [rip - 0x2a31]; lea rsi, [rsp + 0x110]; call rax; 
0x0000000000019641: lea edx, [rip + 0x5cc49]; lea rax, [rip - 0x272e]; call rax; 
0x00000000000192cc: lea edx, [rip + 0x5cf8e]; call qword ptr [rip + 0x606e8]; mov rax, qword ptr [rsp + 0x50]; add rsp, 0x788; ret; 
0x0000000000018b97: lea edx, [rip + 0x5d683]; lea rax, [rip - 0x1ae4]; lea rsi, [rsp + 0x220]; call rax; 
0x00000000000188c5: lea edx, [rip + 0x5d93d]; lea rax, [rip - 0x1952]; lea rsi, [rsp + 0x190]; call rax; 
0x0000000000018077: lea edx, [rip + 0x5e0eb]; call qword ptr [rip + 0x619f5]; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x478; ret; 
0x0000000000015de2: lea edx, [rip + 0x60320]; lea rax, [rip - 0xa77f]; mov esi, 0x19; call rax; 
0x0000000000014d25: lea edx, [rip + 0x613c5]; lea rax, [rip - 0x96c2]; mov esi, 0x49; call rax; 
0x0000000000014c2e: lea edx, [rip + 0x614bc]; lea rax, [rip - 0x95cb]; mov esi, 0x49; call rax; 
0x0000000000013078: lea edx, [rip + 0x62f6a]; lea rax, [rip - 0x7a15]; mov esi, 0x2b; call rax; 
0x0000000000012b59: lea edx, [rip + 0x63471]; lea rax, [rip - 0x74f6]; mov esi, 0x2b; call rax; 
0x00000000000129fa: lea edx, [rip + 0x635b0]; lea rax, [rip + 0x47a09]; lea rsi, [rsp + 0x38]; call rax; 
0x000000000001293a: lea edx, [rip + 0x63658]; lea rax, [rip - 0x7227]; mov esi, 0x100; call rax; 
0x0000000000012900: lea edx, [rip + 0x6367a]; lea rax, [rip - 0x71ed]; mov esi, 0x100; call rax; 
0x00000000000113f2: lea edx, [rip + 0x64b70]; lea rax, [rip - 0x5d8f]; mov esi, 0x19; call rax; 
0x00000000000109a6: lea edx, [rip + 0x655a4]; lea rax, [rip - 0x5343]; mov esi, 0x49; call rax; 
0x00000000000108b3: lea edx, [rip + 0x65697]; lea rax, [rip - 0x5250]; mov esi, 0x49; call rax; 
0x00000000000105b6: lea edx, [rip + 0x65994]; lea rax, [rip - 0x4f53]; mov esi, 0x49; call rax; 
0x00000000000104c3: lea edx, [rip + 0x65a87]; lea rax, [rip - 0x4e60]; mov esi, 0x49; call rax; 
0x000000000001008f: lea edx, [rip + 0x65ea3]; lea rax, [rip - 0x4a2c]; mov esi, 0x49; call rax; 
0x000000000000fb1c: lea edx, [rip + 0x663ce]; lea rax, [rip - 0x44b9]; mov esi, 0x49; call rax; 
0x000000000000e14a: lea edx, [rip + 0x67cf8]; lea rax, [rip + 0x4c879]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000c783: lea edx, [rip + 0x693ef]; lea rax, [rip - 0x1120]; mov esi, 0x1c; call rax; 
0x000000000000c651: lea edx, [rip + 0x694f1]; lea rax, [rip - 0xf3e]; xor ecx, ecx; mov edi, ecx; call rax; 
0x000000000005ba42: lea edx, [rip + 0x98c8]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000005aa04: lea edx, [rip - 0x325a]; ret; 
0x000000000001acea: lea edx, [rsp + 0x10]; call 0x1a930; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000005a9b3: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x1f48b]; add rsp, 0x48; ret; 
0x000000000005a963: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x1f4db]; add rsp, 0x48; ret; 
0x000000000005a913: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x1f52b]; add rsp, 0x48; ret; 
0x000000000005a560: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x1f8de]; add rsp, 0x48; ret; 
0x0000000000056a83: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x233bb]; add rsp, 0x48; ret; 
0x000000000004d5c3: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x2c87b]; add rsp, 0x48; ret; 
0x0000000000022a23: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x5741b]; add rsp, 0x48; ret; 
0x00000000000229d3: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x5746b]; add rsp, 0x48; ret; 
0x0000000000022983: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x574bb]; add rsp, 0x48; ret; 
0x0000000000022933: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x5750b]; add rsp, 0x48; ret; 
0x000000000001efc0: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x5ae7e]; add rsp, 0x48; ret; 
0x000000000001ef80: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x5aebe]; add rsp, 0x48; ret; 
0x000000000001ef40: lea edx, [rsp + 0x10]; call qword ptr [rip + 0x5aefe]; add rsp, 0x48; ret; 
0x000000000001735b: lea edx, [rsp + 0x10]; call rax; 
0x0000000000014557: lea edx, [rsp + 0x18]; call rax; 
0x0000000000018ad0: lea edx, [rsp + 0x1b0]; lea rcx, [rsp + 0x1f8]; call rax; 
0x000000000001441d: lea edx, [rsp + 0x20]; call rax; 
0x0000000000014208: lea edx, [rsp + 0x28]; call rax; 
0x000000000001436c: lea edx, [rsp + 0x30]; call rax; 
0x0000000000059b11: lea edx, [rsp + 0x38]; call qword ptr [rip + 0x2032d]; add rsp, 0x68; ret; 
0x0000000000058082: lea edx, [rsp + 0x50]; call qword ptr [rip + 0x21dbc]; add rsp, 0xa0; pop rbx; ret; 
0x000000000000d993: lea edx, [rsp + 0x50]; call rax; 
0x000000000001a05f: lea edx, [rsp + 0x70]; call rax; 
0x000000000000ca05: lea edx, [rsp + 0x88]; call rax; 
0x0000000000017d6c: lea edx, [rsp + 0xf0]; call rax; 
0x000000000003da91: lea edx, [rsp + 8]; mov qword ptr [rsp + 8], rbp; movups xmm0, xmmword ptr [rcx]; movups xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 0x20]; 
0x000000000003c942: lea esi, [rbp - 1]; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x0000000000039097: lea esi, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003cfd2: lea esi, [rbx - 1]; add rbx, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000001f3a7: lea esi, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000005278c: lea esi, [rip + 0x11e1e]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000004f8ca: lea esi, [rip + 0x14a78]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000039c09: lea esi, [rip + 0x27f8d]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000005ec46: lea esi, [rip + 0x39e0]; mov edx, 4; call qword ptr [rax + 0x18]; 
0x00000000000194a8: lea esi, [rip + 0x475a3]; lea rax, [rip + 0x336b]; mov edi, 0x27; mov edx, 0x1b; call rax; 
0x000000000001bba3: lea esi, [rip + 0x5a7bf]; lea rax, [rip - 0x48b0]; call rax; 
0x0000000000018fb6: lea esi, [rip + 0x5d28c]; lea rax, [rip - 0xd9d3]; lea rdi, [rsp + 0x28]; call rax; 
0x00000000000162a2: lea esi, [rip + 0x5fe88]; lea rax, [rip - 0xacbf]; call rax; 
0x000000000000e901: lea esi, [rip + 0x675d1]; lea rax, [rip - 0x331e]; call rax; 
0x000000000005ef6c: lea esi, [rip + 0x67ae]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ecd2: lea esi, [rip + 0x683b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000000c8e3: lea esi, [rip + 0x69307]; call 0x14500; add rsp, 0x128; ret; 
0x000000000000c5a2: lea esi, [rip + 0x69588]; lea rax, [rip - 0xfbf]; call rax; 
0x000000000005ecb8: lea esi, [rip + 0x6a68]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005eed0: lea esi, [rip + 0x71ef]; mov edx, 9; call qword ptr [rax + 0x18]; 
0x000000000005f12c: lea esi, [rip + 0x740d]; mov edx, 0xb; jmp rax; 
0x000000000005ec0c: lea esi, [rip + 0x74ae]; mov edx, 5; jmp rax; 
0x000000000005df93: lea esi, [rip + 0x757a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df79: lea esi, [rip + 0x77a7]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ddeb: lea esi, [rip + 0x792f]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ddeb: lea esi, [rip + 0x792f]; mov edx, 1; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000005ddcf: lea esi, [rip + 0x794c]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005ddcf: lea esi, [rip + 0x794c]; mov edx, 2; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000005df07: lea esi, [rip + 0x81a2]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000005dd65: lea esi, [rip + 0x8315]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000005b8a2: lea esi, [rip + 0x9c6b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7c8: lea esi, [rip + 0x9d45]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b8e2: lea esi, [rip + 0x9d67]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b887: lea esi, [rip + 0x9e99]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7ae: lea esi, [rip + 0x9f72]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b6c7: lea esi, [rip + 0xa053]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000059edc: lea esi, [rip + 0xb0f2]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000005a2ca: lea esi, [rip + 0xb243]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a438: lea esi, [rip + 0xb2ea]; mov edx, 1; jmp rax; 
0x000000000005a3f3: lea esi, [rip + 0xb320]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a36c: lea esi, [rip + 0xb3b5]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a33e: lea esi, [rip + 0xb3d7]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a2aa: lea esi, [rip + 0xb476]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a258: lea esi, [rip + 0xb4bb]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a1bc: lea esi, [rip + 0xb561]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a10a: lea esi, [rip + 0xb610]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a10a: lea esi, [rip + 0xb610]; mov edx, 1; call qword ptr [rax + 0x18]; mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x000000000005a0b2: lea esi, [rip + 0xb661]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059ff0: lea esi, [rip + 0xb720]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000059fba: lea esi, [rip + 0xb754]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000058583: lea esi, [rip + 0xd073]; mov edx, 2; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x00000000000582ed: lea esi, [rip + 0xd30b]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000058234: lea esi, [rip + 0xd3c2]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000057e89: lea esi, [rip + 0xd469]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000057e5d: lea esi, [rip + 0xd485]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000057e2c: lea esi, [rip + 0xd764]; mov edx, 0xe; jmp rax; 
0x0000000000018399: lea esi, [rsp + 0x10]; call qword ptr [rip + 0x61acd]; add rsp, 0x88; ret; 
0x0000000000016dcd: lea esi, [rsp + 0x10]; call qword ptr [rip + 0x62949]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000001a276: lea esi, [rsp + 0x10]; lea rdx, [rsp + 0x50]; call rax; 
0x0000000000012b74: lea esi, [rsp + 0x10]; mov edx, 0x30; call 0x9078; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x0000000000019a52: lea esi, [rsp + 0x110]; call rax; 
0x0000000000017e1a: lea esi, [rsp + 0x140]; call rax; 
0x0000000000047522: lea esi, [rsp + 0x150]; call qword ptr [rcx + 0x20]; 
0x0000000000018845: lea esi, [rsp + 0x170]; call rax; 
0x000000000000c116: lea esi, [rsp + 0x18]; call 0xc090; and al, 1; movzx eax, al; add rsp, 0x48; ret; 
0x000000000001979b: lea esi, [rsp + 0x18]; call qword ptr [rip + 0x5fceb]; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x00000000000188d3: lea esi, [rsp + 0x190]; call rax; 
0x000000000000def6: lea esi, [rsp + 0x1b0]; lea rdx, [rsp + 0x50]; call rax; 
0x000000000003e40d: lea esi, [rsp + 0x20]; mov rbx, qword ptr [rip + 0x3b5c0]; mov edx, 0x90; call rbx; 
0x000000000003b34c: lea esi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x0000000000018b0e: lea esi, [rsp + 0x210]; call rax; 
0x0000000000018ba5: lea esi, [rsp + 0x220]; call rax; 
0x000000000000e193: lea esi, [rsp + 0x28]; call rax; 
0x000000000005a090: lea esi, [rsp + 0x28]; mov rdi, r15; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000012a08: lea esi, [rsp + 0x38]; call rax; 
0x0000000000010c36: lea esi, [rsp + 0x38]; mov edx, 0xd0; call 0x9078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x000000000003d0d6: lea esi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000001dde5: lea esi, [rsp + 0x40]; call qword ptr [rip + 0x5bbc1]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x000000000004747c: lea esi, [rsp + 0x430]; mov rax, qword ptr [rsp + 0xb0]; call qword ptr [rax + 0x20]; 
0x000000000001a131: lea esi, [rsp + 0x58]; call rax; 
0x00000000000194f1: lea esi, [rsp + 0x618]; call rax; 
0x000000000001a309: lea esi, [rsp + 0x70]; call rax; 
0x0000000000058152: lea esi, [rsp + 0x90]; mov rdi, rbx; call qword ptr [rip + 0x21d6e]; add rsp, 0xa0; pop rbx; ret; 
0x000000000000d98b: lea esi, [rsp + 0xb0]; lea rdx, [rsp + 0x50]; call rax; 
0x000000000003e42e: lea esi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x000000000000da4e: lea esi, [rsp + 0xd0]; call rax; 
0x0000000000017dbe: lea esi, [rsp + 0xd8]; call rax; 
0x0000000000016913: lea esi, [rsp + 0xe0]; call rax; 
0x000000000000c9fd: lea esi, [rsp + 0xe8]; lea rdx, [rsp + 0x88]; call rax; 
0x000000000001ee4c: lea esi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ec5c: lea esi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x000000000005a6d2: lea esi, [rsp + 4]; call qword ptr [rip + 0x1f3fc]; pop rcx; ret; 
0x000000000005a68e: lea esi, [rsp + 4]; call qword ptr [rip + 0x1f440]; pop rcx; ret; 
0x000000000005a651: lea esi, [rsp + 4]; call qword ptr [rip + 0x1f47d]; pop rcx; ret; 
0x000000000005a61f: lea esi, [rsp + 4]; call qword ptr [rip + 0x1f4af]; pop rcx; ret; 
0x000000000005a51f: lea esi, [rsp + 4]; call qword ptr [rip + 0x1f5af]; pop rcx; ret; 
0x000000000005a4db: lea esi, [rsp + 4]; call qword ptr [rip + 0x1f5f3]; pop rcx; ret; 
0x000000000005a49e: lea esi, [rsp + 4]; call qword ptr [rip + 0x1f630]; pop rcx; ret; 
0x000000000005a46c: lea esi, [rsp + 4]; call qword ptr [rip + 0x1f662]; pop rcx; ret; 
0x000000000001e6dd: lea esi, [rsp + 8]; call 0x1c870; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000004278a: lea esi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000001a959: lea esi, [rsp + 8]; call qword ptr [rip + 0x5f07d]; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000003898f: lea esp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003898e: lea r12, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003c941: lea r14, [r13 - 1]; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x0000000000039096: lea r14, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000003cfd1: lea r14, [rbx - 1]; add rbx, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000001f3a6: lea r14, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003b44b: lea r15, [r12 - 1]; mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x00000000000454cc: lea r15, [rax + rax*2]; mov esi, 8; mov rdi, r15; lea rbx, [rip - 0x3078f]; call rbx; 
0x000000000001ffc2: lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000037fce: lea r15, ds:[rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000039b05: lea r8, [rip + 0x28078]; movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000002c375: lea r8, [rip + 0x35308]; movsxd rcx, dword ptr [r8 + rbp*4]; add rcx, r8; jmp rcx; 
0x000000000002b018: lea r8, [rip + 0x3655d]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x000000000000ea1d: lea r8, [rip + 0x6746c]; call 0x11490; add rsp, 0x1c8; ret; 
0x0000000000039e70: lea r8d, [rax]; add rax, r13; jmp rax; 
0x000000000002a395: lea r9, [rip + 0x37128]; movsxd rax, dword ptr [r9 + rax*4]; add rax, r9; jmp rax; 
0x000000000005dc71: lea r9, [rip + 0x7fce]; mov edx, 0x28; mov r8d, 0x11f; call 0x5db10; pop rcx; ret; 
0x000000000005dca8: lea r9, [rip + 0x81e2]; mov edx, 0x2c; mov r8d, 0xc4; call 0x5db10; pop rcx; ret; 
0x000000000005778c: lea r9, [rsp + 0x10]; mov edx, 8; mov rdi, rax; call qword ptr [rip + 0x222a1]; add rsp, 0x18; ret; 
0x000000000005b0b2: lea rax, [r12 + r14]; cmp rax, -1; je 0x5b0cd; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000002c172: lea rax, [r12 - 0x2e]; lea rcx, [rip + 0x35536]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000035f33: lea rax, [r14 - 0x20]; pop rbx; pop r14; pop r15; ret; 
0x0000000000035f40: lea rax, [rax - 0x20]; pop rbx; pop r14; pop r15; ret; 
0x000000000000e165: lea rax, [rip + 0x100a4]; call rax; 
0x0000000000019aff: lea rax, [rip + 0x100a]; call rax; 
0x000000000000dd15: lea rax, [rip + 0x104f4]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000000dcbe: lea rax, [rip + 0x1054b]; lea rdi, [rsp + 0xe8]; call rax; 
0x000000000000dc75: lea rax, [rip + 0x10594]; lea rdi, [rsp + 0xe8]; call rax; 
0x000000000000dc33: lea rax, [rip + 0x105d6]; lea rdi, [rsp + 0x100]; call rax; 
0x000000000000dbb1: lea rax, [rip + 0x10658]; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000019a76: lea rax, [rip + 0x1083]; lea rdi, [rsp + 0xb0]; call rax; 
0x000000000000d8dd: lea rax, [rip + 0x1092c]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000000d728: lea rax, [rip + 0x10ae1]; lea rdi, [rsp + 0x248]; call rax; 
0x000000000000d6e7: lea rax, [rip + 0x10b22]; lea rdi, [rsp + 0x248]; call rax; 
0x000000000000d5d8: lea rax, [rip + 0x10c31]; lea rdi, [rsp + 0x248]; call rax; 
0x000000000000d458: lea rax, [rip + 0x10db1]; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000053e32: lea rax, [rip + 0x10df7]; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x000000000000d1b7: lea rax, [rip + 0x11052]; lea rdi, [rsp + 0x120]; call rax; 
0x000000000000d199: lea rax, [rip + 0x11070]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000d115: lea rax, [rip + 0x110f4]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000cf03: lea rax, [rip + 0x11306]; lea rdi, [rsp + 0x88]; call rax; 
0x000000000000ce9a: lea rax, [rip + 0x1136f]; lea rdi, [rsp + 0x100]; call rax; 
0x000000000000cbf9: lea rax, [rip + 0x11610]; lea rdi, [rsp + 0x120]; call rax; 
0x000000000000cbdb: lea rax, [rip + 0x1162e]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000cb55: lea rax, [rip + 0x116b4]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000c943: lea rax, [rip + 0x118c6]; lea rdi, [rsp + 0x88]; call rax; 
0x000000000001c1d1: lea rax, [rip + 0x1c28]; call rax; 
0x000000000001c1d1: lea rax, [rip + 0x1c28]; call rax; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000015fad: lea rax, [rip + 0x1c8c]; lea rdx, [rsp + 0x18]; call rax; 
0x000000000001898e: lea rax, [rip + 0x1d1b]; call rax; 
0x00000000000188f3: lea rax, [rip + 0x1d66]; lea rdi, [rsp + 0x140]; call rax; 
0x0000000000018725: lea rax, [rip + 0x1f34]; lea rdi, [rsp + 0xd0]; call rax; 
0x00000000000187c0: lea rax, [rip + 0x1fa9]; call rax; 
0x0000000000018bb0: lea rax, [rip + 0x2059]; lea rdi, [rsp + 0x140]; call rax; 
0x0000000000018b6e: lea rax, [rip + 0x209b]; lea rdi, [rsp + 0x140]; call rax; 
0x00000000000151be: lea rax, [rip + 0x21cb]; call rax; 
0x000000000001890b: lea rax, [rip + 0x22fe]; lea rdi, [rsp + 0x140]; call rax; 
0x000000000003dcf2: lea rax, [rip + 0x23f7b]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x0000000000016799: lea rax, [rip + 0x24a0]; mov edi, 4; call rax; 
0x000000000001bd48: lea rax, [rip + 0x24c1]; lea rdi, [rsp + 0x80]; call rax; 
0x000000000001873d: lea rax, [rip + 0x24cc]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000001bd38: lea rax, [rip + 0x24d1]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000001bce9: lea rax, [rip + 0x2520]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000001bc0e: lea rax, [rip + 0x25fb]; lea rdi, [rsp + 0x50]; call rax; 
0x0000000000039fd9: lea rax, [rip + 0x27bec]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000000dec9: lea rax, [rip + 0x29a10]; call rax; 
0x000000000000d95e: lea rax, [rip + 0x29f7b]; call rax; 
0x000000000000d916: lea rax, [rip + 0x2a453]; call rax; 
0x000000000000d933: lea rax, [rip + 0x2a466]; lea rdi, [rsp + 0x98]; call rax; 
0x000000000000e04c: lea rax, [rip + 0x2a56d]; lea rdi, [rsp + 0x1c8]; call rax; 
0x000000000000dea1: lea rax, [rip + 0x2a718]; lea rdi, [rsp + 0x158]; call rax; 
0x000000000000de23: lea rax, [rip + 0x2a796]; lea rdi, [rsp + 0x128]; call rax; 
0x000000000000dde9: lea rax, [rip + 0x2a7d0]; lea rdi, [rsp + 0xf8]; call rax; 
0x000000000000ddaf: lea rax, [rip + 0x2a80a]; lea rdi, [rsp + 0xc8]; call rax; 
0x000000000000dd75: lea rax, [rip + 0x2a844]; lea rdi, [rsp + 0x98]; call rax; 
0x000000000003721d: lea rax, [rip + 0x2a874]; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x000000000000dd3e: lea rax, [rip + 0x2a87b]; lea rdi, [rsp + 0x68]; call rax; 
0x000000000000d4ec: lea rax, [rip + 0x2a87d]; call rax; 
0x000000000000d4fd: lea rax, [rip + 0x2a89c]; lea rdi, [rsp + 0x220]; call rax; 
0x000000000000cf90: lea rax, [rip + 0x2a949]; call rax; 
0x000000000000dc20: lea rax, [rip + 0x2a999]; lea rdi, [rsp + 0x120]; call rax; 
0x000000000000db76: lea rax, [rip + 0x2aa43]; lea rdi, [rsp + 0x160]; call rax; 
0x000000000000da80: lea rax, [rip + 0x2ab39]; lea rdi, [rsp + 0x190]; call rax; 
0x000000000000d906: lea rax, [rip + 0x2acb3]; lea rdi, [rsp + 0x68]; call rax; 
0x000000000000d7a9: lea rax, [rip + 0x2ae10]; lea rdi, [rsp + 0x2a8]; call rax; 
0x000000000000cf42: lea rax, [rip + 0x2ae27]; call rax; 
0x000000000000cf65: lea rax, [rip + 0x2ae34]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000000d713: lea rax, [rip + 0x2aea6]; lea rdi, [rsp + 0x2e8]; call rax; 
0x000000000000c9d0: lea rax, [rip + 0x2af09]; call rax; 
0x000000000000d4e3: lea rax, [rip + 0x2b0d6]; call rax; 
0x000000000000d40c: lea rax, [rip + 0x2b1ad]; lea rdi, [rsp + 0x2e8]; call rax; 
0x000000000000c982: lea rax, [rip + 0x2b3e7]; call rax; 
0x000000000000c9a5: lea rax, [rip + 0x2b3f4]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000000d0cf: lea rax, [rip + 0x2b4ea]; lea rdi, [rsp + 0x348]; call rax; 
0x000000000000cf2f: lea rax, [rip + 0x2b68a]; lea rdi, [rsp + 0xa0]; call rax; 
0x000000000000ce4e: lea rax, [rip + 0x2b76b]; lea rdi, [rsp + 0x2e8]; call rax; 
0x000000000000cb0f: lea rax, [rip + 0x2baaa]; lea rdi, [rsp + 0x348]; call rax; 
0x000000000000c96f: lea rax, [rip + 0x2bc4a]; lea rdi, [rsp + 0xa0]; call rax; 
0x0000000000017d77: lea rax, [rip + 0x2cb2]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000d2da: lea rax, [rip + 0x2dbcf]; lea rdi, [rsp + 0x1c8]; call rax; 
0x0000000000010c20: lea rax, [rip + 0x2e0c9]; lea rdi, [rsp + 0x38]; call rax; 
0x000000000000cd1c: lea rax, [rip + 0x2e18d]; lea rdi, [rsp + 0x1c8]; call rax; 
0x0000000000010b80: lea rax, [rip + 0x2e3f9]; call rax; 
0x0000000000010b09: lea rax, [rip + 0x2e470]; call rax; 
0x0000000000018aeb: lea rax, [rip + 0x2eae]; lea rdi, [rsp + 0x210]; call rax; 
0x00000000000194ae: lea rax, [rip + 0x336b]; mov edi, 0x27; mov edx, 0x1b; call rax; 
0x00000000000169ce: lea rax, [rip + 0x345b]; lea rdi, [rsp + 0x30]; call rax; 
0x0000000000016b08: lea rax, [rip + 0x3641]; lea rdi, [rsp + 0x68]; call rax; 
0x000000000001666e: lea rax, [rip + 0x37bb]; lea rdi, [rsp + 0x58]; call rax; 
0x000000000001a8cb: lea rax, [rip + 0x392e]; lea rdi, [rsp + 0x10]; call rax; 
0x00000000000275e5: lea rax, [rip + 0x39944]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x0000000000018da6: lea rax, [rip + 0x39b3]; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000016709: lea rax, [rip + 0x3a40]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000001c410: lea rax, [rip + 0x3a849]; call rax; 
0x000000000001c3f2: lea rax, [rip + 0x3a867]; call rax; 
0x0000000000016485: lea rax, [rip + 0x3b14]; lea rdx, [rsp + 0x20]; call rax; 
0x000000000003e619: lea rax, [rip + 0x3bb09]; pop rcx; ret; 
0x000000000001db7d: lea rax, [rip + 0x3be8c]; call rax; 
0x000000000001bdca: lea rax, [rip + 0x3c11f]; call rax; 
0x000000000001c2c3: lea rax, [rip + 0x3d6]; call rax; 
0x0000000000019af0: lea rax, [rip + 0x3fee9]; call rax; 
0x0000000000036d19: lea rax, [rip + 0x400a0]; pop rcx; ret; 
0x00000000000169e3: lea rax, [rip + 0x4096]; call rax; 
0x000000000001bb8a: lea rax, [rip + 0x4098f]; lea rdi, [rsp + 0x68]; mov qword ptr [rsp + 0x20], rdi; call rax; 
0x000000000001698c: lea rax, [rip + 0x40ed]; call rax; 
0x000000000001a552: lea rax, [rip + 0x417]; call rax; 
0x0000000000015480: lea rax, [rip + 0x417d9]; call rax; 
0x0000000000015462: lea rax, [rip + 0x417f7]; call rax; 
0x000000000001520d: lea rax, [rip + 0x41a4c]; call rax; 
0x0000000000037d8a: lea rax, [rip + 0x422f7]; pop rcx; ret; 
0x0000000000037d7c: lea rax, [rip + 0x42305]; pop rcx; ret; 
0x0000000000015f76: lea rax, [rip + 0x423]; lea rdi, [rsp + 0x18]; call rax; 
0x000000000001692e: lea rax, [rip + 0x423b]; lea rdi, [rsp + 0x40]; call rax; 
0x00000000000378fa: lea rax, [rip + 0x4274f]; pop rcx; ret; 
0x00000000000378ec: lea rax, [rip + 0x4275d]; pop rcx; ret; 
0x000000000001945a: lea rax, [rip + 0x430bf]; lea rdi, [rsp + 0x630]; call rax; 
0x000000000000fa2d: lea rax, [rip + 0x4722c]; call rax; 
0x0000000000012a00: lea rax, [rip + 0x47a09]; lea rsi, [rsp + 0x38]; call rax; 
0x00000000000118ae: lea rax, [rip + 0x4806b]; call rax; 
0x000000000000e18b: lea rax, [rip + 0x49e4e]; lea rsi, [rsp + 0x28]; call rax; 
0x000000000000d375: lea rax, [rip + 0x49e74]; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000cdb7: lea rax, [rip + 0x4a432]; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000e150: lea rax, [rip + 0x4c879]; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000019424: lea rax, [rip + 0x4de5]; lea rdi, [rsp + 0x560]; call rax; 
0x0000000000016906: lea rax, [rip + 0x4e3]; lea rdi, [rsp + 0x40]; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000000d57a: lea rax, [rip + 0x4ef9f]; lea rdi, [rsp + 0x260]; mov qword ptr [rsp + 0x40], rdi; call rax; 
0x000000000001ccc6: lea rax, [rip + 0x583]; call rax; 
0x000000000001cd21: lea rax, [rip + 0x58]; call rax; 
0x0000000000015199: lea rax, [rip + 0x5b60]; call rax; 
0x0000000000015199: lea rax, [rip + 0x5b60]; call rax; add rsp, 0x28; ret; 
0x000000000001e25e: lea rax, [rip + 0x5b]; call rax; 
0x0000000000010f88: lea rax, [rip + 0x5da1]; call rax; 
0x0000000000010c68: lea rax, [rip + 0x60c1]; call rax; 
0x0000000000017c70: lea rax, [rip + 0x799]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000f9de: lea rax, [rip + 0x79ab]; call rax; 
0x000000000001a39c: lea rax, [rip + 0x7cd]; lea rdi, [rsp + 0x38]; call rax; 
0x000000000001a371: lea rax, [rip + 0x7f8]; lea rdi, [rsp + 0x38]; call rax; 
0x000000000000daf3: lea rax, [rip + 0x85d6]; lea rdi, [rsp + 0x100]; call rax; 
0x000000000001a3c5: lea rax, [rip + 0x8c4]; lea rdi, [rsp + 0x18]; call rax; 
0x000000000001aaaa: lea rax, [rip + 0x8f]; call rax; 
0x000000000000d0f8: lea rax, [rip + 0x8fd1]; lea rdi, [rsp + 0x178]; call rax; 
0x0000000000015333: lea rax, [rip + 0x926]; call rax; 
0x000000000005bfac: lea rax, [rip + 0x94b1]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bf4c: lea rax, [rip + 0x9511]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bf13: lea rax, [rip + 0x954a]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bed5: lea rax, [rip + 0x9588]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000000cb38: lea rax, [rip + 0x9591]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000001a088: lea rax, [rip + 0x961]; call rax; 
0x000000000005be3b: lea rax, [rip + 0x9622]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bdfc: lea rax, [rip + 0x9661]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000000d34e: lea rax, [rip + 0x99db]; lea rdi, [rsp + 0x190]; call rax; 
0x000000000001455f: lea rax, [rip + 0x9cba]; lea rdi, [rsp + 0x18]; call rax; 
0x00000000000144bf: lea rax, [rip + 0x9d5a]; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000014374: lea rax, [rip + 0x9ea5]; lea rdi, [rsp + 0x30]; call rax; 
0x00000000000142a1: lea rax, [rip + 0x9f78]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000cd90: lea rax, [rip + 0x9f99]; lea rdi, [rsp + 0x190]; call rax; 
0x000000000001bd19: lea rax, [rip + 0xb00]; mov edi, 0x27; call rax; 
0x000000000000f232: lea rax, [rip + 0xb857]; call rax; 
0x000000000000f2fd: lea rax, [rip + 0xb90c]; call rax; 
0x000000000000f2d9: lea rax, [rip + 0xb930]; call rax; 
0x000000000000f123: lea rax, [rip + 0xb966]; call rax; 
0x000000000000f0de: lea rax, [rip + 0xb9ab]; call rax; 
0x000000000000f094: lea rax, [rip + 0xb9f5]; call rax; 
0x000000000000f056: lea rax, [rip + 0xba33]; call rax; 
0x000000000001ab8e: lea rax, [rip + 0xbb]; call rax; 
0x000000000000d629: lea rax, [rip + 0xc1d0]; lea rdi, [rsp + 0x278]; call rax; 
0x000000000001a052: lea rax, [rip + 0xc67]; lea rdi, [rsp + 0x58]; lea rdx, [rsp + 0x70]; call rax; 
0x000000000000d847: lea rax, [rip + 0xd322]; lea rdi, [rsp + 0x278]; call rax; 
0x000000000000d7bc: lea rax, [rip + 0xd3ad]; lea rdi, [rsp + 0x290]; call rax; 
0x000000000000d73e: lea rax, [rip + 0xd42b]; lea rdi, [rsp + 0x290]; call rax; 
0x0000000000019da0: lea rax, [rip + 0xd59]; lea rdi, [rsp + 0xb0]; call rax; 
0x0000000000016b83: lea rax, [rip + 0xd6]; call rax; 
0x0000000000010b56: lea rax, [rip + 0xd6b3]; call rax; 
0x000000000000ef12: lea rax, [rip + 0xf327]; call rax; 
0x000000000000eefe: lea rax, [rip + 0xf33b]; call rax; 
0x000000000001e595: lea rax, [rip + 4]; call rax; 
0x000000000001e595: lea rax, [rip + 4]; call rax; pop rcx; ret; 
0x000000000001bccf: lea rax, [rip - 0x10536]; call rax; 
0x000000000001c0f8: lea rax, [rip - 0x10a8f]; mov esi, 0x19; call rax; 
0x000000000001c534: lea rax, [rip - 0x10f6b]; call rax; 
0x000000000000c789: lea rax, [rip - 0x1120]; mov esi, 0x1c; call rax; 
0x000000000001cba6: lea rax, [rip - 0x1153d]; mov esi, 0x28; call rax; 
0x000000000001d31f: lea rax, [rip - 0x11d56]; call rax; 
0x000000000001e1dd: lea rax, [rip - 0x12a44]; call rax; 
0x000000000001e289: lea rax, [rip - 0x12af0]; call rax; 
0x000000000001e332: lea rax, [rip - 0x12b99]; call rax; 
0x000000000001e42d: lea rax, [rip - 0x12c94]; call rax; 
0x000000000000cbee: lea rax, [rip - 0x1455]; call rax; 
0x00000000000167c3: lea rax, [rip - 0x151a]; xor esi, esi; call rax; 
0x0000000000017c2d: lea rax, [rip - 0x1774]; call rax; 
0x0000000000017c2d: lea rax, [rip - 0x1774]; call rax; add rsp, 0x18; ret; 
0x0000000000017d94: lea rax, [rip - 0x188b]; call rax; 
0x00000000000188cb: lea rax, [rip - 0x1952]; lea rsi, [rsp + 0x190]; call rax; 
0x0000000000017d5c: lea rax, [rip - 0x1993]; lea rdi, [rsp + 0xd8]; lea rdx, [rsp + 0xf0]; call rax; 
0x000000000000d1ac: lea rax, [rip - 0x1a13]; call rax; 
0x000000000001e24e: lea rax, [rip - 0x1aa5]; call rax; 
0x0000000000018b9d: lea rax, [rip - 0x1ae4]; lea rsi, [rsp + 0x220]; call rax; 
0x000000000001dd88: lea rax, [rip - 0x1bff]; call rax; 
0x0000000000018eb4: lea rax, [rip - 0x1d5b]; call rax; 
0x0000000000017e12: lea rax, [rip - 0x1dc9]; lea rsi, [rsp + 0x140]; call rax; 
0x000000000000d663: lea rax, [rip - 0x1eca]; call rax; 
0x000000000001e3eb: lea rax, [rip - 0x1f2]; lea rdi, [rsp + 0x10]; call rax; 
0x000000000001e392: lea rax, [rip - 0x2189]; lea rdi, [rsp + 0x20]; call rax; 
0x00000000000199a6: lea rax, [rip - 0x235d]; lea rdi, [rsp + 0xc0]; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000000dc49: lea rax, [rip - 0x24b0]; call rax; 
0x0000000000019fd3: lea rax, [rip - 0x259a]; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000019647: lea rax, [rip - 0x272e]; call rax; 
0x0000000000019cc8: lea rax, [rip - 0x273f]; lea rdi, [rsp + 0xc0]; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000000e078: lea rax, [rip - 0x28df]; call rax; 
0x0000000000019689: lea rax, [rip - 0x2960]; call rax; 
0x0000000000018822: lea rax, [rip - 0x2999]; lea rdi, [rsp + 0x170]; call rax; 
0x0000000000019a4a: lea rax, [rip - 0x2a31]; lea rsi, [rsp + 0x110]; call rax; 
0x000000000000e1d0: lea rax, [rip - 0x2a37]; call rax; 
0x000000000001a301: lea rax, [rip - 0x2d98]; lea rsi, [rsp + 0x70]; call rax; 
0x000000000000e907: lea rax, [rip - 0x331e]; call rax; 
0x000000000001a331: lea rax, [rip - 0x3348]; call rax; 
0x000000000000ed18: lea rax, [rip - 0x357f]; call rax; 
0x000000000000ede3: lea rax, [rip - 0x364a]; call rax; 
0x000000000000eeb0: lea rax, [rip - 0x3717]; call rax; 
0x000000000000ef41: lea rax, [rip - 0x37a8]; call rax; 
0x000000000000f0ab: lea rax, [rip - 0x3912]; call rax; 
0x000000000000f1b0: lea rax, [rip - 0x3a17]; call rax; 
0x0000000000019f4d: lea rax, [rip - 0x3a34]; call rax; 
0x000000000000f26d: lea rax, [rip - 0x3ad4]; call rax; 
0x000000000001a0de: lea rax, [rip - 0x3bc5]; lea rdi, [rsp + 0x98]; call rax; 
0x000000000000f460: lea rax, [rip - 0x3cc7]; call rax; 
0x000000000001a129: lea rax, [rip - 0x3e50]; lea rsi, [rsp + 0x58]; call rax; 
0x000000000001ab7e: lea rax, [rip - 0x3ec5]; call rax; 
0x0000000000019f03: lea rax, [rip - 0x3fba]; lea rdi, [rsp + 0x20]; call rax; 
0x000000000000f9c5: lea rax, [rip - 0x422c]; call rax; 
0x000000000000fa4c: lea rax, [rip - 0x4483]; call rax; 
0x000000000000fb22: lea rax, [rip - 0x44b9]; mov esi, 0x49; call rax; 
0x000000000001bba9: lea rax, [rip - 0x48b0]; call rax; 
0x0000000000010095: lea rax, [rip - 0x4a2c]; mov esi, 0x49; call rax; 
0x00000000000104c9: lea rax, [rip - 0x4e60]; mov esi, 0x49; call rax; 
0x00000000000105bc: lea rax, [rip - 0x4f53]; mov esi, 0x49; call rax; 
0x00000000000108b9: lea rax, [rip - 0x5250]; mov esi, 0x49; call rax; 
0x00000000000109ac: lea rax, [rip - 0x5343]; mov esi, 0x49; call rax; 
0x0000000000010ba0: lea rax, [rip - 0x5407]; call rax; 
0x00000000000114ed: lea rax, [rip - 0x5ab4]; call rax; 
0x000000000001bbc9: lea rax, [rip - 0x5b00]; call rax; 
0x000000000001159b: lea rax, [rip - 0x5b72]; call rax; 
0x000000000001134f: lea rax, [rip - 0x5ce6]; mov esi, 0x23; call rax; 
0x00000000000113f8: lea rax, [rip - 0x5d8f]; mov esi, 0x19; call rax; 
0x0000000000012906: lea rax, [rip - 0x71ed]; mov esi, 0x100; call rax; 
0x0000000000012940: lea rax, [rip - 0x7227]; mov esi, 0x100; call rax; 
0x0000000000012b5f: lea rax, [rip - 0x74f6]; mov esi, 0x2b; call rax; 
0x000000000001c9bf: lea rax, [rip - 0x786]; xor esi, esi; call rax; 
0x000000000001307e: lea rax, [rip - 0x7a15]; mov esi, 0x2b; call rax; 
0x0000000000014200: lea rax, [rip - 0x8877]; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000014291: lea rax, [rip - 0x8908]; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000014364: lea rax, [rip - 0x89db]; lea rdx, [rsp + 0x30]; call rax; 
0x0000000000014415: lea rax, [rip - 0x8a8c]; lea rdx, [rsp + 0x20]; call rax; 
0x00000000000144af: lea rax, [rip - 0x8b26]; lea rdx, [rsp + 0x28]; call rax; 
0x00000000000142c3: lea rax, [rip - 0x8b2a]; call rax; 
0x000000000001454a: lea rax, [rip - 0x8bc1]; mov esi, 0x2b; lea rdx, [rsp + 0x18]; call rax; 
0x0000000000014396: lea rax, [rip - 0x8bfd]; call rax; 
0x00000000000144e1: lea rax, [rip - 0x8d48]; call rax; 
0x0000000000014581: lea rax, [rip - 0x8de8]; call rax; 
0x000000000001477d: lea rax, [rip - 0x8fe4]; call rax; 
0x0000000000014c34: lea rax, [rip - 0x95cb]; mov esi, 0x49; call rax; 
0x0000000000014d2b: lea rax, [rip - 0x96c2]; mov esi, 0x49; call rax; 
0x000000000001522c: lea rax, [rip - 0x9c63]; call rax; 
0x00000000000155a4: lea rax, [rip - 0x9fdb]; call rax; 
0x0000000000015de8: lea rax, [rip - 0xa77f]; mov esi, 0x19; call rax; 
0x000000000001e304: lea rax, [rip - 0xaab]; call rax; 
0x000000000001e1ab: lea rax, [rip - 0xac2]; call rax; 
0x00000000000162a8: lea rax, [rip - 0xacbf]; call rax; 
0x000000000001691e: lea rax, [rip - 0xb185]; call rax; 
0x0000000000016c42: lea rax, [rip - 0xb4a9]; call rax; 
0x000000000001734e: lea rax, [rip - 0xb9c5]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x000000000001e2f1: lea rax, [rip - 0xc8]; call rax; 
0x0000000000018bc6: lea rax, [rip - 0xd42d]; call rax; 
0x0000000000018fbc: lea rax, [rip - 0xd9d3]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000001a515: lea rax, [rip - 0xdac]; call rax; 
0x0000000000019665: lea rax, [rip - 0xdecc]; call rax; 
0x0000000000019a89: lea rax, [rip - 0xe2f0]; call rax; 
0x0000000000019a89: lea rax, [rip - 0xe2f0]; call rax; ud2; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x178; ret; 
0x0000000000019b2e: lea rax, [rip - 0xe395]; call rax; 
0x0000000000019db3: lea rax, [rip - 0xe61a]; call rax; 
0x0000000000019db3: lea rax, [rip - 0xe61a]; call rax; ud2; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x158; ret; 
0x000000000001a384: lea rax, [rip - 0xebeb]; call rax; 
0x000000000001a384: lea rax, [rip - 0xebeb]; call rax; ud2; mov rax, qword ptr [rsp + 8]; add rsp, 0xb8; ret; 
0x000000000001a90d: lea rax, [rip - 0xf174]; call rax; 
0x000000000001aad5: lea rax, [rip - 0xf33c]; call rax; 
0x000000000000c657: lea rax, [rip - 0xf3e]; xor ecx, ecx; mov edi, ecx; call rax; 
0x000000000001abb9: lea rax, [rip - 0xf420]; call rax; 
0x000000000001adff: lea rax, [rip - 0xf836]; call rax; 
0x000000000000c5a8: lea rax, [rip - 0xfbf]; call rax; 
0x0000000000009fea: lea rax, [rsp + 0x18]; mov qword ptr [rsp + 0x10], rax; lea rdi, [rsp + 0x10]; call 0xaaa0; add rsp, 0x28; ret; 
0x0000000000009f9a: lea rax, [rsp + 0x18]; mov qword ptr [rsp + 0x10], rax; lea rdi, [rsp + 0x10]; call 0xad10; add rsp, 0x28; ret; 
0x000000000005c183: lea rax, [rsp + 4]; mov rdi, rsi; mov rsi, rax; call qword ptr [rip + 0x1dd3c]; pop rcx; ret; 
0x000000000000fbea: lea rax, [rsp + 7]; mov qword ptr [rsp + 0x10], rax; movzx eax, byte ptr [rsp + 7]; add rsp, 0x18; ret; 
0x00000000000275e4: lea rax, cs:[rip + 0x39944]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x00000000000393b3: lea rbp, [r14 - 1]; mov rdi, qword ptr [r14 - 1]; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x0000000000037bd4: lea rbp, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000002b617: lea rbp, [rip + 0x35f1e]; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x000000000003ec5d: lea rbx, [r15 - 1]; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000004790f: lea rbx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x00000000000505e1: lea rbx, [rip + 0x13e00]; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000002d7d5: lea rbx, [rip - 0x18a7c]; call rbx; 
0x000000000002f206: lea rbx, [rip - 0x1a4ad]; call rbx; 
0x0000000000032faa: lea rbx, [rip - 0x1e251]; call rbx; 
0x0000000000037bed: lea rbx, [rip - 0x22e94]; je 0x37c00; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000000393cc: lea rbx, [rip - 0x24673]; je 0x393df; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000000454d8: lea rbx, [rip - 0x3078f]; call rbx; 
0x0000000000045b11: lea rbx, [rip - 0x30db8]; call rbx; 
0x0000000000046d34: lea rbx, [rip - 0x31fdb]; call rbx; 
0x0000000000057698: lea rcx, [rdx + rsi]; dec rcx; mov rax, rdx; neg rax; and rax, rcx; ret; 
0x00000000000543d1: lea rcx, [rip + 0x10868]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000050e03: lea rcx, [rip + 0x1363e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000040b89: lea rcx, [rip + 0x2110c]; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x000000000004037d: lea rcx, [rip + 0x21908]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003d3cc: lea rcx, [rip + 0x2488d]; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x000000000003a60e: lea rcx, [rip + 0x275ff]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000395b8: lea rcx, [rip + 0x2859d]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000039353: lea rcx, [rip + 0x287f2]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x00000000000370b7: lea rcx, [rip + 0x2a9ca]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000036dc4: lea rcx, [rip + 0x2acad]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000368b2: lea rcx, [rip + 0x2b1af]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000036884: lea rcx, [rip + 0x2b1dd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003577d: lea rcx, [rip + 0x2c2d4]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000034c69: lea rcx, [rip + 0x2cdd0]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000034c0d: lea rcx, [rip + 0x2ce14]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003271e: lea rcx, [rip + 0x2f187]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000032596: lea rcx, [rip + 0x2f2cf]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000030208: lea rcx, [rip + 0x31511]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000301b4: lea rcx, [rip + 0x315c9]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002fad1: lea rcx, [rip + 0x31c30]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor edx, edx; jmp rax; 
0x000000000002c177: lea rcx, [rip + 0x35536]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002b9b3: lea rcx, [rip + 0x35be2]; movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x000000000002aeae: lea rcx, [rip + 0x36667]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a8ae: lea rcx, [rip + 0x36c47]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a6de: lea rcx, [rip + 0x36df7]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a32d: lea rcx, [rip + 0x37178]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a2bd: lea rcx, [rip + 0x371d0]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a25d: lea rcx, [rip + 0x37218]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029e23: lea rcx, [rip + 0x37406]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029ead: lea rcx, [rip + 0x375a8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000028357: lea rcx, [rip + 0x38d1a]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb88: lea rcx, [rip + 0x440dd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001ba7c: lea rcx, [rip + 0x450a5]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000e74a: lea rcx, [rip + 0x51b4b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000dfe6: lea rcx, [rip + 0x5206b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000017347: lea rcx, [rip + 0x5edfa]; lea rax, [rip - 0xb9c5]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x0000000000014543: lea rcx, [rip + 0x61ad6]; lea rax, [rip - 0x8bc1]; mov esi, 0x2b; lea rdx, [rsp + 0x18]; call rax; 
0x00000000000144a8: lea rcx, [rip + 0x61b71]; lea rax, [rip - 0x8b26]; lea rdx, [rsp + 0x28]; call rax; 
0x000000000001440e: lea rcx, [rip + 0x61c2b]; lea rax, [rip - 0x8a8c]; lea rdx, [rsp + 0x20]; call rax; 
0x000000000001435d: lea rcx, [rip + 0x61cbc]; lea rax, [rip - 0x89db]; lea rdx, [rsp + 0x30]; call rax; 
0x000000000001428a: lea rcx, [rip + 0x61d8f]; lea rax, [rip - 0x8908]; lea rdx, [rsp + 0x28]; call rax; 
0x00000000000141f9: lea rcx, [rip + 0x61e00]; lea rax, [rip - 0x8877]; lea rdx, [rsp + 0x28]; call rax; 
0x000000000005bdbe: lea rcx, [rip + 0x95ff]; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x00000000000423ab: lea rcx, [rip - 0x6442]; cmovne rcx, rax; call rcx; 
0x000000000004aaaa: lea rcx, [rsi + rdx]; inc rcx; inc rdx; cmp rcx, r8; jb 0x4aaa0; ret; 
0x000000000003b338: lea rcx, [rsp + 0x10]; mov qword ptr [rsp + 0x40], rcx; mov qword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x0000000000018ad7: lea rcx, [rsp + 0x1f8]; call rax; 
0x0000000000039906: lea rdi, [rip + 0x2825f]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000003188d: lea rdi, [rip + 0x2ff5c]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x00000000000308e1: lea rdi, [rip + 0x30f64]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000002992b: lea rdi, [rip + 0x377ca]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000001cb98: lea rdi, [rip + 0x440dd]; lea rdx, [rip + 0x5981a]; lea rax, [rip - 0x1153d]; mov esi, 0x28; call rax; 
0x000000000001c0ea: lea rdi, [rip + 0x44b5f]; lea rdx, [rip + 0x5a2b0]; lea rax, [rip - 0x10a8f]; mov esi, 0x19; call rax; 
0x0000000000015dda: lea rdi, [rip + 0x4aa0f]; lea rdx, [rip + 0x60320]; lea rax, [rip - 0xa77f]; mov esi, 0x19; call rax; 
0x0000000000014d1d: lea rdi, [rip + 0x4b9d5]; lea rdx, [rip + 0x613c5]; lea rax, [rip - 0x96c2]; mov esi, 0x49; call rax; 
0x0000000000014c26: lea rdi, [rip + 0x4bacc]; lea rdx, [rip + 0x614bc]; lea rax, [rip - 0x95cb]; mov esi, 0x49; call rax; 
0x0000000000013070: lea rdi, [rip + 0x4d57a]; lea rdx, [rip + 0x62f6a]; lea rax, [rip - 0x7a15]; mov esi, 0x2b; call rax; 
0x0000000000012b51: lea rdi, [rip + 0x4da99]; lea rdx, [rip + 0x63471]; lea rax, [rip - 0x74f6]; mov esi, 0x2b; call rax; 
0x00000000000113ea: lea rdi, [rip + 0x4f18f]; lea rdx, [rip + 0x64b70]; lea rax, [rip - 0x5d8f]; mov esi, 0x19; call rax; 
0x0000000000011348: lea rdi, [rip + 0x4f1b5]; lea rax, [rip - 0x5ce6]; mov esi, 0x23; call rax; 
0x000000000001099e: lea rdi, [rip + 0x4fac5]; lea rdx, [rip + 0x655a4]; lea rax, [rip - 0x5343]; mov esi, 0x49; call rax; 
0x00000000000108ab: lea rdi, [rip + 0x4fbb8]; lea rdx, [rip + 0x65697]; lea rax, [rip - 0x5250]; mov esi, 0x49; call rax; 
0x00000000000105ae: lea rdi, [rip + 0x4feb5]; lea rdx, [rip + 0x65994]; lea rax, [rip - 0x4f53]; mov esi, 0x49; call rax; 
0x00000000000104bb: lea rdi, [rip + 0x4ffa8]; lea rdx, [rip + 0x65a87]; lea rax, [rip - 0x4e60]; mov esi, 0x49; call rax; 
0x0000000000010087: lea rdi, [rip + 0x50342]; lea rdx, [rip + 0x65ea3]; lea rax, [rip - 0x4a2c]; mov esi, 0x49; call rax; 
0x000000000000fb14: lea rdi, [rip + 0x5081b]; lea rdx, [rip + 0x663ce]; lea rax, [rip - 0x44b9]; mov esi, 0x49; call rax; 
0x000000000000c77b: lea rdi, [rip + 0x538fe]; lea rdx, [rip + 0x693ef]; lea rax, [rip - 0x1120]; mov esi, 0x1c; call rax; 
0x000000000000e0b0: lea rdi, [rip - 0x3d7]; xor ecx, ecx; call 0xfb80; pop rcx; ret; 
0x000000000000cea1: lea rdi, [rsp + 0x100]; call rax; 
0x0000000000009ff4: lea rdi, [rsp + 0x10]; call 0xaaa0; add rsp, 0x28; ret; 
0x0000000000009fa4: lea rdi, [rsp + 0x10]; call 0xad10; add rsp, 0x28; ret; 
0x000000000001a8d2: lea rdi, [rsp + 0x10]; call rax; 
0x000000000000cc00: lea rdi, [rsp + 0x120]; call rax; 
0x000000000000de2a: lea rdi, [rsp + 0x128]; call rax; 
0x00000000000188fa: lea rdi, [rsp + 0x140]; call rax; 
0x000000000000dea8: lea rdi, [rsp + 0x158]; call rax; 
0x000000000000db7d: lea rdi, [rsp + 0x160]; call rax; 
0x0000000000018829: lea rdi, [rsp + 0x170]; call rax; 
0x000000000000cb3f: lea rdi, [rsp + 0x178]; call rax; 
0x0000000000014566: lea rdi, [rsp + 0x18]; call rax; 
0x000000000000cd97: lea rdi, [rsp + 0x190]; call rax; 
0x000000000000cd23: lea rdi, [rsp + 0x1c8]; call rax; 
0x0000000000019f0a: lea rdi, [rsp + 0x20]; call rax; 
0x0000000000018af2: lea rdi, [rsp + 0x210]; call rax; 
0x000000000000d504: lea rdi, [rsp + 0x220]; call rax; 
0x000000000000d5df: lea rdi, [rsp + 0x248]; call rax; 
0x000000000000d581: lea rdi, [rsp + 0x260]; mov qword ptr [rsp + 0x40], rdi; call rax; 
0x000000000000d630: lea rdi, [rsp + 0x278]; call rax; 
0x000000000000e157: lea rdi, [rsp + 0x28]; call rax; 
0x000000000000d745: lea rdi, [rsp + 0x290]; call rax; 
0x000000000000d7b0: lea rdi, [rsp + 0x2a8]; call rax; 
0x000000000000ce55: lea rdi, [rsp + 0x2e8]; call rax; 
0x000000000001437b: lea rdi, [rsp + 0x30]; call rax; 
0x000000000000cdbe: lea rdi, [rsp + 0x328]; call rax; 
0x000000000000cb16: lea rdi, [rsp + 0x348]; call rax; 
0x0000000000010c27: lea rdi, [rsp + 0x38]; call rax; 
0x0000000000016935: lea rdi, [rsp + 0x40]; call rax; 
0x000000000001690d: lea rdi, [rsp + 0x40]; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000000e039: lea rdi, [rsp + 0x50]; call qword ptr [rip + 0x6ba0c]; add rsp, 0x218; ret; 
0x000000000000da93: lea rdi, [rsp + 0x50]; call qword ptr [rip + 0x6bfb2]; add rsp, 0x1d8; ret; 
0x000000000000d8e4: lea rdi, [rsp + 0x50]; call rax; 
0x000000000001942b: lea rdi, [rsp + 0x560]; call rax; 
0x0000000000016675: lea rdi, [rsp + 0x58]; call rax; 
0x000000000001a059: lea rdi, [rsp + 0x58]; lea rdx, [rsp + 0x70]; call rax; 
0x00000000000194e8: lea rdi, [rsp + 0x600]; lea rsi, [rsp + 0x618]; call rax; 
0x00000000000359db: lea rdi, [rsp + 0x60]; mov rsi, rax; call qword ptr [rip + 0x44027]; mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x0000000000019461: lea rdi, [rsp + 0x630]; call rax; 
0x000000000000d90d: lea rdi, [rsp + 0x68]; call rax; 
0x000000000001bb91: lea rdi, [rsp + 0x68]; mov qword ptr [rsp + 0x20], rdi; call rax; 
0x000000000001bd4f: lea rdi, [rsp + 0x80]; call rax; 
0x000000000000d0e2: lea rdi, [rsp + 0x88]; call qword ptr [rip + 0x6c960]; add rsp, 0x398; ret; 
0x000000000000cb22: lea rdi, [rsp + 0x88]; call qword ptr [rip + 0x6cf20]; add rsp, 0x398; ret; 
0x000000000000c94a: lea rdi, [rsp + 0x88]; call rax; 
0x0000000000016710: lea rdi, [rsp + 0x90]; call rax; 
0x000000000000d93a: lea rdi, [rsp + 0x98]; call rax; 
0x000000000000c976: lea rdi, [rsp + 0xa0]; call rax; 
0x0000000000019a7d: lea rdi, [rsp + 0xb0]; call rax; 
0x00000000000199ad: lea rdi, [rsp + 0xc0]; lea rsi, [rsp + 0xe0]; call rax; 
0x000000000000ddb6: lea rdi, [rsp + 0xc8]; call rax; 
0x000000000000c9ac: lea rdi, [rsp + 0xd0]; call rax; 
0x0000000000017d63: lea rdi, [rsp + 0xd8]; lea rdx, [rsp + 0xf0]; call rax; 
0x000000000000dc7c: lea rdi, [rsp + 0xe8]; call rax; 
0x000000000000ddf0: lea rdi, [rsp + 0xf8]; call rax; 
0x000000000000a047: lea rdi, [rsp + 8]; call 0xa850; add rsp, 0x28; ret; 
0x000000000000f91b: lea rdi, [rsp + 8]; call 0xecb0; add rsp, 0xc8; ret; 
0x000000000004abcb: lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000004ac10: lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x000000000004ac32: lea rdx, [rcx + rax]; add rdx, 0x20; mov eax, 1; ret; 
0x0000000000054752: lea rdx, [rip + 0x1054b]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000004cd6d: lea rdx, [rip + 0x16e74]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000004b3a2: lea rdx, [rip + 0x18eef]; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000003d2ee: lea rdx, [rip + 0x24937]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003a063: lea rdx, [rip + 0x27b7a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000032610: lea rdx, [rip + 0x2f275]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000318f3: lea rdx, [rip + 0x2ff0a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000318cd: lea rdx, [rip + 0x2ff48]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000318a7: lea rdx, [rip + 0x2ff86]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002c39b: lea rdx, [rip + 0x352f2]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000002c0a1: lea rdx, [rip + 0x355ac]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000003cd83: lea rdx, [rip + 0x3a7f6]; ret; 
0x000000000003cd57: lea rdx, [rip + 0x3a822]; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000003cd06: lea rdx, [rip + 0x3a853]; mov rax, rbx; add rsp, 0x50; pop rbx; ret; 
0x000000000003cc47: lea rdx, [rip + 0x3a912]; add rsp, 0x58; pop rbx; pop r14; ret; 
0x000000000003e612: lea rdx, [rip + 0x3bb07]; lea rax, [rip + 0x3bb09]; pop rcx; ret; 
0x000000000001e421: lea rdx, [rip + 0x57fd0]; add rsp, 0x38; ret; 
0x000000000001cb9f: lea rdx, [rip + 0x5981a]; lea rax, [rip - 0x1153d]; mov esi, 0x28; call rax; 
0x000000000001c0f1: lea rdx, [rip + 0x5a2b0]; lea rax, [rip - 0x10a8f]; mov esi, 0x19; call rax; 
0x000000000001a901: lea rdx, [rip + 0x5ba08]; add rsp, 0x38; ret; 
0x000000000001a32a: lea rdx, [rip + 0x5bfa7]; lea rax, [rip - 0x3348]; call rax; 
0x0000000000019a43: lea rdx, [rip + 0x5c85e]; lea rax, [rip - 0x2a31]; lea rsi, [rsp + 0x110]; call rax; 
0x0000000000019640: lea rdx, [rip + 0x5cc49]; lea rax, [rip - 0x272e]; call rax; 
0x00000000000192cb: lea rdx, [rip + 0x5cf8e]; call qword ptr [rip + 0x606e8]; mov rax, qword ptr [rsp + 0x50]; add rsp, 0x788; ret; 
0x0000000000018b96: lea rdx, [rip + 0x5d683]; lea rax, [rip - 0x1ae4]; lea rsi, [rsp + 0x220]; call rax; 
0x00000000000188c4: lea rdx, [rip + 0x5d93d]; lea rax, [rip - 0x1952]; lea rsi, [rsp + 0x190]; call rax; 
0x0000000000018076: lea rdx, [rip + 0x5e0eb]; call qword ptr [rip + 0x619f5]; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x478; ret; 
0x0000000000015de1: lea rdx, [rip + 0x60320]; lea rax, [rip - 0xa77f]; mov esi, 0x19; call rax; 
0x0000000000014d24: lea rdx, [rip + 0x613c5]; lea rax, [rip - 0x96c2]; mov esi, 0x49; call rax; 
0x0000000000014c2d: lea rdx, [rip + 0x614bc]; lea rax, [rip - 0x95cb]; mov esi, 0x49; call rax; 
0x0000000000013077: lea rdx, [rip + 0x62f6a]; lea rax, [rip - 0x7a15]; mov esi, 0x2b; call rax; 
0x0000000000012b58: lea rdx, [rip + 0x63471]; lea rax, [rip - 0x74f6]; mov esi, 0x2b; call rax; 
0x00000000000129f9: lea rdx, [rip + 0x635b0]; lea rax, [rip + 0x47a09]; lea rsi, [rsp + 0x38]; call rax; 
0x0000000000012939: lea rdx, [rip + 0x63658]; lea rax, [rip - 0x7227]; mov esi, 0x100; call rax; 
0x00000000000128ff: lea rdx, [rip + 0x6367a]; lea rax, [rip - 0x71ed]; mov esi, 0x100; call rax; 
0x00000000000113f1: lea rdx, [rip + 0x64b70]; lea rax, [rip - 0x5d8f]; mov esi, 0x19; call rax; 
0x00000000000109a5: lea rdx, [rip + 0x655a4]; lea rax, [rip - 0x5343]; mov esi, 0x49; call rax; 
0x00000000000108b2: lea rdx, [rip + 0x65697]; lea rax, [rip - 0x5250]; mov esi, 0x49; call rax; 
0x00000000000105b5: lea rdx, [rip + 0x65994]; lea rax, [rip - 0x4f53]; mov esi, 0x49; call rax; 
0x00000000000104c2: lea rdx, [rip + 0x65a87]; lea rax, [rip - 0x4e60]; mov esi, 0x49; call rax; 
0x000000000001008e: lea rdx, [rip + 0x65ea3]; lea rax, [rip - 0x4a2c]; mov esi, 0x49; call rax; 
0x000000000000fb1b: lea rdx, [rip + 0x663ce]; lea rax, [rip - 0x44b9]; mov esi, 0x49; call rax; 
0x000000000000e149: lea rdx, [rip + 0x67cf8]; lea rax, [rip + 0x4c879]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000c782: lea rdx, [rip + 0x693ef]; lea rax, [rip - 0x1120]; mov esi, 0x1c; call rax; 
0x000000000000c650: lea rdx, [rip + 0x694f1]; lea rax, [rip - 0xf3e]; xor ecx, ecx; mov edi, ecx; call rax; 
0x000000000005ba41: lea rdx, [rip + 0x98c8]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000005aa03: lea rdx, [rip - 0x325a]; ret; 
0x000000000001ace9: lea rdx, [rsp + 0x10]; call 0x1a930; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x000000000005a9b2: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x1f48b]; add rsp, 0x48; ret; 
0x000000000005a962: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x1f4db]; add rsp, 0x48; ret; 
0x000000000005a912: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x1f52b]; add rsp, 0x48; ret; 
0x000000000005a55f: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x1f8de]; add rsp, 0x48; ret; 
0x0000000000056a82: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x233bb]; add rsp, 0x48; ret; 
0x000000000004d5c2: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x2c87b]; add rsp, 0x48; ret; 
0x0000000000022a22: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x5741b]; add rsp, 0x48; ret; 
0x00000000000229d2: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x5746b]; add rsp, 0x48; ret; 
0x0000000000022982: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x574bb]; add rsp, 0x48; ret; 
0x0000000000022932: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x5750b]; add rsp, 0x48; ret; 
0x000000000001efbf: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x5ae7e]; add rsp, 0x48; ret; 
0x000000000001ef7f: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x5aebe]; add rsp, 0x48; ret; 
0x000000000001ef3f: lea rdx, [rsp + 0x10]; call qword ptr [rip + 0x5aefe]; add rsp, 0x48; ret; 
0x000000000001735a: lea rdx, [rsp + 0x10]; call rax; 
0x0000000000014556: lea rdx, [rsp + 0x18]; call rax; 
0x0000000000018acf: lea rdx, [rsp + 0x1b0]; lea rcx, [rsp + 0x1f8]; call rax; 
0x000000000001441c: lea rdx, [rsp + 0x20]; call rax; 
0x0000000000014207: lea rdx, [rsp + 0x28]; call rax; 
0x000000000001436b: lea rdx, [rsp + 0x30]; call rax; 
0x0000000000059b10: lea rdx, [rsp + 0x38]; call qword ptr [rip + 0x2032d]; add rsp, 0x68; ret; 
0x0000000000058081: lea rdx, [rsp + 0x50]; call qword ptr [rip + 0x21dbc]; add rsp, 0xa0; pop rbx; ret; 
0x000000000000d992: lea rdx, [rsp + 0x50]; call rax; 
0x000000000001a05e: lea rdx, [rsp + 0x70]; call rax; 
0x000000000000ca04: lea rdx, [rsp + 0x88]; call rax; 
0x0000000000017d6b: lea rdx, [rsp + 0xf0]; call rax; 
0x000000000003da90: lea rdx, [rsp + 8]; mov qword ptr [rsp + 8], rbp; movups xmm0, xmmword ptr [rcx]; movups xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 0x20]; 
0x000000000005278b: lea rsi, [rip + 0x11e1e]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000004f8c9: lea rsi, [rip + 0x14a78]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000039c08: lea rsi, [rip + 0x27f8d]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000005ec45: lea rsi, [rip + 0x39e0]; mov edx, 4; call qword ptr [rax + 0x18]; 
0x00000000000194a7: lea rsi, [rip + 0x475a3]; lea rax, [rip + 0x336b]; mov edi, 0x27; mov edx, 0x1b; call rax; 
0x000000000001bba2: lea rsi, [rip + 0x5a7bf]; lea rax, [rip - 0x48b0]; call rax; 
0x0000000000018fb5: lea rsi, [rip + 0x5d28c]; lea rax, [rip - 0xd9d3]; lea rdi, [rsp + 0x28]; call rax; 
0x00000000000162a1: lea rsi, [rip + 0x5fe88]; lea rax, [rip - 0xacbf]; call rax; 
0x000000000000e900: lea rsi, [rip + 0x675d1]; lea rax, [rip - 0x331e]; call rax; 
0x000000000005ef6b: lea rsi, [rip + 0x67ae]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ecd1: lea rsi, [rip + 0x683b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000000c8e2: lea rsi, [rip + 0x69307]; call 0x14500; add rsp, 0x128; ret; 
0x000000000000c5a1: lea rsi, [rip + 0x69588]; lea rax, [rip - 0xfbf]; call rax; 
0x000000000005ecb7: lea rsi, [rip + 0x6a68]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005eecf: lea rsi, [rip + 0x71ef]; mov edx, 9; call qword ptr [rax + 0x18]; 
0x000000000005f12b: lea rsi, [rip + 0x740d]; mov edx, 0xb; jmp rax; 
0x000000000005ec0b: lea rsi, [rip + 0x74ae]; mov edx, 5; jmp rax; 
0x000000000005df92: lea rsi, [rip + 0x757a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df78: lea rsi, [rip + 0x77a7]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ddea: lea rsi, [rip + 0x792f]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ddea: lea rsi, [rip + 0x792f]; mov edx, 1; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000005ddce: lea rsi, [rip + 0x794c]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005ddce: lea rsi, [rip + 0x794c]; mov edx, 2; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000005df06: lea rsi, [rip + 0x81a2]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000005dd64: lea rsi, [rip + 0x8315]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000005b8a1: lea rsi, [rip + 0x9c6b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7c7: lea rsi, [rip + 0x9d45]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b8e1: lea rsi, [rip + 0x9d67]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b886: lea rsi, [rip + 0x9e99]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7ad: lea rsi, [rip + 0x9f72]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b6c6: lea rsi, [rip + 0xa053]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000059edb: lea rsi, [rip + 0xb0f2]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000005a2c9: lea rsi, [rip + 0xb243]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a437: lea rsi, [rip + 0xb2ea]; mov edx, 1; jmp rax; 
0x000000000005a3f2: lea rsi, [rip + 0xb320]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a36b: lea rsi, [rip + 0xb3b5]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a33d: lea rsi, [rip + 0xb3d7]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a2a9: lea rsi, [rip + 0xb476]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a257: lea rsi, [rip + 0xb4bb]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a1bb: lea rsi, [rip + 0xb561]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a109: lea rsi, [rip + 0xb610]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a109: lea rsi, [rip + 0xb610]; mov edx, 1; call qword ptr [rax + 0x18]; mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x000000000005a0b1: lea rsi, [rip + 0xb661]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059fef: lea rsi, [rip + 0xb720]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000059fb9: lea rsi, [rip + 0xb754]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000058582: lea rsi, [rip + 0xd073]; mov edx, 2; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x00000000000582ec: lea rsi, [rip + 0xd30b]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000058233: lea rsi, [rip + 0xd3c2]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000057e88: lea rsi, [rip + 0xd469]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000057e5c: lea rsi, [rip + 0xd485]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000057e2b: lea rsi, [rip + 0xd764]; mov edx, 0xe; jmp rax; 
0x0000000000018398: lea rsi, [rsp + 0x10]; call qword ptr [rip + 0x61acd]; add rsp, 0x88; ret; 
0x0000000000016dcc: lea rsi, [rsp + 0x10]; call qword ptr [rip + 0x62949]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000001a275: lea rsi, [rsp + 0x10]; lea rdx, [rsp + 0x50]; call rax; 
0x0000000000012b73: lea rsi, [rsp + 0x10]; mov edx, 0x30; call 0x9078; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x0000000000019a51: lea rsi, [rsp + 0x110]; call rax; 
0x0000000000017e19: lea rsi, [rsp + 0x140]; call rax; 
0x0000000000047521: lea rsi, [rsp + 0x150]; call qword ptr [rcx + 0x20]; 
0x0000000000018844: lea rsi, [rsp + 0x170]; call rax; 
0x000000000000c115: lea rsi, [rsp + 0x18]; call 0xc090; and al, 1; movzx eax, al; add rsp, 0x48; ret; 
0x000000000001979a: lea rsi, [rsp + 0x18]; call qword ptr [rip + 0x5fceb]; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x00000000000188d2: lea rsi, [rsp + 0x190]; call rax; 
0x000000000000def5: lea rsi, [rsp + 0x1b0]; lea rdx, [rsp + 0x50]; call rax; 
0x000000000003e40c: lea rsi, [rsp + 0x20]; mov rbx, qword ptr [rip + 0x3b5c0]; mov edx, 0x90; call rbx; 
0x000000000003b34b: lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x0000000000018b0d: lea rsi, [rsp + 0x210]; call rax; 
0x0000000000018ba4: lea rsi, [rsp + 0x220]; call rax; 
0x000000000000e192: lea rsi, [rsp + 0x28]; call rax; 
0x000000000005a08f: lea rsi, [rsp + 0x28]; mov rdi, r15; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000012a07: lea rsi, [rsp + 0x38]; call rax; 
0x0000000000010c35: lea rsi, [rsp + 0x38]; mov edx, 0xd0; call 0x9078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x000000000003d0d5: lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000001dde4: lea rsi, [rsp + 0x40]; call qword ptr [rip + 0x5bbc1]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x000000000004747b: lea rsi, [rsp + 0x430]; mov rax, qword ptr [rsp + 0xb0]; call qword ptr [rax + 0x20]; 
0x000000000001a130: lea rsi, [rsp + 0x58]; call rax; 
0x00000000000194f0: lea rsi, [rsp + 0x618]; call rax; 
0x000000000001a308: lea rsi, [rsp + 0x70]; call rax; 
0x0000000000058151: lea rsi, [rsp + 0x90]; mov rdi, rbx; call qword ptr [rip + 0x21d6e]; add rsp, 0xa0; pop rbx; ret; 
0x000000000000d98a: lea rsi, [rsp + 0xb0]; lea rdx, [rsp + 0x50]; call rax; 
0x000000000003e42d: lea rsi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x000000000000da4d: lea rsi, [rsp + 0xd0]; call rax; 
0x0000000000017dbd: lea rsi, [rsp + 0xd8]; call rax; 
0x0000000000016912: lea rsi, [rsp + 0xe0]; call rax; 
0x000000000000c9fc: lea rsi, [rsp + 0xe8]; lea rdx, [rsp + 0x88]; call rax; 
0x000000000001ee4b: lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ec5b: lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x000000000005a6d1: lea rsi, [rsp + 4]; call qword ptr [rip + 0x1f3fc]; pop rcx; ret; 
0x000000000005a68d: lea rsi, [rsp + 4]; call qword ptr [rip + 0x1f440]; pop rcx; ret; 
0x000000000005a650: lea rsi, [rsp + 4]; call qword ptr [rip + 0x1f47d]; pop rcx; ret; 
0x000000000005a61e: lea rsi, [rsp + 4]; call qword ptr [rip + 0x1f4af]; pop rcx; ret; 
0x000000000005a51e: lea rsi, [rsp + 4]; call qword ptr [rip + 0x1f5af]; pop rcx; ret; 
0x000000000005a4da: lea rsi, [rsp + 4]; call qword ptr [rip + 0x1f5f3]; pop rcx; ret; 
0x000000000005a49d: lea rsi, [rsp + 4]; call qword ptr [rip + 0x1f630]; pop rcx; ret; 
0x000000000005a46b: lea rsi, [rsp + 4]; call qword ptr [rip + 0x1f662]; pop rcx; ret; 
0x000000000001e6dc: lea rsi, [rsp + 8]; call 0x1c870; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000042789: lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000001a958: lea rsi, [rsp + 8]; call qword ptr [rip + 0x5f07d]; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x00000000000301b7: leave; adc eax, 0x63480003; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000000d73a: leave; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xd42b; lea rdi, [rsp + 0x290]; call rax; 
0x000000000001b993: leave; call 0x1ae10; add rsp, 0x18; ret; 
0x000000000001da83: leave; call 0x1d330; add rsp, 0x18; ret; 
0x000000000000e0b8: leave; call 0xfb80; pop rcx; ret; 
0x000000000005ebe7: leave; call qword ptr [rip + 0x1a8ea]; add rsp, 0x28; ret; 
0x000000000005eab7: leave; call qword ptr [rip + 0x1aa1a]; add rsp, 0x28; ret; 
0x000000000005e989: leave; call qword ptr [rip + 0x1ab48]; add rsp, 0x30; pop rbx; ret; 
0x000000000005e850: leave; call qword ptr [rip + 0x1ac81]; add rsp, 0x28; ret; 
0x000000000005e763: leave; call qword ptr [rip + 0x1ad6e]; add rsp, 0x28; ret; 
0x000000000005e6b5: leave; call qword ptr [rip + 0x1ae1c]; add rsp, 0x88; ret; 
0x000000000005e480: leave; call qword ptr [rip + 0x1b051]; add rsp, 0x88; ret; 
0x000000000002b132: leave; cmp byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000002a2d4: leave; cmp rdx, 0x100; setb al; and al, cl; ret; 
0x000000000004d5fc: leave; je 0x4d602; mov al, 1; ret; 
0x000000000005366e: leave; je 0x5372a; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x000000000004abca: leave; lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000004ac0f: leave; lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x000000000004ac31: leave; lea rdx, [rcx + rax]; add rdx, 0x20; mov eax, 1; ret; 
0x000000000003d2ed: leave; lea rdx, [rip + 0x24937]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000599fd: leave; mov byte ptr [rax], cl; ret; 
0x000000000000c65f: leave; mov edi, ecx; call rax; 
0x000000000005c6f7: leave; mov qword ptr [rax], rcx; pop rbx; pop r14; pop rbp; ret; 
0x000000000004d5f7: leave; mov qword ptr [rax], rcx; test cl, cl; je 0x4d602; mov al, 1; ret; 
0x0000000000056d2f: leave; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x00000000000139de: leave; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x38; ret; 
0x000000000005769e: leave; mov rax, rdx; neg rax; and rax, rcx; ret; 
0x0000000000056d49: leave; mov rdx, rsi; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x00000000000599cf: leave; mov word ptr [rax], cx; ret; 
0x000000000004abc7: leave; movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000004ac0c: leave; movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x000000000004abf4: leave; movzx edx, cx; add rdx, rax; mov eax, 1; ret; 
0x000000000005f308: leave; ret; 
0x000000000004f0ed: leave; shl rax, 0x20; or rax, rcx; ret; 
0x0000000000017d58: lock add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xffffe66d; lea rdi, [rsp + 0xd8]; lea rdx, [rsp + 0xf0]; call rax; 
0x000000000000d90a: lodsb al, byte ptr [rsi]; add al, byte ptr [rax]; lea rdi, [rsp + 0x68]; call rax; 
0x0000000000036dc8: lodsb al, byte ptr [rsi]; add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000005ab96: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000005e854: lodsb al, byte ptr [rsi]; add dword ptr [rax], eax; add rsp, 0x28; ret; 
0x0000000000037b71: lodsb al, byte ptr [rsi]; add rax, r12; jmp rax; 
0x00000000000454f7: lodsb al, byte ptr [rsi]; and al, 0x28; add eax, dword ptr [rax]; add byte ptr [rdi + 0x100], bh; mov esi, 8; call rbx; 
0x000000000001f507: lodsb al, byte ptr [rsi]; and al, 0x30; add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret; 
0x000000000004b499: lodsb al, byte ptr [rsi]; fsub st(0); add al, 0; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xf41; 
0x000000000002d493: lodsb al, byte ptr [rsi]; or al, 0; add byte ptr [rax - 0x73], cl; add dword ptr [r9 + 0x39], ecx; ret 0x860f; 
0x000000000002c0a4: lodsb al, byte ptr [rsi]; push rbp; add eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000004bbac: lodsb al, byte ptr [rsi]; ret; 
0x000000000005e767: lodsd eax, dword ptr [rsi]; add dword ptr [rax], eax; add rsp, 0x28; ret; 
0x0000000000036dc7: lodsd eax, dword ptr [rsi]; lodsb al, byte ptr [rsi]; add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000118e0: loope 0x11902; or rax, rcx; add rsp, 0x28; ret; 
0x0000000000016996: loope 0x169e0; mov eax, dword ptr [rsp + 0x38]; add rsp, 0x1a8; ret; 
0x0000000000019b19: loope 0x19b63; mov edi, dword ptr [rsp]; call qword ptr [rip + 0x5fe24]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000001e6e3: loope 0x1e6e4; dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x18; ret; 
0x0000000000037218: loope 0x37262; shr edi, 0x20; lea rax, [rip + 0x2a874]; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x000000000003851c: loope 0x3851c; dec dword ptr [rax - 0x7b]; fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x0000000000049468: loope 0x494da; mov word ptr [rax - 0x77], cs; ret; 
0x0000000000057e97: loope 0x57e5f; or al, 0; mov eax, 0x7d; ret; 
0x000000000005debc: loope 0x5decd; nop; ret 0xc183; 
0x000000000000d72b: loope 0xd737; add dword ptr [rax], eax; lea rdi, [rsp + 0x248]; call rax; 
0x000000000000f0d1: loope 0xf0d7; add rdi, rcx; inc rax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb9ab]; call rax; 
0x000000000000f116: loope 0xf11c; add rdi, rcx; inc rax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb966]; call rax; 
0x00000000000308e5: lsl eax, dword ptr [rax]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x00000000000308e4: lsl eax, dword ptr fs:[rax]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x0000000000053e15: lsl ecx, dword ptr [rax - 0x7d]; rol dword ptr [rax + rcx*2], 0xff; ret 0xff49; 
0x0000000000053e14: lsl r9d, dword ptr [rax - 0x7d]; rol dword ptr [rax + rcx*2], 0xff; ret 0xff49; 
0x0000000000028291: mov ah, 0; add byte ptr [rax], al; movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x000000000005a2ad: mov ah, 0; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x000000000005a25b: mov ah, 0; add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; 
0x000000000000cb58: mov ah, 0x16; add dword ptr [rax], eax; lea rdi, [rsp + 0x178]; call rax; 
0x0000000000019a53: mov ah, 0x24; adc byte ptr [rcx], al; add byte ptr [rax], al; call rax; 
0x0000000000018b0f: mov ah, 0x24; adc byte ptr [rdx], al; add byte ptr [rax], al; call rax; 
0x0000000000018ba6: mov ah, 0x24; and byte ptr [rdx], al; add byte ptr [rax], al; call rax; 
0x000000000000c9fe: mov ah, 0x24; call 0x4800ca05; lea edx, [rsp + 0x88]; call rax; 
0x000000000000cfbe: mov ah, 0x24; call 0x4800cfc5; lea edx, [rsp + 0x88]; call rax; 
0x0000000000017dbf: mov ah, 0x24; fadd dword ptr [rax]; add byte ptr [rax], al; call rax; 
0x0000000000018846: mov ah, 0x24; jo 0x1884b; add byte ptr [rax], al; call rax; 
0x000000000002f21b: mov ah, 0x24; jo 0x2f224; add byte ptr [rax], al; call rbx; 
0x000000000001a324: mov ah, 0x24; mov al, 0; add byte ptr [rax], al; lea rdx, [rip + 0x5bfa7]; lea rax, [rip - 0x3348]; call rax; 
0x000000000000d98c: mov ah, 0x24; mov al, 0; add byte ptr [rax], al; lea rdx, [rsp + 0x50]; call rax; 
0x000000000003e42f: mov ah, 0x24; mov al, 0; add byte ptr [rax], al; mov edx, 0xa8; call rbx; 
0x000000000000def7: mov ah, 0x24; mov al, 1; add byte ptr [rax], al; lea rdx, [rsp + 0x50]; call rax; 
0x000000000000da4f: mov ah, 0x24; rol byte ptr [rax], 1; add byte ptr [rax], al; call rax; 
0x00000000000194f2: mov ah, 0x24; sbb byte ptr [rsi], al; add byte ptr [rax], al; call rax; 
0x0000000000045b24: mov ah, 0x24; xor byte ptr [rbx], al; add byte ptr [rax], al; call rbx; 
0x000000000003a3a0: mov ah, 0x4c; add esi, esp; jmp rsi; 
0x0000000000059edf: mov al, 0; add byte ptr [rax - 0x75], cl; and al, 8; call qword ptr [rax + 0x18]; 
0x0000000000047487: mov al, 0; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x0000000000019a81: mov al, 0; add byte ptr [rax], al; call rax; 
0x000000000001a326: mov al, 0; add byte ptr [rax], al; lea rdx, [rip + 0x5bfa7]; lea rax, [rip - 0x3348]; call rax; 
0x000000000000d98e: mov al, 0; add byte ptr [rax], al; lea rdx, [rsp + 0x50]; call rax; 
0x000000000003e431: mov al, 0; add byte ptr [rax], al; mov edx, 0xa8; call rbx; 
0x0000000000014755: mov al, 0; add byte ptr [rax], al; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x148; ret; 
0x000000000003adb3: mov al, 0; add byte ptr [rax], al; pop rbx; pop r14; pop r15; ret; 
0x000000000003868b: mov al, 0; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000040bdb: mov al, 0x10; ret; 
0x0000000000040bc9: mov al, 0x11; ret; 
0x0000000000040bde: mov al, 0x12; ret; 
0x0000000000040bff: mov al, 0x13; ret; 
0x0000000000040bba: mov al, 0x14; ret; 
0x0000000000040bf6: mov al, 0x16; ret; 
0x0000000000040bc3: mov al, 0x18; ret; 
0x0000000000040bc6: mov al, 0x19; ret; 
0x0000000000040c02: mov al, 0x1a; ret; 
0x0000000000040bc0: mov al, 0x1b; ret; 
0x0000000000040bab: mov al, 0x1c; ret; 
0x0000000000040bbd: mov al, 0x1d; ret; 
0x0000000000040bd2: mov al, 0x1e; ret; 
0x0000000000040bb1: mov al, 0x1f; ret; 
0x0000000000040bcc: mov al, 0x20; ret; 
0x0000000000040bd5: mov al, 0x21; ret; 
0x0000000000040b87: mov al, 0x22; lea rcx, [rip + 0x2110c]; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x0000000000040ba2: mov al, 0x23; ret; 
0x0000000000040bd8: mov al, 0x24; ret; 
0x0000000000040ba8: mov al, 0x26; ret; 
0x0000000000040b9f: mov al, 0x28; ret; 
0x000000000001f4d4: mov al, 0xa2; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x0000000000040be7: mov al, 0xa; ret; 
0x0000000000040bcf: mov al, 0xb; ret; 
0x000000000001e1d4: mov al, 0xbc; add eax, 0xc4834800; sub bl, al; lea rax, [rip - 0x12a44]; call rax; 
0x0000000000040bae: mov al, 0xc; ret; 
0x0000000000040ba5: mov al, 0xd; ret; 
0x0000000000040bb4: mov al, 0xe; ret; 
0x0000000000040bb7: mov al, 0xf; ret; 
0x0000000000018ad3: mov al, 1; add byte ptr [rax], al; lea rcx, [rsp + 0x1f8]; call rax; 
0x000000000000def9: mov al, 1; add byte ptr [rax], al; lea rdx, [rsp + 0x50]; call rax; 
0x00000000000368fa: mov al, 1; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000057def: mov al, 1; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000053718: mov al, 1; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x000000000005dbe7: mov al, 1; and al, 1; pop rbx; pop r14; pop r15; ret; 
0x000000000005dc4a: mov al, 1; cmp edi, 0x7f; jae 0x5dc53; pop rcx; ret; 
0x000000000005ddb2: mov al, 1; je 0x5ddbc; add rsp, 0x20; pop rbx; ret; 
0x000000000005de47: mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000004efc5: mov al, 1; mov byte ptr [rdi], al; pop rbx; ret; 
0x00000000000377b0: mov al, 1; ret; 
0x0000000000040bf9: mov al, 2; ret; 
0x0000000000040bf0: mov al, 3; ret; 
0x0000000000040bfc: mov al, 4; ret; 
0x0000000000040bea: mov al, 5; ret; 
0x0000000000040bed: mov al, 6; ret; 
0x0000000000040bf3: mov al, 7; ret; 
0x0000000000040be1: mov al, 8; ret; 
0x0000000000040be4: mov al, 9; ret; 
0x0000000000020cab: mov al, byte ptr [rip + 0x5c415b00]; pop r13; pop r14; pop r15; ret; 
0x0000000000020d14: mov al, byte ptr [rip + 0x5e415b00]; pop r15; ret; 
0x000000000000eb53: mov al, byte ptr [rsp + 0x13]; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000001c856: mov al, byte ptr [rsp + 0x16]; movzx edi, al; call qword ptr [rip + 0x5d3ed]; add rsp, 0x28; ret; 
0x000000000001bf71: mov al, byte ptr [rsp + 0x16]; movzx edi, al; call qword ptr [rip + 0x5dcd2]; add rsp, 0x18; ret; 
0x000000000001bfc7: mov al, byte ptr [rsp + 0x17]; add rsp, 0x28; ret; 
0x0000000000011b19: mov al, byte ptr [rsp + 0x17]; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x00000000000128ce: mov al, byte ptr [rsp + 0x23]; and al, 1; movzx eax, al; add rsp, 0x28; ret; 
0x000000000001bad7: mov al, byte ptr [rsp + 0xb]; add rsp, 0x10; ret; 
0x000000000001cdbd: mov al, byte ptr [rsp + 7]; add rsp, 0x150; ret; 
0x000000000001a85d: mov al, byte ptr [rsp + 7]; xor al, 0xff; and al, 1; movzx eax, al; add rsp, 0x10; ret; 
0x000000000001381e: mov ax, word ptr [rax + 0x21a]; mov word ptr [rsp + 0x16], ax; movzx eax, ax; add rsp, 0x18; ret; 
0x000000000001da95: mov ax, word ptr [rdi]; pop rcx; ret; 
0x0000000000017213: mov bh, 0; add byte ptr [rax], al; add dword ptr [rbp + 0xd], esi; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xd8; ret; 
0x0000000000059fbd: mov bh, 0; add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; 
0x0000000000059ff3: mov bh, 0; add byte ptr [rdx + 3], bh; call qword ptr [rax + 0x18]; 
0x000000000001dd7d: mov bh, 0x44; and al, 0x64; shl rax, 0x20; or rsi, rax; lea rax, [rip - 0x1bff]; call rax; 
0x000000000001c1c6: mov bh, 0x44; and al, 0xc; shl rax, 0x20; or rsi, rax; lea rax, [rip + 0x1c28]; call rax; 
0x00000000000308eb: mov bh, 0x48; add esi, edi; jmp rsi; 
0x0000000000019069: mov bh, 0x50; adc bh, bh; adc eax, 0x60db6; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000002a285: mov bh, 0x57; or byte ptr [rax + 1], bh; ret; 
0x00000000000327ac: mov bh, 0x65; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000034723: mov bh, 0x8f; xor al, byte ptr [rip + 0x6b490000]; sal dword ptr [rax + 0x48], 0xc7; ret; 
0x0000000000033ddb: mov bh, 0x94; and al, 0xb4; add byte ptr [rax], al; add byte ptr [rcx], cl; ret 0xc148; 
0x000000000005e01d: mov bh, 0xb4; add dword ptr [rax], eax; add rsp, 0x88; ret; 
0x000000000001382b: mov bh, 0xc0; add rsp, 0x18; ret; 
0x000000000004abc9: mov bh, 0xc9; lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000004ac0e: mov bh, 0xc9; lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x00000000000139dd: mov bh, 0xc9; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x38; ret; 
0x000000000004abde: mov bh, 0xd0; add rdx, rcx; mov eax, 1; ret; 
0x000000000004aae1: mov bh, 0xd0; mov eax, 1; ret; 
0x000000000004abf6: mov bh, 0xd1; add rdx, rax; mov eax, 1; ret; 
0x000000000003405b: mov bh, 0xfe; dec dword ptr [rax - 0x73]; mov esp, 0x8024; add al, ch; xchg eax, ebp; ret 0xfffe; 
0x000000000005a36f: mov bl, 0; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x000000000005a341: mov bl, 0; add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; 
0x0000000000018da9: mov bl, 0x39; add byte ptr [rax], al; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000040023: mov bl, 0xa8; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret; 
0x000000000000d909: mov bl, 0xac; add al, byte ptr [rax]; lea rdi, [rsp + 0x68]; call rax; 
0x0000000000010b59: mov bl, 0xd6; add byte ptr [rax], al; call rax; 
0x0000000000039609: mov bl, 1; mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x0000000000039613: mov bl, 2; mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x000000000003e7fa: mov bl, 3; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003f69a: mov bl, byte ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x3b66; 
0x000000000005a2da: mov byte ptr [r14 + 0x10], bl; mov eax, ebx; pop rbx; pop r14; pop r15; ret; 
0x000000000004f4f1: mov byte ptr [r14 + 8], bl; xor eax, eax; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000002a0c9: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x20; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a152: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x21; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a175: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x22; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a001: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x23; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029fbb: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x24; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a12f: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x25; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a0ec: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x28; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a049: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x29; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029fde: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x2a; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029f52: mov byte ptr [r14 + 8], dl; mov qword ptr [r14], 0x2b; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000005de42: mov byte ptr [r8 + 1], 0; mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000005de56: mov byte ptr [r8 + 1], 1; mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000005dedb: mov byte ptr [r8 + 1], 2; mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000005de49: mov byte ptr [r8], al; mov rax, r8; ret; 
0x00000000000165b2: mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x50; ret; 
0x000000000001635f: mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x0000000000019f8e: mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x88; ret; 
0x000000000001a114: mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x20]; add rsp, 0xd8; ret; 
0x000000000005de43: mov byte ptr [rax + 1], 0; mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000005de57: mov byte ptr [rax + 1], 1; mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000005dedc: mov byte ptr [rax + 1], 2; mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x0000000000039fe3: mov byte ptr [rax + 1], cl; ret 0xe2ff; 
0x000000000003b62c: mov byte ptr [rax - 0x77], cl; ret; 
0x0000000000015efb: mov byte ptr [rax], 0; add rsp, 0x40; ret; 
0x0000000000017abf: mov byte ptr [rax], 1; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000019006: mov byte ptr [rax], al; add byte ptr [rax], al; call 0x9078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x278; ret; 
0x000000000000d0e6: mov byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rip + 0x6c960]; add rsp, 0x398; ret; 
0x000000000000cb26: mov byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rip + 0x6cf20]; add rsp, 0x398; ret; 
0x000000000000c94e: mov byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000040301: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop r14; ret; 
0x000000000000fb0f: mov byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000005de4a: mov byte ptr [rax], al; mov rax, r8; ret; 
0x00000000000599f3: mov byte ptr [rax], cl; ret; 
0x000000000005bed8: mov byte ptr [rbp + 0x63480000], dl; or al, 0x88; add rcx, rax; jmp rcx; 
0x000000000000c5a4: mov byte ptr [rbp - 0x72b7fffa], dl; add eax, 0xfffff041; call rax; 
0x0000000000050d7b: mov byte ptr [rbx + 8], 0; xor eax, eax; pop rbx; ret; 
0x000000000005a118: mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x000000000005b610: mov byte ptr [rbx + 9], 0; mov rax, rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000003d0b3: mov byte ptr [rbx], 0; call qword ptr [rip + 0x3c32c]; ud2; mov rdi, r15; call rax; 
0x000000000003ecac: mov byte ptr [rbx], 1; add rsp, 0x10; pop rbx; pop r14; pop r15; ret; 
0x0000000000059906: mov byte ptr [rbx], cl; mov dword ptr [rbx + 1], eax; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x0000000000017da9: mov byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x0000000000059dbd: mov byte ptr [rcx], al; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000e52d: mov byte ptr [rcx], dl; mov rcx, qword ptr [rax + 0x10]; add rcx, 1; mov qword ptr [rax + 0x10], rcx; add rsp, 0xc8; ret; 
0x0000000000016042: mov byte ptr [rdi + 0x10], cl; add rsp, 0x18; ret; 
0x00000000000162d4: mov byte ptr [rdi + 0x10], cl; ret; 
0x000000000005a9e1: mov byte ptr [rdi + 0x38], 3; mov qword ptr [rdi + 0x10], 0; mov qword ptr [rdi + 0x20], 0; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000004cae9: mov byte ptr [rdi + 0x6a], cl; mov rax, rdi; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000057e98: mov byte ptr [rdi + 0xc], 0; mov eax, 0x7d; ret; 
0x000000000001bae8: mov byte ptr [rdi + 0xc], 0xb; mov dword ptr [rdi + 8], 0; mov qword ptr [rdi], rsi; pop rcx; ret; 
0x0000000000057ee9: mov byte ptr [rdi + 0xc], 1; ret; 
0x0000000000057ecb: mov byte ptr [rdi + 0xc], 2; mov eax, 0x7b; ret; 
0x0000000000057ed5: mov byte ptr [rdi + 0xc], 3; mov eax, 0x75; ret; 
0x0000000000057edf: mov byte ptr [rdi + 0xc], 4; mov eax, 0x5c; ret; 
0x000000000001ba45: mov byte ptr [rdi + 0xc], dl; mov dword ptr [rdi + 8], esi; mov qword ptr [rdi], rcx; add rsp, 0x28; ret; 
0x000000000004efc1: mov byte ptr [rdi + 1], 0; mov al, 1; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000002a87c: mov byte ptr [rdi + 1], 0; mov word ptr [rdi + 6], 0; mov dword ptr [rdi + 2], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x000000000002a74a: mov byte ptr [rdi + 1], dl; add rsp, 0x10; ret; 
0x000000000002a661: mov byte ptr [rdi + 7], 0; mov word ptr [rdi + 5], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x18; ret; 
0x000000000004eec5: mov byte ptr [rdi + 8], 0; mov qword ptr [rdi], 0; pop rbx; ret; 
0x000000000002a57e: mov byte ptr [rdi + 8], 0x13; mov qword ptr [rdi + 0x10], rax; mov eax, 1; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x0000000000035596: mov byte ptr [rdi + 8], 0x37; mov qword ptr [rdi], 1; pop rbx; pop r14; pop rbp; ret; 
0x000000000002b9d3: mov byte ptr [rdi + 8], cl; mov qword ptr [rdi], rax; ret; 
0x00000000000540af: mov byte ptr [rdi + r10], al; pop rax; ret; 
0x0000000000053f16: mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x00000000000540b0: mov byte ptr [rdi + rdx], al; pop rax; ret; 
0x000000000002a747: mov byte ptr [rdi], 0x17; mov byte ptr [rdi + 1], dl; add rsp, 0x10; ret; 
0x000000000002a721: mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000002a698: mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000002a9eb: mov byte ptr [rdi], 0x4b; add rsp, 0x20; ret; 
0x0000000000016524: mov byte ptr [rdi], 2; pop rcx; ret; 
0x0000000000016514: mov byte ptr [rdi], 3; pop rcx; ret; 
0x00000000000192e0: mov byte ptr [rdi], al; add byte ptr [rax], al; ret; 
0x000000000004ef4e: mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000002a85f: mov byte ptr [rdi], cl; mov qword ptr [rdi + 1], rax; add rsp, 0x10; ret; 
0x000000000000efc4: mov byte ptr [rdx - 0x1514fffa], ch; nop word ptr [rax + rax]; push rax; mov qword ptr [rsp], rdi; pop rax; ret; 
0x000000000001dfae: mov byte ptr [rdx], al; add byte ptr [rax], al; ret; 
0x000000000000bc4c: mov byte ptr [rip + 0x6e3e5], 1; pop rbp; ret; 
0x0000000000020ee8: mov byte ptr [rip - 0x3b7cb800], al; or byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x000000000005a2db: mov byte ptr [rsi + 0x10], bl; mov eax, ebx; pop rbx; pop r14; pop r15; ret; 
0x000000000004f4f2: mov byte ptr [rsi + 8], bl; xor eax, eax; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000002a0ca: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x20; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a153: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x21; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a176: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x22; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a002: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x23; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029fbc: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x24; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a130: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x25; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a0ed: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x28; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a04a: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x29; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029fdf: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x2a; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029f53: mov byte ptr [rsi + 8], dl; mov qword ptr [r14], 0x2b; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000016666: mov byte ptr [rsp + 0x107], 1; lea rax, [rip + 0x37bb]; lea rdi, [rsp + 0x58]; call rax; 
0x0000000000017d8c: mov byte ptr [rsp + 0x157], 0; lea rax, [rip - 0x188b]; call rax; 
0x000000000001e574: mov byte ptr [rsp + 0x16], cl; mov byte ptr [rsp + 0x17], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000001bfc2: mov byte ptr [rsp + 0x17], 0xff; mov al, byte ptr [rsp + 0x17]; add rsp, 0x28; ret; 
0x0000000000011b15: mov byte ptr [rsp + 0x17], al; mov al, byte ptr [rsp + 0x17]; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x000000000001e578: mov byte ptr [rsp + 0x17], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x00000000000128ca: mov byte ptr [rsp + 0x23], al; mov al, byte ptr [rsp + 0x23]; and al, 1; movzx eax, al; add rsp, 0x28; ret; 
0x000000000000d876: mov byte ptr [rsp + 0x31f], 0; add rsp, 0x348; ret; 
0x0000000000015fa8: mov byte ptr [rsp + 0x37], 0; lea rax, [rip + 0x1c8c]; lea rdx, [rsp + 0x18]; call rax; 
0x0000000000015f71: mov byte ptr [rsp + 0x37], 1; lea rax, [rip + 0x423]; lea rdi, [rsp + 0x18]; call rax; 
0x000000000001a510: mov byte ptr [rsp + 0x47], 0; lea rax, [rip - 0xdac]; call rax; 
0x000000000001ccb7: mov byte ptr [rsp + 0x6f], 0; mov qword ptr [rsp + 0x60], rax; mov rdi, qword ptr [rsp + 0x60]; lea rax, [rip + 0x583]; call rax; 
0x000000000001a0d6: mov byte ptr [rsp + 0xaf], 0; lea rax, [rip - 0x3bc5]; lea rdi, [rsp + 0x98]; call rax; 
0x0000000000019fcb: mov byte ptr [rsp + 0xaf], 1; lea rax, [rip - 0x259a]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000001bad2: mov byte ptr [rsp + 0xb], 9; mov al, byte ptr [rsp + 0xb]; add rsp, 0x10; ret; 
0x000000000001c2bb: mov byte ptr [rsp + 0xd7], 0; lea rax, [rip + 0x3d6]; call rax; 
0x000000000001532b: mov byte ptr [rsp + 0xd7], 0; lea rax, [rip + 0x926]; call rax; 
0x0000000000018d9e: mov byte ptr [rsp + 0xd7], 1; lea rax, [rip + 0x39b3]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000001ee73: mov byte ptr [rsp + 5], dh; mov edx, 2; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ec83: mov byte ptr [rsp + 5], dh; mov edx, 2; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x000000000001ee72: mov byte ptr [rsp + 5], sil; mov edx, 2; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ec82: mov byte ptr [rsp + 5], sil; mov edx, 2; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x000000000001eeaf: mov byte ptr [rsp + 6], dh; mov edx, 3; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ecbf: mov byte ptr [rsp + 6], dh; mov edx, 3; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x000000000001eeae: mov byte ptr [rsp + 6], sil; mov edx, 3; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ecbe: mov byte ptr [rsp + 6], sil; mov edx, 3; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x000000000001cdb8: mov byte ptr [rsp + 7], 0; mov al, byte ptr [rsp + 7]; add rsp, 0x150; ret; 
0x000000000000fbe6: mov byte ptr [rsp + 7], al; lea rax, [rsp + 7]; mov qword ptr [rsp + 0x10], rax; movzx eax, byte ptr [rsp + 7]; add rsp, 0x18; ret; 
0x000000000001eef2: mov byte ptr [rsp + 7], dh; mov edx, 4; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ed02: mov byte ptr [rsp + 7], dh; mov edx, 4; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x000000000001eef1: mov byte ptr [rsp + 7], sil; mov edx, 4; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ed01: mov byte ptr [rsp + 7], sil; mov edx, 4; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x0000000000053671: mov ch, 0; add byte ptr [rax], al; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x000000000005a1bf: mov ch, 0; add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; 
0x000000000002b621: mov ch, 0; add rsi, rbp; jmp rsi; 
0x00000000000569df: mov ch, 0x33; add al, byte ptr [rax]; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x00000000000091ba: mov ch, 0x49; cmp ebx, 3; jne 0x9170; pop rbx; ret; 
0x000000000005a36e: mov ch, 0xb3; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000004a7cf: mov ch, 0xef; add al, byte ptr [rax]; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001134b: mov ch, 0xf1; add al, 0; lea rax, [rip - 0x5ce6]; mov esi, 0x23; call rax; 
0x00000000000105b1: mov ch, 0xfe; add al, 0; lea rdx, [rip + 0x65994]; lea rax, [rip - 0x4f53]; mov esi, 0x49; call rax; 
0x000000000003e415: mov ch, 3; add byte ptr [rdx + 0x90], bh; call rbx; 
0x000000000003e4bd: mov ch, 3; add dh, al; sbb al, 0x20; add byte ptr [rax - 1], cl; ret; 
0x0000000000039b84: mov cl, 0x2e; mov rax, rdi; cmp byte ptr [rax], cl; sete al; pop rcx; ret; 
0x0000000000039b79: mov cl, 0x2f; cmp byte ptr [rdi], 0x2e; je 0x39b89; xor eax, eax; pop rcx; ret; 
0x000000000005bfaf: mov cl, 0x94; add byte ptr [rax], al; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000000d45b: mov cl, 0xd; add dword ptr [rax], eax; lea rdi, [rsp + 0x100]; call rax; 
0x000000000003e95a: mov cl, 0xfc; dec dword ptr [rdi]; or ecx, dword ptr [rax - 0x77]; ret; 
0x00000000000599f1: mov cl, 1; mov byte ptr [rax], cl; ret; 
0x0000000000036888: mov cl, 2; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000003e559: mov cl, 3; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002e911: mov cl, 4; add byte ptr [rdi], cl; or ebp, ebx; add ch, bl; adc cl, byte ptr [rax - 0x77]; ret; 
0x000000000004b39e: mov cl, byte ptr [rax + 1]; ror byte ptr [rax - 0x73], 1; adc eax, 0x18eef; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x00000000000162d1: mov cl, byte ptr [rsi + 0x10]; mov byte ptr [rdi + 0x10], cl; ret; 
0x000000000001603e: mov cl, byte ptr [rsp + 0x10]; mov byte ptr [rdi + 0x10], cl; add rsp, 0x18; ret; 
0x00000000000165ae: mov cl, byte ptr [rsp + 0x40]; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x50; ret; 
0x000000000001635b: mov cl, byte ptr [rsp + 0x58]; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x0000000000019f8a: mov cl, byte ptr [rsp + 0x58]; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x88; ret; 
0x000000000001a10d: mov cl, byte ptr [rsp + 0xa8]; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x20]; add rsp, 0xd8; ret; 
0x0000000000057e66: mov cs, word ptr [rax + 1]; int1; jmp rcx; 
0x000000000000f126: mov cx, 0; call rax; 
0x000000000005474e: mov cx, 1; lea rdx, [rip + 0x1054b]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000000599bc: mov cx, 1; mov word ptr [rax], cx; ret; 
0x000000000005a10d: mov dh, 0; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x000000000005a10d: mov dh, 0; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x000000000005a0b5: mov dh, 0; add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; 
0x000000000003a60c: mov dh, 0; lea rcx, [rip + 0x275ff]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000039c01: mov dh, 0x11; mov eax, 6; lea rsi, [rip + 0x27f8d]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000000f846: mov dh, 0x21; add byte ptr [rax], al; add rsp, 0x48; ret; 
0x000000000003a396: mov dh, 0x32; mov edx, 6; movsxd rsi, dword ptr [r12 + rsi*4]; add rsi, r12; jmp rsi; 
0x000000000005904d: mov dh, 0x42; add dword ptr [rcx - 0x7d], ecx; ret 0x4c02; 
0x00000000000224b4: mov dh, 0x42; dec byte ptr [rax - 0x7d]; ret 0x48fe; 
0x0000000000054e55: mov dh, 0x43; add dword ptr [rcx - 0x7d], ecx; ret; 
0x000000000000fbf5: mov dh, 0x44; and al, 7; add rsp, 0x18; ret; 
0x000000000005b5d1: mov dh, 0x47; xor byte ptr [rax + rdx], ah; shr al, 4; ret; 
0x000000000005b5e1: mov dh, 0x47; xor byte ptr [rax], ah; shr al, 5; ret; 
0x000000000005b5c1: mov dh, 0x47; xor byte ptr [rsp + rax], ah; shr al, 2; ret; 
0x00000000000118da: mov dh, 0x4c; and al, 0xc; shl rcx, 0x20; or rax, rcx; add rsp, 0x28; ret; 
0x0000000000057e85: mov dh, 0x4f; or al, 0x48; lea esi, [rip + 0xd469]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000002a27b: mov dh, 0x57; or byte ptr [rax + 1], bh; ret; 
0x0000000000059302: mov dh, 0x72; add dword ptr [rax - 0x7d], ecx; ret 0x4802; 
0x0000000000055425: mov dh, 0x73; add cl, byte ptr [rcx - 0x7d]; ret; 
0x0000000000055fa6: mov dh, 0x73; add dword ptr [rcx - 0x7d], ecx; ret; 
0x000000000005d338: mov dh, 0x7a; add ecx, dword ptr [rax - 0x7d]; ret 0x4804; 
0x00000000000220ad: mov dh, 0x7b; add dword ptr [rcx - 1], ecx; ret; 
0x0000000000039e6c: mov dh, 0xa; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x0000000000011ab9: mov dh, 0xc0; add rsp, 0x10; ret; 
0x000000000000bf64: mov dh, 0xc0; add rsp, 0x18; ret; 
0x000000000001ac87: mov dh, 0xc0; add rsp, 0x20; ret; 
0x00000000000128d5: mov dh, 0xc0; add rsp, 0x28; ret; 
0x000000000000c0bf: mov dh, 0xc0; add rsp, 0x38; ret; 
0x000000000000c122: mov dh, 0xc0; add rsp, 0x48; ret; 
0x00000000000141dd: mov dh, 0xc0; cmp rax, 0; jne 0x141ea; add rsp, 0x58; ret; 
0x0000000000042794: mov dh, 0xc0; lea eax, [rax + rax*8]; add rsp, 0x28; ret; 
0x000000000005998b: mov dh, 0xc1; or rax, rsi; ret; 
0x000000000002a365: mov dh, 0xc1; ret; 
0x00000000000543cf: mov dh, 0xc2; lea rcx, [rip + 0x10868]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003577b: mov dh, 0xc6; lea rcx, [rip + 0x2c2d4]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003d2ec: mov dh, 0xc9; lea rdx, [rip + 0x24937]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000004d5f6: mov dh, 0xc9; mov qword ptr [rax], rcx; test cl, cl; je 0x4d602; mov al, 1; ret; 
0x0000000000054088: mov dh, 0xc; js 0xffffffff834d479c; ret 0x4c02; 
0x00000000000555e5: mov dh, 0xc; or byte ptr [rbp - 0x6bf0be37], al; ret 0x4c89; 
0x000000000003d3ca: mov dh, 0xd1; lea rcx, [rip + 0x2488d]; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x0000000000059981: mov dh, 0xf0; shl rsi, 8; or rsi, rdx; movzx eax, cl; or rax, rsi; ret; 
0x000000000001c85b: mov dh, 0xf8; call qword ptr [rip + 0x5d3ed]; add rsp, 0x28; ret; 
0x000000000001bf76: mov dh, 0xf8; call qword ptr [rip + 0x5dcd2]; add rsp, 0x18; ret; 
0x0000000000021001: mov dh, 0xf8; call rbx; 
0x000000000000ef66: mov dh, 2; add byte ptr [rax], al; pop rax; ret; 
0x000000000003e650: mov dh, 3; add byte ptr [rax - 0x77], cl; ret; 
0x000000000004115f: mov dh, 5; ret; 
0x000000000000eed6: mov dh, 8; add byte ptr [rax], al; pop rax; ret; 
0x000000000005a2cd: mov dl, 0; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x000000000005a43b: mov dl, 0; add byte ptr [rdx + 1], bh; jmp rax; 
0x0000000000017d7a: mov dl, 0x2c; add byte ptr [rax], al; lea rdi, [rsp + 0x28]; call rax; 
0x000000000001f90a: mov dl, 0x6d; add byte ptr [rax], al; ret; 
0x0000000000019712: mov dl, byte ptr [rcx]; add byte ptr [rax], al; pop rcx; ret; 
0x000000000001fbf6: mov ds, word ptr [rbx + 0x415b0005]; pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000029f98: mov dword ptr [r14 + 8], edx; mov qword ptr [r14], 0x26; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000005734e: mov dword ptr [r15 + rbx], 0x8348bfef; ret; 
0x0000000000011caf: mov dword ptr [rax + 0x10], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xb8; ret; 
0x000000000005d66b: mov dword ptr [rax + 0x10], eax; mov qword ptr [rax + 0x18], rcx; pop rbx; pop rbp; ret; 
0x000000000000e538: mov dword ptr [rax + 0x10], ecx; add rsp, 0xc8; ret; 
0x000000000001121e: mov dword ptr [rax + 0x10], ecx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000001a201: mov dword ptr [rax + 0x10], ecx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x000000000001dbeb: mov dword ptr [rax + 0x10], ecx; mov rcx, qword ptr [rsp + 0x48]; mov qword ptr [rax + 0x18], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x118; ret; 
0x00000000000177d1: mov dword ptr [rax + 0x10], ecx; mov rcx, qword ptr [rsp + 0x50]; mov qword ptr [rax + 0x18], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x000000000001e416: mov dword ptr [rax + 0x10], ecx; movaps xmm0, xmmword ptr [rsp + 0x10]; movups xmmword ptr [rax], xmm0; lea rdx, [rip + 0x57fd0]; add rsp, 0x38; ret; 
0x000000000001a8f6: mov dword ptr [rax + 0x10], ecx; movaps xmm0, xmmword ptr [rsp + 0x10]; movups xmmword ptr [rax], xmm0; lea rdx, [rip + 0x5ba08]; add rsp, 0x38; ret; 
0x000000000001a640: mov dword ptr [rax + 0x10], ecx; test byte ptr [rsp + 0x47], 1; jne 0x1a654; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x000000000000c2dc: mov dword ptr [rax + 0x10], ecx; test byte ptr [rsp + 0x4f], 1; jne 0xc2f0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x0000000000056d38: mov dword ptr [rax + 0x10], esi; ret; 
0x00000000000599b1: mov dword ptr [rax + 0x14], 0; mov word ptr [rax + 0x1c], dx; mov cx, 1; mov word ptr [rax], cx; ret; 
0x00000000000177da: mov dword ptr [rax + 0x18], ecx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x000000000001dbf4: mov dword ptr [rax + 0x18], ecx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x118; ret; 
0x000000000005d66f: mov dword ptr [rax + 0x18], ecx; pop rbx; pop rbp; ret; 
0x000000000001a4a6: mov dword ptr [rax + 0x18], ecx; test byte ptr [rsp + 0x4f], 1; jne 0x1a4ba; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x00000000000599b9: mov dword ptr [rax + 0x1c], edx; mov cx, 1; mov word ptr [rax], cx; ret; 
0x000000000004ae3a: mov dword ptr [rax + 0x20], 2; pop rbx; pop r14; ret; 
0x000000000004ae90: mov dword ptr [rax + 0x28], edi; mov dword ptr [rax + 0x2c], r10d; pop rbx; pop r14; ret; 
0x000000000004ae94: mov dword ptr [rax + 0x2c], edx; pop rbx; pop r14; ret; 
0x000000000004ae93: mov dword ptr [rax + 0x2c], r10d; pop rbx; pop r14; ret; 
0x0000000000011189: mov dword ptr [rax + 0x40], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x1b8; ret; 
0x000000000000f230: mov dword ptr [rax + 0x48], 0xb857058d; add byte ptr [rax], al; call rax; 
0x00000000000599f9: mov dword ptr [rax + 1], ecx; xor ecx, ecx; mov byte ptr [rax], cl; ret; 
0x00000000000599cb: mov dword ptr [rax + 2], ecx; xor ecx, ecx; mov word ptr [rax], cx; ret; 
0x00000000000599c8: mov dword ptr [rax + 6], edx; mov dword ptr [rax + 2], ecx; xor ecx, ecx; mov word ptr [rax], cx; ret; 
0x0000000000012ea8: mov dword ptr [rax + 8], 0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x0000000000017999: mov dword ptr [rax + 8], 0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x000000000005de8f: mov dword ptr [rax + 8], eax; xor eax, eax; mov byte ptr [r8], al; mov rax, r8; ret; 
0x0000000000017abc: mov dword ptr [rax + 8], ecx; mov byte ptr [rax], 1; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x00000000000165ab: mov dword ptr [rax + 8], ecx; mov cl, byte ptr [rsp + 0x40]; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x50; ret; 
0x0000000000016358: mov dword ptr [rax + 8], ecx; mov cl, byte ptr [rsp + 0x58]; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x0000000000019f87: mov dword ptr [rax + 8], ecx; mov cl, byte ptr [rsp + 0x58]; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x88; ret; 
0x000000000001a10a: mov dword ptr [rax + 8], ecx; mov cl, byte ptr [rsp + 0xa8]; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x20]; add rsp, 0xd8; ret; 
0x0000000000056d34: mov dword ptr [rax + 8], ecx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000001785e: mov dword ptr [rax + 8], ecx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x000000000001b9e8: mov dword ptr [rax + 8], ecx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x0000000000011215: mov dword ptr [rax + 8], ecx; mov rcx, qword ptr [rsp + 0x28]; mov qword ptr [rax + 0x10], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x0000000000017c05: mov dword ptr [rax + 8], ecx; mov word ptr [rax], 2; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000017a20: mov dword ptr [rax + 8], ecx; mov word ptr [rax], 3; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; ret; 
0x000000000005d667: mov dword ptr [rax + 8], edi; mov qword ptr [rax + 0x10], r8; mov qword ptr [rax + 0x18], rcx; pop rbx; pop rbp; ret; 
0x000000000001a1fd: mov dword ptr [rax + 8], edx; mov qword ptr [rax + 0x10], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x000000000003cd54: mov dword ptr [rax + 8], esi; lea rdx, [rip + 0x3a822]; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000059fb0: mov dword ptr [rax - 0x75], ecx; jge 0x59fb5; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb754]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000001b965: mov dword ptr [rax], 0; call 0x1b1d0; add rsp, 0x38; ret; 
0x0000000000018b68: mov dword ptr [rax], 0; lea rax, [rip + 0x209b]; lea rdi, [rsp + 0x140]; call rax; 
0x0000000000013467: mov dword ptr [rax], 0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x00000000000106af: mov dword ptr [rax], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x0000000000013960: mov dword ptr [rax], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0x88; ret; 
0x000000000005d676: mov dword ptr [rax], 0; pop rbx; pop rbp; ret; 
0x000000000005db41: mov dword ptr [rax], 0x394d0000; ret 0x870f; 
0x0000000000017c09: mov dword ptr [rax], 0x8b480002; and al, 0x10; add rsp, 0x48; ret; 
0x0000000000017a24: mov dword ptr [rax], 0x8b480003; and al, 0x18; add rsp, 0x78; ret; 
0x0000000000018490: mov dword ptr [rax], 0x8b480003; and al, 0x18; add rsp, 0xb8; ret; 
0x0000000000017632: mov dword ptr [rax], 1; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x50; ret; 
0x0000000000013b85: mov dword ptr [rax], 1; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x50; ret; 
0x0000000000013557: mov dword ptr [rax], 1; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x88; ret; 
0x00000000000178f5: mov dword ptr [rax], 1; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xb8; ret; 
0x0000000000017b57: mov dword ptr [rax], 2; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x000000000001054a: mov dword ptr [rax], 2; mov rax, qword ptr [rsp + 0x40]; add rsp, 0x108; ret; 
0x000000000001b9e0: mov dword ptr [rax], ecx; mov rcx, qword ptr [rsp + 0x28]; mov qword ptr [rax + 8], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x0000000000017856: mov dword ptr [rax], ecx; mov rcx, qword ptr [rsp + 0x30]; mov qword ptr [rax + 8], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x000000000005c6f9: mov dword ptr [rax], ecx; pop rbx; pop r14; pop rbp; ret; 
0x00000000000599c1: mov dword ptr [rax], ecx; ret; 
0x000000000004d5f9: mov dword ptr [rax], ecx; test cl, cl; je 0x4d602; mov al, 1; ret; 
0x0000000000056d31: mov dword ptr [rax], edx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x0000000000049f59: mov dword ptr [rbp + 0x31], 0x515ffc0; test byte ptr [rdx], 0; pop rbx; ret; 
0x00000000000575ae: mov dword ptr [rbx + 0x10], ebp; add rsp, 0x10; pop rbx; pop r14; pop rbp; ret; 
0x0000000000040b3b: mov dword ptr [rbx + 0x10], esi; pop rbx; pop r14; pop r15; ret; 
0x000000000004cbc1: mov dword ptr [rbx + 0x18], esi; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000004f32f: mov dword ptr [rbx + 0x20], esi; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000005c252: mov dword ptr [rbx + 0x30], ebp; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000003f027: mov dword ptr [rbx + 0x60], esi; add rsp, 0x20; pop rbx; pop r14; pop r15; ret; 
0x0000000000040dff: mov dword ptr [rbx + 0x90], eax; add rsp, 0x108; pop rbx; pop r14; ret; 
0x0000000000040470: mov dword ptr [rbx + 0xc], 0xffffffff; mov dword ptr [rbx], 0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000004038d: mov dword ptr [rbx + 0xc], 0xffffffff; mov qword ptr [rbx], 0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000059908: mov dword ptr [rbx + 1], eax; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x000000000003e8d4: mov dword ptr [rbx + 8], eax; mov dword ptr [rbx], 0; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000404b7: mov dword ptr [rbx + 8], eax; mov dword ptr [rbx], 1; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000003e8f5: mov dword ptr [rbx + 8], eax; mov dword ptr [rbx], 1; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000409eb: mov dword ptr [rbx + 8], eax; mov eax, 1; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x000000000003e9c5: mov dword ptr [rbx + 8], eax; mov eax, 1; mov qword ptr [rbx], rax; pop rbx; ret; 
0x00000000000409cd: mov dword ptr [rbx + 8], eax; xor eax, eax; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x000000000003e9aa: mov dword ptr [rbx + 8], eax; xor eax, eax; mov qword ptr [rbx], rax; pop rbx; ret; 
0x0000000000040e56: mov dword ptr [rbx + 8], esi; add rsp, 0x108; pop rbx; pop r14; ret; 
0x0000000000040395: mov dword ptr [rbx], 0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000003e8d7: mov dword ptr [rbx], 0; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000004cc6e: mov dword ptr [rbx], 1; add rsp, 0x18; pop rbx; pop r14; ret; 
0x00000000000404ba: mov dword ptr [rbx], 1; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000003e8f8: mov dword ptr [rbx], 1; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000053523: mov dword ptr [rbx], 2; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x0000000000040c39: mov dword ptr [rbx], 3; add rsp, 0x108; pop rbx; pop r14; ret; 
0x000000000004049d: mov dword ptr [rbx], eax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000056c50: mov dword ptr [rbx], eax; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000409d3: mov dword ptr [rbx], eax; mov rax, rbx; pop rbx; ret; 
0x0000000000026815: mov dword ptr [rbx], eax; pop rbx; pop r14; pop r15; ret; 
0x000000000003e9b0: mov dword ptr [rbx], eax; pop rbx; ret; 
0x000000000001cafc: mov dword ptr [rcx + 0x10], edx; add rsp, 0x138; ret; 
0x000000000001475a: mov dword ptr [rcx + 0x10], edx; add rsp, 0x148; ret; 
0x0000000000011335: mov dword ptr [rcx + 0x10], esi; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xc8; ret; 
0x0000000000011339: mov dword ptr [rcx + 0x18], edx; add rsp, 0xc8; ret; 
0x000000000000bf33: mov dword ptr [rcx + 0x18], edx; add rsp, 0xd0; ret; 
0x00000000000107c6: mov dword ptr [rcx + 0x20], edx; add rsp, 0xb8; ret; 
0x000000000000c566: mov dword ptr [rcx + 0x20], esi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0xa8; ret; 
0x000000000000c56a: mov dword ptr [rcx + 0x28], edx; add rsp, 0xa8; ret; 
0x000000000005efa3: mov dword ptr [rcx + 0xf21ff83], 0xc808c092; ret; 
0x0000000000011331: mov dword ptr [rcx + 8], edi; mov qword ptr [rcx + 0x10], rsi; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xc8; ret; 
0x000000000000c562: mov dword ptr [rcx + 8], edi; mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0xa8; ret; 
0x000000000001474e: mov dword ptr [rcx + 8], edx; mov rdx, qword ptr [rsp + 0xb0]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x148; ret; 
0x0000000000028298: mov dword ptr [rcx + rax - 0x38], ecx; jmp rax; 
0x000000000001132e: mov dword ptr [rcx], eax; mov qword ptr [rcx + 8], rdi; mov qword ptr [rcx + 0x10], rsi; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xc8; ret; 
0x000000000000c55f: mov dword ptr [rcx], eax; mov qword ptr [rcx + 8], rdi; mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0xa8; ret; 
0x000000000002186a: mov dword ptr [rcx], eax; movaps xmm0, xmmword ptr [rsp]; movups xmmword ptr [rcx + 8], xmm0; add rsp, 0x18; ret; 
0x000000000000bd25: mov dword ptr [rcx], edx; add rsp, 0x78; ret; 
0x0000000000010f1d: mov dword ptr [rdi + 0x10], 0; add rsp, 0x38; ret; 
0x000000000005a9e6: mov dword ptr [rdi + 0x10], 0; mov qword ptr [rdi + 0x20], 0; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000002a583: mov dword ptr [rdi + 0x10], eax; mov eax, 1; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x000000000001e8db: mov dword ptr [rdi + 0x10], ebx; mov qword ptr [rdi + 0x18], rsi; add rsp, 0x10; pop rbx; ret; 
0x0000000000010ddd: mov dword ptr [rdi + 0x10], ecx; add rsp, 0x18; ret; 
0x00000000000139e7: mov dword ptr [rdi + 0x10], ecx; add rsp, 0x38; ret; 
0x0000000000010d36: mov dword ptr [rdi + 0x10], ecx; add rsp, 0x48; ret; 
0x0000000000059a4d: mov dword ptr [rdi + 0x10], ecx; mov dword ptr [rdi + 0x14], r8d; ret; 
0x000000000002821e: mov dword ptr [rdi + 0x10], ecx; mov qword ptr [rdi], 0x2e; add rsp, 0x20; pop rbx; pop r14; ret; 
0x00000000000170f9: mov dword ptr [rdi + 0x10], ecx; mov qword ptr [rdi], 1; add rsp, 0x20; ret; 
0x00000000000170b1: mov dword ptr [rdi + 0x10], ecx; mov qword ptr [rdi], 1; add rsp, 0x38; ret; 
0x0000000000016fda: mov dword ptr [rdi + 0x10], ecx; mov qword ptr [rdi], 1; add rsp, 0x48; ret; 
0x0000000000017140: mov dword ptr [rdi + 0x10], ecx; mov rcx, qword ptr [rsp + 0x18]; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x20; ret; 
0x0000000000016f58: mov dword ptr [rdi + 0x10], ecx; mov rcx, qword ptr [rsp + 0x28]; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x38; ret; 
0x0000000000017586: mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000027fcc: mov dword ptr [rdi + 0x10], edx; add rsp, 0x20; pop rbx; pop r14; ret; 
0x000000000000e396: mov dword ptr [rdi + 0x10], edx; add rsp, 0xb8; ret; 
0x000000000002a598: mov dword ptr [rdi + 0x10], edx; xor eax, eax; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x00000000000163bd: mov dword ptr [rdi + 0x10], esi; add rsp, 0x18; ret; 
0x0000000000059a51: mov dword ptr [rdi + 0x14], eax; ret; 
0x0000000000059a50: mov dword ptr [rdi + 0x14], r8d; ret; 
0x000000000004cd4a: mov dword ptr [rdi + 0x18], 0; ret; 
0x000000000004cd56: mov dword ptr [rdi + 0x18], eax; ret; 
0x0000000000017149: mov dword ptr [rdi + 0x18], ecx; mov qword ptr [rdi + 8], 0; add rsp, 0x20; ret; 
0x0000000000016f61: mov dword ptr [rdi + 0x18], ecx; mov qword ptr [rdi + 8], 0; add rsp, 0x38; ret; 
0x0000000000059a4a: mov dword ptr [rdi + 0x18], edx; mov dword ptr [rdi + 0x10], ecx; mov dword ptr [rdi + 0x14], r8d; ret; 
0x000000000001e8df: mov dword ptr [rdi + 0x18], esi; add rsp, 0x10; pop rbx; ret; 
0x000000000005a9ee: mov dword ptr [rdi + 0x20], 0; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; ret; 
0x0000000000012d72: mov dword ptr [rdi + 0x30], ecx; mov rcx, qword ptr [rsp + 0x38]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x0000000000012b09: mov dword ptr [rdi + 0x30], ecx; mov rcx, qword ptr [rsp + 0x58]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0xa0; ret; 
0x0000000000012d7b: mov dword ptr [rdi + 0x38], ecx; add rsp, 0x40; ret; 
0x0000000000012b12: mov dword ptr [rdi + 0x38], ecx; add rsp, 0xa0; ret; 
0x000000000001e13b: mov dword ptr [rdi + 0x80], ecx; add rsp, 0x278; ret; 
0x000000000001dfa5: mov dword ptr [rdi + 0x80], ecx; add rsp, 0x288; ret; 
0x0000000000017f47: mov dword ptr [rdi + 0xc], 0; ret; 
0x000000000002a637: mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x0000000000017f24: mov dword ptr [rdi + 0xc], ecx; add rsp, 0xa8; ret; 
0x000000000002a859: mov dword ptr [rdi + 0xc], esi; mov dword ptr [rdi + 9], edx; mov byte ptr [rdi], cl; mov qword ptr [rdi + 1], rax; add rsp, 0x10; ret; 
0x000000000002a862: mov dword ptr [rdi + 1], eax; add rsp, 0x10; ret; 
0x000000000002aa71: mov dword ptr [rdi + 1], eax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x000000000002a801: mov dword ptr [rdi + 1], ecx; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x000000000002a886: mov dword ptr [rdi + 2], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x0000000000017f39: mov dword ptr [rdi + 4], 0; mov dword ptr [rdi + 8], 0; mov dword ptr [rdi + 0xc], 0; ret; 
0x000000000002a7fe: mov dword ptr [rdi + 4], edx; mov dword ptr [rdi + 1], ecx; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x000000000001700d: mov dword ptr [rdi + 8], 0; add rsp, 0x18; ret; 
0x000000000001714d: mov dword ptr [rdi + 8], 0; add rsp, 0x20; ret; 
0x0000000000016f0b: mov dword ptr [rdi + 8], 0; add rsp, 0x28; ret; 
0x0000000000016f65: mov dword ptr [rdi + 8], 0; add rsp, 0x38; ret; 
0x0000000000017f40: mov dword ptr [rdi + 8], 0; mov dword ptr [rdi + 0xc], 0; ret; 
0x000000000001baec: mov dword ptr [rdi + 8], 0; mov qword ptr [rdi], rsi; pop rcx; ret; 
0x000000000004ef45: mov dword ptr [rdi + 8], 0; xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x0000000000057e7c: mov dword ptr [rdi + 8], 0x110000; ret; 
0x0000000000057e6d: mov dword ptr [rdi + 8], 0x110001; mov eax, 0x5c; ret; 
0x000000000002a805: mov dword ptr [rdi + 8], eax; add rsp, 0x10; ret; 
0x000000000002a66c: mov dword ptr [rdi + 8], eax; add rsp, 0x18; ret; 
0x0000000000027fc8: mov dword ptr [rdi + 8], eax; mov qword ptr [rdi + 0x10], r10; add rsp, 0x20; pop rbx; pop r14; ret; 
0x000000000002a594: mov dword ptr [rdi + 8], eax; mov qword ptr [rdi + 0x10], rdx; xor eax, eax; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x000000000001242f: mov dword ptr [rdi + 8], eax; mov qword ptr [rdi], rcx; add rsp, 0x48; ret; 
0x000000000004ef13: mov dword ptr [rdi + 8], eax; pop rbx; ret; 
0x000000000004efcc: mov dword ptr [rdi + 8], eax; xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000002aa75: mov dword ptr [rdi + 8], ecx; add rsp, 0x20; ret; 
0x000000000001e6b3: mov dword ptr [rdi + 8], ecx; add rsp, 0x28; ret; 
0x000000000002a71e: mov dword ptr [rdi + 8], ecx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000002a6bc: mov dword ptr [rdi + 8], ecx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000002a9e8: mov dword ptr [rdi + 8], ecx; mov byte ptr [rdi], 0x4b; add rsp, 0x20; ret; 
0x00000000000162ce: mov dword ptr [rdi + 8], ecx; mov cl, byte ptr [rsi + 0x10]; mov byte ptr [rdi + 0x10], cl; ret; 
0x000000000001603b: mov dword ptr [rdi + 8], ecx; mov cl, byte ptr [rsp + 0x10]; mov byte ptr [rdi + 0x10], cl; add rsp, 0x18; ret; 
0x0000000000017f1e: mov dword ptr [rdi + 8], ecx; mov ecx, dword ptr [rsi + 0xc]; mov dword ptr [rdi + 0xc], ecx; add rsp, 0xa8; ret; 
0x00000000000163b9: mov dword ptr [rdi + 8], ecx; mov qword ptr [rdi + 0x10], rsi; add rsp, 0x18; ret; 
0x000000000002b9c8: mov dword ptr [rdi + 8], ecx; mov qword ptr [rdi], rax; ret; 
0x000000000001757e: mov dword ptr [rdi + 8], ecx; mov rcx, qword ptr [rsi + 0x10]; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000010dd4: mov dword ptr [rdi + 8], ecx; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x00000000000170f0: mov dword ptr [rdi + 8], ecx; mov rcx, qword ptr [rsp + 0x18]; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x20; ret; 
0x0000000000010d2d: mov dword ptr [rdi + 8], ecx; mov rcx, qword ptr [rsp + 0x20]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x48; ret; 
0x00000000000170a8: mov dword ptr [rdi + 8], ecx; mov rcx, qword ptr [rsp + 0x28]; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x38; ret; 
0x0000000000016fd1: mov dword ptr [rdi + 8], ecx; mov rcx, qword ptr [rsp + 0x40]; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x48; ret; 
0x0000000000016eba: mov dword ptr [rdi + 8], ecx; mov word ptr [rdi], 2; add rsp, 0x18; ret; 
0x000000000001c923: mov dword ptr [rdi + 8], ecx; pop rcx; ret; 
0x000000000001c87e: mov dword ptr [rdi + 8], ecx; ret; 
0x000000000002a82a: mov dword ptr [rdi + 8], edx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000002a695: mov dword ptr [rdi + 8], edx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x0000000000013329: mov dword ptr [rdi + 8], edx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x00000000000139e3: mov dword ptr [rdi + 8], edx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x38; ret; 
0x000000000005a9f9: mov dword ptr [rdi + 8], edx; ret; 
0x000000000001ba48: mov dword ptr [rdi + 8], esi; mov qword ptr [rdi], rcx; add rsp, 0x28; ret; 
0x000000000002a634: mov dword ptr [rdi + 9], eax; mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x000000000002a85c: mov dword ptr [rdi + 9], edx; mov byte ptr [rdi], cl; mov qword ptr [rdi + 1], rax; add rsp, 0x10; ret; 
0x0000000000009368: mov dword ptr [rdi + rax*8 + 0x10], ecx; movaps xmm0, xmmword ptr [rsp]; movups xmmword ptr [rdi + rax*8], xmm0; add rsp, 0x20; pop rbx; ret; 
0x000000000005734f: mov dword ptr [rdi + rbx], 0x8348bfef; ret; 
0x0000000000014203: mov dword ptr [rdi - 1], esi; dec dword ptr [rax - 0x73]; push rsp; and al, 0x28; call rax; 
0x0000000000017f33: mov dword ptr [rdi], 0; mov dword ptr [rdi + 4], 0; mov dword ptr [rdi + 8], 0; mov dword ptr [rdi + 0xc], 0; ret; 
0x000000000004eeca: mov dword ptr [rdi], 0; pop rbx; ret; 
0x0000000000028222: mov dword ptr [rdi], 0x2e; add rsp, 0x20; pop rbx; pop r14; ret; 
0x00000000000170fd: mov dword ptr [rdi], 1; add rsp, 0x20; ret; 
0x00000000000170b5: mov dword ptr [rdi], 1; add rsp, 0x38; ret; 
0x0000000000016fde: mov dword ptr [rdi], 1; add rsp, 0x48; ret; 
0x000000000003559b: mov dword ptr [rdi], 1; pop rbx; pop r14; pop rbp; ret; 
0x000000000002a4d3: mov dword ptr [rdi], eax; add rsp, 0x28; ret; 
0x000000000002b9cc: mov dword ptr [rdi], eax; ret; 
0x000000000001ba4c: mov dword ptr [rdi], ecx; add rsp, 0x28; ret; 
0x0000000000012433: mov dword ptr [rdi], ecx; add rsp, 0x48; ret; 
0x000000000001700a: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 8], 0; add rsp, 0x18; ret; 
0x0000000000016f08: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 8], 0; add rsp, 0x28; ret; 
0x000000000004ef10: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x00000000000162c7: mov dword ptr [rdi], ecx; mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; mov cl, byte ptr [rsi + 0x10]; mov byte ptr [rdi + 0x10], cl; ret; 
0x0000000000017577: mov dword ptr [rdi], ecx; mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsi + 0x10]; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000001c91c: mov dword ptr [rdi], ecx; mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; pop rcx; ret; 
0x000000000001c877: mov dword ptr [rdi], ecx; mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; ret; 
0x000000000001e6ab: mov dword ptr [rdi], ecx; mov rcx, qword ptr [rsp + 0x18]; mov qword ptr [rdi + 8], rcx; add rsp, 0x28; ret; 
0x00000000000163b6: mov dword ptr [rdi], edx; mov qword ptr [rdi + 8], rcx; mov qword ptr [rdi + 0x10], rsi; add rsp, 0x18; ret; 
0x0000000000013326: mov dword ptr [rdi], esi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x00000000000139e0: mov dword ptr [rdi], esi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x38; ret; 
0x000000000005a9f6: mov dword ptr [rdi], esi; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000001baf4: mov dword ptr [rdi], esi; pop rcx; ret; 
0x0000000000057ec8: mov dword ptr [rdi], esi; ret; 
0x0000000000039651: mov dword ptr [rip + 0x40a71], eax; mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x0000000000020e23: mov dword ptr [rip + 0x5e415b00], eax; pop r15; ret; 
0x000000000001f2b5: mov dword ptr [rsi + 0x10], eax; movups xmm0, xmmword ptr [rdi]; movups xmmword ptr [rsi], xmm0; ret; 
0x0000000000020d89: mov dword ptr [rsi + 0x10], ebx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004ef41: mov dword ptr [rsi + 0x10], ecx; mov qword ptr [rdi + 8], 0; xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000001fec1: mov dword ptr [rsi + 0x10], edi; ret; 
0x0000000000029f73: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0x10; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a0a7: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0x11; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a1d2: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0x12; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a10d: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0x14; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a1b6: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0x15; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029ed4: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0x16; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029f30: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0x17; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a196: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0x1c; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029e8b: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 0xb; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a220: mov dword ptr [rsi + 8], eax; mov qword ptr [r14], 7; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000009c1b: mov dword ptr [rsi + 8], edi; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000029f99: mov dword ptr [rsi + 8], edx; mov qword ptr [r14], 0x26; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a027: mov dword ptr [rsi + 8], edx; mov qword ptr [r14], 0x27; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029f10: mov dword ptr [rsi + 8], edx; mov qword ptr [r14], 0x2c; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a1f3: mov dword ptr [rsi + 8], edx; mov qword ptr [r14], 0x2d; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029f77: mov dword ptr [rsi], 0x10; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a0ab: mov dword ptr [rsi], 0x11; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a1d6: mov dword ptr [rsi], 0x12; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a111: mov dword ptr [rsi], 0x14; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a1ba: mov dword ptr [rsi], 0x15; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029ed8: mov dword ptr [rsi], 0x16; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029f34: mov dword ptr [rsi], 0x17; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a19a: mov dword ptr [rsi], 0x1c; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a0ce: mov dword ptr [rsi], 0x20; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a157: mov dword ptr [rsi], 0x21; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a17a: mov dword ptr [rsi], 0x22; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a006: mov dword ptr [rsi], 0x23; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029fc0: mov dword ptr [rsi], 0x24; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a134: mov dword ptr [rsi], 0x25; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029f9d: mov dword ptr [rsi], 0x26; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a02b: mov dword ptr [rsi], 0x27; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a0f1: mov dword ptr [rsi], 0x28; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a04e: mov dword ptr [rsi], 0x29; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029fe3: mov dword ptr [rsi], 0x2a; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029f57: mov dword ptr [rsi], 0x2b; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029f14: mov dword ptr [rsi], 0x2c; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a1f7: mov dword ptr [rsi], 0x2d; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029e8f: mov dword ptr [rsi], 0xb; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a224: mov dword ptr [rsi], 7; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a094: mov dword ptr [rsi], 8; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000057f7b: mov dword ptr [rsi], eax; mov rax, r14; pop rbx; pop r14; pop r15; ret; 
0x0000000000009c1f: mov dword ptr [rsi], ebx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000139ff: mov dword ptr [rsp + 0x10], eax; add rsp, 0x18; ret; 
0x000000000000c190: mov dword ptr [rsp + 0x10], eax; add rsp, 0x28; ret; 
0x000000000000f61b: mov dword ptr [rsp + 0x10], eax; add rsp, 0x70; ret; 
0x0000000000019ac8: mov dword ptr [rsp + 0x10], eax; call qword ptr [rip + 0x5fdc6]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000016e88: mov dword ptr [rsp + 0x10], eax; call qword ptr [rip + 0x628fe]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000009ff0: mov dword ptr [rsp + 0x10], eax; lea rdi, [rsp + 0x10]; call 0xaaa0; add rsp, 0x28; ret; 
0x0000000000009fa0: mov dword ptr [rsp + 0x10], eax; lea rdi, [rsp + 0x10]; call 0xad10; add rsp, 0x28; ret; 
0x000000000001e6d8: mov dword ptr [rsp + 0x10], eax; lea rsi, [rsp + 8]; call 0x1c870; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001bda1: mov dword ptr [rsp + 0x10], eax; mov qword ptr [rsp + 0x18], rsi; add rsp, 0x20; ret; 
0x000000000002c097: mov dword ptr [rsp + 0x10], eax; mov r12d, 0x2f; lea rdx, [rip + 0x355ac]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x0000000000012d01: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xc8; ret; 
0x000000000000fe37: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0xc0; ret; 
0x000000000000e6bb: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x70; ret; 
0x000000000000e640: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x78; ret; 
0x0000000000013769: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x000000000000eccd: mov dword ptr [rsp + 0x10], eax; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000fbf0: mov dword ptr [rsp + 0x10], eax; movzx eax, byte ptr [rsp + 7]; add rsp, 0x18; ret; 
0x00000000000393af: mov dword ptr [rsp + 0x10], ebx; lea rbp, [r14 - 1]; mov rdi, qword ptr [r14 - 1]; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x0000000000016eb5: mov dword ptr [rsp + 0x10], ecx; mov qword ptr [rdi + 8], rcx; mov word ptr [rdi], 2; add rsp, 0x18; ret; 
0x0000000000017005: mov dword ptr [rsp + 0x10], ecx; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x18; ret; 
0x00000000000163b1: mov dword ptr [rsp + 0x10], ecx; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 8], rcx; mov qword ptr [rdi + 0x10], rsi; add rsp, 0x18; ret; 
0x0000000000013321: mov dword ptr [rsp + 0x10], ecx; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x0000000000015291: mov dword ptr [rsp + 0x10], ecx; mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x000000000000f22a: mov dword ptr [rsp + 0x10], edi; add rdi, 0x40; lea rax, [rip + 0xb857]; call rax; 
0x00000000000124aa: mov dword ptr [rsp + 0x10], edi; call 0xef70; add rsp, 0x18; ret; 
0x00000000000124ca: mov dword ptr [rsp + 0x10], edi; call 0xf490; add rsp, 0x18; ret; 
0x000000000000ec45: mov dword ptr [rsp + 0x10], edi; call rdi; 
0x000000000000ec45: mov dword ptr [rsp + 0x10], edi; call rdi; add rsp, 0x18; ret; 
0x000000000000efaa: mov dword ptr [rsp + 0x10], edi; cmp qword ptr [rdi], 0; jne 0xefb9; add rsp, 0x18; ret; 
0x000000000000eefa: mov dword ptr [rsp + 0x10], edi; lea rax, [rip + 0xf33b]; call rax; 
0x000000000001e24a: mov dword ptr [rsp + 0x10], edi; lea rax, [rip - 0x1aa5]; call rax; 
0x000000000001ab7a: mov dword ptr [rsp + 0x10], edi; lea rax, [rip - 0x3ec5]; call rax; 
0x00000000000118a5: mov dword ptr [rsp + 0x10], edi; mov qword ptr [rsp + 0x18], rsi; lea rax, [rip + 0x4806b]; call rax; 
0x000000000000ebe5: mov dword ptr [rsp + 0x10], edi; mov rdi, qword ptr [rdi]; call 0xec00; add rsp, 0x18; ret; 
0x000000000001e2ea: mov dword ptr [rsp + 0x10], edi; mov rdi, qword ptr [rdi]; lea rax, [rip - 0xc8]; call rax; 
0x000000000004277e: mov dword ptr [rsp + 0x10], edi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000001e5ce: mov dword ptr [rsp + 0x10], edx; add rsp, 0x18; ret; 
0x0000000000016381: mov dword ptr [rsp + 0x10], edx; call qword ptr [rip + 0x6337d]; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000015ea1: mov dword ptr [rsp + 0x10], edx; call qword ptr [rip + 0x63f85]; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000011931: mov dword ptr [rsp + 0x10], edx; call qword ptr [rip + 0x67e45]; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001b91e: mov dword ptr [rsp + 0x10], edx; mov ecx, 1; call 0x1ae10; add rsp, 0x18; ret; 
0x000000000001da4e: mov dword ptr [rsp + 0x10], edx; mov ecx, 1; call 0x1d330; add rsp, 0x18; ret; 
0x000000000001b98e: mov dword ptr [rsp + 0x10], edx; xor ecx, ecx; call 0x1ae10; add rsp, 0x18; ret; 
0x000000000001da7e: mov dword ptr [rsp + 0x10], edx; xor ecx, ecx; call 0x1d330; add rsp, 0x18; ret; 
0x0000000000010fce: mov dword ptr [rsp + 0x10], esi; add rdi, rsi; mov qword ptr [rsp + 0x18], rdi; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x000000000001198a: mov dword ptr [rsp + 0x10], esi; call 0x11690; add rsp, 0x18; ret; 
0x000000000001ad0a: mov dword ptr [rsp + 0x10], esi; call 0x1a870; add rsp, 0x18; ret; 
0x000000000001c95a: mov dword ptr [rsp + 0x10], esi; call 0x1e370; add rsp, 0x18; ret; 
0x000000000001bfed: mov dword ptr [rsp + 0x10], esi; call qword ptr [rip + 0x5dd01]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000015fed: mov dword ptr [rsp + 0x10], esi; call qword ptr [rip + 0x63ab1]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001caf4: mov dword ptr [rsp + 0x130], edx; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x000000000001e65c: mov dword ptr [rsp + 0x14], eax; mov eax, dword ptr [rsp + 0x14]; mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000c21f: mov dword ptr [rsp + 0x14], eax; test byte ptr [rsp + 0x1f], 1; jne 0xc233; mov eax, dword ptr [rsp + 0x14]; add rsp, 0x28; ret; 
0x000000000000c3cf: mov dword ptr [rsp + 0x14], eax; test byte ptr [rsp + 0x1f], 1; jne 0xc3e3; mov eax, dword ptr [rsp + 0x14]; add rsp, 0x28; ret; 
0x0000000000011884: mov dword ptr [rsp + 0x14], edi; call 0xeb00; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x00000000000167bc: mov dword ptr [rsp + 0x158], edi; lea rax, [rip - 0x151a]; xor esi, esi; call rax; 
0x0000000000013826: mov dword ptr [rsp + 0x16], eax; movzx eax, ax; add rsp, 0x18; ret; 
0x000000000004751a: mov dword ptr [rsp + 0x178], eax; lea rsi, [rsp + 0x150]; call qword ptr [rcx + 0x20]; 
0x000000000000f11f: mov dword ptr [rsp + 0x18], eax; lea rax, [rip + 0xb966]; call rax; 
0x000000000000f0da: mov dword ptr [rsp + 0x18], eax; lea rax, [rip + 0xb9ab]; call rax; 
0x000000000001a695: mov dword ptr [rsp + 0x18], eax; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x0000000000015296: mov dword ptr [rsp + 0x18], eax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x000000000005eec4: mov dword ptr [rsp + 0x18], eax; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x71ef]; mov edx, 9; call qword ptr [rax + 0x18]; 
0x000000000000f68d: mov dword ptr [rsp + 0x18], eax; mov rdi, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call 0xed30; add rsp, 0x78; ret; 
0x000000000000f70d: mov dword ptr [rsp + 0x18], eax; mov rdi, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call 0xeff0; add rsp, 0x78; ret; 
0x000000000000fe32: mov dword ptr [rsp + 0x18], ecx; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0xc0; ret; 
0x000000000001bedb: mov dword ptr [rsp + 0x18], ecx; mov qword ptr [rsp + 0x20], rax; mov rax, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x98; ret; 
0x00000000000151b5: mov dword ptr [rsp + 0x18], edi; mov qword ptr [rsp + 0x20], rsi; lea rax, [rip + 0x21cb]; call rax; 
0x000000000000f9d5: mov dword ptr [rsp + 0x18], edi; mov qword ptr [rsp + 0x20], rsi; lea rax, [rip + 0x79ab]; call rax; 
0x000000000001e35f: mov dword ptr [rsp + 0x18], edi; mov qword ptr [rsp], rdi; mov rax, qword ptr [rsp]; add rsp, 0x20; ret; 
0x0000000000010fd6: mov dword ptr [rsp + 0x18], edi; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x000000000005dd59: mov dword ptr [rsp + 0x18], edi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x8315]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000001c222: mov dword ptr [rsp + 0x18], edx; call qword ptr [rip + 0x5d524]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000bd1b: mov dword ptr [rsp + 0x18], edx; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rcx], rdx; add rsp, 0x78; ret; 
0x000000000001bda6: mov dword ptr [rsp + 0x18], esi; add rsp, 0x20; ret; 
0x00000000000118aa: mov dword ptr [rsp + 0x18], esi; lea rax, [rip + 0x4806b]; call rax; 
0x000000000000f090: mov dword ptr [rsp + 0x20], eax; lea rax, [rip + 0xb9f5]; call rax; 
0x000000000000f052: mov dword ptr [rsp + 0x20], eax; lea rax, [rip + 0xba33]; call rax; 
0x000000000001bee0: mov dword ptr [rsp + 0x20], eax; mov rax, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x98; ret; 
0x0000000000011905: mov dword ptr [rsp + 0x20], eax; mov rax, qword ptr [rsp + 0x20]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000001974e: mov dword ptr [rsp + 0x20], eax; mov rcx, qword ptr [rsp + 0x20]; call qword ptr [rip + 0x60373]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000119ce: mov dword ptr [rsp + 0x20], eax; mov rcx, qword ptr [rsp + 0x20]; call qword ptr [rip + 0x680f3]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x000000000005ec3a: mov dword ptr [rsp + 0x20], eax; mov rdi, qword ptr [rbx]; mov rax, qword ptr [rbx + 8]; lea rsi, [rip + 0x39e0]; mov edx, 4; call qword ptr [rax + 0x18]; 
0x000000000001bb97: mov dword ptr [rsp + 0x20], edi; call rax; 
0x000000000005defb: mov dword ptr [rsp + 0x20], edi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x81a2]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x0000000000010fa1: mov dword ptr [rsp + 0x20], edx; mov rax, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000001c8ac: mov dword ptr [rsp + 0x20], edx; shl rdx, 0; call 0x9078; add rsp, 0x28; ret; 
0x000000000001bb2a: mov dword ptr [rsp + 0x20], esi; call qword ptr [rip + 0x5e324]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000151ba: mov dword ptr [rsp + 0x20], esi; lea rax, [rip + 0x21cb]; call rax; 
0x000000000000f9da: mov dword ptr [rsp + 0x20], esi; lea rax, [rip + 0x79ab]; call rax; 
0x000000000000d4f6: mov dword ptr [rsp + 0x220], eax; lea rax, [rip + 0x2a89c]; lea rdi, [rsp + 0x220]; call rax; 
0x00000000000144a4: mov dword ptr [rsp + 0x28], eax; lea rcx, [rip + 0x61b71]; lea rax, [rip - 0x8b26]; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000014286: mov dword ptr [rsp + 0x28], eax; lea rcx, [rip + 0x61d8f]; lea rax, [rip - 0x8908]; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000015f3d: mov dword ptr [rsp + 0x28], eax; mov qword ptr [rsp + 0x30], rdx; add rsp, 0x38; ret; 
0x0000000000010f13: mov dword ptr [rsp + 0x28], eax; mov qword ptr [rsp + 0x30], rdx; mov qword ptr [rdi + 0x10], 0; add rsp, 0x38; ret; 
0x000000000001ade7: mov dword ptr [rsp + 0x28], eax; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000003c4da: mov dword ptr [rsp + 0x28], eax; mov rdi, r15; call qword ptr [rip + 0x3d261]; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000001da21: mov dword ptr [rsp + 0x28], eax; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x5bd58]; add rsp, 0x68; ret; 
0x000000000001b8f1: mov dword ptr [rsp + 0x28], eax; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x5de88]; add rsp, 0x68; ret; 
0x0000000000011a71: mov dword ptr [rsp + 0x28], eax; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x67d08]; add rsp, 0x68; ret; 
0x000000000000d4d0: mov dword ptr [rsp + 0x28], edi; mov edx, 1; call 0xc4b0; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x2b0d6]; call rax; 
0x000000000000fa43: mov dword ptr [rsp + 0x28], edi; mov qword ptr [rsp + 0x30], rsi; lea rax, [rip - 0x4483]; call rax; 
0x0000000000015223: mov dword ptr [rsp + 0x28], edi; mov qword ptr [rsp + 0x30], rsi; lea rax, [rip - 0x9c63]; call rax; 
0x000000000000fbc3: mov dword ptr [rsp + 0x30], eax; add rsp, 0x38; ret; 
0x0000000000014359: mov dword ptr [rsp + 0x30], eax; lea rcx, [rip + 0x61cbc]; lea rax, [rip - 0x89db]; lea rdx, [rsp + 0x30]; call rax; 
0x000000000005b93f: mov dword ptr [rsp + 0x30], eax; mov rax, qword ptr [rax + 0x20]; mov rdi, r13; mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x0000000000016477: mov dword ptr [rsp + 0x30], eax; movups xmm0, xmmword ptr [rsp + 0x38]; movaps xmmword ptr [rsp + 0x20], xmm0; lea rax, [rip + 0x3b14]; lea rdx, [rsp + 0x20]; call rax; 
0x0000000000011571: mov dword ptr [rsp + 0x30], ecx; mov qword ptr [rsp + 0x38], rax; mov rax, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; add rsp, 0xb8; ret; 
0x000000000001b95e: mov dword ptr [rsp + 0x30], ecx; mov rax, rsp; mov dword ptr [rax], 0; call 0x1b1d0; add rsp, 0x38; ret; 
0x0000000000015f42: mov dword ptr [rsp + 0x30], edx; add rsp, 0x38; ret; 
0x000000000000e2b0: mov dword ptr [rsp + 0x30], edx; call 0xe2c0; add rsp, 0x38; ret; 
0x0000000000010f18: mov dword ptr [rsp + 0x30], edx; mov qword ptr [rdi + 0x10], 0; add rsp, 0x38; ret; 
0x00000000000196a2: mov dword ptr [rsp + 0x30], edx; mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000000fa48: mov dword ptr [rsp + 0x30], esi; lea rax, [rip - 0x4483]; call rax; 
0x0000000000015228: mov dword ptr [rsp + 0x30], esi; lea rax, [rip - 0x9c63]; call rax; 
0x000000000000bdd8: mov dword ptr [rsp + 0x30], esi; movups xmm0, xmmword ptr [rsp + 0x28]; movups xmmword ptr [rcx], xmm0; add rsp, 0xb8; ret; 
0x00000000000454f6: mov dword ptr [rsp + 0x328], ebp; mov edi, 0x100; mov esi, 8; call rbx; 
0x00000000000466af: mov dword ptr [rsp + 0x330], edi; mov rbp, rcx; call rcx; 
0x000000000005b950: mov dword ptr [rsp + 0x38], eax; call rax; 
0x00000000000129f5: mov dword ptr [rsp + 0x38], eax; lea rdx, [rip + 0x635b0]; lea rax, [rip + 0x47a09]; lea rsi, [rsp + 0x38]; call rax; 
0x0000000000017320: mov dword ptr [rsp + 0x38], eax; mov qword ptr [rsp + 0x40], rdx; add rsp, 0x48; ret; 
0x0000000000011576: mov dword ptr [rsp + 0x38], eax; mov rax, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; add rsp, 0xb8; ret; 
0x0000000000015ef2: mov dword ptr [rsp + 0x38], eax; mov rax, qword ptr [rsp + 0x38]; mov byte ptr [rax], 0; add rsp, 0x40; ret; 
0x00000000000187b2: mov dword ptr [rsp + 0x38], eax; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; lea rax, [rip + 0x1fa9]; call rax; 
0x000000000000fafb: mov dword ptr [rsp + 0x38], ecx; mov dword ptr [rsp + 0x40], eax; mov rax, qword ptr [rsp + 0x38]; mov edx, dword ptr [rsp + 0x40]; add rsp, 0x88; ret; 
0x000000000001003e: mov dword ptr [rsp + 0x38], ecx; mov qword ptr [rsp + 0x40], rax; mov rax, qword ptr [rsp + 0x38]; mov rdx, qword ptr [rsp + 0x40]; add rsp, 0xc8; ret; 
0x000000000000f77c: mov dword ptr [rsp + 0x38], edx; mov qword ptr [rsp + 0x40], rcx; call 0x11a00; add rsp, 0x48; ret; 
0x0000000000015d3d: mov dword ptr [rsp + 0x38], edx; mov qword ptr [rsp + 0x40], rcx; call 0x1b880; add rsp, 0x48; ret; 
0x000000000001c74d: mov dword ptr [rsp + 0x38], edx; mov qword ptr [rsp + 0x40], rcx; call 0x1d9b0; add rsp, 0x48; ret; 
0x000000000000d4a5: mov dword ptr [rsp + 0x38], edx; mov rax, qword ptr [rip + 0x6c310]; call rax; 
0x000000000000bcb0: mov dword ptr [rsp + 0x40], eax; mov qword ptr [rsp + 0x48], rdx; add rsp, 0x50; ret; 
0x0000000000012010: mov dword ptr [rsp + 0x40], eax; mov qword ptr [rsp + 0x48], rdx; mov rax, qword ptr [rsp + 0x40]; mov rdx, qword ptr [rsp + 0x48]; add rsp, 0x248; ret; 
0x000000000003d0c4: mov dword ptr [rsp + 0x40], eax; mov qword ptr [rsp + 0x48], rdx; mov rdi, qword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000000faff: mov dword ptr [rsp + 0x40], eax; mov rax, qword ptr [rsp + 0x38]; mov edx, dword ptr [rsp + 0x40]; add rsp, 0x88; ret; 
0x0000000000010043: mov dword ptr [rsp + 0x40], eax; mov rax, qword ptr [rsp + 0x38]; mov rdx, qword ptr [rsp + 0x40]; add rsp, 0xc8; ret; 
0x0000000000019ef5: mov dword ptr [rsp + 0x40], eax; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; lea rax, [rip - 0x3fba]; lea rdi, [rsp + 0x20]; call rax; 
0x000000000000f781: mov dword ptr [rsp + 0x40], ecx; call 0x11a00; add rsp, 0x48; ret; 
0x0000000000015d42: mov dword ptr [rsp + 0x40], ecx; call 0x1b880; add rsp, 0x48; ret; 
0x000000000001c752: mov dword ptr [rsp + 0x40], ecx; call 0x1d9b0; add rsp, 0x48; ret; 
0x000000000003b33e: mov dword ptr [rsp + 0x40], ecx; mov qword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000000d58a: mov dword ptr [rsp + 0x40], edi; call rax; 
0x000000000001bdbc: mov dword ptr [rsp + 0x40], edi; mov qword ptr [rsp + 8], rdi; mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x3c11f]; call rax; 
0x0000000000017325: mov dword ptr [rsp + 0x40], edx; add rsp, 0x48; ret; 
0x000000000004746c: mov dword ptr [rsp + 0x460], eax; mov rdi, qword ptr [rsp + 0x80]; lea rsi, [rsp + 0x430]; mov rax, qword ptr [rsp + 0xb0]; call qword ptr [rax + 0x20]; 
0x000000000003b343: mov dword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000001bd34: mov dword ptr [rsp + 0x48], eax; lea rax, [rip + 0x24d1]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000000bcb5: mov dword ptr [rsp + 0x48], edx; add rsp, 0x50; ret; 
0x0000000000012015: mov dword ptr [rsp + 0x48], edx; mov rax, qword ptr [rsp + 0x40]; mov rdx, qword ptr [rsp + 0x48]; add rsp, 0x248; ret; 
0x000000000003d0c9: mov dword ptr [rsp + 0x48], edx; mov rdi, qword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x0000000000014482: mov dword ptr [rsp + 0x50], eax; add rsp, 0x58; ret; 
0x0000000000015f6d: mov dword ptr [rsp + 0x50], ecx; mov byte ptr [rsp + 0x37], 1; lea rax, [rip + 0x423]; lea rdi, [rsp + 0x18]; call rax; 
0x000000000001dde0: mov dword ptr [rsp + 0x58], eax; lea rsi, [rsp + 0x40]; call qword ptr [rip + 0x5bbc1]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x000000000001db75: mov dword ptr [rsp + 0x58], eax; mov edi, dword ptr [rsp + 0x58]; lea rax, [rip + 0x3be8c]; call rax; 
0x00000000000143e4: mov dword ptr [rsp + 0x58], eax; mov qword ptr [rsp + 0x60], rdx; add rsp, 0x68; ret; 
0x000000000001da1c: mov dword ptr [rsp + 0x60], eax; mov qword ptr [rsp + 0x28], rax; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x5bd58]; add rsp, 0x68; ret; 
0x000000000001b8ec: mov dword ptr [rsp + 0x60], eax; mov qword ptr [rsp + 0x28], rax; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x5de88]; add rsp, 0x68; ret; 
0x0000000000011a6c: mov dword ptr [rsp + 0x60], eax; mov qword ptr [rsp + 0x28], rax; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x67d08]; add rsp, 0x68; ret; 
0x000000000001ccbd: mov dword ptr [rsp + 0x60], eax; mov rdi, qword ptr [rsp + 0x60]; lea rax, [rip + 0x583]; call rax; 
0x00000000000143e9: mov dword ptr [rsp + 0x60], edx; add rsp, 0x68; ret; 
0x0000000000010ccc: mov dword ptr [rsp + 0x68], eax; mov qword ptr [rsp + 0x70], rdx; add rsp, 0x78; ret; 
0x000000000001addd: mov dword ptr [rsp + 0x68], ecx; mov qword ptr [rsp + 0x70], rax; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000001ade2: mov dword ptr [rsp + 0x70], eax; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000000bd16: mov dword ptr [rsp + 0x70], ecx; mov qword ptr [rsp + 0x18], rdx; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rcx], rdx; add rsp, 0x78; ret; 
0x0000000000010cd1: mov dword ptr [rsp + 0x70], edx; add rsp, 0x78; ret; 
0x0000000000019639: mov dword ptr [rsp + 0x740], esi; lea rdx, [rip + 0x5cc49]; lea rax, [rip - 0x272e]; call rax; 
0x000000000001be35: mov dword ptr [rsp + 0x78], eax; mov qword ptr [rsp + 0x80], rdx; add rsp, 0x88; ret; 
0x000000000001be3a: mov dword ptr [rsp + 0x80], edx; add rsp, 0x88; ret; 
0x0000000000013624: mov dword ptr [rsp + 0x90], eax; mov rdi, qword ptr [rsp + 0x90]; call 0x124c0; add rsp, 0x98; ret; 
0x000000000001a07d: mov dword ptr [rsp + 0x90], ecx; mov rdi, qword ptr [rax + 8]; lea rax, [rip + 0x961]; call rax; 
0x000000000000d92c: mov dword ptr [rsp + 0x98], eax; lea rax, [rip + 0x2a466]; lea rdi, [rsp + 0x98]; call rax; 
0x000000000001183b: mov dword ptr [rsp + 0x98], ecx; mov qword ptr [rsp + 0xa0], rax; mov rax, qword ptr [rsp + 0x98]; mov rdx, qword ptr [rsp + 0xa0]; add rsp, 0x158; ret; 
0x0000000000011843: mov dword ptr [rsp + 0xa0], eax; mov rax, qword ptr [rsp + 0x98]; mov rdx, qword ptr [rsp + 0xa0]; add rsp, 0x158; ret; 
0x000000000001c9b8: mov dword ptr [rsp + 0xa8], edi; lea rax, [rip - 0x786]; xor esi, esi; call rax; 
0x000000000001a323: mov dword ptr [rsp + 0xb0], esi; lea rdx, [rip + 0x5bfa7]; lea rax, [rip - 0x3348]; call rax; 
0x000000000000fb48: mov dword ptr [rsp + 0xc], edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; ret; 
0x000000000000cf5e: mov dword ptr [rsp + 0xd0], eax; lea rax, [rip + 0x2ae34]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000000c99e: mov dword ptr [rsp + 0xd0], eax; lea rax, [rip + 0x2b3f4]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000001c8fb: mov dword ptr [rsp + 4], eax; mov eax, dword ptr [rsp + 4]; add rsp, 0x10; ret; 
0x000000000001c031: mov dword ptr [rsp + 4], edi; mov dword ptr [rsp], edi; mov eax, dword ptr [rsp]; pop rcx; ret; 
0x000000000001015c: mov dword ptr [rsp + 8], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0x108; ret; 
0x000000000000fc86: mov dword ptr [rsp + 8], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0xe0; ret; 
0x00000000000137fd: mov dword ptr [rsp + 8], eax; add rsp, 0x10; ret; 
0x0000000000019aec: mov dword ptr [rsp + 8], eax; lea rax, [rip + 0x3fee9]; call rax; 
0x000000000004a6fc: mov dword ptr [rsp + 8], eax; lea rbx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000001cb32: mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001e664: mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001c052: mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0xc; ret; 
0x000000000000ecc8: mov dword ptr [rsp + 8], eax; mov qword ptr [rsp + 0x10], rax; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000001a69a: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x000000000001190f: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000196f9: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000001c8cf: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x10; ret; 
0x000000000001d264: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x30; ret; 
0x000000000001bf37: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000000bfce: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000003da96: mov dword ptr [rsp + 8], ebp; movups xmm0, xmmword ptr [rcx]; movups xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 0x20]; 
0x000000000000f616: mov dword ptr [rsp + 8], ecx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x70; ret; 
0x0000000000019ac3: mov dword ptr [rsp + 8], ecx; mov qword ptr [rsp + 0x10], rax; call qword ptr [rip + 0x5fdc6]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000016e83: mov dword ptr [rsp + 8], ecx; mov qword ptr [rsp + 0x10], rax; call qword ptr [rip + 0x628fe]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000e6b6: mov dword ptr [rsp + 8], ecx; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x70; ret; 
0x000000000000e63b: mov dword ptr [rsp + 8], ecx; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x78; ret; 
0x0000000000013764: mov dword ptr [rsp + 8], ecx; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x0000000000016eb0: mov dword ptr [rsp + 8], ecx; mov qword ptr [rsp + 0x10], rcx; mov qword ptr [rdi + 8], rcx; mov word ptr [rdi], 2; add rsp, 0x18; ret; 
0x0000000000017000: mov dword ptr [rsp + 8], ecx; mov qword ptr [rsp + 0x10], rcx; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x18; ret; 
0x00000000000139f5: mov dword ptr [rsp + 8], edi; call 0x137f0; mov qword ptr [rsp + 0x10], rax; add rsp, 0x18; ret; 
0x000000000000c3f5: mov dword ptr [rsp + 8], edi; call 0xec40; add rsp, 0x28; ret; 
0x000000000001e5e5: mov dword ptr [rsp + 8], edi; call qword ptr [rip + 0x5b5d1]; add rsp, 0x18; ret; 
0x0000000000019685: mov dword ptr [rsp + 8], edi; lea rax, [rip - 0x2960]; call rax; 
0x000000000000fb44: mov dword ptr [rsp + 8], edi; mov dword ptr [rsp + 0xc], edi; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; ret; 
0x000000000001c8f5: mov dword ptr [rsp + 8], edi; mov eax, dword ptr [rdi]; mov dword ptr [rsp + 4], eax; mov eax, dword ptr [rsp + 4]; add rsp, 0x10; ret; 
0x000000000000efa5: mov dword ptr [rsp + 8], edi; mov qword ptr [rsp + 0x10], rdi; cmp qword ptr [rdi], 0; jne 0xefb9; add rsp, 0x18; ret; 
0x000000000000eef5: mov dword ptr [rsp + 8], edi; mov qword ptr [rsp + 0x10], rdi; lea rax, [rip + 0xf33b]; call rax; 
0x000000000001e245: mov dword ptr [rsp + 8], edi; mov qword ptr [rsp + 0x10], rdi; lea rax, [rip - 0x1aa5]; call rax; 
0x000000000001ab75: mov dword ptr [rsp + 8], edi; mov qword ptr [rsp + 0x10], rdi; lea rax, [rip - 0x3ec5]; call rax; 
0x000000000001e2e5: mov dword ptr [rsp + 8], edi; mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rdi]; lea rax, [rip - 0xc8]; call rax; 
0x0000000000011985: mov dword ptr [rsp + 8], edi; mov qword ptr [rsp + 0x10], rsi; call 0x11690; add rsp, 0x18; ret; 
0x000000000001ad05: mov dword ptr [rsp + 8], edi; mov qword ptr [rsp + 0x10], rsi; call 0x1a870; add rsp, 0x18; ret; 
0x000000000001bdc1: mov dword ptr [rsp + 8], edi; mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x3c11f]; call rax; 
0x00000000000100bf: mov dword ptr [rsp + 8], edx; add rsp, 0x10; ret; 
0x0000000000017c29: mov dword ptr [rsp + 8], esi; lea rax, [rip - 0x1774]; call rax; 
0x0000000000017c29: mov dword ptr [rsp + 8], esi; lea rax, [rip - 0x1774]; call rax; add rsp, 0x18; ret; 
0x000000000001bd9c: mov dword ptr [rsp + 8], esi; mov qword ptr [rsp + 0x10], rax; mov qword ptr [rsp + 0x18], rsi; add rsp, 0x20; ret; 
0x000000000001e5c9: mov dword ptr [rsp + 8], esi; mov qword ptr [rsp + 0x10], rdx; add rsp, 0x18; ret; 
0x0000000000013a23: mov dword ptr [rsp + 8], esi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000164d3: mov dword ptr [rsp + 8], esi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000001c1f5: mov dword ptr [rsp], eax; call qword ptr [rip + 0x5d3f2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001ad45: mov dword ptr [rsp], eax; call qword ptr [rip + 0x5f1c2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000018cf5: mov dword ptr [rsp], eax; call qword ptr [rip + 0x60fa2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000016e05: mov dword ptr [rsp], eax; call qword ptr [rip + 0x629aa]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001e623: mov dword ptr [rsp], eax; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001cb2c: mov dword ptr [rsp], eax; mov eax, dword ptr [rsp]; mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001c04c: mov dword ptr [rsp], eax; mov eax, dword ptr [rsp]; mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0xc; ret; 
0x000000000001dab8: mov dword ptr [rsp], eax; mov qword ptr [rsp + 8], rax; add rsp, 0x10; ret; 
0x00000000000100bb: mov dword ptr [rsp], eax; mov qword ptr [rsp + 8], rdx; add rsp, 0x10; ret; 
0x000000000001bd98: mov dword ptr [rsp], eax; mov qword ptr [rsp + 8], rsi; mov qword ptr [rsp + 0x10], rax; mov qword ptr [rsp + 0x18], rsi; add rsp, 0x20; ret; 
0x000000000001c8d9: mov dword ptr [rsp], eax; mov rax, qword ptr [rsp]; add rsp, 0x10; ret; 
0x000000000001d26e: mov dword ptr [rsp], eax; mov rax, qword ptr [rsp]; add rsp, 0x30; ret; 
0x000000000001bf41: mov dword ptr [rsp], eax; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000012427: mov dword ptr [rsp], eax; mov rax, qword ptr [rsp]; mov qword ptr [rdi + 8], rax; mov qword ptr [rdi], rcx; add rsp, 0x48; ret; 
0x000000000000fbbb: mov dword ptr [rsp], eax; mov rax, qword ptr [rsp]; mov qword ptr [rsp + 0x30], rax; add rsp, 0x38; ret; 
0x000000000000e265: mov dword ptr [rsp], eax; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xbc70; pop rcx; ret; 
0x000000000000bfca: mov dword ptr [rsp], ecx; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000001ab12: mov dword ptr [rsp], edi; add rdi, 0x20; call qword ptr [rip + 0x5e9b1]; pop rax; ret; 
0x00000000000115b2: mov dword ptr [rsp], edi; call 0x115e0; pop rcx; ret; 
0x000000000001e2a2: mov dword ptr [rsp], edi; call 0x1c7a0; pop rax; ret; 
0x000000000001e2d2: mov dword ptr [rsp], edi; call 0x1d220; pop rax; ret; 
0x000000000000ee62: mov dword ptr [rsp], edi; call 0xeb70; pop rax; ret; 
0x000000000000f132: mov dword ptr [rsp], edi; call 0xeca0; pop rax; ret; 
0x000000000000ef72: mov dword ptr [rsp], edi; call 0xef90; pop rax; ret; 
0x000000000000f1d2: mov dword ptr [rsp], edi; call 0xf170; pop rax; ret; 
0x000000000000ef62: mov dword ptr [rsp], edi; call 0xf220; pop rax; ret; 
0x000000000000f1e2: mov dword ptr [rsp], edi; call 0xf730; pop rax; ret; 
0x000000000000eed2: mov dword ptr [rsp], edi; call 0xf790; pop rax; ret; 
0x000000000000f4d2: mov dword ptr [rsp], edi; call 0xf7f0; pop rax; ret; 
0x000000000000eca2: mov dword ptr [rsp], edi; call 0xf850; pop rax; ret; 
0x000000000000ecb2: mov dword ptr [rsp], edi; call 0xf930; pop rax; ret; 
0x000000000001e232: mov dword ptr [rsp], edi; call qword ptr [rip + 0x5b485]; pop rax; ret; 
0x000000000001e222: mov dword ptr [rsp], edi; call qword ptr [rip + 0x5b5d5]; pop rax; ret; 
0x000000000001e2b2: mov dword ptr [rsp], edi; call qword ptr [rip + 0x5b685]; pop rax; ret; 
0x000000000001e2c2: mov dword ptr [rsp], edi; call qword ptr [rip + 0x5b7bd]; pop rax; ret; 
0x000000000001e202: mov dword ptr [rsp], edi; call qword ptr [rip + 0x5b845]; pop rax; ret; 
0x000000000001e212: mov dword ptr [rsp], edi; call qword ptr [rip + 0x5bb8d]; pop rax; ret; 
0x000000000001c942: mov dword ptr [rsp], edi; call qword ptr [rip + 0x5d4b5]; pop rcx; ret; 
0x000000000001ab32: mov dword ptr [rsp], edi; call qword ptr [rip + 0x5e88d]; pop rax; ret; 
0x000000000001ac52: mov dword ptr [rsp], edi; call qword ptr [rip + 0x5e9ed]; pop rax; ret; 
0x000000000001aa82: mov dword ptr [rsp], edi; call qword ptr [rip + 0x5ea85]; pop rax; ret; 
0x000000000001aa72: mov dword ptr [rsp], edi; call qword ptr [rip + 0x5eefd]; pop rax; ret; 
0x000000000001ab02: mov dword ptr [rsp], edi; call qword ptr [rip + 0x5f015]; pop rax; ret; 
0x0000000000016df2: mov dword ptr [rsp], edi; call qword ptr [rip + 0x62f35]; pop rax; ret; 
0x000000000000f482: mov dword ptr [rsp], edi; call qword ptr [rip + 0x6a38d]; pop rax; ret; 
0x000000000000ef92: mov dword ptr [rsp], edi; call qword ptr [rip + 0x6ae0d]; pop rax; ret; 
0x0000000000010f85: mov dword ptr [rsp], edi; lea rax, [rip + 0x5da1]; call rax; 
0x0000000000010c65: mov dword ptr [rsp], edi; lea rax, [rip + 0x60c1]; call rax; 
0x000000000001e592: mov dword ptr [rsp], edi; lea rax, [rip + 4]; call rax; 
0x000000000001e592: mov dword ptr [rsp], edi; lea rax, [rip + 4]; call rax; pop rcx; ret; 
0x000000000001da92: mov dword ptr [rsp], edi; mov ax, word ptr [rdi]; pop rcx; ret; 
0x000000000001daa2: mov dword ptr [rsp], edi; mov eax, dword ptr [rdi + 0x80]; pop rcx; ret; 
0x000000000001c035: mov dword ptr [rsp], edi; mov eax, dword ptr [rsp]; pop rcx; ret; 
0x000000000001c7a2: mov dword ptr [rsp], edi; mov edi, dword ptr [rdi]; call qword ptr [rip + 0x5d063]; pop rax; ret; 
0x000000000001bdb8: mov dword ptr [rsp], edi; mov qword ptr [rsp + 0x40], rdi; mov qword ptr [rsp + 8], rdi; mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x3c11f]; call rax; 
0x0000000000017c25: mov dword ptr [rsp], edi; mov qword ptr [rsp + 8], rsi; lea rax, [rip - 0x1774]; call rax; 
0x0000000000017c25: mov dword ptr [rsp], edi; mov qword ptr [rsp + 8], rsi; lea rax, [rip - 0x1774]; call rax; add rsp, 0x18; ret; 
0x000000000001e5c5: mov dword ptr [rsp], edi; mov qword ptr [rsp + 8], rsi; mov qword ptr [rsp + 0x10], rdx; add rsp, 0x18; ret; 
0x0000000000013a1f: mov dword ptr [rsp], edi; mov qword ptr [rsp + 8], rsi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000164cf: mov dword ptr [rsp], edi; mov qword ptr [rsp + 8], rsi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000137f5: mov dword ptr [rsp], edi; mov rax, qword ptr [rdi + 8]; mov qword ptr [rsp + 8], rax; add rsp, 0x10; ret; 
0x000000000001e364: mov dword ptr [rsp], edi; mov rax, qword ptr [rsp]; add rsp, 0x20; ret; 
0x00000000000184b2: mov dword ptr [rsp], edi; mov rdi, qword ptr [rdi]; call qword ptr [rip + 0x61b2a]; pop rax; ret; 
0x0000000000037da2: mov dword ptr [rsp], edi; mov rdi, rsp; call qword ptr [rip + 0x41a4a]; pop rcx; ret; 
0x000000000000eee2: mov dword ptr [rsp], edi; pop rax; ret; 
0x000000000003da8d: mov dword ptr [rsp], esi; lea rdx, [rsp + 8]; mov qword ptr [rsp + 8], rbp; movups xmm0, xmmword ptr [rcx]; movups xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 0x20]; 
0x000000000001bae5: mov dword ptr [rsp], esi; mov byte ptr [rdi + 0xc], 0xb; mov dword ptr [rdi + 8], 0; mov qword ptr [rdi], rsi; pop rcx; ret; 
0x0000000000019ae5: mov dword ptr [rsp], esi; mov rax, rdi; mov qword ptr [rsp + 8], rax; lea rax, [rip + 0x3fee9]; call rax; 
0x0000000000010212: mov eax, 0x1000000; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000103a2: mov eax, 0x1000000; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4811; 
0x000000000004ce5f: mov eax, 0x110000; add rsp, 0x98; pop rbx; pop r14; ret; 
0x000000000004f101: mov eax, 0x110000; cmovae rax, rdx; shl rax, 0x20; or rax, rcx; ret; 
0x0000000000057e57: mov eax, 0x110000; lea rsi, [rip + 0xd485]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000004cda7: mov eax, 0x110001; add rsp, 0x98; pop rbx; pop r14; ret; 
0x000000000005dc7e: mov eax, 0x11f; call 0x5db10; pop rcx; ret; 
0x000000000005bdb9: mov eax, 0x30; lea rcx, [rip + 0x95ff]; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x00000000000108ae: mov eax, 0x480004fb; lea edx, [rip + 0x65697]; lea rax, [rip - 0x5250]; mov esi, 0x49; call rax; 
0x0000000000057e74: mov eax, 0x5c; ret; 
0x0000000000057ed9: mov eax, 0x75; ret; 
0x0000000000057ecf: mov eax, 0x7b; ret; 
0x0000000000057e9c: mov eax, 0x7d; ret; 
0x000000000001a397: mov eax, 0xc3000000; lea rax, [rip + 0x7cd]; lea rdi, [rsp + 0x38]; call rax; 
0x000000000005dcb5: mov eax, 0xc4; call 0x5db10; pop rcx; ret; 
0x000000000001551d: mov eax, 0xeb000000; ret 0x8b48; 
0x00000000000409ee: mov eax, 1; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x000000000003e9c8: mov eax, 1; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000002a586: mov eax, 1; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x000000000002a271: mov eax, 1; ret; 
0x000000000003a05e: mov eax, 6; lea rdx, [rip + 0x27b7a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000039c03: mov eax, 6; lea rsi, [rip + 0x27f8d]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x00000000000182f7: mov eax, dword ptr [rax + 0x10]; mov edx, eax; call qword ptr [rip + 0x61c4e]; xor eax, eax; add rsp, 0x18; ret; 
0x000000000001e97b: mov eax, dword ptr [rax + 0x18]; jmp rax; 
0x000000000005f128: mov eax, dword ptr [rax + 0x18]; lea rsi, [rip + 0x740d]; mov edx, 0xb; jmp rax; 
0x000000000005ec08: mov eax, dword ptr [rax + 0x18]; lea rsi, [rip + 0x74ae]; mov edx, 5; jmp rax; 
0x000000000005a434: mov eax, dword ptr [rax + 0x18]; lea rsi, [rip + 0xb2ea]; mov edx, 1; jmp rax; 
0x0000000000057e28: mov eax, dword ptr [rax + 0x18]; lea rsi, [rip + 0xd764]; mov edx, 0xe; jmp rax; 
0x000000000005b944: mov eax, dword ptr [rax + 0x20]; mov rdi, r13; mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000005bd86: mov eax, dword ptr [rax + 0x20]; mov rdi, rbx; mov esi, 0x27; mov r13, rax; call rax; 
0x000000000001381f: mov eax, dword ptr [rax + 0x21a]; mov word ptr [rsp + 0x16], ax; movzx eax, ax; add rsp, 0x18; ret; 
0x000000000003c94e: mov eax, dword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000005ef68: mov eax, dword ptr [rax + 8]; lea rsi, [rip + 0x67ae]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005dde7: mov eax, dword ptr [rax + 8]; lea rsi, [rip + 0x792f]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ddcb: mov eax, dword ptr [rax + 8]; lea rsi, [rip + 0x794c]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005b6c3: mov eax, dword ptr [rax + 8]; lea rsi, [rip + 0xa053]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a106: mov eax, dword ptr [rax + 8]; lea rsi, [rip + 0xb610]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x00000000000144a0: mov eax, dword ptr [rax + 8]; mov qword ptr [rsp + 0x28], rax; lea rcx, [rip + 0x61b71]; lea rax, [rip - 0x8b26]; lea rdx, [rsp + 0x28]; call rax; 
0x000000000001447e: mov eax, dword ptr [rax + 8]; mov qword ptr [rsp + 0x50], rax; add rsp, 0x58; ret; 
0x000000000001e977: mov eax, dword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000005a430: mov eax, dword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xb2ea]; mov edx, 1; jmp rax; 
0x000000000000ecd5: mov eax, dword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000ecd9: mov eax, dword ptr [rax]; call rax; 
0x0000000000014356: mov eax, dword ptr [rax]; mov qword ptr [rsp + 0x30], rax; lea rcx, [rip + 0x61cbc]; lea rax, [rip - 0x89db]; lea rdx, [rsp + 0x30]; call rax; 
0x000000000003e5d7: mov eax, dword ptr [rax]; pop rcx; ret; 
0x000000000003848c: mov eax, dword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000059f92: mov eax, dword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000041fce: mov eax, dword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000005b89e: mov eax, dword ptr [rbp + 8]; lea rsi, [rip + 0x9c6b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b883: mov eax, dword ptr [rbp + 8]; lea rsi, [rip + 0x9e99]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a368: mov eax, dword ptr [rbp + 8]; lea rsi, [rip + 0xb3b5]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a33a: mov eax, dword ptr [rbp + 8]; lea rsi, [rip + 0xb3d7]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059fec: mov eax, dword ptr [rbp + 8]; lea rsi, [rip + 0xb720]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000059fb6: mov eax, dword ptr [rbp + 8]; lea rsi, [rip + 0xb754]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059fa1: mov eax, dword ptr [rbp + 8]; mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000003d0d2: mov eax, dword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000004a7ac: mov eax, dword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000001f3af: mov eax, dword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000005b643: mov eax, dword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000001f75b: mov eax, dword ptr [rbx + 8]; call qword ptr [rax]; 
0x000000000005ec42: mov eax, dword ptr [rbx + 8]; lea rsi, [rip + 0x39e0]; mov edx, 4; call qword ptr [rax + 0x18]; 
0x00000000000582e9: mov eax, dword ptr [rbx + 8]; lea rsi, [rip + 0xd30b]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000058230: mov eax, dword ptr [rbx + 8]; lea rsi, [rip + 0xd3c2]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000003bef1: mov eax, dword ptr [rbx + rbp + 8]; test rax, rax; je 0x3bf09; mov rdi, qword ptr [rbx + r13]; call rax; 
0x0000000000040acc: mov eax, dword ptr [rbx]; add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rsi*2 + 0x48], 0x89; ret; 
0x000000000005ed59: mov eax, dword ptr [rcx + rax*8]; mov rdi, qword ptr [rsi]; mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x000000000001f2b1: mov eax, dword ptr [rdi + 0x10]; mov qword ptr [rsi + 0x10], rax; movups xmm0, xmmword ptr [rdi]; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000005d4b1: mov eax, dword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x18]; ret; 
0x00000000000568a1: mov eax, dword ptr [rdi + 0x10]; ret; 
0x0000000000059a90: mov eax, dword ptr [rdi + 0x14]; ret; 
0x000000000004cd41: mov eax, dword ptr [rdi + 0x18]; cmp rax, rcx; jae 0x4cd52; mov qword ptr [rdi + 0x18], 0; ret; 
0x0000000000059b41: mov eax, dword ptr [rdi + 0x18]; ret; 
0x0000000000053541: mov eax, dword ptr [rdi + 0x20]; mov rdx, qword ptr [rdi + 0x28]; ret; 
0x000000000001daa5: mov eax, dword ptr [rdi + 0x80]; pop rcx; ret; 
0x0000000000020e97: mov eax, dword ptr [rdi + 7]; call qword ptr [rax]; 
0x000000000005a2c6: mov eax, dword ptr [rdi + 8]; lea rsi, [rip + 0xb243]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a2a6: mov eax, dword ptr [rdi + 8]; lea rsi, [rip + 0xb476]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x00000000000137f9: mov eax, dword ptr [rdi + 8]; mov qword ptr [rsp + 8], rax; add rsp, 0x10; ret; 
0x0000000000059bb9: mov eax, dword ptr [rdi + 8]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x0000000000056cc1: mov eax, dword ptr [rdi + 8]; mov rdx, qword ptr [rdi + 0x10]; ret; 
0x0000000000057e7a: mov eax, dword ptr [rdi]; mov dword ptr [rdi + 8], 0x110000; ret; 
0x000000000001c8f9: mov eax, dword ptr [rdi]; mov dword ptr [rsp + 4], eax; mov eax, dword ptr [rsp + 4]; add rsp, 0x10; ret; 
0x000000000005b571: mov eax, dword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rdi, rax; jmp rcx; 
0x000000000005b911: mov eax, dword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov rdi, rax; jmp rcx; 
0x000000000004a906: mov eax, dword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x000000000001e971: mov eax, dword ptr [rdi]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x0000000000013781: mov eax, dword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000001da96: mov eax, dword ptr [rdi]; pop rcx; ret; 
0x000000000001c011: mov eax, dword ptr [rdi]; ret; 
0x00000000000423a2: mov eax, dword ptr [rip + 0x37d30]; test rax, rax; lea rcx, [rip - 0x6442]; cmovne rcx, rax; call rcx; 
0x0000000000037d71: mov eax, dword ptr [rip + 0x42349]; cmp eax, 4; jne 0x37d85; lea rax, [rip + 0x42305]; pop rcx; ret; 
0x00000000000378e1: mov eax, dword ptr [rip + 0x42799]; cmp eax, 4; jne 0x378f5; lea rax, [rip + 0x4275d]; pop rcx; ret; 
0x000000000001bb6c: mov eax, dword ptr [rip + 0x5db9e]; call rax; 
0x0000000000018ac9: mov eax, dword ptr [rip + 0x61411]; lea rdx, [rsp + 0x1b0]; lea rcx, [rsp + 0x1f8]; call rax; 
0x000000000000d4aa: mov eax, dword ptr [rip + 0x6c310]; call rax; 
0x000000000000bbc4: mov eax, dword ptr [rip + 0x6d8a6]; test rax, rax; je 0xbbd8; jmp rax; 
0x000000000000bc05: mov eax, dword ptr [rip + 0x6e295]; test rax, rax; je 0xbc18; jmp rax; 
0x000000000000a014: mov eax, dword ptr [rip + 0x700a6]; cmp eax, 4; jne 0xa024; add rsp, 0x28; ret; 
0x0000000000009fc4: mov eax, dword ptr [rip + 0x700b6]; cmp eax, 4; jne 0x9fd4; add rsp, 0x28; ret; 
0x0000000000009f74: mov eax, dword ptr [rip + 0x70146]; cmp eax, 4; jne 0x9f84; add rsp, 0x28; ret; 
0x0000000000009009: mov eax, dword ptr [rip + 0x70979]; test rax, rax; je 0x9016; call rax; 
0x0000000000009009: mov eax, dword ptr [rip + 0x70979]; test rax, rax; je 0x9016; call rax; add rsp, 8; ret; 
0x000000000003d3ef: mov eax, dword ptr [rsi + 0x18]; call qword ptr [rax + 0x28]; 
0x000000000003cf35: mov eax, dword ptr [rsi + 0x20]; jne 0x3d0be; mov rdi, r15; call rax; 
0x00000000000393bc: mov eax, dword ptr [rsi + 7]; call qword ptr [rax]; 
0x000000000005ecce: mov eax, dword ptr [rsi + 8]; lea rsi, [rip + 0x683b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ecb4: mov eax, dword ptr [rsi + 8]; lea rsi, [rip + 0x6a68]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005eecc: mov eax, dword ptr [rsi + 8]; lea rsi, [rip + 0x71ef]; mov edx, 9; call qword ptr [rax + 0x18]; 
0x000000000005df8f: mov eax, dword ptr [rsi + 8]; lea rsi, [rip + 0x757a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df75: mov eax, dword ptr [rsi + 8]; lea rsi, [rip + 0x77a7]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df03: mov eax, dword ptr [rsi + 8]; lea rsi, [rip + 0x81a2]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000005dd61: mov eax, dword ptr [rsi + 8]; lea rsi, [rip + 0x8315]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000005b7c4: mov eax, dword ptr [rsi + 8]; lea rsi, [rip + 0x9d45]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b8de: mov eax, dword ptr [rsi + 8]; lea rsi, [rip + 0x9d67]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7aa: mov eax, dword ptr [rsi + 8]; lea rsi, [rip + 0x9f72]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000042786: mov eax, dword ptr [rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000005f124: mov eax, dword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x740d]; mov edx, 0xb; jmp rax; 
0x000000000005ec04: mov eax, dword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x74ae]; mov edx, 5; jmp rax; 
0x0000000000057e24: mov eax, dword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xd764]; mov edx, 0xe; jmp rax; 
0x000000000005bd82: mov eax, dword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x20]; mov rdi, rbx; mov esi, 0x27; mov r13, rax; call rax; 
0x000000000005b5fe: mov eax, dword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000002b9b1: mov eax, dword ptr [rsi]; lea rcx, [rip + 0x35be2]; movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x0000000000010c45: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x0000000000019dbf: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x158; ret; 
0x0000000000019a95: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x178; ret; 
0x0000000000013674: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x0000000000019010: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x278; ret; 
0x000000000001e57d: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000011222: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x0000000000017862: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000010b97: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x00000000000165b6: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x50; ret; 
0x0000000000011687: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x0000000000015fbe: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x0000000000013c03: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x88; ret; 
0x0000000000013d91: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x0000000000012d06: mov eax, dword ptr [rsp + 0x10]; add rsp, 0xc8; ret; 
0x00000000000172ea: mov eax, dword ptr [rsp + 0x10]; add rsp, 0xd8; ret; 
0x000000000000e746: mov eax, dword ptr [rsp + 0x10]; lea rcx, [rip + 0x51b4b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001dfa1: mov eax, dword ptr [rsp + 0x10]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x288; ret; 
0x0000000000011184: mov eax, dword ptr [rsp + 0x10]; mov qword ptr [rax + 0x40], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x1b8; ret; 
0x0000000000016f03: mov eax, dword ptr [rsp + 0x10]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x28; ret; 
0x0000000000013abd: mov eax, dword ptr [rsp + 0x10]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x0000000000011641: mov eax, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000001529b: mov eax, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x0000000000017417: mov eax, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000fe3c: mov eax, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0xc0; ret; 
0x000000000005abe0: mov eax, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000005aace: mov eax, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000001848b: mov eax, dword ptr [rsp + 0x10]; mov word ptr [rax], 3; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xb8; ret; 
0x00000000000359f2: mov eax, dword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x000000000000c22a: mov eax, dword ptr [rsp + 0x14]; add rsp, 0x28; ret; 
0x000000000001e660: mov eax, dword ptr [rsp + 0x14]; mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001dbf8: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x118; ret; 
0x0000000000011191: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x1b8; ret; 
0x0000000000010fdb: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x00000000000119de: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x0000000000018ce1: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x0000000000018403: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x48; ret; 
0x0000000000013b8c: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x50; ret; 
0x000000000001755a: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000c2e7: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x0000000000017a29: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x78; ret; 
0x000000000001355e: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x88; ret; 
0x0000000000011cb7: mov eax, dword ptr [rsp + 0x18]; add rsp, 0xb8; ret; 
0x0000000000016496: mov eax, dword ptr [rsp + 0x18]; add rsp, 0xc8; ret; 
0x000000000001721b: mov eax, dword ptr [rsp + 0x18]; add rsp, 0xd8; ret; 
0x000000000005a3ee: mov eax, dword ptr [rsp + 0x18]; lea rsi, [rip + 0xb320]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a253: mov eax, dword ptr [rsp + 0x18]; lea rsi, [rip + 0xb4bb]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000001ba41: mov eax, dword ptr [rsp + 0x18]; mov byte ptr [rdi + 0xc], dl; mov dword ptr [rdi + 8], esi; mov qword ptr [rdi], rcx; add rsp, 0x28; ret; 
0x0000000000014828: mov eax, dword ptr [rsp + 0x18]; mov edx, dword ptr [rsp + 0x1c]; add rsp, 0x78; ret; 
0x000000000000c377: mov eax, dword ptr [rsp + 0x18]; mov edx, dword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x0000000000010fa6: mov eax, dword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000001bee5: mov eax, dword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x98; ret; 
0x0000000000017da2: mov eax, dword ptr [rsp + 0x20]; add rsp, 0x188; ret; 
0x0000000000016e67: mov eax, dword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x000000000001a4b1: mov eax, dword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x000000000000e1c4: mov eax, dword ptr [rsp + 0x20]; add rsp, 0x98; ret; 
0x000000000001a118: mov eax, dword ptr [rsp + 0x20]; add rsp, 0xd8; ret; 
0x0000000000018ec5: mov eax, dword ptr [rsp + 0x20]; add rsp, 0xf8; ret; 
0x000000000001cb84: mov eax, dword ptr [rsp + 0x20]; lea rcx, [rip + 0x440dd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001e137: mov eax, dword ptr [rsp + 0x20]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x278; ret; 
0x000000000001db71: mov eax, dword ptr [rsp + 0x20]; mov dword ptr [rsp + 0x58], eax; mov edi, dword ptr [rsp + 0x58]; lea rax, [rip + 0x3be8c]; call rax; 
0x0000000000047515: mov eax, dword ptr [rsp + 0x20]; mov qword ptr [rsp + 0x178], rax; lea rsi, [rsp + 0x150]; call qword ptr [rcx + 0x20]; 
0x0000000000014281: mov eax, dword ptr [rsp + 0x20]; mov qword ptr [rsp + 0x28], rax; lea rcx, [rip + 0x61d8f]; lea rax, [rip - 0x8908]; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000047467: mov eax, dword ptr [rsp + 0x20]; mov qword ptr [rsp + 0x460], rax; mov rdi, qword ptr [rsp + 0x80]; lea rsi, [rsp + 0x430]; mov rax, qword ptr [rsp + 0xb0]; call qword ptr [rax + 0x20]; 
0x000000000001190a: mov eax, dword ptr [rsp + 0x20]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000f611: mov eax, dword ptr [rsp + 0x20]; mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x70; ret; 
0x0000000000011470: mov eax, dword ptr [rsp + 0x20]; mov rdx, qword ptr [rsp + 0x28]; add rsp, 0x88; ret; 
0x0000000000015036: mov eax, dword ptr [rsp + 0x28]; add rsp, 0x1c8; ret; 
0x0000000000018084: mov eax, dword ptr [rsp + 0x28]; add rsp, 0x478; ret; 
0x0000000000014339: mov eax, dword ptr [rsp + 0x28]; add rsp, 0x58; ret; 
0x000000000001adec: mov eax, dword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000000c74e: mov eax, dword ptr [rsp + 0x28]; add rsp, 0xc8; ret; 
0x000000000001b1bd: mov eax, dword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x228; ret; 
0x00000000000196a7: mov eax, dword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x0000000000014108: mov eax, dword ptr [rsp + 0x30]; add rsp, 0x1f8; ret; 
0x000000000005bb21: mov eax, dword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x000000000005a0ad: mov eax, dword ptr [rsp + 0x30]; lea rsi, [rip + 0xb661]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x00000000000129f0: mov eax, dword ptr [rsp + 0x30]; mov qword ptr [rsp + 0x38], rax; lea rdx, [rip + 0x635b0]; lea rax, [rip + 0x47a09]; lea rsi, [rsp + 0x38]; call rax; 
0x000000000001157b: mov eax, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; add rsp, 0xb8; ret; 
0x000000000001cd6c: mov eax, dword ptr [rsp + 0x38]; add rsp, 0x108; ret; 
0x0000000000016998: mov eax, dword ptr [rsp + 0x38]; add rsp, 0x1a8; ret; 
0x0000000000015ef7: mov eax, dword ptr [rsp + 0x38]; mov byte ptr [rax], 0; add rsp, 0x40; ret; 
0x000000000000fb04: mov eax, dword ptr [rsp + 0x38]; mov edx, dword ptr [rsp + 0x40]; add rsp, 0x88; ret; 
0x0000000000010048: mov eax, dword ptr [rsp + 0x38]; mov rdx, qword ptr [rsp + 0x40]; add rsp, 0xc8; ret; 
0x0000000000010551: mov eax, dword ptr [rsp + 0x40]; add rsp, 0x108; ret; 
0x0000000000014d3c: mov eax, dword ptr [rsp + 0x40]; mov edx, dword ptr [rsp + 0x48]; add rsp, 0xf8; ret; 
0x000000000001201a: mov eax, dword ptr [rsp + 0x40]; mov rdx, qword ptr [rsp + 0x48]; add rsp, 0x248; ret; 
0x000000000001bd83: mov eax, dword ptr [rsp + 0x48]; add rsp, 0x108; ret; 
0x000000000000d927: mov eax, dword ptr [rsp + 0x48]; mov qword ptr [rsp + 0x98], rax; lea rax, [rip + 0x2a466]; lea rdi, [rsp + 0x98]; call rax; 
0x000000000001329d: mov eax, dword ptr [rsp + 0x50]; add rsp, 0x118; ret; 
0x00000000000192d9: mov eax, dword ptr [rsp + 0x50]; add rsp, 0x788; ret; 
0x000000000001861c: mov eax, dword ptr [rsp + 0x58]; add rsp, 0x3a8; ret; 
0x0000000000010cc2: mov eax, dword ptr [rsp + 0x58]; mov rdx, qword ptr [rsp + 0x60]; mov qword ptr [rsp + 0x68], rax; mov qword ptr [rsp + 0x70], rdx; add rsp, 0x78; ret; 
0x0000000000040dfa: mov eax, dword ptr [rsp + 0x68]; mov qword ptr [rbx + 0x90], rax; add rsp, 0x108; pop rbx; pop r14; ret; 
0x000000000001b4ef: mov eax, dword ptr [rsp + 0x68]; mov rdx, qword ptr [rsp + 0x70]; add rsp, 0x2c8; ret; 
0x0000000000015389: mov eax, dword ptr [rsp + 0x78]; mov rdx, qword ptr [rsp + 0x80]; add rsp, 0x148; ret; 
0x000000000001184b: mov eax, dword ptr [rsp + 0x98]; mov rdx, qword ptr [rsp + 0xa0]; add rsp, 0x158; ret; 
0x0000000000047484: mov eax, dword ptr [rsp + 0xb0]; call qword ptr [rax + 0x20]; 
0x000000000000fb4c: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; ret; 
0x000000000001c8ff: mov eax, dword ptr [rsp + 4]; add rsp, 0x10; ret; 
0x000000000000ec35: mov eax, dword ptr [rsp + 4]; add rsp, 0x28; ret; 
0x000000000003b456: mov eax, dword ptr [rsp + 7]; call qword ptr [rax]; 
0x0000000000010165: mov eax, dword ptr [rsp + 8]; add rsp, 0x108; ret; 
0x000000000001cb36: mov eax, dword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x0000000000015ff8: mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001a69f: mov eax, dword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x0000000000011914: mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000196fe: mov eax, dword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000001acf4: mov eax, dword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x0000000000010b15: mov eax, dword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x0000000000013967: mov eax, dword ptr [rsp + 8]; add rsp, 0x88; ret; 
0x000000000001a390: mov eax, dword ptr [rsp + 8]; add rsp, 0xb8; ret; 
0x000000000001c056: mov eax, dword ptr [rsp + 8]; add rsp, 0xc; ret; 
0x000000000000fc8f: mov eax, dword ptr [rsp + 8]; add rsp, 0xe0; ret; 
0x0000000000059dc5: mov eax, dword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000dfe2: mov eax, dword ptr [rsp + 8]; lea rcx, [rip + 0x5206b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000005a1b7: mov eax, dword ptr [rsp + 8]; lea rsi, [rip + 0xb561]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000000c18b: mov eax, dword ptr [rsp + 8]; mov qword ptr [rsp + 0x10], rax; add rsp, 0x28; ret; 
0x000000000001bd2f: mov eax, dword ptr [rsp + 8]; mov qword ptr [rsp + 0x48], rax; lea rax, [rip + 0x24d1]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000001c8d4: mov eax, dword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x10; ret; 
0x000000000001d269: mov eax, dword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x30; ret; 
0x000000000001bf3c: mov eax, dword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000014479: mov eax, dword ptr [rsp + 8]; mov rax, qword ptr [rax + 8]; mov qword ptr [rsp + 0x50], rax; add rsp, 0x58; ret; 
0x0000000000013666: mov eax, dword ptr [rsp + 8]; mov rcx, qword ptr [rax + 0x10]; call 0x13370; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000001e320: mov eax, dword ptr [rsp + 8]; mov rdi, qword ptr [rax]; call qword ptr [rip + 0x5b0db]; add rsp, 0x28; ret; 
0x000000000001e2fd: mov eax, dword ptr [rsp + 8]; mov rdi, qword ptr [rax]; lea rax, [rip - 0xaab]; call rax; 
0x000000000000ed03: mov eax, dword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0x12540; add rsp, 0x28; ret; 
0x000000000000f14f: mov eax, dword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0x126b0; add rsp, 0x28; ret; 
0x000000000001e1c7: mov eax, dword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call qword ptr [rip + 0x5bcb0]; add rsp, 0x28; ret; 
0x000000000001ab4f: mov eax, dword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call qword ptr [rip + 0x5f218]; add rsp, 0x28; ret; 
0x000000000001e1a0: mov eax, dword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; lea rax, [rip - 0xac2]; call rax; 
0x0000000000015cb0: mov eax, dword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x60; ret; 
0x000000000000e6c0: mov eax, dword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x70; ret; 
0x000000000000e645: mov eax, dword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x78; ret; 
0x000000000001376e: mov eax, dword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x000000000003a607: mov eax, dword ptr [rsp + 8]; movzx eax, byte ptr [rax]; lea rcx, [rip + 0x275ff]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c8dd: mov eax, dword ptr [rsp]; add rsp, 0x10; ret; 
0x000000000001193c: mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001e368: mov eax, dword ptr [rsp]; add rsp, 0x20; ret; 
0x000000000001a964: mov eax, dword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000001d272: mov eax, dword ptr [rsp]; add rsp, 0x30; ret; 
0x000000000001bf45: mov eax, dword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000013cc5: mov eax, dword ptr [rsp]; add rsp, 0x68; ret; 
0x000000000001ba79: mov eax, dword ptr [rsp]; lea rcx, [rip + 0x450a5]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb2f: mov eax, dword ptr [rsp]; mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001c04f: mov eax, dword ptr [rsp]; mov dword ptr [rsp + 8], eax; mov eax, dword ptr [rsp + 8]; add rsp, 0xc; ret; 
0x000000000002a62d: mov eax, dword ptr [rsp]; mov ecx, dword ptr [rsp + 3]; mov dword ptr [rdi + 9], eax; mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x000000000001242b: mov eax, dword ptr [rsp]; mov qword ptr [rdi + 8], rax; mov qword ptr [rdi], rcx; add rsp, 0x48; ret; 
0x000000000001a691: mov eax, dword ptr [rsp]; mov qword ptr [rsp + 0x18], rax; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x000000000000fbbf: mov eax, dword ptr [rsp]; mov qword ptr [rsp + 0x30], rax; add rsp, 0x38; ret; 
0x00000000000196f5: mov eax, dword ptr [rsp]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000002aa68: mov eax, dword ptr [rsp]; mov rcx, qword ptr [rsp + 7]; mov qword ptr [rdi + 1], rax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x00000000000124f6: mov eax, dword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001e5b2: mov eax, dword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000013a28: mov eax, dword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000164d8: mov eax, dword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000bfd3: mov eax, dword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000000c476: mov eax, dword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x40; ret; 
0x0000000000015f34: mov eax, dword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; mov qword ptr [rsp + 0x28], rax; mov qword ptr [rsp + 0x30], rdx; add rsp, 0x38; ret; 
0x00000000000132d0: mov eax, dword ptr [rsp]; pop rcx; ret; 
0x000000000000afdf: mov eax, eax; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000005de4d: mov eax, eax; ret; 
0x000000000001f04b: mov eax, ebp; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000003c93f: mov eax, ebp; lea r14, [r13 - 1]; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000005a7cf: mov eax, ebx; add rsp, 0x10; pop rbx; pop r14; pop r15; ret; 
0x00000000000368f5: mov eax, ebx; add rsp, 0x1b0; pop rbx; ret; 
0x000000000003960b: mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x000000000005dfa3: mov eax, ebx; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000005351a: mov eax, ebx; add rsp, 0x40; pop rbx; ret; 
0x000000000003cd0e: mov eax, ebx; add rsp, 0x50; pop rbx; ret; 
0x000000000004087d: mov eax, ebx; add rsp, 0x70; pop rbx; ret; 
0x000000000003751d: mov eax, ebx; add rsp, 0xd0; pop rbx; pop r14; pop r15; ret; 
0x000000000003702f: mov eax, ebx; add rsp, 0xe0; pop rbx; pop r14; pop r15; ret; 
0x000000000004aa5b: mov eax, ebx; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000036dbf: mov eax, ebx; and eax, 3; lea rcx, [rip + 0x2acad]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003cfcf: mov eax, ebx; lea r14, [rbx - 1]; add rbx, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000000a2ca: mov eax, ebx; mov rdx, r14; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004a8d9: mov eax, ebx; mov rdx, r14; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000005f28c: mov eax, ebx; mov rdx, rsi; ret; 
0x00000000000378a1: mov eax, ebx; pop rbx; pop r14; pop r15; ret; 
0x00000000000409d6: mov eax, ebx; pop rbx; ret; 
0x000000000002aab9: mov eax, ecx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000005f0cd: mov eax, ecx; and al, 1; pop rcx; ret; 
0x000000000000f089: mov eax, edi; add rax, 0x10; mov qword ptr [rsp + 0x20], rax; lea rax, [rip + 0xb9f5]; call rax; 
0x000000000000f04b: mov eax, edi; add rax, 0x10; mov qword ptr [rsp + 0x20], rax; lea rax, [rip + 0xba33]; call rax; 
0x000000000003e477: mov eax, edi; add rsp, 0x2e0; pop rbx; pop r14; pop r15; ret; 
0x000000000004caed: mov eax, edi; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000422cc: mov eax, edi; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x00000000000370b2: mov eax, edi; and eax, 3; lea rcx, [rip + 0x2a9ca]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000368ad: mov eax, edi; and eax, 3; lea rcx, [rip + 0x2b1af]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003687f: mov eax, edi; and eax, 3; lea rcx, [rip + 0x2b1dd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000039b87: mov eax, edi; cmp byte ptr [rax], cl; sete al; pop rcx; ret; 
0x000000000005f1f8: mov eax, edi; div r8; mov r10, rax; mov rax, r10; mov rdx, r11; ret; 
0x000000000003cd81: mov eax, edi; lea rdx, [rip + 0x3a7f6]; ret; 
0x000000000005ba3f: mov eax, edi; lea rdx, [rip + 0x98c8]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000005aa01: mov eax, edi; lea rdx, [rip - 0x325a]; ret; 
0x0000000000016522: mov eax, edi; mov byte ptr [rdi], 2; pop rcx; ret; 
0x0000000000016512: mov eax, edi; mov byte ptr [rdi], 3; pop rcx; ret; 
0x0000000000017f31: mov eax, edi; mov dword ptr [rdi], 0; mov dword ptr [rdi + 4], 0; mov dword ptr [rdi + 8], 0; mov dword ptr [rdi + 0xc], 0; ret; 
0x0000000000019ae9: mov eax, edi; mov qword ptr [rsp + 8], rax; lea rax, [rip + 0x3fee9]; call rax; 
0x000000000001c1f2: mov eax, edi; mov qword ptr [rsp], rax; call qword ptr [rip + 0x5d3f2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001ad42: mov eax, edi; mov qword ptr [rsp], rax; call qword ptr [rip + 0x5f1c2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000018cf2: mov eax, edi; mov qword ptr [rsp], rax; call qword ptr [rip + 0x60fa2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000016e02: mov eax, edi; mov qword ptr [rsp], rax; call qword ptr [rip + 0x629aa]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001dab5: mov eax, edi; mov qword ptr [rsp], rax; mov qword ptr [rsp + 8], rax; add rsp, 0x10; ret; 
0x00000000000100b8: mov eax, edi; mov qword ptr [rsp], rax; mov qword ptr [rsp + 8], rdx; add rsp, 0x10; ret; 
0x000000000001c871: mov eax, edi; mov rcx, qword ptr [rsi]; mov qword ptr [rdi], rcx; mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; ret; 
0x0000000000026632: mov eax, edi; mov rdx, r14; pop rbx; pop r14; pop r15; ret; 
0x0000000000059a14: mov eax, edi; or rax, rsi; ret; 
0x000000000004ccf0: mov eax, edi; pop rcx; ret; 
0x00000000000226da: mov eax, edi; ret; 
0x000000000005f0d4: mov eax, edx; and al, 1; pop rcx; ret; 
0x000000000005f1b3: mov eax, edx; mov rdx, r11; ret; 
0x00000000000576a0: mov eax, edx; neg rax; and rax, rcx; ret; 
0x000000000002a29c: mov eax, edx; not rax; shr rax, 0x3f; ret; 
0x0000000000037e67: mov eax, esi; add rsp, 0x10; pop rbx; pop r14; pop r15; ret; 
0x000000000003c23b: mov eax, esi; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000207db: mov eax, esi; and eax, 0xbfffffff; cmp eax, 0x80000000; je 0x207ea; ret; 
0x0000000000035f31: mov eax, esi; lea rax, [r14 - 0x20]; pop rbx; pop r14; pop r15; ret; 
0x000000000004037b: mov eax, esi; lea rcx, [rip + 0x21908]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000402f9: mov eax, esi; mov rdx, rbx; add rsp, 0x88; pop rbx; pop r14; ret; 
0x0000000000057f7e: mov eax, esi; pop rbx; pop r14; pop r15; ret; 
0x000000000004d401: mov eax, esi; pop rcx; ret; 
0x000000000001b963: mov eax, esp; mov dword ptr [rax], 0; call 0x1b1d0; add rsp, 0x38; ret; 
0x000000000005bff7: mov ebp, 0x110001; jmp rcx; 
0x00000000000124af: mov ebp, 0x48ffffca; add esp, 0x18; ret; 
0x00000000000124cf: mov ebp, 0x48ffffcf; add esp, 0x18; ret; 
0x00000000000136af: mov ebp, 0x48fffffc; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000001e2c7: mov ebp, 0x580005b7; ret; 
0x000000000001a59f: mov ebp, 0xffffeea; or ebp, ebx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; ret; 
0x0000000000059bb6: mov ebp, dword ptr [rdi]; mov rax, qword ptr [r15 + 8]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x00000000000426c9: mov ebp, dword ptr [rsp + 0x40]; mov rdi, rbp; xor esi, esi; mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x000000000005b63b: mov ebp, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000005bd92: mov ebp, eax; call rax; 
0x0000000000037b69: mov ebp, ebx; and ebp, 3; movsxd rax, dword ptr [r12 + rbp*4]; add rax, r12; jmp rax; 
0x00000000000466b7: mov ebp, ecx; call rcx; 
0x000000000005c044: mov ebp, edx; jmp rax; 
0x000000000005b808: mov ebp, edx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000003934e: mov ebp, esi; and ebp, 3; lea rcx, [rip + 0x287f2]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x000000000003934d: mov ebp, r14d; and ebp, 3; lea rcx, [rip + 0x287f2]; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x000000000000e247: mov ebx, 0x1240006; movzx eax, al; add rsp, 0x48; ret; 
0x0000000000016671: mov ebx, 0x48000037; lea edi, [rsp + 0x58]; call rax; 
0x0000000000056a89: mov ebx, 0x48000233; add esp, 0x48; ret; 
0x0000000000022989: mov ebx, 0x48000574; add esp, 0x48; ret; 
0x000000000000f12d: mov ebx, 0x48509066; mov dword ptr [rsp], edi; call 0xeca0; pop rax; ret; 
0x000000000003e523: mov ebx, 0x8948fffc; ret; 
0x000000000001ddec: mov ebx, 0x8b480005; and al, 0x10; add rsp, 0x68; ret; 
0x000000000003e60f: mov ebx, 0x8d480003; adc eax, 0x3bb07; lea rax, [rip + 0x3bb09]; pop rcx; ret; 
0x000000000003e616: mov ebx, 0x8d480003; add eax, 0x3bb09; pop rcx; ret; 
0x0000000000054d36: mov ebx, 0xb70f0b01; ret; 
0x000000000005a25a: mov ebx, 0xba0000b4; add al, byte ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000004a809: mov ebx, dword ptr [rdi]; mov rdi, qword ptr [rbx + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000003e412: mov ebx, dword ptr [rip + 0x3b5c0]; mov edx, 0x90; call rbx; 
0x0000000000040878: mov ebx, dword ptr [rsp + 0x10]; mov rax, rbx; add rsp, 0x70; pop rbx; ret; 
0x0000000000035c2d: mov ebx, eax; dec qword ptr [rax - 8]; mov rdi, r14; call qword ptr [rbp]; 
0x000000000003c4e8: mov ebx, eax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000002c110: mov ebx, edi; add dword ptr [rax], eax; add byte ptr [rcx + 0x39], cl; ret; 
0x000000000005a412: mov ebx, edi; call 0x5a2f0; mov rax, rbx; pop rbx; ret; 
0x0000000000057fa2: mov ebx, edi; dec rdx; call qword ptr [rip + 0x21bf3]; mov rax, rbx; pop rbx; ret; 
0x0000000000040379: mov ebx, edi; mov eax, esi; lea rcx, [rip + 0x21908]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000005b638: mov ebx, edi; mov r13, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a7a5: mov ebx, edi; mov rdi, qword ptr [rdi + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000005b745: mov ebx, edi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000001f755: mov ebx, edi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax]; 
0x000000000005b8d8: mov ebx, edi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x9d67]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b5f8: mov ebx, edi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000005f2c8: mov ebx, edx; mov rax, r11; mov rdx, rsi; ret; 
0x000000000005474f: mov ecx, 0x8d480001; adc eax, 0x1054b; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000014d21: mov ecx, 0x8d480004; adc eax, 0x613c5; lea rax, [rip - 0x96c2]; mov esi, 0x49; call rax; 
0x00000000000393d0: mov ecx, 0xa74fffd; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000002464b: mov ecx, 0xf000552; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000001b922: mov ecx, 1; call 0x1ae10; add rsp, 0x18; ret; 
0x000000000001da52: mov ecx, 1; call 0x1d330; add rsp, 0x18; ret; 
0x000000000000e530: mov ecx, dword ptr [rax + 0x10]; add rcx, 1; mov qword ptr [rax + 0x10], rcx; add rsp, 0xc8; ret; 
0x000000000001366b: mov ecx, dword ptr [rax + 0x10]; call 0x13370; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x0000000000050101: mov ecx, dword ptr [rax + rax]; add byte ptr [rax + rax*8 - 0xb7eb8b], al; ret; 
0x000000000005b578: mov ecx, dword ptr [rcx + 0x18]; mov rdi, rax; jmp rcx; 
0x000000000005ed64: mov ecx, dword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x000000000005c0d8: mov ecx, dword ptr [rcx + 0x20]; mov esi, eax; pop rax; jmp rcx; 
0x000000000005b918: mov ecx, dword ptr [rcx + 0x20]; mov rdi, rax; jmp rcx; 
0x0000000000049f54: mov ecx, dword ptr [rdi + 0x18]; mov rdi, rax; xor r8d, r8d; call qword ptr [rip + 0x2f605]; pop rbx; ret; 
0x000000000005b574: mov ecx, dword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rdi, rax; jmp rcx; 
0x000000000005b914: mov ecx, dword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov rdi, rax; jmp rcx; 
0x000000000004a909: mov ecx, dword ptr [rdi + 8]; mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x0000000000017582: mov ecx, dword ptr [rsi + 0x10]; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000017f21: mov ecx, dword ptr [rsi + 0xc]; mov dword ptr [rdi + 0xc], ecx; add rsp, 0xa8; ret; 
0x00000000000599c4: mov ecx, dword ptr [rsi + 1]; mov word ptr [rax + 6], dx; mov dword ptr [rax + 2], ecx; xor ecx, ecx; mov word ptr [rax], cx; ret; 
0x00000000000599f6: mov ecx, dword ptr [rsi + 2]; mov dword ptr [rax + 1], ecx; xor ecx, ecx; mov byte ptr [rax], cl; ret; 
0x0000000000017f1b: mov ecx, dword ptr [rsi + 8]; mov dword ptr [rdi + 8], ecx; mov ecx, dword ptr [rsi + 0xc]; mov dword ptr [rdi + 0xc], ecx; add rsp, 0xa8; ret; 
0x000000000002b9f2: mov ecx, dword ptr [rsi + 8]; mov dword ptr [rdi + 8], ecx; mov qword ptr [rdi], rax; ret; 
0x00000000000162ca: mov ecx, dword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; mov cl, byte ptr [rsi + 0x10]; mov byte ptr [rdi + 0x10], cl; ret; 
0x000000000002b9c4: mov ecx, dword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; mov qword ptr [rdi], rax; ret; 
0x000000000001757a: mov ecx, dword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsi + 0x10]; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000001c91f: mov ecx, dword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; pop rcx; ret; 
0x000000000001c87a: mov ecx, dword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; ret; 
0x000000000005ed60: mov ecx, dword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x000000000005c0d4: mov ecx, dword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov esi, eax; pop rax; jmp rcx; 
0x000000000001c919: mov ecx, dword ptr [rsi]; mov qword ptr [rdi], rcx; mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; pop rcx; ret; 
0x000000000001c874: mov ecx, dword ptr [rsi]; mov qword ptr [rdi], rcx; mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; ret; 
0x0000000000010dd8: mov ecx, dword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000001e6a6: mov ecx, dword ptr [rsp + 0x10]; mov qword ptr [rdi], rcx; mov rcx, qword ptr [rsp + 0x18]; mov qword ptr [rdi + 8], rcx; add rsp, 0x28; ret; 
0x000000000005ac32: mov ecx, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000001e12d: mov ecx, dword ptr [rsp + 0x14]; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x20]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x278; ret; 
0x0000000000059db9: mov ecx, dword ptr [rsp + 0x18]; mov byte ptr [rcx], al; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000170f4: mov ecx, dword ptr [rsp + 0x18]; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x20; ret; 
0x0000000000017144: mov ecx, dword ptr [rsp + 0x18]; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x20; ret; 
0x000000000001e6ae: mov ecx, dword ptr [rsp + 0x18]; mov qword ptr [rdi + 8], rcx; add rsp, 0x28; ret; 
0x0000000000010d28: mov ecx, dword ptr [rsp + 0x18]; mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x20]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x48; ret; 
0x000000000000f60c: mov ecx, dword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x20]; mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x70; ret; 
0x0000000000019753: mov ecx, dword ptr [rsp + 0x20]; call qword ptr [rip + 0x60373]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000119d3: mov ecx, dword ptr [rsp + 0x20]; call qword ptr [rip + 0x680f3]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x0000000000010d31: mov ecx, dword ptr [rsp + 0x20]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x48; ret; 
0x0000000000011219: mov ecx, dword ptr [rsp + 0x28]; mov qword ptr [rax + 0x10], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000001b9e3: mov ecx, dword ptr [rsp + 0x28]; mov qword ptr [rax + 8], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x00000000000170ac: mov ecx, dword ptr [rsp + 0x28]; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x38; ret; 
0x0000000000016f5c: mov ecx, dword ptr [rsp + 0x28]; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x38; ret; 
0x0000000000017ab7: mov ecx, dword ptr [rsp + 0x30]; mov qword ptr [rax + 8], rcx; mov byte ptr [rax], 1; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000017859: mov ecx, dword ptr [rsp + 0x30]; mov qword ptr [rax + 8], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000012d6d: mov ecx, dword ptr [rsp + 0x30]; mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x38]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x0000000000012d76: mov ecx, dword ptr [rsp + 0x38]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x0000000000019eff: mov ecx, dword ptr [rsp + 0x40]; lea rax, [rip - 0x3fba]; lea rdi, [rsp + 0x20]; call rax; 
0x0000000000016fd5: mov ecx, dword ptr [rsp + 0x40]; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x48; ret; 
0x000000000001dbef: mov ecx, dword ptr [rsp + 0x48]; mov qword ptr [rax + 0x18], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x118; ret; 
0x00000000000177d5: mov ecx, dword ptr [rsp + 0x50]; mov qword ptr [rax + 0x18], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x0000000000012b04: mov ecx, dword ptr [rsp + 0x50]; mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x58]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0xa0; ret; 
0x0000000000012b0d: mov ecx, dword ptr [rsp + 0x58]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0xa0; ret; 
0x0000000000017a1b: mov ecx, dword ptr [rsp + 0x68]; mov qword ptr [rax + 8], rcx; mov word ptr [rax], 3; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; ret; 
0x0000000000018ead: mov ecx, dword ptr [rsp + 0xc8]; lea rax, [rip - 0x1d5b]; call rax; 
0x000000000002a630: mov ecx, dword ptr [rsp + 3]; mov dword ptr [rdi + 9], eax; mov dword ptr [rdi + 0xc], ecx; add rsp, 0x18; ret; 
0x000000000001df97: mov ecx, dword ptr [rsp + 4]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x288; ret; 
0x000000000002aa6c: mov ecx, dword ptr [rsp + 7]; mov qword ptr [rdi + 1], rax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x0000000000016036: mov ecx, dword ptr [rsp + 8]; mov qword ptr [rdi + 8], rcx; mov cl, byte ptr [rsp + 0x10]; mov byte ptr [rdi + 0x10], cl; add rsp, 0x18; ret; 
0x0000000000010dcf: mov ecx, dword ptr [rsp + 8]; mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x0000000000017e60: mov ecx, dword ptr [rsp + 8]; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x00000000000137a7: mov ecx, eax; call 0x13340; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x00000000000137d7: mov ecx, eax; call 0x133a0; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000016f00: mov ecx, eax; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x28; ret; 
0x000000000000a8af: mov ecx, eax; movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x000000000004ac30: mov ecx, ecx; lea rdx, [rcx + rax]; add rdx, 0x20; mov eax, 1; ret; 
0x0000000000021867: mov ecx, edi; mov qword ptr [rcx], rax; movaps xmm0, xmmword ptr [rsp]; movups xmmword ptr [rcx + 8], xmm0; add rsp, 0x18; ret; 
0x000000000005cf40: mov ecx, esi; cmp rsi, rdi; jne 0x5cf30; ret; 
0x00000000000454fd: mov edi, 0x100; mov esi, 8; call rbx; 
0x000000000005bb7e: mov edi, 0x110001; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; mov esi, 0x5c; jmp rax; 
0x000000000001bd20: mov edi, 0x27; call rax; 
0x00000000000194b5: mov edi, 0x27; mov edx, 0x1b; call rax; 
0x000000000001945d: mov edi, 0x48000430; lea edi, [rsp + 0x630]; call rax; 
0x000000000001bba5: mov edi, 0x480005a7; lea eax, [rip - 0x48b0]; call rax; 
0x000000000000ee5d: mov edi, 0x48509066; mov dword ptr [rsp], edi; call 0xeb70; pop rax; ret; 
0x000000000001c8b5: mov edi, 0x48fffec7; add esp, 0x28; ret; 
0x000000000004f0e6: mov edi, 0x731af980; or dh, byte ptr [rcx]; leave; shl rax, 0x20; or rax, rcx; ret; 
0x000000000003cfb3: mov edi, 0x8548ffff; ror byte ptr [rdi], 0x84; test dword ptr [rax], 0x89480000; ret; 
0x000000000001a32e: mov edi, 0x8d480005; add eax, 0xffffccb8; call rax; 
0x000000000005d496: mov edi, 0xb0f0001; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000004a99d: mov edi, 0xf0002f4; or ecx, dword ptr [rax - 0x77]; ret; 
0x00000000000167a0: mov edi, 4; call rax; 
0x0000000000039fd4: mov edi, 6; lea rax, [rip + 0x27bec]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000001a085: mov edi, dword ptr [rax + 8]; lea rax, [rip + 0x961]; call rax; 
0x000000000003c94a: mov edi, dword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000001e325: mov edi, dword ptr [rax]; call qword ptr [rip + 0x5b0db]; add rsp, 0x28; ret; 
0x000000000001e302: mov edi, dword ptr [rax]; lea rax, [rip - 0xaab]; call rax; 
0x000000000005ef65: mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x67ae]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005dde4: mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x792f]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ddc8: mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x794c]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005b6c0: mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0xa053]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a103: mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0xb610]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000001e974: mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000005a42d: mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xb2ea]; mov edx, 1; jmp rax; 
0x000000000000ecd2: mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000ed08: mov edi, dword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0x12540; add rsp, 0x28; ret; 
0x000000000000f154: mov edi, dword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0x126b0; add rsp, 0x28; ret; 
0x000000000000e269: mov edi, dword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xbc70; pop rcx; ret; 
0x000000000001e1cc: mov edi, dword ptr [rax]; mov rsi, qword ptr [rax + 8]; call qword ptr [rip + 0x5bcb0]; add rsp, 0x28; ret; 
0x000000000001ab54: mov edi, dword ptr [rax]; mov rsi, qword ptr [rax + 8]; call qword ptr [rip + 0x5f218]; add rsp, 0x28; ret; 
0x000000000001e1a5: mov edi, dword ptr [rax]; mov rsi, qword ptr [rax + 8]; lea rax, [rip - 0xac2]; call rax; 
0x0000000000038488: mov edi, dword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000037bfb: mov edi, dword ptr [rbp]; call rbx; 
0x0000000000059f8e: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000041fca: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000005b89a: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9c6b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b87f: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9e99]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a364: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb3b5]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a336: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb3d7]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059fe8: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb720]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000059fb2: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb754]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059f9d: mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000003d0ce: mov edi, dword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000004a80c: mov edi, dword ptr [rbx + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000003befb: mov edi, dword ptr [rbx + rbp]; call rax; 
0x000000000001f3ab: mov edi, dword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000005ec3f: mov edi, dword ptr [rbx]; mov rax, qword ptr [rbx + 8]; lea rsi, [rip + 0x39e0]; mov edx, 4; call qword ptr [rax + 0x18]; 
0x00000000000582e6: mov edi, dword ptr [rbx]; mov rax, qword ptr [rbx + 8]; lea rsi, [rip + 0xd30b]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000005822d: mov edi, dword ptr [rbx]; mov rax, qword ptr [rbx + 8]; lea rsi, [rip + 0xd3c2]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000036d0b: mov edi, dword ptr [rdi + 0x10]; mov edx, 1; call qword ptr [rip + 0x42a6f]; lea rax, [rip + 0x400a0]; pop rcx; ret; 
0x000000000004ccec: mov edi, dword ptr [rdi + 0x10]; mov rax, rdi; pop rcx; ret; 
0x000000000004a7a8: mov edi, dword ptr [rdi + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x0000000000020e93: mov edi, dword ptr [rdi - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000000c0de: mov edi, dword ptr [rdi]; call 0x10d40; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000c143: mov edi, dword ptr [rdi]; call 0x10d60; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000022722: mov edi, dword ptr [rdi]; call 0x1ed20; xor eax, eax; pop rcx; ret; 
0x0000000000022732: mov edi, dword ptr [rdi]; call 0x234e0; xor eax, eax; pop rcx; ret; 
0x0000000000056a42: mov edi, dword ptr [rdi]; call 0x574b0; xor eax, eax; pop rcx; ret; 
0x000000000000ebea: mov edi, dword ptr [rdi]; call 0xec00; add rsp, 0x18; ret; 
0x000000000001c7a5: mov edi, dword ptr [rdi]; call qword ptr [rip + 0x5d063]; pop rax; ret; 
0x00000000000184b6: mov edi, dword ptr [rdi]; call qword ptr [rip + 0x61b2a]; pop rax; ret; 
0x000000000000e0cf: mov edi, dword ptr [rdi]; call qword ptr [rip + 0x6be69]; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000001e2ef: mov edi, dword ptr [rdi]; lea rax, [rip - 0xc8]; call rax; 
0x000000000005a2c3: mov edi, dword ptr [rdi]; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xb243]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a2a3: mov edi, dword ptr [rdi]; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xb476]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b640: mov edi, dword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000001f758: mov edi, dword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax]; 
0x000000000000bc3c: mov edi, dword ptr [rip + 0x6e3be]; call 0x9080; call 0xbbb0; mov byte ptr [rip + 0x6e3e5], 1; pop rbp; ret; 
0x000000000003d3eb: mov edi, dword ptr [rsi + 0x10]; mov rax, qword ptr [rsi + 0x18]; call qword ptr [rax + 0x28]; 
0x000000000005a2bf: mov edi, dword ptr [rsi + 8]; mov rdi, qword ptr [r15]; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xb243]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x00000000000393b8: mov edi, dword ptr [rsi - 1]; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x000000000005eccb: mov edi, dword ptr [rsi]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x683b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ecb1: mov edi, dword ptr [rsi]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x6a68]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df8c: mov edi, dword ptr [rsi]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x757a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df72: mov edi, dword ptr [rsi]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x77a7]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7c1: mov edi, dword ptr [rsi]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x9d45]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7a7: mov edi, dword ptr [rsi]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x9f72]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005eec9: mov edi, dword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x71ef]; mov edx, 9; call qword ptr [rax + 0x18]; 
0x000000000005df00: mov edi, dword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x81a2]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000005dd5e: mov edi, dword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x8315]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000005b8db: mov edi, dword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x9d67]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000042783: mov edi, dword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000005f121: mov edi, dword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x740d]; mov edx, 0xb; jmp rax; 
0x000000000005ec01: mov edi, dword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x74ae]; mov edx, 5; jmp rax; 
0x0000000000057e21: mov edi, dword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xd764]; mov edx, 0xe; jmp rax; 
0x000000000005b5fb: mov edi, dword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000005ed5d: mov edi, dword ptr [rsi]; mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x000000000005c0d1: mov edi, dword ptr [rsi]; mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov esi, eax; pop rax; jmp rcx; 
0x0000000000010b7c: mov edi, dword ptr [rsp + 0x10]; lea rax, [rip + 0x2e3f9]; call rax; 
0x000000000000e187: mov edi, dword ptr [rsp + 0x10]; lea rax, [rip + 0x49e4e]; lea rsi, [rsp + 0x28]; call rax; 
0x0000000000011597: mov edi, dword ptr [rsp + 0x10]; lea rax, [rip - 0x5b72]; call rax; 
0x0000000000012935: mov edi, dword ptr [rsp + 0x10]; lea rdx, [rip + 0x63658]; lea rax, [rip - 0x7227]; mov esi, 0x100; call rax; 
0x0000000000059ed7: mov edi, dword ptr [rsp + 0x10]; lea rsi, [rip + 0xb0f2]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000001a50c: mov edi, dword ptr [rsp + 0x10]; mov byte ptr [rsp + 0x47], 0; lea rax, [rip - 0xdac]; call rax; 
0x000000000005a3e9: mov edi, dword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; lea rsi, [rip + 0xb320]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a24e: mov edi, dword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; lea rsi, [rip + 0xb4bb]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059dc0: mov edi, dword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000f692: mov edi, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call 0xed30; add rsp, 0x78; ret; 
0x000000000000f712: mov edi, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call 0xeff0; add rsp, 0x78; ret; 
0x0000000000015190: mov edi, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; lea rax, [rip + 0x5b60]; call rax; 
0x00000000000183f6: mov edi, dword ptr [rsp + 0x10]; mov rsi, rax; call 0x18d10; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x48; ret; 
0x00000000000359ea: mov edi, dword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x0000000000019d92: mov edi, dword ptr [rsp + 0x148]; call 0x9060; ud2; lea rax, [rip + 0xd59]; lea rdi, [rsp + 0xb0]; call rax; 
0x0000000000019a68: mov edi, dword ptr [rsp + 0x158]; call 0x9060; ud2; lea rax, [rip + 0x1083]; lea rdi, [rsp + 0xb0]; call rax; 
0x0000000000010b8c: mov edi, dword ptr [rsp + 0x18]; call qword ptr [rip + 0x68eba]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000000e161: mov edi, dword ptr [rsp + 0x18]; lea rax, [rip + 0x100a4]; call rax; 
0x0000000000010b52: mov edi, dword ptr [rsp + 0x18]; lea rax, [rip + 0xd6b3]; call rax; 
0x000000000001a125: mov edi, dword ptr [rsp + 0x18]; lea rax, [rip - 0x3e50]; lea rsi, [rsp + 0x58]; call rax; 
0x00000000000141f5: mov edi, dword ptr [rsp + 0x18]; lea rcx, [rip + 0x61e00]; lea rax, [rip - 0x8877]; lea rdx, [rsp + 0x28]; call rax; 
0x000000000001e132: mov edi, dword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x20]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x278; ret; 
0x000000000000e3e8: mov edi, dword ptr [rsp + 0x18]; mov rsi, rax; call 0xe280; add rsp, 0x38; ret; 
0x0000000000016e59: mov edi, dword ptr [rsp + 0x18]; mov rsi, rax; call qword ptr [rip + 0x62dba]; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x000000000000e38d: mov edi, dword ptr [rsp + 0x20]; add rdx, qword ptr [rdi + 0x10]; mov qword ptr [rdi + 0x10], rdx; add rsp, 0xb8; ret; 
0x0000000000016b7f: mov edi, dword ptr [rsp + 0x20]; lea rax, [rip + 0xd6]; call rax; 
0x000000000001bb9e: mov edi, dword ptr [rsp + 0x20]; lea rsi, [rip + 0x5a7bf]; lea rax, [rip - 0x48b0]; call rax; 
0x000000000001432a: mov edi, dword ptr [rsp + 0x20]; mov edx, 0x38; call 0x9078; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x58; ret; 
0x0000000000016a72: mov edi, dword ptr [rsp + 0x28]; call qword ptr [rip + 0x63084]; add rsp, 0x148; ret; 
0x000000000001898a: mov edi, dword ptr [rsp + 0x28]; lea rax, [rip + 0x1d1b]; call rax; 
0x000000000000d4df: mov edi, dword ptr [rsp + 0x28]; lea rax, [rip + 0x2b0d6]; call rax; 
0x00000000000169df: mov edi, dword ptr [rsp + 0x28]; lea rax, [rip + 0x4096]; call rax; 
0x0000000000016988: mov edi, dword ptr [rsp + 0x28]; lea rax, [rip + 0x40ed]; call rax; 
0x000000000001c530: mov edi, dword ptr [rsp + 0x28]; lea rax, [rip - 0x10f6b]; call rax; 
0x000000000001bbc5: mov edi, dword ptr [rsp + 0x28]; lea rax, [rip - 0x5b00]; call rax; 
0x00000000000155a0: mov edi, dword ptr [rsp + 0x28]; lea rax, [rip - 0x9fdb]; call rax; 
0x000000000005a0a8: mov edi, dword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x30]; lea rsi, [rip + 0xb661]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000002d7e4: mov edi, dword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x148]; call rbx; 
0x00000000000308d9: mov edi, dword ptr [rsp + 0x38]; add rax, qword ptr [rdi + 0x60]; lea rdi, [rip + 0x30f64]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000000edd8: mov edi, dword ptr [rsp + 0x38]; call 0x9060; ud2; lea rax, [rip - 0x364a]; call rax; 
0x000000000000f0a0: mov edi, dword ptr [rsp + 0x38]; call 0x9060; ud2; lea rax, [rip - 0x3912]; call rax; 
0x00000000000187bc: mov edi, dword ptr [rsp + 0x40]; lea rax, [rip + 0x1fa9]; call rax; 
0x000000000001bb67: mov edi, dword ptr [rsp + 0x44]; mov rax, qword ptr [rip + 0x5db9e]; call rax; 
0x000000000001c9b3: mov edi, dword ptr [rsp + 0x48]; mov qword ptr [rsp + 0xa8], rdi; lea rax, [rip - 0x786]; xor esi, esi; call rax; 
0x000000000001cd1d: mov edi, dword ptr [rsp + 0x50]; lea rax, [rip + 0x58]; call rax; 
0x000000000001db79: mov edi, dword ptr [rsp + 0x58]; lea rax, [rip + 0x3be8c]; call rax; 
0x000000000001ccc2: mov edi, dword ptr [rsp + 0x60]; lea rax, [rip + 0x583]; call rax; 
0x0000000000047474: mov edi, dword ptr [rsp + 0x80]; lea rsi, [rsp + 0x430]; mov rax, qword ptr [rsp + 0xb0]; call qword ptr [rax + 0x20]; 
0x000000000001362c: mov edi, dword ptr [rsp + 0x90]; call 0x124c0; add rsp, 0x98; ret; 
0x000000000001a3b7: mov edi, dword ptr [rsp + 0xa0]; call 0x9060; ud2; lea rax, [rip + 0x8c4]; lea rdi, [rsp + 0x18]; call rax; 
0x000000000000ea0e: mov edi, dword ptr [rsp + 0xf0]; mov rsi, qword ptr [rsp + 0xf8]; lea r8, [rip + 0x6746c]; call 0x11490; add rsp, 0x1c8; ret; 
0x000000000001bcdb: mov edi, dword ptr [rsp + 0xf8]; call 0x9060; ud2; lea rax, [rip + 0x2520]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000000ef2e: mov edi, dword ptr [rsp + 8]; add rdi, 0x18; call qword ptr [rip + 0x6ae6c]; add rsp, 0x28; ret; 
0x000000000000ef0a: mov edi, dword ptr [rsp + 8]; add rdi, 0x18; lea rax, [rip + 0xf327]; call rax; 
0x000000000000f2f5: mov edi, dword ptr [rsp + 8]; add rdi, 0x20; lea rax, [rip + 0xb90c]; call rax; 
0x000000000000f2d1: mov edi, dword ptr [rsp + 8]; add rdi, 0x20; lea rax, [rip + 0xb930]; call rax; 
0x000000000000f3f8: mov edi, dword ptr [rsp + 8]; add rdi, 0xa8; call 0xf580; add rsp, 0x28; ret; 
0x000000000000f208: mov edi, dword ptr [rsp + 8]; add rdi, 4; call qword ptr [rip + 0x6a3ca]; add rsp, 0x18; ret; 
0x000000000001e167: mov edi, dword ptr [rsp + 8]; add rdi, 8; call qword ptr [rip + 0x5b5e3]; add rsp, 0x18; ret; 
0x000000000001a9d1: mov edi, dword ptr [rsp + 8]; add rdi, 8; call qword ptr [rip + 0x5f141]; add rsp, 0x18; ret; 
0x000000000000eea2: mov edi, dword ptr [rsp + 8]; call 0xeed0; add rsp, 0x28; ret; 
0x000000000000f1a2: mov edi, dword ptr [rsp + 8]; call 0xf1e0; add rsp, 0x28; ret; 
0x000000000000f452: mov edi, dword ptr [rsp + 8]; call 0xf4d0; add rsp, 0x28; ret; 
0x000000000001e27a: mov edi, dword ptr [rsp + 8]; call qword ptr [rip + 0x5bd2c]; add rsp, 0x28; ret; 
0x000000000001abaa: mov edi, dword ptr [rsp + 8]; call qword ptr [rip + 0x5f2dc]; add rsp, 0x28; ret; 
0x000000000001aac6: mov edi, dword ptr [rsp + 8]; call qword ptr [rip + 0x5f460]; add rsp, 0x28; ret; 
0x000000000000f565: mov edi, dword ptr [rsp + 8]; call qword ptr [rip + 0x6a5b1]; add rsp, 0x18; ret; 
0x000000000000ec85: mov edi, dword ptr [rsp + 8]; call qword ptr [rip + 0x6ae91]; add rsp, 0x18; ret; 
0x0000000000010b05: mov edi, dword ptr [rsp + 8]; lea rax, [rip + 0x2e470]; call rax; 
0x000000000001bdc6: mov edi, dword ptr [rsp + 8]; lea rax, [rip + 0x3c11f]; call rax; 
0x000000000001e25a: mov edi, dword ptr [rsp + 8]; lea rax, [rip + 0x5b]; call rax; 
0x000000000001aaa6: mov edi, dword ptr [rsp + 8]; lea rax, [rip + 0x8f]; call rax; 
0x000000000001ab8a: mov edi, dword ptr [rsp + 8]; lea rax, [rip + 0xbb]; call rax; 
0x0000000000019f49: mov edi, dword ptr [rsp + 8]; lea rax, [rip - 0x3a34]; call rax; 
0x00000000000114e9: mov edi, dword ptr [rsp + 8]; lea rax, [rip - 0x5ab4]; call rax; 
0x00000000000128fb: mov edi, dword ptr [rsp + 8]; lea rdx, [rip + 0x6367a]; lea rax, [rip - 0x71ed]; mov esi, 0x100; call rax; 
0x000000000001629d: mov edi, dword ptr [rsp + 8]; lea rsi, [rip + 0x5fe88]; lea rax, [rip - 0xacbf]; call rax; 
0x000000000000e8fc: mov edi, dword ptr [rsp + 8]; lea rsi, [rip + 0x675d1]; lea rax, [rip - 0x331e]; call rax; 
0x000000000000c59d: mov edi, dword ptr [rsp + 8]; lea rsi, [rip + 0x69588]; lea rax, [rip - 0xfbf]; call rax; 
0x000000000001df9c: mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x288; ret; 
0x000000000005abdb: mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000005aac9: mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000005ac2d: mov edi, dword ptr [rsp + 8]; mov rcx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000001d316: mov edi, dword ptr [rsp + 8]; mov rsi, qword ptr [rsp + 0x10]; lea rax, [rip - 0x11d56]; call rax; 
0x000000000001adf6: mov edi, dword ptr [rsp + 8]; mov rsi, qword ptr [rsp + 0x10]; lea rax, [rip - 0xf836]; call rax; 
0x000000000002f215: mov edi, dword ptr [rsp + 8]; mov rsi, qword ptr [rsp + 0x570]; call rbx; 
0x0000000000013d84: mov edi, dword ptr [rsp + 8]; mov rsi, rax; call 0x13ba0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x000000000003b451: mov edi, dword ptr [rsp - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x0000000000019b1b: mov edi, dword ptr [rsp]; call qword ptr [rip + 0x5fe24]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000389b9: mov edi, dword ptr [rsp]; call rbx; 
0x0000000000019afc: mov edi, dword ptr [rsp]; lea rax, [rip + 0x100a]; call rax; 
0x0000000000016dc9: mov edi, dword ptr [rsp]; lea rsi, [rsp + 0x10]; call qword ptr [rip + 0x62949]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000019797: mov edi, dword ptr [rsp]; lea rsi, [rsp + 0x18]; call qword ptr [rip + 0x5fceb]; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x000000000005a18e: mov edi, dword ptr [rsp]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x000000000005a1b3: mov edi, dword ptr [rsp]; mov rax, qword ptr [r12 + 8]; lea rsi, [rip + 0xb561]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000004a90d: mov edi, eax; call qword ptr [rcx + 0x18]; 
0x000000000003c4eb: mov edi, eax; call qword ptr [rdx + 0x18]; 
0x000000000005aa38: mov edi, eax; call qword ptr [rip + 0x1f408]; add rsp, 0x38; ret; 
0x0000000000057797: mov edi, eax; call qword ptr [rip + 0x222a1]; add rsp, 0x18; ret; 
0x000000000003dd9f: mov edi, eax; call qword ptr [rip + 0x3be49]; pop rcx; ret; 
0x000000000002b99a: mov edi, eax; call qword ptr [rip + 0x4e24e]; pop rcx; ret; 
0x000000000002b975: mov edi, eax; call qword ptr [rip + 0x4e273]; pop rcx; ret; 
0x000000000000e242: mov edi, eax; call qword ptr [rip + 0x6bb16]; and al, 1; movzx eax, al; add rsp, 0x48; ret; 
0x000000000005b57c: mov edi, eax; jmp rcx; 
0x000000000000c8e0: mov edi, eax; lea rsi, [rip + 0x69307]; call 0x14500; add rsp, 0x128; ret; 
0x000000000003c517: mov edi, eax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000005b5a8: mov edi, eax; mov rsi, rcx; call qword ptr [rip + 0x1e895]; add rsp, 0x38; ret; 
0x0000000000015cd9: mov edi, eax; mov rsi, rdx; call 0x151b0; add rsp, 0x18; ret; 
0x0000000000018c0f: mov edi, eax; mov rsi, rdx; call 0x1bd90; add rsp, 0x18; ret; 
0x0000000000012459: mov edi, eax; mov rsi, rdx; call 0xf9d0; add rsp, 0x18; ret; 
0x00000000000466a3: mov edi, eax; shl rdi, 5; mov esi, 8; mov qword ptr [rsp + 0x330], rdi; mov rbp, rcx; call rcx; 
0x0000000000049f58: mov edi, eax; xor r8d, r8d; call qword ptr [rip + 0x2f605]; pop rbx; ret; 
0x0000000000059bbd: mov edi, ebp; call qword ptr [rax + 0x18]; 
0x0000000000037c0b: mov edi, ebp; call rbx; 
0x000000000005b948: mov edi, ebp; mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000005adfa: mov edi, ebp; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x00000000000426da: mov edi, ebp; mov esi, 1; xor edx, edx; call rbx; 
0x000000000005bcd4: mov edi, ebp; mov rdx, r9; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x000000000005b065: mov edi, ebp; mov rsi, qword ptr [rsp + 0x10]; mov rdx, r15; call qword ptr [rbx + 0x18]; 
0x0000000000032fb9: mov edi, ebp; mov rsi, qword ptr [rsp + 0x198]; call rbx; 
0x0000000000045b20: mov edi, ebp; mov rsi, qword ptr [rsp + 0x330]; call rbx; 
0x000000000005bb1b: mov edi, ebp; mov rsi, r15; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x00000000000426ce: mov edi, ebp; xor esi, esi; mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x000000000005815a: mov edi, ebx; call qword ptr [rip + 0x21d6e]; add rsp, 0xa0; pop rbx; ret; 
0x0000000000035e4e: mov edi, ebx; call qword ptr [rip + 0x43f3a]; add rsp, 0x10; pop rbx; ret; 
0x00000000000422ca: mov edi, ebx; mov eax, edi; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000005bd8a: mov edi, ebx; mov esi, 0x27; mov r13, rax; call rax; 
0x000000000000c660: mov edi, ecx; call rax; 
0x000000000005b73f: mov edi, ecx; mov r12, rdx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000003e427: mov edi, edi; add rdi, 8; lea rsi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x000000000005858f: mov edi, edi; call qword ptr [rbx + 0x18]; 
0x000000000003c50e: mov edi, edi; call qword ptr [rip + 0x3d232]; mov r15, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000003c4df: mov edi, edi; call qword ptr [rip + 0x3d261]; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000003cf3f: mov edi, edi; call rax; 
0x000000000002d7d3: mov edi, edi; lea rbx, [rip - 0x18a7c]; call rbx; 
0x0000000000032fa8: mov edi, edi; lea rbx, [rip - 0x1e251]; call rbx; 
0x00000000000454d6: mov edi, edi; lea rbx, [rip - 0x3078f]; call rbx; 
0x0000000000046d32: mov edi, edi; lea rbx, [rip - 0x31fdb]; call rbx; 
0x000000000005ae76: mov edi, edi; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000005a095: mov edi, edi; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a806: mov edi, edi; mov rbx, qword ptr [rdi]; mov rdi, qword ptr [rbx + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000005b08d: mov edi, edi; mov rsi, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x0000000000059fd1: mov edi, edi; mov rsi, rbp; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000035626: mov edi, edi; xor edx, edx; call rbp; cmp eax, -1; jne 0x356f8; call rbx; 
0x000000000005ebdf: mov edi, edx; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1a8ea]; add rsp, 0x28; ret; 
0x000000000005eaaf: mov edi, edx; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1aa1a]; add rsp, 0x28; ret; 
0x000000000005e986: mov edi, edx; xor ecx, ecx; call qword ptr [rip + 0x1ab48]; add rsp, 0x30; pop rbx; ret; 
0x0000000000035c37: mov edi, esi; call qword ptr [rbp]; 
0x0000000000053733: mov edi, esi; call qword ptr [rip + 0x25c75]; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x000000000003d0ae: mov edi, esi; call qword ptr [rip + 0x3c6d2]; call qword ptr [rip + 0x3c32c]; ud2; mov rdi, r15; call rax; 
0x000000000003b351: mov edi, esi; call rax; 
0x0000000000041de7: mov edi, esi; call rbx; 
0x0000000000045b0f: mov edi, esi; lea rbx, [rip - 0x30db8]; call rbx; 
0x000000000005ee7f: mov edi, esi; mov esi, 1; call qword ptr [rip + 0x1a64c]; add rsp, 0x88; ret; 
0x000000000005e659: mov edi, esi; mov esi, 1; call qword ptr [rip + 0x1ae72]; add rsp, 0x88; ret; 
0x000000000005e424: mov edi, esi; mov esi, 1; call qword ptr [rip + 0x1b0a7]; add rsp, 0x88; ret; 
0x000000000005e2f9: mov edi, esi; mov esi, 1; call qword ptr [rip + 0x1b1d2]; add rsp, 0x88; ret; 
0x000000000005e259: mov edi, esi; mov esi, 1; call qword ptr [rip + 0x1b272]; add rsp, 0x88; ret; 
0x000000000005e1c6: mov edi, esi; mov esi, 1; call qword ptr [rip + 0x1b305]; add rsp, 0x88; ret; 
0x000000000005e136: mov edi, esi; mov esi, 1; call qword ptr [rip + 0x1b395]; add rsp, 0x88; ret; 
0x000000000005e0a4: mov edi, esi; mov esi, 1; call qword ptr [rip + 0x1b427]; add rsp, 0x88; ret; 
0x000000000005e014: mov edi, esi; mov esi, 1; call qword ptr [rip + 0x1b4b7]; add rsp, 0x88; ret; 
0x000000000005e848: mov edi, esi; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1ac81]; add rsp, 0x28; ret; 
0x000000000005e75b: mov edi, esi; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1ad6e]; add rsp, 0x28; ret; 
0x000000000005e6ad: mov edi, esi; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1ae1c]; add rsp, 0x88; ret; 
0x000000000005e478: mov edi, esi; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1b051]; add rsp, 0x88; ret; 
0x000000000005c189: mov edi, esi; mov rsi, rax; call qword ptr [rip + 0x1dd3c]; pop rcx; ret; 
0x000000000001e3b4: mov edi, esp; call 0x1e3c0; add rsp, 0x58; ret; 
0x0000000000036919: mov edi, esp; call 0x20db0; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x0000000000037da6: mov edi, esp; call qword ptr [rip + 0x41a4a]; pop rcx; ret; 
0x000000000001d22d: mov edi, esp; call qword ptr [rip + 0x5c4ab]; mov rdi, rsp; call qword ptr [rip + 0x5cd82]; add rsp, 0x18; ret; 
0x000000000001d236: mov edi, esp; call qword ptr [rip + 0x5cd82]; add rsp, 0x18; ret; 
0x000000000003886b: mov edi, esp; call rbx; 
0x000000000005bbaa: mov edi, esp; jmp rax; 
0x000000000002f204: mov edi, esp; lea rbx, [rip - 0x1a4ad]; call rbx; 
0x0000000000041de6: mov edi, r14d; call rbx; 
0x000000000003dd99: mov edx, 0x10; mov rdi, rax; call qword ptr [rip + 0x3be49]; pop rcx; ret; 
0x000000000005df0d: mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x00000000000194ba: mov edx, 0x1b; call rax; 
0x000000000005dc78: mov edx, 0x28; mov r8d, 0x11f; call 0x5db10; pop rcx; ret; 
0x000000000005dcaf: mov edx, 0x2c; mov r8d, 0xc4; call 0x5db10; pop rcx; ret; 
0x0000000000012b78: mov edx, 0x30; call 0x9078; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x000000000001432e: mov edx, 0x38; call 0x9078; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x58; ret; 
0x0000000000014562: mov edx, 0x4800009c; lea edi, [rsp + 0x18]; call rax; 
0x0000000000016e62: mov edx, 0x4800062d; mov eax, dword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x0000000000010b92: mov edx, 0x4800068e; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000001c785: mov edx, 0x80; call 0x9070; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000019005: mov edx, 0x88; call 0x9078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x278; ret; 
0x0000000000014c2a: mov edx, 0x8d480004; adc eax, 0x614bc; lea rax, [rip - 0x95cb]; mov esi, 0x49; call rax; 
0x000000000003e418: mov edx, 0x90; call rbx; 
0x000000000003e435: mov edx, 0xa8; call rbx; 
0x000000000005f132: mov edx, 0xb; jmp rax; 
0x0000000000010c3a: mov edx, 0xd0; call 0x9078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x00000000000090f3: mov edx, 0xd366fffe; ret 0x2166; 
0x000000000005dd6b: mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000002fc7e: mov edx, 0xe8; add byte ptr [rdi], cl; xchg eax, ebp; ret 0x8366; 
0x0000000000057e32: mov edx, 0xe; jmp rax; 
0x000000000004096a: mov edx, 0xf00038d; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000000d4d4: mov edx, 1; call 0xc4b0; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x2b0d6]; call rax; 
0x000000000005a110: mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ddf1: mov edx, 1; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000005a110: mov edx, 1; call qword ptr [rax + 0x18]; mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x0000000000036d0e: mov edx, 1; call qword ptr [rip + 0x42a6f]; lea rax, [rip + 0x400a0]; pop rcx; ret; 
0x000000000005a43e: mov edx, 1; jmp rax; 
0x0000000000022839: mov edx, 1; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ec56: mov edx, 1; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x000000000005823a: mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005ddd5: mov edx, 2; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000001ee77: mov edx, 2; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ec87: mov edx, 2; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x0000000000058589: mov edx, 2; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x000000000002b994: mov edx, 2; mov rdi, rax; call qword ptr [rip + 0x4e24e]; pop rcx; ret; 
0x000000000005a185: mov edx, 2; sub rdx, rax; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x00000000000582f3: mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000001eeb3: mov edx, 3; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ecc3: mov edx, 3; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x000000000002b96f: mov edx, 3; mov rdi, rax; call qword ptr [rip + 0x4e273]; pop rcx; ret; 
0x000000000005ecfe: mov edx, 4; add rsp, 0x28; pop rbx; pop r14; jmp rax; 
0x000000000005ec4c: mov edx, 4; call qword ptr [rax + 0x18]; 
0x000000000001eef6: mov edx, 4; lea rsi, [rsp + 4]; call 0x38fd0; pop rcx; ret; 
0x000000000001ed06: mov edx, 4; lea rsi, [rsp + 4]; call 0x391a0; pop rcx; ret; 
0x000000000005ec12: mov edx, 5; jmp rax; 
0x0000000000056d5e: mov edx, 5; xor esi, esi; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x0000000000056d7a: mov edx, 6; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000003a398: mov edx, 6; movsxd rsi, dword ptr [r12 + rsi*4]; add rsi, r12; jmp rsi; 
0x000000000002d7de: mov edx, 8; mov rdi, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x148]; call rbx; 
0x0000000000038865: mov edx, 8; mov rdi, r12; call rbx; 
0x000000000002f1fe: mov edx, 8; mov rdi, r12; lea rbx, [rip - 0x1a4ad]; call rbx; 
0x0000000000032fb3: mov edx, 8; mov rdi, r13; mov rsi, qword ptr [rsp + 0x198]; call rbx; 
0x0000000000045b1a: mov edx, 8; mov rdi, r13; mov rsi, qword ptr [rsp + 0x330]; call rbx; 
0x0000000000045b09: mov edx, 8; mov rdi, r14; lea rbx, [rip - 0x30db8]; call rbx; 
0x000000000002d7cd: mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x18a7c]; call rbx; 
0x0000000000032fa2: mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x1e251]; call rbx; 
0x0000000000046d2c: mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x31fdb]; call rbx; 
0x0000000000057791: mov edx, 8; mov rdi, rax; call qword ptr [rip + 0x222a1]; add rsp, 0x18; ret; 
0x0000000000037c05: mov edx, 8; mov rdi, rbp; call rbx; 
0x000000000005eed6: mov edx, 9; call qword ptr [rax + 0x18]; 
0x00000000000389b5: mov edx, dword ptr [rax + 0x10]; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000037bf7: mov edx, dword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000005ac3b: mov edx, dword ptr [rax + rbp + 8]; call qword ptr [rcx + 0x18]; 
0x000000000001731c: mov edx, dword ptr [rcx + 0x10]; mov qword ptr [rsp + 0x38], rax; mov qword ptr [rsp + 0x40], rdx; add rsp, 0x48; ret; 
0x00000000000143e0: mov edx, dword ptr [rcx + 0x10]; mov qword ptr [rsp + 0x58], rax; mov qword ptr [rsp + 0x60], rdx; add rsp, 0x68; ret; 
0x0000000000056cc5: mov edx, dword ptr [rdi + 0x10]; ret; 
0x000000000004cce8: mov edx, dword ptr [rdi + 0x18]; mov rdi, qword ptr [rdi + 0x10]; mov rax, rdi; pop rcx; ret; 
0x000000000005d4b5: mov edx, dword ptr [rdi + 0x18]; ret; 
0x0000000000053545: mov edx, dword ptr [rdi + 0x28]; ret; 
0x000000000002a26e: mov edx, dword ptr [rdi + 8]; mov eax, 1; ret; 
0x000000000002a298: mov edx, dword ptr [rdi + 8]; mov rax, rdx; not rax; shr rax, 0x3f; ret; 
0x0000000000013784: mov edx, dword ptr [rdi + 8]; ret; 
0x000000000004b3aa: mov edx, dword ptr [rdx + rcx*8]; ret; 
0x0000000000015cb5: mov edx, dword ptr [rsp + 0x10]; add rsp, 0x60; ret; 
0x000000000000e6c5: mov edx, dword ptr [rsp + 0x10]; add rsp, 0x70; ret; 
0x000000000000e64a: mov edx, dword ptr [rsp + 0x10]; add rsp, 0x78; ret; 
0x0000000000013773: mov edx, dword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x0000000000013cbb: mov edx, dword ptr [rsp + 0x10]; call 0x12a30; mov rax, qword ptr [rsp]; add rsp, 0x68; ret; 
0x0000000000014b5d: mov edx, dword ptr [rsp + 0x10]; call 0xc300; add rsp, 0x28; ret; 
0x000000000001bd10: mov edx, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; lea rax, [rip + 0xb00]; mov edi, 0x27; call rax; 
0x000000000000d620: mov edx, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; lea rax, [rip + 0xc1d0]; lea rdi, [rsp + 0x278]; call rax; 
0x0000000000011646: mov edx, dword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x00000000000152a0: mov edx, dword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x000000000001741c: mov edx, dword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000fe41: mov edx, dword ptr [rsp + 0x18]; add rsp, 0xc0; ret; 
0x000000000001a98c: mov edx, dword ptr [rsp + 0x18]; call 0x18d10; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000bd20: mov edx, dword ptr [rsp + 0x18]; mov qword ptr [rcx], rdx; add rsp, 0x78; ret; 
0x0000000000010c17: mov edx, dword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x2e0c9]; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000019451: mov edx, dword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x430bf]; lea rdi, [rsp + 0x630]; call rax; 
0x000000000000d36c: mov edx, dword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x49e74]; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000cdae: mov edx, dword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x4a432]; lea rdi, [rsp + 0x328]; call rax; 
0x000000000001482c: mov edx, dword ptr [rsp + 0x1c]; add rsp, 0x78; ret; 
0x0000000000010fab: mov edx, dword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000000c37b: mov edx, dword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x000000000001beea: mov edx, dword ptr [rsp + 0x20]; add rsp, 0x98; ret; 
0x000000000005b095: mov edx, dword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x0000000000011475: mov edx, dword ptr [rsp + 0x28]; add rsp, 0x88; ret; 
0x000000000001da26: mov edx, dword ptr [rsp + 0x28]; call qword ptr [rip + 0x5bd58]; add rsp, 0x68; ret; 
0x000000000001b8f6: mov edx, dword ptr [rsp + 0x28]; call qword ptr [rip + 0x5de88]; add rsp, 0x68; ret; 
0x0000000000011a76: mov edx, dword ptr [rsp + 0x28]; call qword ptr [rip + 0x67d08]; add rsp, 0x68; ret; 
0x000000000001b1c2: mov edx, dword ptr [rsp + 0x30]; add rsp, 0x228; ret; 
0x00000000000196ac: mov edx, dword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x0000000000011580: mov edx, dword ptr [rsp + 0x38]; add rsp, 0xb8; ret; 
0x00000000000426d3: mov edx, dword ptr [rsp + 0x38]; call rbx; 
0x000000000001a54e: mov edx, dword ptr [rsp + 0x38]; lea rax, [rip + 0x417]; call rax; 
0x000000000000bf2e: mov edx, dword ptr [rsp + 0x38]; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xd0; ret; 
0x000000000000bcab: mov edx, dword ptr [rsp + 0x38]; mov qword ptr [rsp + 0x40], rax; mov qword ptr [rsp + 0x48], rdx; add rsp, 0x50; ret; 
0x000000000001be30: mov edx, dword ptr [rsp + 0x38]; mov qword ptr [rsp + 0x78], rax; mov qword ptr [rsp + 0x80], rdx; add rsp, 0x88; ret; 
0x0000000000019efa: mov edx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; lea rax, [rip - 0x3fba]; lea rdi, [rsp + 0x20]; call rax; 
0x000000000000fb08: mov edx, dword ptr [rsp + 0x40]; add rsp, 0x88; ret; 
0x000000000001004d: mov edx, dword ptr [rsp + 0x40]; add rsp, 0xc8; ret; 
0x000000000001201f: mov edx, dword ptr [rsp + 0x48]; add rsp, 0x248; ret; 
0x0000000000014d40: mov edx, dword ptr [rsp + 0x48]; add rsp, 0xf8; ret; 
0x000000000001e38e: mov edx, dword ptr [rsp + 0x50]; lea rax, [rip - 0x2189]; lea rdi, [rsp + 0x20]; call rax; 
0x00000000000107c1: mov edx, dword ptr [rsp + 0x58]; mov qword ptr [rcx + 0x20], rdx; add rsp, 0xb8; ret; 
0x0000000000010cc7: mov edx, dword ptr [rsp + 0x60]; mov qword ptr [rsp + 0x68], rax; mov qword ptr [rsp + 0x70], rdx; add rsp, 0x78; ret; 
0x000000000001b4f4: mov edx, dword ptr [rsp + 0x70]; add rsp, 0x2c8; ret; 
0x0000000000010ed3: mov edx, dword ptr [rsp + 0x70]; call 0xe3b0; add rsp, 0x78; ret; 
0x000000000001caef: mov edx, dword ptr [rsp + 0x70]; mov qword ptr [rsp + 0x130], rdx; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x000000000001538e: mov edx, dword ptr [rsp + 0x80]; add rsp, 0x148; ret; 
0x0000000000011853: mov edx, dword ptr [rsp + 0xa0]; add rsp, 0x158; ret; 
0x0000000000014752: mov edx, dword ptr [rsp + 0xb0]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x148; ret; 
0x00000000000124fa: mov edx, dword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001e5b6: mov edx, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000013a2c: mov edx, dword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000164dc: mov edx, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000bfd7: mov edx, dword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000000c47a: mov edx, dword ptr [rsp + 8]; add rsp, 0x40; ret; 
0x0000000000015f38: mov edx, dword ptr [rsp + 8]; mov qword ptr [rsp + 0x28], rax; mov qword ptr [rsp + 0x30], rdx; add rsp, 0x38; ret; 
0x000000000000e5ce: mov edx, dword ptr [rsp]; call 0xe1f0; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000011345: mov edx, dword ptr [rsp]; lea rdi, [rip + 0x4f1b5]; lea rax, [rip - 0x5ce6]; mov esi, 0x23; call rax; 
0x0000000000017e5c: mov edx, dword ptr [rsp]; mov rcx, qword ptr [rsp + 8]; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000000e8f4: mov edx, eax; call 0xc4b0; mov rdi, qword ptr [rsp + 8]; lea rsi, [rip + 0x675d1]; lea rax, [rip - 0x331e]; call rax; 
0x00000000000182fa: mov edx, eax; call qword ptr [rip + 0x61c4e]; xor eax, eax; add rsp, 0x18; ret; 
0x000000000005f1fe: mov edx, eax; mov rax, r10; mov rdx, r11; ret; 
0x000000000005f1c8: mov edx, eax; xor r11d, r11d; mov rax, r10; mov rdx, r11; ret; 
0x0000000000059fa8: mov edx, ebp; call qword ptr [rax + 0x18]; 
0x000000000005bff5: mov edx, ebp; mov ebp, 0x110001; jmp rcx; 
0x000000000002aefa: mov edx, ebx; add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret; 
0x00000000000402fc: mov edx, ebx; add rsp, 0x88; pop rbx; pop r14; ret; 
0x0000000000053e2c: mov edx, ebx; and r8d, 3; lea rax, [rip + 0x10df7]; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x0000000000052789: mov edx, ebx; lea rsi, [rip + 0x11e1e]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000005f1b6: mov edx, ebx; ret; 
0x000000000004d406: mov edx, ecx; add rsi, rax; mov rax, rsi; pop rcx; ret; 
0x000000000005c373: mov edx, ecx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000005b605: mov edx, ecx; call qword ptr [rax + 0x18]; 
0x000000000005bcd7: mov edx, ecx; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x000000000004aa0b: mov edx, ecx; ret; 
0x000000000005b06d: mov edx, edi; call qword ptr [rbx + 0x18]; 
0x000000000005bea3: mov edx, edi; jmp rcx; 
0x000000000004f8c7: mov edx, edi; lea rsi, [rip + 0x14a78]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000000a2cd: mov edx, esi; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004a8dc: mov edx, esi; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000056d4b: mov edx, esi; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x00000000000100b5: mov edx, esi; mov rax, rdi; mov qword ptr [rsp], rax; mov qword ptr [rsp + 8], rdx; add rsp, 0x10; ret; 
0x000000000005d4c1: mov edx, esi; mov rax, rdi; ret; 
0x0000000000026635: mov edx, esi; pop rbx; pop r14; pop r15; ret; 
0x000000000005f28f: mov edx, esi; ret; 
0x000000000005edb8: mov edx, esp; call qword ptr [rip + 0x1b088]; add rsp, 0x38; ret; 
0x000000000005aa35: mov edx, esp; mov rdi, rax; call qword ptr [rip + 0x1f408]; add rsp, 0x38; ret; 
0x000000000005b5a5: mov edx, esp; mov rdi, rax; mov rsi, rcx; call qword ptr [rip + 0x1e895]; add rsp, 0x38; ret; 
0x000000000005bea2: mov edx, r15d; jmp rcx; 
0x000000000004f8c6: mov edx, r15d; lea rsi, [rip + 0x14a78]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x0000000000018fb8: mov edx, ss; add eax, 0x58d4800; sub eax, 0x48ffff26; lea edi, [rsp + 0x28]; call rax; 
0x000000000004b3a6: mov es, word ptr [rcx]; add byte ptr [rax - 0x75], cl; adc al, 0xca; ret; 
0x0000000000020915: mov es, word ptr [rip + 0x5c415b00]; pop r13; pop r14; pop r15; ret; 
0x0000000000010b93: mov es, word ptr [rsi]; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x48; ret; 
0x000000000001290d: mov esi, 0x100; call rax; 
0x000000000000e0d4: mov esi, 0x1240006; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000038860: mov esi, 0x18; mov edx, 8; mov rdi, r12; call rbx; 
0x0000000000037c00: mov esi, 0x18; mov edx, 8; mov rdi, rbp; call rbx; 
0x00000000000113ff: mov esi, 0x19; call rax; 
0x000000000000c790: mov esi, 0x1c; call rax; 
0x000000000005b94a: mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x0000000000011356: mov esi, 0x23; call rax; 
0x000000000005bd8c: mov esi, 0x27; mov r13, rax; call rax; 
0x000000000001cbad: mov esi, 0x28; call rax; 
0x0000000000012b66: mov esi, 0x2b; call rax; 
0x0000000000017355: mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x0000000000014551: mov esi, 0x2b; lea rdx, [rsp + 0x18]; call rax; 
0x000000000005adfc: mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x000000000001ef86: mov esi, 0x480005ae; add esp, 0x48; ret; 
0x00000000000423ae: mov esi, 0x48ffff9b; cmovne ecx, eax; call rcx; 
0x0000000000013bfe: mov esi, 0x48fffffb; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x88; ret; 
0x000000000000fb29: mov esi, 0x49; call rax; 
0x000000000005bb8a: mov esi, 0x5c; jmp rax; 
0x000000000003d062: mov esi, 0x8548ffff; sal byte ptr [rsp + rcx*2 + 0x48], 0x89; ret; 
0x000000000004602c: mov esi, 0x99; or byte ptr [rdi], cl; xchg eax, esp; ret 0x8948; 
0x000000000005474b: mov esi, 0xb9660400; add dword ptr [rax], eax; lea rdx, [rip + 0x1054b]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000002759e: mov esi, 0xf000528; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000005ee81: mov esi, 1; call qword ptr [rip + 0x1a64c]; add rsp, 0x88; ret; 
0x000000000005e65b: mov esi, 1; call qword ptr [rip + 0x1ae72]; add rsp, 0x88; ret; 
0x000000000005e426: mov esi, 1; call qword ptr [rip + 0x1b0a7]; add rsp, 0x88; ret; 
0x000000000005e2fb: mov esi, 1; call qword ptr [rip + 0x1b1d2]; add rsp, 0x88; ret; 
0x000000000005e25b: mov esi, 1; call qword ptr [rip + 0x1b272]; add rsp, 0x88; ret; 
0x000000000005e1c8: mov esi, 1; call qword ptr [rip + 0x1b305]; add rsp, 0x88; ret; 
0x000000000005e138: mov esi, 1; call qword ptr [rip + 0x1b395]; add rsp, 0x88; ret; 
0x000000000005e0a6: mov esi, 1; call qword ptr [rip + 0x1b427]; add rsp, 0x88; ret; 
0x000000000005e016: mov esi, 1; call qword ptr [rip + 0x1b4b7]; add rsp, 0x88; ret; 
0x000000000005ebe1: mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1a8ea]; add rsp, 0x28; ret; 
0x000000000005eab1: mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1aa1a]; add rsp, 0x28; ret; 
0x000000000005e84a: mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1ac81]; add rsp, 0x28; ret; 
0x000000000005e75d: mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1ad6e]; add rsp, 0x28; ret; 
0x000000000005e6af: mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1ae1c]; add rsp, 0x88; ret; 
0x000000000005e47a: mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1b051]; add rsp, 0x88; ret; 
0x00000000000426dc: mov esi, 1; xor edx, edx; call rbx; 
0x0000000000045502: mov esi, 8; call rbx; 
0x00000000000466a9: mov esi, 8; mov qword ptr [rsp + 0x330], rdi; mov rbp, rcx; call rcx; 
0x00000000000454d0: mov esi, 8; mov rdi, r15; lea rbx, [rip - 0x3078f]; call rbx; 
0x000000000000ed0b: mov esi, dword ptr [rax + 8]; call 0x12540; add rsp, 0x28; ret; 
0x000000000000f157: mov esi, dword ptr [rax + 8]; call 0x126b0; add rsp, 0x28; ret; 
0x000000000000e26c: mov esi, dword ptr [rax + 8]; call 0xbc70; pop rcx; ret; 
0x000000000001e1cf: mov esi, dword ptr [rax + 8]; call qword ptr [rip + 0x5bcb0]; add rsp, 0x28; ret; 
0x000000000001ab57: mov esi, dword ptr [rax + 8]; call qword ptr [rip + 0x5f218]; add rsp, 0x28; ret; 
0x000000000000bf58: mov esi, dword ptr [rax + 8]; call qword ptr [rip + 0x6d727]; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000001e1a8: mov esi, dword ptr [rax + 8]; lea rax, [rip - 0xac2]; call rax; 
0x000000000005ac37: mov esi, dword ptr [rax + rbp]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x0000000000041de4: mov esi, dword ptr [rax]; mov edi, r14d; call rbx; 
0x0000000000039fd1: mov esi, dword ptr [rbx + 8]; mov edi, 6; lea rax, [rip + 0x27bec]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000005abe5: mov esi, dword ptr [rbx + rsi]; call qword ptr [rax + 0x18]; 
0x000000000005aad3: mov esi, dword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x0000000000017c6c: mov esi, dword ptr [rsp + 0x10]; lea rax, [rip + 0x799]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000001d31b: mov esi, dword ptr [rsp + 0x10]; lea rax, [rip - 0x11d56]; call rax; 
0x000000000001adfb: mov esi, dword ptr [rsp + 0x10]; lea rax, [rip - 0xf836]; call rax; 
0x00000000000114e4: mov esi, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; lea rax, [rip - 0x5ab4]; call rax; 
0x000000000005b090: mov esi, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x000000000005b068: mov esi, dword ptr [rsp + 0x10]; mov rdx, r15; call qword ptr [rbx + 0x18]; 
0x000000000002d7e9: mov esi, dword ptr [rsp + 0x148]; call rbx; 
0x000000000000f697: mov esi, dword ptr [rsp + 0x18]; call 0xed30; add rsp, 0x78; ret; 
0x000000000000f717: mov esi, dword ptr [rsp + 0x18]; call 0xeff0; add rsp, 0x78; ret; 
0x0000000000015195: mov esi, dword ptr [rsp + 0x18]; lea rax, [rip + 0x5b60]; call rax; 
0x0000000000015195: mov esi, dword ptr [rsp + 0x18]; lea rax, [rip + 0x5b60]; call rax; add rsp, 0x28; ret; 
0x000000000001bd15: mov esi, dword ptr [rsp + 0x18]; lea rax, [rip + 0xb00]; mov edi, 0x27; call rax; 
0x000000000000d625: mov esi, dword ptr [rsp + 0x18]; lea rax, [rip + 0xc1d0]; lea rdi, [rsp + 0x278]; call rax; 
0x0000000000010b00: mov esi, dword ptr [rsp + 0x18]; mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x2e470]; call rax; 
0x0000000000032fbc: mov esi, dword ptr [rsp + 0x198]; call rbx; 
0x0000000000010c1c: mov esi, dword ptr [rsp + 0x20]; lea rax, [rip + 0x2e0c9]; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000019456: mov esi, dword ptr [rsp + 0x20]; lea rax, [rip + 0x430bf]; lea rdi, [rsp + 0x630]; call rax; 
0x000000000000d371: mov esi, dword ptr [rsp + 0x20]; lea rax, [rip + 0x49e74]; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000cdb3: mov esi, dword ptr [rsp + 0x20]; lea rax, [rip + 0x4a432]; lea rdi, [rsp + 0x328]; call rax; 
0x0000000000011592: mov esi, dword ptr [rsp + 0x20]; mov rdi, qword ptr [rsp + 0x10]; lea rax, [rip - 0x5b72]; call rax; 
0x0000000000018985: mov esi, dword ptr [rsp + 0x20]; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x1d1b]; call rax; 
0x000000000000d2d6: mov esi, dword ptr [rsp + 0x28]; lea rax, [rip + 0x2dbcf]; lea rdi, [rsp + 0x1c8]; call rax; 
0x000000000000cd18: mov esi, dword ptr [rsp + 0x28]; lea rax, [rip + 0x2e18d]; lea rdi, [rsp + 0x1c8]; call rax; 
0x00000000000169ca: mov esi, dword ptr [rsp + 0x28]; lea rax, [rip + 0x345b]; lea rdi, [rsp + 0x30]; call rax; 
0x0000000000016b04: mov esi, dword ptr [rsp + 0x28]; lea rax, [rip + 0x3641]; lea rdi, [rsp + 0x68]; call rax; 
0x0000000000010b77: mov esi, dword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x10]; lea rax, [rip + 0x2e3f9]; call rax; 
0x000000000001c52b: mov esi, dword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip - 0x10f6b]; call rax; 
0x000000000001559b: mov esi, dword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip - 0x9fdb]; call rax; 
0x000000000001a549: mov esi, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; lea rax, [rip + 0x417]; call rax; 
0x0000000000045b23: mov esi, dword ptr [rsp + 0x330]; call rbx; 
0x00000000000187b7: mov esi, dword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; lea rax, [rip + 0x1fa9]; call rax; 
0x000000000001e389: mov esi, dword ptr [rsp + 0x48]; mov rdx, qword ptr [rsp + 0x50]; lea rax, [rip - 0x2189]; lea rdi, [rsp + 0x20]; call rax; 
0x000000000002f21a: mov esi, dword ptr [rsp + 0x570]; call rbx; 
0x0000000000010ece: mov esi, dword ptr [rsp + 0x68]; mov rdx, qword ptr [rsp + 0x70]; call 0xe3b0; add rsp, 0x78; ret; 
0x0000000000018ae7: mov esi, dword ptr [rsp + 0xc]; lea rax, [rip + 0x2eae]; lea rdi, [rsp + 0x210]; call rax; 
0x000000000000ea16: mov esi, dword ptr [rsp + 0xf8]; lea r8, [rip + 0x6746c]; call 0x11490; add rsp, 0x1c8; ret; 
0x0000000000011961: mov esi, dword ptr [rsp + 4]; call 0x11870; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000016b7a: mov esi, dword ptr [rsp + 8]; mov rdi, qword ptr [rsp + 0x20]; lea rax, [rip + 0xd6]; call rax; 
0x000000000005bccd: mov esi, dword ptr [rsp]; add rsi, r15; mov rdi, r13; mov rdx, r9; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x0000000000013d89: mov esi, eax; call 0x13ba0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x00000000000183fb: mov esi, eax; call 0x18d10; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x48; ret; 
0x000000000000e3ed: mov esi, eax; call 0xe280; add rsp, 0x38; ret; 
0x000000000005c18c: mov esi, eax; call qword ptr [rip + 0x1dd3c]; pop rcx; ret; 
0x00000000000359e1: mov esi, eax; call qword ptr [rip + 0x44027]; mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x0000000000016e5e: mov esi, eax; call qword ptr [rip + 0x62dba]; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x000000000005ed68: mov esi, eax; jmp rcx; 
0x000000000001bb88: mov esi, eax; lea rax, [rip + 0x4098f]; lea rdi, [rsp + 0x68]; mov qword ptr [rsp + 0x20], rdi; call rax; 
0x000000000001c854: mov esi, eax; mov al, byte ptr [rsp + 0x16]; movzx edi, al; call qword ptr [rip + 0x5d3ed]; add rsp, 0x28; ret; 
0x000000000001bf6f: mov esi, eax; mov al, byte ptr [rsp + 0x16]; movzx edi, al; call qword ptr [rip + 0x5dcd2]; add rsp, 0x18; ret; 
0x000000000001bb27: mov esi, eax; mov qword ptr [rsp + 0x20], rsi; call qword ptr [rip + 0x5e324]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x000000000001dd7a: mov esi, eax; movzx eax, word ptr [rsp + 0x64]; shl rax, 0x20; or rsi, rax; lea rax, [rip - 0x1bff]; call rax; 
0x000000000001c1c3: mov esi, eax; movzx eax, word ptr [rsp + 0xc]; shl rax, 0x20; or rsi, rax; lea rax, [rip + 0x1c28]; call rax; 
0x000000000005c0db: mov esi, eax; pop rax; jmp rcx; 
0x0000000000059fd4: mov esi, ebp; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000005ae78: mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000003bff3: mov esi, ebx; dec r14; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000005b5ab: mov esi, ecx; call qword ptr [rip + 0x1e895]; add rsp, 0x38; ret; 
0x0000000000020e8d: mov esi, edi; dec r14; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000005bb1e: mov esi, edi; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x0000000000015cdc: mov esi, edx; call 0x151b0; add rsp, 0x18; ret; 
0x0000000000018c12: mov esi, edx; call 0x1bd90; add rsp, 0x18; ret; 
0x000000000001245c: mov esi, edx; call 0xf9d0; add rsp, 0x18; ret; 
0x000000000005b602: mov esi, edx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x0000000000059fa5: mov esi, esi; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000005a9b9: mov esi, esp; add dword ptr [rax], eax; add rsp, 0x48; ret; 
0x0000000000019d93: mov esp, 0x14824; add al, ch; ret 0xfef2; 
0x00000000000167bd: mov esp, 0x15824; add byte ptr [rax - 0x73], cl; add eax, 0xffffeae6; xor esi, esi; call rax; 
0x0000000000018f92: mov esp, 0x1e824; add al, ch; ret; 
0x000000000001b5c5: mov esp, 0x24024; add byte ptr [rax - 0x77], cl; mov esp, 0x24824; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000001b5cd: mov esp, 0x24824; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000002c09c: mov esp, 0x2f; lea rdx, [rip + 0x355ac]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x0000000000034648: mov esp, 0x41000007; call rdx; 
0x0000000000058088: mov esp, 0x4800021d; add esp, 0xa0; pop rbx; ret; 
0x0000000000014c30: mov esp, 0x48000614; lea eax, [rip - 0x95cb]; mov esi, 0x49; call rax; 
0x0000000000014360: mov esp, 0x4800061c; lea eax, [rip - 0x89db]; lea rdx, [rsp + 0x30]; call rax; 
0x00000000000194ea: mov esp, 0x60024; add byte ptr [rax - 0x73], cl; mov ah, 0x24; sbb byte ptr [rsi], al; add byte ptr [rax], al; call rax; 
0x0000000000034060: mov esp, 0x8024; add al, ch; xchg eax, ebp; ret 0xfffe; 
0x000000000000d0e4: mov esp, 0x8824; add bh, bh; adc eax, 0x6c960; add rsp, 0x398; ret; 
0x000000000000cb24: mov esp, 0x8824; add bh, bh; adc eax, 0x6cf20; add rsp, 0x398; ret; 
0x000000000000a4a1: mov esp, 0x8948cbeb; ret; 
0x00000000000516f1: mov esp, 0x9024; add byte ptr [rax - 0x77], cl; out 0xe8, al; int1; ret 0xffff; 
0x000000000001cd5c: mov esp, 0xa024; add al, ch; stc; ret 0xfffe; 
0x000000000001c9b9: mov esp, 0xa824; add byte ptr [rax - 0x73], cl; add eax, 0xfffff87a; xor esi, esi; call rax; 
0x000000000004308d: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x12e8; 
0x000000000004316e: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x31e8; 
0x0000000000042f5f: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x40e8; 
0x0000000000043043: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x5ce8; 
0x0000000000043225: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x7ae8; 
0x0000000000043121: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x7ee8; 
0x0000000000042f12: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x8de8; 
0x0000000000042ff6: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xa9e8; 
0x00000000000431ec: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xb3e8; 
0x00000000000430d7: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xc8e8; 
0x0000000000042ec5: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xdae8; 
0x00000000000431b3: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xece8; 
0x0000000000042fac: mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xf3e8; 
0x000000000004abc6: mov esp, 0xc9b70fc9; lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000004ac0b: mov esp, 0xc9b70fc9; lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x000000000004aade: mov esp, 0xd0b70fc0; mov eax, 1; ret; 
0x000000000004abdb: mov esp, 0xd0b70fc2; add rdx, rcx; mov eax, 1; ret; 
0x000000000004abf3: mov esp, 0xd1b70fc9; add rdx, rax; mov eax, 1; ret; 
0x0000000000038482: mov esp, ebp; dec r12; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000005b805: mov esp, ecx; mov r13, rdx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000005b635: mov esp, ecx; mov rbx, rdi; mov r13, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000005b742: mov esp, edx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x0000000000020d88: mov qword ptr [r14 + 0x10], rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029f72: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0x10; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a0a6: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0x11; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a1d1: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0x12; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a10c: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0x14; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a1b5: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0x15; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029ed3: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0x16; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029f2f: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0x17; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a195: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0x1c; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029e8a: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 0xb; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a21f: mov qword ptr [r14 + 8], rax; mov qword ptr [r14], 7; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000009c1a: mov qword ptr [r14 + 8], rdi; mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000002a026: mov qword ptr [r14 + 8], rdx; mov qword ptr [r14], 0x27; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029f0f: mov qword ptr [r14 + 8], rdx; mov qword ptr [r14], 0x2c; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a1f2: mov qword ptr [r14 + 8], rdx; mov qword ptr [r14], 0x2d; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029f76: mov qword ptr [r14], 0x10; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a0aa: mov qword ptr [r14], 0x11; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a1d5: mov qword ptr [r14], 0x12; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a110: mov qword ptr [r14], 0x14; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a1b9: mov qword ptr [r14], 0x15; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029ed7: mov qword ptr [r14], 0x16; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029f33: mov qword ptr [r14], 0x17; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a199: mov qword ptr [r14], 0x1c; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a0cd: mov qword ptr [r14], 0x20; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a156: mov qword ptr [r14], 0x21; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a179: mov qword ptr [r14], 0x22; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a005: mov qword ptr [r14], 0x23; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029fbf: mov qword ptr [r14], 0x24; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a133: mov qword ptr [r14], 0x25; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029f9c: mov qword ptr [r14], 0x26; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a02a: mov qword ptr [r14], 0x27; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a0f0: mov qword ptr [r14], 0x28; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a04d: mov qword ptr [r14], 0x29; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029fe2: mov qword ptr [r14], 0x2a; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029f56: mov qword ptr [r14], 0x2b; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029f13: mov qword ptr [r14], 0x2c; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a1f6: mov qword ptr [r14], 0x2d; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000029e8e: mov qword ptr [r14], 0xb; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a223: mov qword ptr [r14], 7; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000002a093: mov qword ptr [r14], 8; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000057f7a: mov qword ptr [r14], rax; mov rax, r14; pop rbx; pop r14; pop r15; ret; 
0x0000000000009c1e: mov qword ptr [r14], rbx; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000005de8e: mov qword ptr [r8 + 8], rax; xor eax, eax; mov byte ptr [r8], al; mov rax, r8; ret; 
0x0000000000011cae: mov qword ptr [rax + 0x10], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xb8; ret; 
0x000000000005d66a: mov qword ptr [rax + 0x10], r8; mov qword ptr [rax + 0x18], rcx; pop rbx; pop rbp; ret; 
0x000000000000e537: mov qword ptr [rax + 0x10], rcx; add rsp, 0xc8; ret; 
0x000000000001121d: mov qword ptr [rax + 0x10], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000001a200: mov qword ptr [rax + 0x10], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x000000000001dbea: mov qword ptr [rax + 0x10], rcx; mov rcx, qword ptr [rsp + 0x48]; mov qword ptr [rax + 0x18], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x118; ret; 
0x00000000000177d0: mov qword ptr [rax + 0x10], rcx; mov rcx, qword ptr [rsp + 0x50]; mov qword ptr [rax + 0x18], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x000000000001e415: mov qword ptr [rax + 0x10], rcx; movaps xmm0, xmmword ptr [rsp + 0x10]; movups xmmword ptr [rax], xmm0; lea rdx, [rip + 0x57fd0]; add rsp, 0x38; ret; 
0x000000000001a8f5: mov qword ptr [rax + 0x10], rcx; movaps xmm0, xmmword ptr [rsp + 0x10]; movups xmmword ptr [rax], xmm0; lea rdx, [rip + 0x5ba08]; add rsp, 0x38; ret; 
0x000000000001a63f: mov qword ptr [rax + 0x10], rcx; test byte ptr [rsp + 0x47], 1; jne 0x1a654; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x000000000000c2db: mov qword ptr [rax + 0x10], rcx; test byte ptr [rsp + 0x4f], 1; jne 0xc2f0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x0000000000056d37: mov qword ptr [rax + 0x10], rsi; ret; 
0x00000000000599b0: mov qword ptr [rax + 0x14], 0; mov word ptr [rax + 0x1c], dx; mov cx, 1; mov word ptr [rax], cx; ret; 
0x00000000000177d9: mov qword ptr [rax + 0x18], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x000000000001dbf3: mov qword ptr [rax + 0x18], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x118; ret; 
0x000000000005d66e: mov qword ptr [rax + 0x18], rcx; pop rbx; pop rbp; ret; 
0x000000000001a4a5: mov qword ptr [rax + 0x18], rcx; test byte ptr [rsp + 0x4f], 1; jne 0x1a4ba; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x0000000000011188: mov qword ptr [rax + 0x40], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x1b8; ret; 
0x0000000000012ea7: mov qword ptr [rax + 8], 0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x0000000000017998: mov qword ptr [rax + 8], 0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x000000000003cd53: mov qword ptr [rax + 8], r14; lea rdx, [rip + 0x3a822]; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000017abb: mov qword ptr [rax + 8], rcx; mov byte ptr [rax], 1; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x00000000000165aa: mov qword ptr [rax + 8], rcx; mov cl, byte ptr [rsp + 0x40]; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x50; ret; 
0x0000000000016357: mov qword ptr [rax + 8], rcx; mov cl, byte ptr [rsp + 0x58]; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x0000000000019f86: mov qword ptr [rax + 8], rcx; mov cl, byte ptr [rsp + 0x58]; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x88; ret; 
0x000000000001a109: mov qword ptr [rax + 8], rcx; mov cl, byte ptr [rsp + 0xa8]; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x20]; add rsp, 0xd8; ret; 
0x0000000000056d33: mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000001785d: mov qword ptr [rax + 8], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x000000000001b9e7: mov qword ptr [rax + 8], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x0000000000011214: mov qword ptr [rax + 8], rcx; mov rcx, qword ptr [rsp + 0x28]; mov qword ptr [rax + 0x10], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x0000000000017c04: mov qword ptr [rax + 8], rcx; mov word ptr [rax], 2; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000017a1f: mov qword ptr [rax + 8], rcx; mov word ptr [rax], 3; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; ret; 
0x000000000005d666: mov qword ptr [rax + 8], rdi; mov qword ptr [rax + 0x10], r8; mov qword ptr [rax + 0x18], rcx; pop rbx; pop rbp; ret; 
0x000000000001a1fc: mov qword ptr [rax + 8], rdx; mov qword ptr [rax + 0x10], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x0000000000018b67: mov qword ptr [rax], 0; lea rax, [rip + 0x209b]; lea rdi, [rsp + 0x140]; call rax; 
0x0000000000013466: mov qword ptr [rax], 0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x00000000000106ae: mov qword ptr [rax], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x000000000001395f: mov qword ptr [rax], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0x88; ret; 
0x000000000005d675: mov qword ptr [rax], 0; pop rbx; pop rbp; ret; 
0x0000000000017631: mov qword ptr [rax], 1; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x50; ret; 
0x0000000000013b84: mov qword ptr [rax], 1; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x50; ret; 
0x0000000000013556: mov qword ptr [rax], 1; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x88; ret; 
0x00000000000178f4: mov qword ptr [rax], 1; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xb8; ret; 
0x0000000000017b56: mov qword ptr [rax], 2; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000010549: mov qword ptr [rax], 2; mov rax, qword ptr [rsp + 0x40]; add rsp, 0x108; ret; 
0x000000000001b9df: mov qword ptr [rax], rcx; mov rcx, qword ptr [rsp + 0x28]; mov qword ptr [rax + 8], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x0000000000017855: mov qword ptr [rax], rcx; mov rcx, qword ptr [rsp + 0x30]; mov qword ptr [rax + 8], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x000000000005c6f8: mov qword ptr [rax], rcx; pop rbx; pop r14; pop rbp; ret; 
0x000000000004d5f8: mov qword ptr [rax], rcx; test cl, cl; je 0x4d602; mov al, 1; ret; 
0x0000000000056d30: mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x00000000000575ad: mov qword ptr [rbx + 0x10], rbp; add rsp, 0x10; pop rbx; pop r14; pop rbp; ret; 
0x0000000000040b3a: mov qword ptr [rbx + 0x10], rsi; pop rbx; pop r14; pop r15; ret; 
0x000000000004cbc0: mov qword ptr [rbx + 0x18], rsi; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000004f32e: mov qword ptr [rbx + 0x20], r14; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000003f026: mov qword ptr [rbx + 0x60], rsi; add rsp, 0x20; pop rbx; pop r14; pop r15; ret; 
0x0000000000040dfe: mov qword ptr [rbx + 0x90], rax; add rsp, 0x108; pop rbx; pop r14; ret; 
0x0000000000040e55: mov qword ptr [rbx + 8], r14; add rsp, 0x108; pop rbx; pop r14; ret; 
0x00000000000404b6: mov qword ptr [rbx + 8], rax; mov dword ptr [rbx], 1; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000003e8f4: mov qword ptr [rbx + 8], rax; mov dword ptr [rbx], 1; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000409ea: mov qword ptr [rbx + 8], rax; mov eax, 1; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x000000000003e9c4: mov qword ptr [rbx + 8], rax; mov eax, 1; mov qword ptr [rbx], rax; pop rbx; ret; 
0x00000000000409cc: mov qword ptr [rbx + 8], rax; xor eax, eax; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x000000000003e9a9: mov qword ptr [rbx + 8], rax; xor eax, eax; mov qword ptr [rbx], rax; pop rbx; ret; 
0x0000000000040394: mov qword ptr [rbx], 0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000004cc6d: mov qword ptr [rbx], 1; add rsp, 0x18; pop rbx; pop r14; ret; 
0x0000000000053522: mov qword ptr [rbx], 2; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x0000000000040c38: mov qword ptr [rbx], 3; add rsp, 0x108; pop rbx; pop r14; ret; 
0x000000000004049c: mov qword ptr [rbx], rax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000056c4f: mov qword ptr [rbx], rax; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000409d2: mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000026814: mov qword ptr [rbx], rax; pop rbx; pop r14; pop r15; ret; 
0x000000000003e9af: mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000001cafb: mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x0000000000014759: mov qword ptr [rcx + 0x10], rdx; add rsp, 0x148; ret; 
0x0000000000011334: mov qword ptr [rcx + 0x10], rsi; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xc8; ret; 
0x0000000000011338: mov qword ptr [rcx + 0x18], rdx; add rsp, 0xc8; ret; 
0x000000000000bf32: mov qword ptr [rcx + 0x18], rdx; add rsp, 0xd0; ret; 
0x00000000000107c5: mov qword ptr [rcx + 0x20], rdx; add rsp, 0xb8; ret; 
0x000000000000c565: mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0xa8; ret; 
0x000000000000c569: mov qword ptr [rcx + 0x28], rdx; add rsp, 0xa8; ret; 
0x0000000000011330: mov qword ptr [rcx + 8], rdi; mov qword ptr [rcx + 0x10], rsi; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xc8; ret; 
0x000000000000c561: mov qword ptr [rcx + 8], rdi; mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0xa8; ret; 
0x000000000001474d: mov qword ptr [rcx + 8], rdx; mov rdx, qword ptr [rsp + 0xb0]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x148; ret; 
0x000000000001132d: mov qword ptr [rcx], r8; mov qword ptr [rcx + 8], rdi; mov qword ptr [rcx + 0x10], rsi; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xc8; ret; 
0x000000000000c55e: mov qword ptr [rcx], r8; mov qword ptr [rcx + 8], rdi; mov qword ptr [rcx + 0x20], rsi; mov qword ptr [rcx + 0x28], rdx; add rsp, 0xa8; ret; 
0x0000000000021869: mov qword ptr [rcx], rax; movaps xmm0, xmmword ptr [rsp]; movups xmmword ptr [rcx + 8], xmm0; add rsp, 0x18; ret; 
0x000000000000bd24: mov qword ptr [rcx], rdx; add rsp, 0x78; ret; 
0x0000000000010f1c: mov qword ptr [rdi + 0x10], 0; add rsp, 0x38; ret; 
0x000000000005a9e5: mov qword ptr [rdi + 0x10], 0; mov qword ptr [rdi + 0x20], 0; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; ret; 
0x0000000000027fcb: mov qword ptr [rdi + 0x10], r10; add rsp, 0x20; pop rbx; pop r14; ret; 
0x000000000002a582: mov qword ptr [rdi + 0x10], rax; mov eax, 1; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x000000000001e8da: mov qword ptr [rdi + 0x10], rbx; mov qword ptr [rdi + 0x18], rsi; add rsp, 0x10; pop rbx; ret; 
0x0000000000010ddc: mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x00000000000139e6: mov qword ptr [rdi + 0x10], rcx; add rsp, 0x38; ret; 
0x0000000000010d35: mov qword ptr [rdi + 0x10], rcx; add rsp, 0x48; ret; 
0x000000000002821d: mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 0x2e; add rsp, 0x20; pop rbx; pop r14; ret; 
0x00000000000170f8: mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x20; ret; 
0x00000000000170b0: mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x38; ret; 
0x0000000000016fd9: mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x48; ret; 
0x000000000001713f: mov qword ptr [rdi + 0x10], rcx; mov rcx, qword ptr [rsp + 0x18]; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x20; ret; 
0x0000000000016f57: mov qword ptr [rdi + 0x10], rcx; mov rcx, qword ptr [rsp + 0x28]; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x38; ret; 
0x0000000000017585: mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000000e395: mov qword ptr [rdi + 0x10], rdx; add rsp, 0xb8; ret; 
0x000000000002a597: mov qword ptr [rdi + 0x10], rdx; xor eax, eax; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x00000000000163bc: mov qword ptr [rdi + 0x10], rsi; add rsp, 0x18; ret; 
0x000000000004cd49: mov qword ptr [rdi + 0x18], 0; ret; 
0x000000000004cd55: mov qword ptr [rdi + 0x18], rax; ret; 
0x0000000000017148: mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x20; ret; 
0x0000000000016f60: mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x38; ret; 
0x000000000001e8de: mov qword ptr [rdi + 0x18], rsi; add rsp, 0x10; pop rbx; ret; 
0x000000000005a9ed: mov qword ptr [rdi + 0x20], 0; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; ret; 
0x0000000000012d71: mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x38]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x0000000000012b08: mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x58]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0xa0; ret; 
0x0000000000012d7a: mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x0000000000012b11: mov qword ptr [rdi + 0x38], rcx; add rsp, 0xa0; ret; 
0x000000000002a861: mov qword ptr [rdi + 1], rax; add rsp, 0x10; ret; 
0x000000000002aa70: mov qword ptr [rdi + 1], rax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x000000000001700c: mov qword ptr [rdi + 8], 0; add rsp, 0x18; ret; 
0x000000000001714c: mov qword ptr [rdi + 8], 0; add rsp, 0x20; ret; 
0x0000000000016f0a: mov qword ptr [rdi + 8], 0; add rsp, 0x28; ret; 
0x0000000000016f64: mov qword ptr [rdi + 8], 0; add rsp, 0x38; ret; 
0x000000000004ef44: mov qword ptr [rdi + 8], 0; xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000004ef12: mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x000000000002a804: mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x000000000002a66b: mov qword ptr [rdi + 8], rax; add rsp, 0x18; ret; 
0x0000000000027fc7: mov qword ptr [rdi + 8], rax; mov qword ptr [rdi + 0x10], r10; add rsp, 0x20; pop rbx; pop r14; ret; 
0x000000000002a593: mov qword ptr [rdi + 8], rax; mov qword ptr [rdi + 0x10], rdx; xor eax, eax; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x000000000001242e: mov qword ptr [rdi + 8], rax; mov qword ptr [rdi], rcx; add rsp, 0x48; ret; 
0x000000000004efcb: mov qword ptr [rdi + 8], rax; xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000002aa74: mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x000000000001e6b2: mov qword ptr [rdi + 8], rcx; add rsp, 0x28; ret; 
0x000000000002a71d: mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000002a6bb: mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000002a9e7: mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x20; ret; 
0x00000000000162cd: mov qword ptr [rdi + 8], rcx; mov cl, byte ptr [rsi + 0x10]; mov byte ptr [rdi + 0x10], cl; ret; 
0x000000000001603a: mov qword ptr [rdi + 8], rcx; mov cl, byte ptr [rsp + 0x10]; mov byte ptr [rdi + 0x10], cl; add rsp, 0x18; ret; 
0x00000000000163b8: mov qword ptr [rdi + 8], rcx; mov qword ptr [rdi + 0x10], rsi; add rsp, 0x18; ret; 
0x000000000002b9c7: mov qword ptr [rdi + 8], rcx; mov qword ptr [rdi], rax; ret; 
0x000000000001757d: mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsi + 0x10]; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000010dd3: mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x00000000000170ef: mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x18]; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x20; ret; 
0x0000000000010d2c: mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x20]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x48; ret; 
0x00000000000170a7: mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x28]; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x38; ret; 
0x0000000000016fd0: mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x40]; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x48; ret; 
0x0000000000016eb9: mov qword ptr [rdi + 8], rcx; mov word ptr [rdi], 2; add rsp, 0x18; ret; 
0x000000000001c922: mov qword ptr [rdi + 8], rcx; pop rcx; ret; 
0x000000000001c87d: mov qword ptr [rdi + 8], rcx; ret; 
0x000000000002a829: mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000002a694: mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x0000000000013328: mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x00000000000139e2: mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x38; ret; 
0x000000000005a9f8: mov qword ptr [rdi + 8], rdx; ret; 
0x0000000000009367: mov qword ptr [rdi + rax*8 + 0x10], rcx; movaps xmm0, xmmword ptr [rsp]; movups xmmword ptr [rdi + rax*8], xmm0; add rsp, 0x20; pop rbx; ret; 
0x000000000004eec9: mov qword ptr [rdi], 0; pop rbx; ret; 
0x0000000000028221: mov qword ptr [rdi], 0x2e; add rsp, 0x20; pop rbx; pop r14; ret; 
0x00000000000170fc: mov qword ptr [rdi], 1; add rsp, 0x20; ret; 
0x00000000000170b4: mov qword ptr [rdi], 1; add rsp, 0x38; ret; 
0x0000000000016fdd: mov qword ptr [rdi], 1; add rsp, 0x48; ret; 
0x000000000003559a: mov qword ptr [rdi], 1; pop rbx; pop r14; pop rbp; ret; 
0x000000000004ef0f: mov qword ptr [rdi], r9; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x000000000002a4d2: mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x000000000002b9cb: mov qword ptr [rdi], rax; ret; 
0x000000000001ba4b: mov qword ptr [rdi], rcx; add rsp, 0x28; ret; 
0x0000000000012432: mov qword ptr [rdi], rcx; add rsp, 0x48; ret; 
0x0000000000017009: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x18; ret; 
0x0000000000016f07: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x28; ret; 
0x00000000000162c6: mov qword ptr [rdi], rcx; mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; mov cl, byte ptr [rsi + 0x10]; mov byte ptr [rdi + 0x10], cl; ret; 
0x0000000000017576: mov qword ptr [rdi], rcx; mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsi + 0x10]; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000001c91b: mov qword ptr [rdi], rcx; mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; pop rcx; ret; 
0x000000000001c876: mov qword ptr [rdi], rcx; mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; ret; 
0x000000000001e6aa: mov qword ptr [rdi], rcx; mov rcx, qword ptr [rsp + 0x18]; mov qword ptr [rdi + 8], rcx; add rsp, 0x28; ret; 
0x00000000000163b5: mov qword ptr [rdi], rdx; mov qword ptr [rdi + 8], rcx; mov qword ptr [rdi + 0x10], rsi; add rsp, 0x18; ret; 
0x0000000000013325: mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x00000000000139df: mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x38; ret; 
0x000000000005a9f5: mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000001baf3: mov qword ptr [rdi], rsi; pop rcx; ret; 
0x0000000000057ec7: mov qword ptr [rdi], rsi; ret; 
0x0000000000039650: mov qword ptr [rip + 0x40a71], rax; mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x000000000001f2b4: mov qword ptr [rsi + 0x10], rax; movups xmm0, xmmword ptr [rdi]; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000004ef40: mov qword ptr [rsi + 0x10], rcx; mov qword ptr [rdi + 8], 0; xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000001fec0: mov qword ptr [rsi + 0x10], rdi; ret; 
0x00000000000139fe: mov qword ptr [rsp + 0x10], rax; add rsp, 0x18; ret; 
0x000000000000c18f: mov qword ptr [rsp + 0x10], rax; add rsp, 0x28; ret; 
0x000000000000f61a: mov qword ptr [rsp + 0x10], rax; add rsp, 0x70; ret; 
0x0000000000019ac7: mov qword ptr [rsp + 0x10], rax; call qword ptr [rip + 0x5fdc6]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000016e87: mov qword ptr [rsp + 0x10], rax; call qword ptr [rip + 0x628fe]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000009fef: mov qword ptr [rsp + 0x10], rax; lea rdi, [rsp + 0x10]; call 0xaaa0; add rsp, 0x28; ret; 
0x0000000000009f9f: mov qword ptr [rsp + 0x10], rax; lea rdi, [rsp + 0x10]; call 0xad10; add rsp, 0x28; ret; 
0x000000000001e6d7: mov qword ptr [rsp + 0x10], rax; lea rsi, [rsp + 8]; call 0x1c870; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001bda0: mov qword ptr [rsp + 0x10], rax; mov qword ptr [rsp + 0x18], rsi; add rsp, 0x20; ret; 
0x000000000002c096: mov qword ptr [rsp + 0x10], rax; mov r12d, 0x2f; lea rdx, [rip + 0x355ac]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x0000000000012d00: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xc8; ret; 
0x000000000000fe36: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0xc0; ret; 
0x000000000000e6ba: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x70; ret; 
0x000000000000e63f: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x78; ret; 
0x0000000000013768: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x000000000000eccc: mov qword ptr [rsp + 0x10], rax; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000fbef: mov qword ptr [rsp + 0x10], rax; movzx eax, byte ptr [rsp + 7]; add rsp, 0x18; ret; 
0x00000000000393ae: mov qword ptr [rsp + 0x10], rbx; lea rbp, [r14 - 1]; mov rdi, qword ptr [r14 - 1]; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x0000000000016eb4: mov qword ptr [rsp + 0x10], rcx; mov qword ptr [rdi + 8], rcx; mov word ptr [rdi], 2; add rsp, 0x18; ret; 
0x0000000000017004: mov qword ptr [rsp + 0x10], rcx; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x18; ret; 
0x00000000000163b0: mov qword ptr [rsp + 0x10], rcx; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 8], rcx; mov qword ptr [rdi + 0x10], rsi; add rsp, 0x18; ret; 
0x0000000000013320: mov qword ptr [rsp + 0x10], rcx; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x0000000000015290: mov qword ptr [rsp + 0x10], rcx; mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x000000000000f229: mov qword ptr [rsp + 0x10], rdi; add rdi, 0x40; lea rax, [rip + 0xb857]; call rax; 
0x00000000000124a9: mov qword ptr [rsp + 0x10], rdi; call 0xef70; add rsp, 0x18; ret; 
0x00000000000124c9: mov qword ptr [rsp + 0x10], rdi; call 0xf490; add rsp, 0x18; ret; 
0x000000000000ec44: mov qword ptr [rsp + 0x10], rdi; call rdi; 
0x000000000000ec44: mov qword ptr [rsp + 0x10], rdi; call rdi; add rsp, 0x18; ret; 
0x000000000000efa9: mov qword ptr [rsp + 0x10], rdi; cmp qword ptr [rdi], 0; jne 0xefb9; add rsp, 0x18; ret; 
0x000000000000eef9: mov qword ptr [rsp + 0x10], rdi; lea rax, [rip + 0xf33b]; call rax; 
0x000000000001e249: mov qword ptr [rsp + 0x10], rdi; lea rax, [rip - 0x1aa5]; call rax; 
0x000000000001ab79: mov qword ptr [rsp + 0x10], rdi; lea rax, [rip - 0x3ec5]; call rax; 
0x00000000000118a4: mov qword ptr [rsp + 0x10], rdi; mov qword ptr [rsp + 0x18], rsi; lea rax, [rip + 0x4806b]; call rax; 
0x000000000000ebe4: mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rdi]; call 0xec00; add rsp, 0x18; ret; 
0x000000000001e2e9: mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rdi]; lea rax, [rip - 0xc8]; call rax; 
0x000000000004277d: mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000001e5cd: mov qword ptr [rsp + 0x10], rdx; add rsp, 0x18; ret; 
0x0000000000016380: mov qword ptr [rsp + 0x10], rdx; call qword ptr [rip + 0x6337d]; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000015ea0: mov qword ptr [rsp + 0x10], rdx; call qword ptr [rip + 0x63f85]; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000011930: mov qword ptr [rsp + 0x10], rdx; call qword ptr [rip + 0x67e45]; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001b91d: mov qword ptr [rsp + 0x10], rdx; mov ecx, 1; call 0x1ae10; add rsp, 0x18; ret; 
0x000000000001da4d: mov qword ptr [rsp + 0x10], rdx; mov ecx, 1; call 0x1d330; add rsp, 0x18; ret; 
0x000000000001b98d: mov qword ptr [rsp + 0x10], rdx; xor ecx, ecx; call 0x1ae10; add rsp, 0x18; ret; 
0x000000000001da7d: mov qword ptr [rsp + 0x10], rdx; xor ecx, ecx; call 0x1d330; add rsp, 0x18; ret; 
0x0000000000010fcd: mov qword ptr [rsp + 0x10], rsi; add rdi, rsi; mov qword ptr [rsp + 0x18], rdi; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x0000000000011989: mov qword ptr [rsp + 0x10], rsi; call 0x11690; add rsp, 0x18; ret; 
0x000000000001ad09: mov qword ptr [rsp + 0x10], rsi; call 0x1a870; add rsp, 0x18; ret; 
0x000000000001c959: mov qword ptr [rsp + 0x10], rsi; call 0x1e370; add rsp, 0x18; ret; 
0x000000000001bfec: mov qword ptr [rsp + 0x10], rsi; call qword ptr [rip + 0x5dd01]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000015fec: mov qword ptr [rsp + 0x10], rsi; call qword ptr [rip + 0x63ab1]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001caf3: mov qword ptr [rsp + 0x130], rdx; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x00000000000167bb: mov qword ptr [rsp + 0x158], rdi; lea rax, [rip - 0x151a]; xor esi, esi; call rax; 
0x0000000000047519: mov qword ptr [rsp + 0x178], rax; lea rsi, [rsp + 0x150]; call qword ptr [rcx + 0x20]; 
0x000000000000f11e: mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb966]; call rax; 
0x000000000000f0d9: mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb9ab]; call rax; 
0x000000000001a694: mov qword ptr [rsp + 0x18], rax; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x0000000000015295: mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x000000000005eec3: mov qword ptr [rsp + 0x18], rax; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x71ef]; mov edx, 9; call qword ptr [rax + 0x18]; 
0x000000000000f68c: mov qword ptr [rsp + 0x18], rax; mov rdi, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call 0xed30; add rsp, 0x78; ret; 
0x000000000000f70c: mov qword ptr [rsp + 0x18], rax; mov rdi, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call 0xeff0; add rsp, 0x78; ret; 
0x000000000000fe31: mov qword ptr [rsp + 0x18], rcx; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0xc0; ret; 
0x000000000001beda: mov qword ptr [rsp + 0x18], rcx; mov qword ptr [rsp + 0x20], rax; mov rax, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x98; ret; 
0x00000000000151b4: mov qword ptr [rsp + 0x18], rdi; mov qword ptr [rsp + 0x20], rsi; lea rax, [rip + 0x21cb]; call rax; 
0x000000000000f9d4: mov qword ptr [rsp + 0x18], rdi; mov qword ptr [rsp + 0x20], rsi; lea rax, [rip + 0x79ab]; call rax; 
0x000000000001e35e: mov qword ptr [rsp + 0x18], rdi; mov qword ptr [rsp], rdi; mov rax, qword ptr [rsp]; add rsp, 0x20; ret; 
0x0000000000010fd5: mov qword ptr [rsp + 0x18], rdi; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x000000000005dd58: mov qword ptr [rsp + 0x18], rdi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x8315]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000001c221: mov qword ptr [rsp + 0x18], rdx; call qword ptr [rip + 0x5d524]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000bd1a: mov qword ptr [rsp + 0x18], rdx; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rcx], rdx; add rsp, 0x78; ret; 
0x000000000001bda5: mov qword ptr [rsp + 0x18], rsi; add rsp, 0x20; ret; 
0x00000000000118a9: mov qword ptr [rsp + 0x18], rsi; lea rax, [rip + 0x4806b]; call rax; 
0x000000000000f08f: mov qword ptr [rsp + 0x20], rax; lea rax, [rip + 0xb9f5]; call rax; 
0x000000000000f051: mov qword ptr [rsp + 0x20], rax; lea rax, [rip + 0xba33]; call rax; 
0x000000000001bedf: mov qword ptr [rsp + 0x20], rax; mov rax, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x98; ret; 
0x0000000000011904: mov qword ptr [rsp + 0x20], rax; mov rax, qword ptr [rsp + 0x20]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000001974d: mov qword ptr [rsp + 0x20], rax; mov rcx, qword ptr [rsp + 0x20]; call qword ptr [rip + 0x60373]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000119cd: mov qword ptr [rsp + 0x20], rax; mov rcx, qword ptr [rsp + 0x20]; call qword ptr [rip + 0x680f3]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x000000000005ec39: mov qword ptr [rsp + 0x20], rax; mov rdi, qword ptr [rbx]; mov rax, qword ptr [rbx + 8]; lea rsi, [rip + 0x39e0]; mov edx, 4; call qword ptr [rax + 0x18]; 
0x000000000001bb96: mov qword ptr [rsp + 0x20], rdi; call rax; 
0x000000000005defa: mov qword ptr [rsp + 0x20], rdi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x81a2]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x0000000000010fa0: mov qword ptr [rsp + 0x20], rdx; mov rax, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000001c8ab: mov qword ptr [rsp + 0x20], rdx; shl rdx, 0; call 0x9078; add rsp, 0x28; ret; 
0x000000000001bb29: mov qword ptr [rsp + 0x20], rsi; call qword ptr [rip + 0x5e324]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000151b9: mov qword ptr [rsp + 0x20], rsi; lea rax, [rip + 0x21cb]; call rax; 
0x000000000000f9d9: mov qword ptr [rsp + 0x20], rsi; lea rax, [rip + 0x79ab]; call rax; 
0x000000000000d4f5: mov qword ptr [rsp + 0x220], rax; lea rax, [rip + 0x2a89c]; lea rdi, [rsp + 0x220]; call rax; 
0x00000000000144a3: mov qword ptr [rsp + 0x28], rax; lea rcx, [rip + 0x61b71]; lea rax, [rip - 0x8b26]; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000014285: mov qword ptr [rsp + 0x28], rax; lea rcx, [rip + 0x61d8f]; lea rax, [rip - 0x8908]; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000015f3c: mov qword ptr [rsp + 0x28], rax; mov qword ptr [rsp + 0x30], rdx; add rsp, 0x38; ret; 
0x0000000000010f12: mov qword ptr [rsp + 0x28], rax; mov qword ptr [rsp + 0x30], rdx; mov qword ptr [rdi + 0x10], 0; add rsp, 0x38; ret; 
0x000000000001ade6: mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000003c4d9: mov qword ptr [rsp + 0x28], rax; mov rdi, r15; call qword ptr [rip + 0x3d261]; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000001da20: mov qword ptr [rsp + 0x28], rax; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x5bd58]; add rsp, 0x68; ret; 
0x000000000001b8f0: mov qword ptr [rsp + 0x28], rax; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x5de88]; add rsp, 0x68; ret; 
0x0000000000011a70: mov qword ptr [rsp + 0x28], rax; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x67d08]; add rsp, 0x68; ret; 
0x000000000000d4cf: mov qword ptr [rsp + 0x28], rdi; mov edx, 1; call 0xc4b0; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x2b0d6]; call rax; 
0x000000000000fa42: mov qword ptr [rsp + 0x28], rdi; mov qword ptr [rsp + 0x30], rsi; lea rax, [rip - 0x4483]; call rax; 
0x0000000000015222: mov qword ptr [rsp + 0x28], rdi; mov qword ptr [rsp + 0x30], rsi; lea rax, [rip - 0x9c63]; call rax; 
0x000000000001b95d: mov qword ptr [rsp + 0x30], r9; mov rax, rsp; mov dword ptr [rax], 0; call 0x1b1d0; add rsp, 0x38; ret; 
0x000000000000fbc2: mov qword ptr [rsp + 0x30], rax; add rsp, 0x38; ret; 
0x0000000000014358: mov qword ptr [rsp + 0x30], rax; lea rcx, [rip + 0x61cbc]; lea rax, [rip - 0x89db]; lea rdx, [rsp + 0x30]; call rax; 
0x000000000005b93e: mov qword ptr [rsp + 0x30], rax; mov rax, qword ptr [rax + 0x20]; mov rdi, r13; mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x0000000000016476: mov qword ptr [rsp + 0x30], rax; movups xmm0, xmmword ptr [rsp + 0x38]; movaps xmmword ptr [rsp + 0x20], xmm0; lea rax, [rip + 0x3b14]; lea rdx, [rsp + 0x20]; call rax; 
0x0000000000011570: mov qword ptr [rsp + 0x30], rcx; mov qword ptr [rsp + 0x38], rax; mov rax, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; add rsp, 0xb8; ret; 
0x0000000000015f41: mov qword ptr [rsp + 0x30], rdx; add rsp, 0x38; ret; 
0x000000000000e2af: mov qword ptr [rsp + 0x30], rdx; call 0xe2c0; add rsp, 0x38; ret; 
0x0000000000010f17: mov qword ptr [rsp + 0x30], rdx; mov qword ptr [rdi + 0x10], 0; add rsp, 0x38; ret; 
0x00000000000196a1: mov qword ptr [rsp + 0x30], rdx; mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000000fa47: mov qword ptr [rsp + 0x30], rsi; lea rax, [rip - 0x4483]; call rax; 
0x0000000000015227: mov qword ptr [rsp + 0x30], rsi; lea rax, [rip - 0x9c63]; call rax; 
0x000000000000bdd7: mov qword ptr [rsp + 0x30], rsi; movups xmm0, xmmword ptr [rsp + 0x28]; movups xmmword ptr [rcx], xmm0; add rsp, 0xb8; ret; 
0x00000000000454f5: mov qword ptr [rsp + 0x328], rbp; mov edi, 0x100; mov esi, 8; call rbx; 
0x00000000000466ae: mov qword ptr [rsp + 0x330], rdi; mov rbp, rcx; call rcx; 
0x000000000005b94f: mov qword ptr [rsp + 0x38], rax; call rax; 
0x00000000000129f4: mov qword ptr [rsp + 0x38], rax; lea rdx, [rip + 0x635b0]; lea rax, [rip + 0x47a09]; lea rsi, [rsp + 0x38]; call rax; 
0x000000000001731f: mov qword ptr [rsp + 0x38], rax; mov qword ptr [rsp + 0x40], rdx; add rsp, 0x48; ret; 
0x0000000000011575: mov qword ptr [rsp + 0x38], rax; mov rax, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; add rsp, 0xb8; ret; 
0x0000000000015ef1: mov qword ptr [rsp + 0x38], rax; mov rax, qword ptr [rsp + 0x38]; mov byte ptr [rax], 0; add rsp, 0x40; ret; 
0x00000000000187b1: mov qword ptr [rsp + 0x38], rax; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; lea rax, [rip + 0x1fa9]; call rax; 
0x000000000000fafa: mov qword ptr [rsp + 0x38], rcx; mov dword ptr [rsp + 0x40], eax; mov rax, qword ptr [rsp + 0x38]; mov edx, dword ptr [rsp + 0x40]; add rsp, 0x88; ret; 
0x000000000001003d: mov qword ptr [rsp + 0x38], rcx; mov qword ptr [rsp + 0x40], rax; mov rax, qword ptr [rsp + 0x38]; mov rdx, qword ptr [rsp + 0x40]; add rsp, 0xc8; ret; 
0x000000000000f77b: mov qword ptr [rsp + 0x38], rdx; mov qword ptr [rsp + 0x40], rcx; call 0x11a00; add rsp, 0x48; ret; 
0x0000000000015d3c: mov qword ptr [rsp + 0x38], rdx; mov qword ptr [rsp + 0x40], rcx; call 0x1b880; add rsp, 0x48; ret; 
0x000000000001c74c: mov qword ptr [rsp + 0x38], rdx; mov qword ptr [rsp + 0x40], rcx; call 0x1d9b0; add rsp, 0x48; ret; 
0x000000000000d4a4: mov qword ptr [rsp + 0x38], rdx; mov rax, qword ptr [rip + 0x6c310]; call rax; 
0x000000000000bcaf: mov qword ptr [rsp + 0x40], rax; mov qword ptr [rsp + 0x48], rdx; add rsp, 0x50; ret; 
0x000000000001200f: mov qword ptr [rsp + 0x40], rax; mov qword ptr [rsp + 0x48], rdx; mov rax, qword ptr [rsp + 0x40]; mov rdx, qword ptr [rsp + 0x48]; add rsp, 0x248; ret; 
0x000000000003d0c3: mov qword ptr [rsp + 0x40], rax; mov qword ptr [rsp + 0x48], rdx; mov rdi, qword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x0000000000010042: mov qword ptr [rsp + 0x40], rax; mov rax, qword ptr [rsp + 0x38]; mov rdx, qword ptr [rsp + 0x40]; add rsp, 0xc8; ret; 
0x0000000000019ef4: mov qword ptr [rsp + 0x40], rax; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; lea rax, [rip - 0x3fba]; lea rdi, [rsp + 0x20]; call rax; 
0x000000000000f780: mov qword ptr [rsp + 0x40], rcx; call 0x11a00; add rsp, 0x48; ret; 
0x0000000000015d41: mov qword ptr [rsp + 0x40], rcx; call 0x1b880; add rsp, 0x48; ret; 
0x000000000001c751: mov qword ptr [rsp + 0x40], rcx; call 0x1d9b0; add rsp, 0x48; ret; 
0x000000000003b33d: mov qword ptr [rsp + 0x40], rcx; mov qword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000000d589: mov qword ptr [rsp + 0x40], rdi; call rax; 
0x000000000001bdbb: mov qword ptr [rsp + 0x40], rdi; mov qword ptr [rsp + 8], rdi; mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x3c11f]; call rax; 
0x0000000000017324: mov qword ptr [rsp + 0x40], rdx; add rsp, 0x48; ret; 
0x000000000004746b: mov qword ptr [rsp + 0x460], rax; mov rdi, qword ptr [rsp + 0x80]; lea rsi, [rsp + 0x430]; mov rax, qword ptr [rsp + 0xb0]; call qword ptr [rax + 0x20]; 
0x000000000003b342: mov qword ptr [rsp + 0x48], 1; lea rsi, [rsp + 0x20]; mov rdi, r14; call rax; 
0x000000000001bd33: mov qword ptr [rsp + 0x48], rax; lea rax, [rip + 0x24d1]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000000bcb4: mov qword ptr [rsp + 0x48], rdx; add rsp, 0x50; ret; 
0x0000000000012014: mov qword ptr [rsp + 0x48], rdx; mov rax, qword ptr [rsp + 0x40]; mov rdx, qword ptr [rsp + 0x48]; add rsp, 0x248; ret; 
0x000000000003d0c8: mov qword ptr [rsp + 0x48], rdx; mov rdi, qword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x0000000000014481: mov qword ptr [rsp + 0x50], rax; add rsp, 0x58; ret; 
0x0000000000015f6c: mov qword ptr [rsp + 0x50], rcx; mov byte ptr [rsp + 0x37], 1; lea rax, [rip + 0x423]; lea rdi, [rsp + 0x18]; call rax; 
0x00000000000143e3: mov qword ptr [rsp + 0x58], rax; mov qword ptr [rsp + 0x60], rdx; add rsp, 0x68; ret; 
0x000000000001da1b: mov qword ptr [rsp + 0x60], rax; mov qword ptr [rsp + 0x28], rax; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x5bd58]; add rsp, 0x68; ret; 
0x000000000001b8eb: mov qword ptr [rsp + 0x60], rax; mov qword ptr [rsp + 0x28], rax; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x5de88]; add rsp, 0x68; ret; 
0x0000000000011a6b: mov qword ptr [rsp + 0x60], rax; mov qword ptr [rsp + 0x28], rax; mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x67d08]; add rsp, 0x68; ret; 
0x000000000001ccbc: mov qword ptr [rsp + 0x60], rax; mov rdi, qword ptr [rsp + 0x60]; lea rax, [rip + 0x583]; call rax; 
0x00000000000143e8: mov qword ptr [rsp + 0x60], rdx; add rsp, 0x68; ret; 
0x0000000000010ccb: mov qword ptr [rsp + 0x68], rax; mov qword ptr [rsp + 0x70], rdx; add rsp, 0x78; ret; 
0x000000000001addc: mov qword ptr [rsp + 0x68], rcx; mov qword ptr [rsp + 0x70], rax; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000001ade1: mov qword ptr [rsp + 0x70], rax; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000000bd15: mov qword ptr [rsp + 0x70], rcx; mov qword ptr [rsp + 0x18], rdx; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rcx], rdx; add rsp, 0x78; ret; 
0x0000000000010cd0: mov qword ptr [rsp + 0x70], rdx; add rsp, 0x78; ret; 
0x0000000000019638: mov qword ptr [rsp + 0x740], rsi; lea rdx, [rip + 0x5cc49]; lea rax, [rip - 0x272e]; call rax; 
0x000000000001be34: mov qword ptr [rsp + 0x78], rax; mov qword ptr [rsp + 0x80], rdx; add rsp, 0x88; ret; 
0x000000000001be39: mov qword ptr [rsp + 0x80], rdx; add rsp, 0x88; ret; 
0x0000000000013623: mov qword ptr [rsp + 0x90], rax; mov rdi, qword ptr [rsp + 0x90]; call 0x124c0; add rsp, 0x98; ret; 
0x000000000001a07c: mov qword ptr [rsp + 0x90], rcx; mov rdi, qword ptr [rax + 8]; lea rax, [rip + 0x961]; call rax; 
0x000000000000d92b: mov qword ptr [rsp + 0x98], rax; lea rax, [rip + 0x2a466]; lea rdi, [rsp + 0x98]; call rax; 
0x000000000001183a: mov qword ptr [rsp + 0x98], rcx; mov qword ptr [rsp + 0xa0], rax; mov rax, qword ptr [rsp + 0x98]; mov rdx, qword ptr [rsp + 0xa0]; add rsp, 0x158; ret; 
0x0000000000011842: mov qword ptr [rsp + 0xa0], rax; mov rax, qword ptr [rsp + 0x98]; mov rdx, qword ptr [rsp + 0xa0]; add rsp, 0x158; ret; 
0x000000000001c9b7: mov qword ptr [rsp + 0xa8], rdi; lea rax, [rip - 0x786]; xor esi, esi; call rax; 
0x000000000001a322: mov qword ptr [rsp + 0xb0], rsi; lea rdx, [rip + 0x5bfa7]; lea rax, [rip - 0x3348]; call rax; 
0x000000000000cf5d: mov qword ptr [rsp + 0xd0], rax; lea rax, [rip + 0x2ae34]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000000c99d: mov qword ptr [rsp + 0xd0], rax; lea rax, [rip + 0x2b3f4]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000001015b: mov qword ptr [rsp + 8], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0x108; ret; 
0x000000000000fc85: mov qword ptr [rsp + 8], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0xe0; ret; 
0x00000000000137fc: mov qword ptr [rsp + 8], rax; add rsp, 0x10; ret; 
0x0000000000019aeb: mov qword ptr [rsp + 8], rax; lea rax, [rip + 0x3fee9]; call rax; 
0x000000000004a6fb: mov qword ptr [rsp + 8], rax; lea rbx, [rbp - 1]; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000000ecc7: mov qword ptr [rsp + 8], rax; mov qword ptr [rsp + 0x10], rax; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000001a699: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x000000000001190e: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000196f8: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000001c8ce: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x10; ret; 
0x000000000001d263: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x30; ret; 
0x000000000001bf36: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000000bfcd: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000003da95: mov qword ptr [rsp + 8], rbp; movups xmm0, xmmword ptr [rcx]; movups xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 0x20]; 
0x000000000000f615: mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x70; ret; 
0x0000000000019ac2: mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; call qword ptr [rip + 0x5fdc6]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000016e82: mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; call qword ptr [rip + 0x628fe]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000000e6b5: mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x70; ret; 
0x000000000000e63a: mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x78; ret; 
0x0000000000013763: mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x0000000000016eaf: mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rcx; mov qword ptr [rdi + 8], rcx; mov word ptr [rdi], 2; add rsp, 0x18; ret; 
0x0000000000016fff: mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rcx; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x18; ret; 
0x00000000000139f4: mov qword ptr [rsp + 8], rdi; call 0x137f0; mov qword ptr [rsp + 0x10], rax; add rsp, 0x18; ret; 
0x000000000000c3f4: mov qword ptr [rsp + 8], rdi; call 0xec40; add rsp, 0x28; ret; 
0x000000000001e5e4: mov qword ptr [rsp + 8], rdi; call qword ptr [rip + 0x5b5d1]; add rsp, 0x18; ret; 
0x0000000000019684: mov qword ptr [rsp + 8], rdi; lea rax, [rip - 0x2960]; call rax; 
0x000000000001c8f4: mov qword ptr [rsp + 8], rdi; mov eax, dword ptr [rdi]; mov dword ptr [rsp + 4], eax; mov eax, dword ptr [rsp + 4]; add rsp, 0x10; ret; 
0x000000000000efa4: mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x10], rdi; cmp qword ptr [rdi], 0; jne 0xefb9; add rsp, 0x18; ret; 
0x000000000000eef4: mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x10], rdi; lea rax, [rip + 0xf33b]; call rax; 
0x000000000001e244: mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x10], rdi; lea rax, [rip - 0x1aa5]; call rax; 
0x000000000001ab74: mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x10], rdi; lea rax, [rip - 0x3ec5]; call rax; 
0x000000000001e2e4: mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rdi]; lea rax, [rip - 0xc8]; call rax; 
0x0000000000011984: mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x10], rsi; call 0x11690; add rsp, 0x18; ret; 
0x000000000001ad04: mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x10], rsi; call 0x1a870; add rsp, 0x18; ret; 
0x000000000001bdc0: mov qword ptr [rsp + 8], rdi; mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x3c11f]; call rax; 
0x00000000000100be: mov qword ptr [rsp + 8], rdx; add rsp, 0x10; ret; 
0x0000000000017c28: mov qword ptr [rsp + 8], rsi; lea rax, [rip - 0x1774]; call rax; 
0x0000000000017c28: mov qword ptr [rsp + 8], rsi; lea rax, [rip - 0x1774]; call rax; add rsp, 0x18; ret; 
0x000000000001bd9b: mov qword ptr [rsp + 8], rsi; mov qword ptr [rsp + 0x10], rax; mov qword ptr [rsp + 0x18], rsi; add rsp, 0x20; ret; 
0x000000000001e5c8: mov qword ptr [rsp + 8], rsi; mov qword ptr [rsp + 0x10], rdx; add rsp, 0x18; ret; 
0x0000000000013a22: mov qword ptr [rsp + 8], rsi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000164d2: mov qword ptr [rsp + 8], rsi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000001c1f4: mov qword ptr [rsp], rax; call qword ptr [rip + 0x5d3f2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001ad44: mov qword ptr [rsp], rax; call qword ptr [rip + 0x5f1c2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000018cf4: mov qword ptr [rsp], rax; call qword ptr [rip + 0x60fa2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000016e04: mov qword ptr [rsp], rax; call qword ptr [rip + 0x629aa]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001dab7: mov qword ptr [rsp], rax; mov qword ptr [rsp + 8], rax; add rsp, 0x10; ret; 
0x00000000000100ba: mov qword ptr [rsp], rax; mov qword ptr [rsp + 8], rdx; add rsp, 0x10; ret; 
0x000000000001bd97: mov qword ptr [rsp], rax; mov qword ptr [rsp + 8], rsi; mov qword ptr [rsp + 0x10], rax; mov qword ptr [rsp + 0x18], rsi; add rsp, 0x20; ret; 
0x000000000001c8d8: mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x10; ret; 
0x000000000001d26d: mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x30; ret; 
0x000000000001bf40: mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000012426: mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; mov qword ptr [rdi + 8], rax; mov qword ptr [rdi], rcx; add rsp, 0x48; ret; 
0x000000000000fbba: mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; mov qword ptr [rsp + 0x30], rax; add rsp, 0x38; ret; 
0x000000000000e264: mov qword ptr [rsp], rax; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xbc70; pop rcx; ret; 
0x000000000000bfc9: mov qword ptr [rsp], rcx; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000001ab11: mov qword ptr [rsp], rdi; add rdi, 0x20; call qword ptr [rip + 0x5e9b1]; pop rax; ret; 
0x00000000000115b1: mov qword ptr [rsp], rdi; call 0x115e0; pop rcx; ret; 
0x000000000001e2a1: mov qword ptr [rsp], rdi; call 0x1c7a0; pop rax; ret; 
0x000000000001e2d1: mov qword ptr [rsp], rdi; call 0x1d220; pop rax; ret; 
0x000000000000ee61: mov qword ptr [rsp], rdi; call 0xeb70; pop rax; ret; 
0x000000000000f131: mov qword ptr [rsp], rdi; call 0xeca0; pop rax; ret; 
0x000000000000ef71: mov qword ptr [rsp], rdi; call 0xef90; pop rax; ret; 
0x000000000000f1d1: mov qword ptr [rsp], rdi; call 0xf170; pop rax; ret; 
0x000000000000ef61: mov qword ptr [rsp], rdi; call 0xf220; pop rax; ret; 
0x000000000000f1e1: mov qword ptr [rsp], rdi; call 0xf730; pop rax; ret; 
0x000000000000eed1: mov qword ptr [rsp], rdi; call 0xf790; pop rax; ret; 
0x000000000000f4d1: mov qword ptr [rsp], rdi; call 0xf7f0; pop rax; ret; 
0x000000000000eca1: mov qword ptr [rsp], rdi; call 0xf850; pop rax; ret; 
0x000000000000ecb1: mov qword ptr [rsp], rdi; call 0xf930; pop rax; ret; 
0x000000000001e231: mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5b485]; pop rax; ret; 
0x000000000001e221: mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5b5d5]; pop rax; ret; 
0x000000000001e2b1: mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5b685]; pop rax; ret; 
0x000000000001e2c1: mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5b7bd]; pop rax; ret; 
0x000000000001e201: mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5b845]; pop rax; ret; 
0x000000000001e211: mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5bb8d]; pop rax; ret; 
0x000000000001c941: mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5d4b5]; pop rcx; ret; 
0x000000000001ab31: mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5e88d]; pop rax; ret; 
0x000000000001ac51: mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5e9ed]; pop rax; ret; 
0x000000000001aa81: mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5ea85]; pop rax; ret; 
0x000000000001aa71: mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5eefd]; pop rax; ret; 
0x000000000001ab01: mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5f015]; pop rax; ret; 
0x0000000000016df1: mov qword ptr [rsp], rdi; call qword ptr [rip + 0x62f35]; pop rax; ret; 
0x000000000000f481: mov qword ptr [rsp], rdi; call qword ptr [rip + 0x6a38d]; pop rax; ret; 
0x000000000000ef91: mov qword ptr [rsp], rdi; call qword ptr [rip + 0x6ae0d]; pop rax; ret; 
0x0000000000010f84: mov qword ptr [rsp], rdi; lea rax, [rip + 0x5da1]; call rax; 
0x0000000000010c64: mov qword ptr [rsp], rdi; lea rax, [rip + 0x60c1]; call rax; 
0x000000000001e591: mov qword ptr [rsp], rdi; lea rax, [rip + 4]; call rax; 
0x000000000001e591: mov qword ptr [rsp], rdi; lea rax, [rip + 4]; call rax; pop rcx; ret; 
0x000000000001da91: mov qword ptr [rsp], rdi; mov ax, word ptr [rdi]; pop rcx; ret; 
0x000000000001daa1: mov qword ptr [rsp], rdi; mov eax, dword ptr [rdi + 0x80]; pop rcx; ret; 
0x000000000001c7a1: mov qword ptr [rsp], rdi; mov edi, dword ptr [rdi]; call qword ptr [rip + 0x5d063]; pop rax; ret; 
0x000000000001bdb7: mov qword ptr [rsp], rdi; mov qword ptr [rsp + 0x40], rdi; mov qword ptr [rsp + 8], rdi; mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x3c11f]; call rax; 
0x0000000000017c24: mov qword ptr [rsp], rdi; mov qword ptr [rsp + 8], rsi; lea rax, [rip - 0x1774]; call rax; 
0x0000000000017c24: mov qword ptr [rsp], rdi; mov qword ptr [rsp + 8], rsi; lea rax, [rip - 0x1774]; call rax; add rsp, 0x18; ret; 
0x000000000001e5c4: mov qword ptr [rsp], rdi; mov qword ptr [rsp + 8], rsi; mov qword ptr [rsp + 0x10], rdx; add rsp, 0x18; ret; 
0x0000000000013a1e: mov qword ptr [rsp], rdi; mov qword ptr [rsp + 8], rsi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000164ce: mov qword ptr [rsp], rdi; mov qword ptr [rsp + 8], rsi; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000137f4: mov qword ptr [rsp], rdi; mov rax, qword ptr [rdi + 8]; mov qword ptr [rsp + 8], rax; add rsp, 0x10; ret; 
0x000000000001e363: mov qword ptr [rsp], rdi; mov rax, qword ptr [rsp]; add rsp, 0x20; ret; 
0x00000000000184b1: mov qword ptr [rsp], rdi; mov rdi, qword ptr [rdi]; call qword ptr [rip + 0x61b2a]; pop rax; ret; 
0x0000000000037da1: mov qword ptr [rsp], rdi; mov rdi, rsp; call qword ptr [rip + 0x41a4a]; pop rcx; ret; 
0x000000000000eee1: mov qword ptr [rsp], rdi; pop rax; ret; 
0x000000000003da8c: mov qword ptr [rsp], rsi; lea rdx, [rsp + 8]; mov qword ptr [rsp + 8], rbp; movups xmm0, xmmword ptr [rcx]; movups xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 0x20]; 
0x000000000001bae4: mov qword ptr [rsp], rsi; mov byte ptr [rdi + 0xc], 0xb; mov dword ptr [rdi + 8], 0; mov qword ptr [rdi], rsi; pop rcx; ret; 
0x0000000000019ae4: mov qword ptr [rsp], rsi; mov rax, rdi; mov qword ptr [rsp + 8], rax; lea rax, [rip + 0x3fee9]; call rax; 
0x000000000005f1fd: mov r10, rax; mov rax, r10; mov rdx, r11; ret; 
0x000000000005f1c7: mov r10, rax; xor r11d, r11d; mov rax, r10; mov rdx, r11; ret; 
0x000000000005a2cc: mov r10b, 0; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x000000000005f2c7: mov r11, rdx; mov rax, r11; mov rdx, rsi; ret; 
0x0000000000038481: mov r12, rbp; dec r12; mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000005b804: mov r12, rcx; mov r13, rdx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000005b634: mov r12, rcx; mov rbx, rdi; mov r13, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000005b741: mov r12, rdx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000002c09b: mov r12d, 0x2f; lea rdx, [rip + 0x355ac]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x0000000000059bb5: mov r13, qword ptr [r15]; mov rax, qword ptr [r15 + 8]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000005b63a: mov r13, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000005bd91: mov r13, rax; call rax; 
0x000000000005b807: mov r13, rdx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x0000000000020e8c: mov r14, r15; dec r14; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000003bff2: mov r14, rbx; dec r14; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000041de3: mov r14d, dword ptr [rax]; mov edi, r14d; call rbx; 
0x000000000005a2be: mov r15, qword ptr [r14 + 8]; mov rdi, qword ptr [r15]; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xb243]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000003c516: mov r15, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000005b73e: mov r15, rcx; mov r12, rdx; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a805: mov r15, rdi; mov rbx, qword ptr [rdi]; mov rdi, qword ptr [rbx + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000005bb7d: mov r15d, 0x110001; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; mov esi, 0x5c; jmp rax; 
0x000000000005bba9: mov r15d, r12d; jmp rax; 
0x000000000005dc7d: mov r8d, 0x11f; call 0x5db10; pop rcx; ret; 
0x000000000005dcb4: mov r8d, 0xc4; call 0x5db10; pop rcx; ret; 
0x000000000003b455: mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x000000000005a191: mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x000000000005a1b6: mov rax, qword ptr [r12 + 8]; lea rsi, [rip + 0xb561]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000003cf34: mov rax, qword ptr [r14 + 0x20]; jne 0x3d0be; mov rdi, r15; call rax; 
0x00000000000393bb: mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x000000000005eccd: mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x683b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ecb3: mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x6a68]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df8e: mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x757a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df74: mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x77a7]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7c3: mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x9d45]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7a9: mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x9f72]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000020e96: mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000005a2c5: mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xb243]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a2a5: mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xb476]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000059bb8: mov rax, qword ptr [r15 + 8]; mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000001e97a: mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000005f127: mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x740d]; mov edx, 0xb; jmp rax; 
0x000000000005ec07: mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x74ae]; mov edx, 5; jmp rax; 
0x000000000005a433: mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xb2ea]; mov edx, 1; jmp rax; 
0x0000000000057e27: mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xd764]; mov edx, 0xe; jmp rax; 
0x000000000005b943: mov rax, qword ptr [rax + 0x20]; mov rdi, r13; mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000005bd85: mov rax, qword ptr [rax + 0x20]; mov rdi, rbx; mov esi, 0x27; mov r13, rax; call rax; 
0x000000000003c94d: mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000005ef67: mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x67ae]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005dde6: mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x792f]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ddca: mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x794c]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005b6c2: mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0xa053]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a105: mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0xb610]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000001449f: mov rax, qword ptr [rax + 8]; mov qword ptr [rsp + 0x28], rax; lea rcx, [rip + 0x61b71]; lea rax, [rip - 0x8b26]; lea rdx, [rsp + 0x28]; call rax; 
0x000000000001447d: mov rax, qword ptr [rax + 8]; mov qword ptr [rsp + 0x50], rax; add rsp, 0x58; ret; 
0x000000000001e976: mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000005a42f: mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xb2ea]; mov edx, 1; jmp rax; 
0x000000000000ecd4: mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000ecd8: mov rax, qword ptr [rax]; call rax; 
0x0000000000014355: mov rax, qword ptr [rax]; mov qword ptr [rsp + 0x30], rax; lea rcx, [rip + 0x61cbc]; lea rax, [rip - 0x89db]; lea rdx, [rsp + 0x30]; call rax; 
0x000000000003848b: mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000059f91: mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000041fcd: mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000005b89d: mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9c6b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b882: mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9e99]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a367: mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb3b5]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a339: mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb3d7]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059feb: mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb720]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000059fb5: mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb754]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059fa0: mov rax, qword ptr [rbp + 8]; mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000003d0d1: mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000004a7ab: mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000001f3ae: mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000005b642: mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000001f75a: mov rax, qword ptr [rbx + 8]; call qword ptr [rax]; 
0x000000000005ec41: mov rax, qword ptr [rbx + 8]; lea rsi, [rip + 0x39e0]; mov edx, 4; call qword ptr [rax + 0x18]; 
0x00000000000582e8: mov rax, qword ptr [rbx + 8]; lea rsi, [rip + 0xd30b]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000005822f: mov rax, qword ptr [rbx + 8]; lea rsi, [rip + 0xd3c2]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000003bef0: mov rax, qword ptr [rbx + r13 + 8]; test rax, rax; je 0x3bf09; mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000005ed58: mov rax, qword ptr [rcx + rax*8]; mov rdi, qword ptr [rsi]; mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x000000000001f2b0: mov rax, qword ptr [rdi + 0x10]; mov qword ptr [rsi + 0x10], rax; movups xmm0, xmmword ptr [rdi]; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000005d4b0: mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x18]; ret; 
0x00000000000568a0: mov rax, qword ptr [rdi + 0x10]; ret; 
0x000000000004cd40: mov rax, qword ptr [rdi + 0x18]; cmp rax, rcx; jae 0x4cd52; mov qword ptr [rdi + 0x18], 0; ret; 
0x0000000000059b40: mov rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000053540: mov rax, qword ptr [rdi + 0x20]; mov rdx, qword ptr [rdi + 0x28]; ret; 
0x00000000000137f8: mov rax, qword ptr [rdi + 8]; mov qword ptr [rsp + 8], rax; add rsp, 0x10; ret; 
0x0000000000056cc0: mov rax, qword ptr [rdi + 8]; mov rdx, qword ptr [rdi + 0x10]; ret; 
0x000000000005b570: mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rdi, rax; jmp rcx; 
0x000000000005b910: mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov rdi, rax; jmp rcx; 
0x000000000004a905: mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x000000000001e970: mov rax, qword ptr [rdi]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x0000000000013780: mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000001c010: mov rax, qword ptr [rdi]; ret; 
0x00000000000423a1: mov rax, qword ptr [rip + 0x37d30]; test rax, rax; lea rcx, [rip - 0x6442]; cmovne rcx, rax; call rcx; 
0x000000000001bb6b: mov rax, qword ptr [rip + 0x5db9e]; call rax; 
0x0000000000018ac8: mov rax, qword ptr [rip + 0x61411]; lea rdx, [rsp + 0x1b0]; lea rcx, [rsp + 0x1f8]; call rax; 
0x000000000000d4a9: mov rax, qword ptr [rip + 0x6c310]; call rax; 
0x000000000000bbc3: mov rax, qword ptr [rip + 0x6d8a6]; test rax, rax; je 0xbbd8; jmp rax; 
0x000000000000bc04: mov rax, qword ptr [rip + 0x6e295]; test rax, rax; je 0xbc18; jmp rax; 
0x0000000000009008: mov rax, qword ptr [rip + 0x70979]; test rax, rax; je 0x9016; call rax; 
0x0000000000009008: mov rax, qword ptr [rip + 0x70979]; test rax, rax; je 0x9016; call rax; add rsp, 8; ret; 
0x000000000003d3ee: mov rax, qword ptr [rsi + 0x18]; call qword ptr [rax + 0x28]; 
0x000000000005eecb: mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x71ef]; mov edx, 9; call qword ptr [rax + 0x18]; 
0x000000000005df02: mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x81a2]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000005dd60: mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x8315]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000005b8dd: mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x9d67]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000042785: mov rax, qword ptr [rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000005f123: mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x740d]; mov edx, 0xb; jmp rax; 
0x000000000005ec03: mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x74ae]; mov edx, 5; jmp rax; 
0x0000000000057e23: mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xd764]; mov edx, 0xe; jmp rax; 
0x000000000005bd81: mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x20]; mov rdi, rbx; mov esi, 0x27; mov r13, rax; call rax; 
0x000000000005b5fd: mov rax, qword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000002b9b0: mov rax, qword ptr [rsi]; lea rcx, [rip + 0x35be2]; movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x0000000000010c44: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x0000000000019dbe: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x158; ret; 
0x0000000000019a94: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x178; ret; 
0x0000000000013673: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000001900f: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x278; ret; 
0x000000000001e57c: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000011221: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x0000000000017861: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000010b96: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x00000000000165b5: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x50; ret; 
0x0000000000011686: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x0000000000015fbd: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x0000000000013c02: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x88; ret; 
0x0000000000013d90: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x0000000000012d05: mov rax, qword ptr [rsp + 0x10]; add rsp, 0xc8; ret; 
0x00000000000172e9: mov rax, qword ptr [rsp + 0x10]; add rsp, 0xd8; ret; 
0x000000000000e745: mov rax, qword ptr [rsp + 0x10]; lea rcx, [rip + 0x51b4b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001dfa0: mov rax, qword ptr [rsp + 0x10]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x288; ret; 
0x0000000000011183: mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rax + 0x40], 0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x1b8; ret; 
0x0000000000016f02: mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x28; ret; 
0x0000000000013abc: mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x0000000000011640: mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000001529a: mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x0000000000017416: mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000fe3b: mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0xc0; ret; 
0x000000000005abdf: mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000005aacd: mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000001848a: mov rax, qword ptr [rsp + 0x10]; mov word ptr [rax], 3; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xb8; ret; 
0x00000000000359f1: mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x000000000001dbf7: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x118; ret; 
0x0000000000011190: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x1b8; ret; 
0x0000000000010fda: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x00000000000119dd: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x0000000000018ce0: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x0000000000018402: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x48; ret; 
0x0000000000013b8b: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x50; ret; 
0x0000000000017559: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000c2e6: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x0000000000017a28: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; ret; 
0x000000000001355d: mov rax, qword ptr [rsp + 0x18]; add rsp, 0x88; ret; 
0x0000000000011cb6: mov rax, qword ptr [rsp + 0x18]; add rsp, 0xb8; ret; 
0x0000000000016495: mov rax, qword ptr [rsp + 0x18]; add rsp, 0xc8; ret; 
0x000000000001721a: mov rax, qword ptr [rsp + 0x18]; add rsp, 0xd8; ret; 
0x000000000005a3ed: mov rax, qword ptr [rsp + 0x18]; lea rsi, [rip + 0xb320]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a252: mov rax, qword ptr [rsp + 0x18]; lea rsi, [rip + 0xb4bb]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000001ba40: mov rax, qword ptr [rsp + 0x18]; mov byte ptr [rdi + 0xc], dl; mov dword ptr [rdi + 8], esi; mov qword ptr [rdi], rcx; add rsp, 0x28; ret; 
0x000000000000c376: mov rax, qword ptr [rsp + 0x18]; mov edx, dword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x0000000000010fa5: mov rax, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000001bee4: mov rax, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x98; ret; 
0x0000000000017da1: mov rax, qword ptr [rsp + 0x20]; add rsp, 0x188; ret; 
0x0000000000016e66: mov rax, qword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x000000000001a4b0: mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x000000000000e1c3: mov rax, qword ptr [rsp + 0x20]; add rsp, 0x98; ret; 
0x000000000001a117: mov rax, qword ptr [rsp + 0x20]; add rsp, 0xd8; ret; 
0x0000000000018ec4: mov rax, qword ptr [rsp + 0x20]; add rsp, 0xf8; ret; 
0x000000000001cb83: mov rax, qword ptr [rsp + 0x20]; lea rcx, [rip + 0x440dd]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001e136: mov rax, qword ptr [rsp + 0x20]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x278; ret; 
0x0000000000047514: mov rax, qword ptr [rsp + 0x20]; mov qword ptr [rsp + 0x178], rax; lea rsi, [rsp + 0x150]; call qword ptr [rcx + 0x20]; 
0x0000000000014280: mov rax, qword ptr [rsp + 0x20]; mov qword ptr [rsp + 0x28], rax; lea rcx, [rip + 0x61d8f]; lea rax, [rip - 0x8908]; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000047466: mov rax, qword ptr [rsp + 0x20]; mov qword ptr [rsp + 0x460], rax; mov rdi, qword ptr [rsp + 0x80]; lea rsi, [rsp + 0x430]; mov rax, qword ptr [rsp + 0xb0]; call qword ptr [rax + 0x20]; 
0x0000000000011909: mov rax, qword ptr [rsp + 0x20]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000f610: mov rax, qword ptr [rsp + 0x20]; mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x70; ret; 
0x000000000001146f: mov rax, qword ptr [rsp + 0x20]; mov rdx, qword ptr [rsp + 0x28]; add rsp, 0x88; ret; 
0x0000000000015035: mov rax, qword ptr [rsp + 0x28]; add rsp, 0x1c8; ret; 
0x0000000000018083: mov rax, qword ptr [rsp + 0x28]; add rsp, 0x478; ret; 
0x0000000000014338: mov rax, qword ptr [rsp + 0x28]; add rsp, 0x58; ret; 
0x000000000001adeb: mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000000c74d: mov rax, qword ptr [rsp + 0x28]; add rsp, 0xc8; ret; 
0x000000000001b1bc: mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x228; ret; 
0x00000000000196a6: mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x0000000000014107: mov rax, qword ptr [rsp + 0x30]; add rsp, 0x1f8; ret; 
0x000000000005bb20: mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x000000000005a0ac: mov rax, qword ptr [rsp + 0x30]; lea rsi, [rip + 0xb661]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x00000000000129ef: mov rax, qword ptr [rsp + 0x30]; mov qword ptr [rsp + 0x38], rax; lea rdx, [rip + 0x635b0]; lea rax, [rip + 0x47a09]; lea rsi, [rsp + 0x38]; call rax; 
0x000000000001157a: mov rax, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; add rsp, 0xb8; ret; 
0x000000000001cd6b: mov rax, qword ptr [rsp + 0x38]; add rsp, 0x108; ret; 
0x0000000000016997: mov rax, qword ptr [rsp + 0x38]; add rsp, 0x1a8; ret; 
0x0000000000015ef6: mov rax, qword ptr [rsp + 0x38]; mov byte ptr [rax], 0; add rsp, 0x40; ret; 
0x000000000000fb03: mov rax, qword ptr [rsp + 0x38]; mov edx, dword ptr [rsp + 0x40]; add rsp, 0x88; ret; 
0x0000000000010047: mov rax, qword ptr [rsp + 0x38]; mov rdx, qword ptr [rsp + 0x40]; add rsp, 0xc8; ret; 
0x0000000000010550: mov rax, qword ptr [rsp + 0x40]; add rsp, 0x108; ret; 
0x0000000000014d3b: mov rax, qword ptr [rsp + 0x40]; mov edx, dword ptr [rsp + 0x48]; add rsp, 0xf8; ret; 
0x0000000000012019: mov rax, qword ptr [rsp + 0x40]; mov rdx, qword ptr [rsp + 0x48]; add rsp, 0x248; ret; 
0x000000000001bd82: mov rax, qword ptr [rsp + 0x48]; add rsp, 0x108; ret; 
0x000000000000d926: mov rax, qword ptr [rsp + 0x48]; mov qword ptr [rsp + 0x98], rax; lea rax, [rip + 0x2a466]; lea rdi, [rsp + 0x98]; call rax; 
0x000000000001329c: mov rax, qword ptr [rsp + 0x50]; add rsp, 0x118; ret; 
0x00000000000192d8: mov rax, qword ptr [rsp + 0x50]; add rsp, 0x788; ret; 
0x000000000001861b: mov rax, qword ptr [rsp + 0x58]; add rsp, 0x3a8; ret; 
0x0000000000010cc1: mov rax, qword ptr [rsp + 0x58]; mov rdx, qword ptr [rsp + 0x60]; mov qword ptr [rsp + 0x68], rax; mov qword ptr [rsp + 0x70], rdx; add rsp, 0x78; ret; 
0x000000000001b4ee: mov rax, qword ptr [rsp + 0x68]; mov rdx, qword ptr [rsp + 0x70]; add rsp, 0x2c8; ret; 
0x0000000000015388: mov rax, qword ptr [rsp + 0x78]; mov rdx, qword ptr [rsp + 0x80]; add rsp, 0x148; ret; 
0x000000000001184a: mov rax, qword ptr [rsp + 0x98]; mov rdx, qword ptr [rsp + 0xa0]; add rsp, 0x158; ret; 
0x0000000000047483: mov rax, qword ptr [rsp + 0xb0]; call qword ptr [rax + 0x20]; 
0x0000000000010164: mov rax, qword ptr [rsp + 8]; add rsp, 0x108; ret; 
0x0000000000015ff7: mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000001a69e: mov rax, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x0000000000011913: mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000196fd: mov rax, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000001acf3: mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x0000000000010b14: mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x0000000000013966: mov rax, qword ptr [rsp + 8]; add rsp, 0x88; ret; 
0x000000000001a38f: mov rax, qword ptr [rsp + 8]; add rsp, 0xb8; ret; 
0x000000000000fc8e: mov rax, qword ptr [rsp + 8]; add rsp, 0xe0; ret; 
0x0000000000059dc4: mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000dfe1: mov rax, qword ptr [rsp + 8]; lea rcx, [rip + 0x5206b]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000c18a: mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp + 0x10], rax; add rsp, 0x28; ret; 
0x000000000001bd2e: mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp + 0x48], rax; lea rax, [rip + 0x24d1]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000001c8d3: mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x10; ret; 
0x000000000001d268: mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x30; ret; 
0x000000000001bf3b: mov rax, qword ptr [rsp + 8]; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000014478: mov rax, qword ptr [rsp + 8]; mov rax, qword ptr [rax + 8]; mov qword ptr [rsp + 0x50], rax; add rsp, 0x58; ret; 
0x0000000000013665: mov rax, qword ptr [rsp + 8]; mov rcx, qword ptr [rax + 0x10]; call 0x13370; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000001e31f: mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; call qword ptr [rip + 0x5b0db]; add rsp, 0x28; ret; 
0x000000000001e2fc: mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; lea rax, [rip - 0xaab]; call rax; 
0x000000000000ed02: mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0x12540; add rsp, 0x28; ret; 
0x000000000000f14e: mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0x126b0; add rsp, 0x28; ret; 
0x000000000001e1c6: mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call qword ptr [rip + 0x5bcb0]; add rsp, 0x28; ret; 
0x000000000001ab4e: mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call qword ptr [rip + 0x5f218]; add rsp, 0x28; ret; 
0x000000000001e19f: mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; lea rax, [rip - 0xac2]; call rax; 
0x0000000000015caf: mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x60; ret; 
0x000000000000e6bf: mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x70; ret; 
0x000000000000e644: mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x78; ret; 
0x000000000001376d: mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x000000000003a606: mov rax, qword ptr [rsp + 8]; movzx eax, byte ptr [rax]; lea rcx, [rip + 0x275ff]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c8dc: mov rax, qword ptr [rsp]; add rsp, 0x10; ret; 
0x000000000001193b: mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001e367: mov rax, qword ptr [rsp]; add rsp, 0x20; ret; 
0x000000000001a963: mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000001d271: mov rax, qword ptr [rsp]; add rsp, 0x30; ret; 
0x000000000001bf44: mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000013cc4: mov rax, qword ptr [rsp]; add rsp, 0x68; ret; 
0x000000000001ba78: mov rax, qword ptr [rsp]; lea rcx, [rip + 0x450a5]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001242a: mov rax, qword ptr [rsp]; mov qword ptr [rdi + 8], rax; mov qword ptr [rdi], rcx; add rsp, 0x48; ret; 
0x000000000001a690: mov rax, qword ptr [rsp]; mov qword ptr [rsp + 0x18], rax; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x000000000000fbbe: mov rax, qword ptr [rsp]; mov qword ptr [rsp + 0x30], rax; add rsp, 0x38; ret; 
0x00000000000196f4: mov rax, qword ptr [rsp]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000002aa67: mov rax, qword ptr [rsp]; mov rcx, qword ptr [rsp + 7]; mov qword ptr [rdi + 1], rax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x00000000000124f5: mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001e5b1: mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000013a27: mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000164d7: mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000bfd2: mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000000c475: mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x40; ret; 
0x0000000000015f33: mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; mov qword ptr [rsp + 0x28], rax; mov qword ptr [rsp + 0x30], rdx; add rsp, 0x38; ret; 
0x00000000000132cf: mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000005eccc: mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x683b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ecb2: mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x6a68]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df8d: mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x757a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df73: mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x77a7]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7c2: mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x9d45]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7a8: mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x9f72]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005eeca: mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rip + 0x71ef]; mov edx, 9; call qword ptr [rax + 0x18]; 
0x000000000005df01: mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rip + 0x81a2]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000005dd5f: mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rip + 0x8315]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000005b8dc: mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rip + 0x9d67]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000042784: mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000005f122: mov rax, qword ptr ds:[rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x740d]; mov edx, 0xb; jmp rax; 
0x000000000005ec02: mov rax, qword ptr ds:[rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x74ae]; mov edx, 5; jmp rax; 
0x0000000000057e22: mov rax, qword ptr ds:[rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xd764]; mov edx, 0xe; jmp rax; 
0x000000000005b5fc: mov rax, qword ptr ds:[rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000005f1b2: mov rax, r10; mov rdx, r11; ret; 
0x000000000005f28b: mov rax, r11; mov rdx, rsi; ret; 
0x000000000003c93e: mov rax, r13; lea r14, [r13 - 1]; add r13, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x0000000000037e66: mov rax, r14; add rsp, 0x10; pop rbx; pop r14; pop r15; ret; 
0x000000000003c23a: mov rax, r14; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000035f30: mov rax, r14; lea rax, [r14 - 0x20]; pop rbx; pop r14; pop r15; ret; 
0x00000000000402f8: mov rax, r14; mov rdx, rbx; add rsp, 0x88; pop rbx; pop r14; ret; 
0x0000000000057f7d: mov rax, r14; pop rbx; pop r14; pop r15; ret; 
0x000000000003e476: mov rax, r15; add rsp, 0x2e0; pop rbx; pop r14; pop r15; ret; 
0x0000000000026631: mov rax, r15; mov rdx, r14; pop rbx; pop r14; pop r15; ret; 
0x000000000005de4c: mov rax, r8; ret; 
0x000000000005f0cc: mov rax, r9; and al, 1; pop rcx; ret; 
0x00000000000368f4: mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x0000000000053519: mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x000000000003cd0d: mov rax, rbx; add rsp, 0x50; pop rbx; ret; 
0x000000000004087c: mov rax, rbx; add rsp, 0x70; pop rbx; ret; 
0x000000000004aa5a: mov rax, rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000003cfce: mov rax, rbx; lea r14, [rbx - 1]; add rbx, 7; mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000000a2c9: mov rax, rbx; mov rdx, r14; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004a8d8: mov rax, rbx; mov rdx, r14; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000378a0: mov rax, rbx; pop rbx; pop r14; pop r15; ret; 
0x00000000000409d5: mov rax, rbx; pop rbx; ret; 
0x000000000002aab8: mov rax, rcx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000f088: mov rax, rdi; add rax, 0x10; mov qword ptr [rsp + 0x20], rax; lea rax, [rip + 0xb9f5]; call rax; 
0x000000000000f04a: mov rax, rdi; add rax, 0x10; mov qword ptr [rsp + 0x20], rax; lea rax, [rip + 0xba33]; call rax; 
0x000000000004caec: mov rax, rdi; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000039b86: mov rax, rdi; cmp byte ptr [rax], cl; sete al; pop rcx; ret; 
0x000000000005f1f7: mov rax, rdi; div r8; mov r10, rax; mov rax, r10; mov rdx, r11; ret; 
0x000000000003cd80: mov rax, rdi; lea rdx, [rip + 0x3a7f6]; ret; 
0x000000000005aa00: mov rax, rdi; lea rdx, [rip - 0x325a]; ret; 
0x0000000000016521: mov rax, rdi; mov byte ptr [rdi], 2; pop rcx; ret; 
0x0000000000016511: mov rax, rdi; mov byte ptr [rdi], 3; pop rcx; ret; 
0x0000000000017f30: mov rax, rdi; mov dword ptr [rdi], 0; mov dword ptr [rdi + 4], 0; mov dword ptr [rdi + 8], 0; mov dword ptr [rdi + 0xc], 0; ret; 
0x0000000000019ae8: mov rax, rdi; mov qword ptr [rsp + 8], rax; lea rax, [rip + 0x3fee9]; call rax; 
0x000000000001c1f1: mov rax, rdi; mov qword ptr [rsp], rax; call qword ptr [rip + 0x5d3f2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001ad41: mov rax, rdi; mov qword ptr [rsp], rax; call qword ptr [rip + 0x5f1c2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000018cf1: mov rax, rdi; mov qword ptr [rsp], rax; call qword ptr [rip + 0x60fa2]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x0000000000016e01: mov rax, rdi; mov qword ptr [rsp], rax; call qword ptr [rip + 0x629aa]; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000001dab4: mov rax, rdi; mov qword ptr [rsp], rax; mov qword ptr [rsp + 8], rax; add rsp, 0x10; ret; 
0x00000000000100b7: mov rax, rdi; mov qword ptr [rsp], rax; mov qword ptr [rsp + 8], rdx; add rsp, 0x10; ret; 
0x000000000001c870: mov rax, rdi; mov rcx, qword ptr [rsi]; mov qword ptr [rdi], rcx; mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; ret; 
0x000000000004ccef: mov rax, rdi; pop rcx; ret; 
0x0000000000059a20: mov rax, rdi; ret; 
0x000000000005f0d3: mov rax, rdx; and al, 1; pop rcx; ret; 
0x000000000005769f: mov rax, rdx; neg rax; and rax, rcx; ret; 
0x000000000002a29b: mov rax, rdx; not rax; shr rax, 0x3f; ret; 
0x000000000004d400: mov rax, rsi; pop rcx; ret; 
0x000000000001b962: mov rax, rsp; mov dword ptr [rax], 0; call 0x1b1d0; add rsp, 0x38; ret; 
0x00000000000426c8: mov rbp, qword ptr [rsp + 0x40]; mov rdi, rbp; xor esi, esi; mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x00000000000466b6: mov rbp, rcx; call rcx; 
0x000000000004a808: mov rbx, qword ptr [rdi]; mov rdi, qword ptr [rbx + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000003e411: mov rbx, qword ptr [rip + 0x3b5c0]; mov edx, 0x90; call rbx; 
0x0000000000040877: mov rbx, qword ptr [rsp + 0x10]; mov rax, rbx; add rsp, 0x70; pop rbx; ret; 
0x0000000000035c2c: mov rbx, rax; dec qword ptr [rax - 8]; mov rdi, r14; call qword ptr [rbp]; 
0x000000000003c4e7: mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000005a411: mov rbx, rdi; call 0x5a2f0; mov rax, rbx; pop rbx; ret; 
0x0000000000057fa1: mov rbx, rdi; dec rdx; call qword ptr [rip + 0x21bf3]; mov rax, rbx; pop rbx; ret; 
0x0000000000040378: mov rbx, rdi; mov eax, esi; lea rcx, [rip + 0x21908]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000005b637: mov rbx, rdi; mov r13, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a7a4: mov rbx, rdi; mov rdi, qword ptr [rdi + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000005b744: mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000001f754: mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax]; 
0x000000000005b8d7: mov rbx, rdi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x9d67]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b5f7: mov rbx, rdi; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000000e52f: mov rcx, qword ptr [rax + 0x10]; add rcx, 1; mov qword ptr [rax + 0x10], rcx; add rsp, 0xc8; ret; 
0x000000000001366a: mov rcx, qword ptr [rax + 0x10]; call 0x13370; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000005b577: mov rcx, qword ptr [rcx + 0x18]; mov rdi, rax; jmp rcx; 
0x000000000005ed63: mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x000000000005c0d7: mov rcx, qword ptr [rcx + 0x20]; mov esi, eax; pop rax; jmp rcx; 
0x000000000005b917: mov rcx, qword ptr [rcx + 0x20]; mov rdi, rax; jmp rcx; 
0x0000000000049f53: mov rcx, qword ptr [rdi + 0x18]; mov rdi, rax; xor r8d, r8d; call qword ptr [rip + 0x2f605]; pop rbx; ret; 
0x000000000005b573: mov rcx, qword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rdi, rax; jmp rcx; 
0x000000000005b913: mov rcx, qword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov rdi, rax; jmp rcx; 
0x000000000004a908: mov rcx, qword ptr [rdi + 8]; mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x0000000000017581: mov rcx, qword ptr [rsi + 0x10]; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000162c9: mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; mov cl, byte ptr [rsi + 0x10]; mov byte ptr [rdi + 0x10], cl; ret; 
0x000000000002b9c3: mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; mov qword ptr [rdi], rax; ret; 
0x0000000000017579: mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsi + 0x10]; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000001c91e: mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; pop rcx; ret; 
0x000000000001c879: mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; ret; 
0x000000000005ed5f: mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x000000000005c0d3: mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov esi, eax; pop rax; jmp rcx; 
0x000000000001c918: mov rcx, qword ptr [rsi]; mov qword ptr [rdi], rcx; mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; pop rcx; ret; 
0x000000000001c873: mov rcx, qword ptr [rsi]; mov qword ptr [rdi], rcx; mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; ret; 
0x0000000000010dd7: mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000001e6a5: mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rcx; mov rcx, qword ptr [rsp + 0x18]; mov qword ptr [rdi + 8], rcx; add rsp, 0x28; ret; 
0x000000000005ac31: mov rcx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x0000000000059db8: mov rcx, qword ptr [rsp + 0x18]; mov byte ptr [rcx], al; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000170f3: mov rcx, qword ptr [rsp + 0x18]; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x20; ret; 
0x0000000000017143: mov rcx, qword ptr [rsp + 0x18]; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x20; ret; 
0x000000000001e6ad: mov rcx, qword ptr [rsp + 0x18]; mov qword ptr [rdi + 8], rcx; add rsp, 0x28; ret; 
0x0000000000010d27: mov rcx, qword ptr [rsp + 0x18]; mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x20]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x48; ret; 
0x000000000000f60b: mov rcx, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x20]; mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x70; ret; 
0x0000000000019752: mov rcx, qword ptr [rsp + 0x20]; call qword ptr [rip + 0x60373]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x00000000000119d2: mov rcx, qword ptr [rsp + 0x20]; call qword ptr [rip + 0x680f3]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x0000000000010d30: mov rcx, qword ptr [rsp + 0x20]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x48; ret; 
0x0000000000011218: mov rcx, qword ptr [rsp + 0x28]; mov qword ptr [rax + 0x10], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000001b9e2: mov rcx, qword ptr [rsp + 0x28]; mov qword ptr [rax + 8], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x00000000000170ab: mov rcx, qword ptr [rsp + 0x28]; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x38; ret; 
0x0000000000016f5b: mov rcx, qword ptr [rsp + 0x28]; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x38; ret; 
0x0000000000017ab6: mov rcx, qword ptr [rsp + 0x30]; mov qword ptr [rax + 8], rcx; mov byte ptr [rax], 1; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000017858: mov rcx, qword ptr [rsp + 0x30]; mov qword ptr [rax + 8], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000012d6c: mov rcx, qword ptr [rsp + 0x30]; mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x38]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x0000000000012d75: mov rcx, qword ptr [rsp + 0x38]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x0000000000019efe: mov rcx, qword ptr [rsp + 0x40]; lea rax, [rip - 0x3fba]; lea rdi, [rsp + 0x20]; call rax; 
0x0000000000016fd4: mov rcx, qword ptr [rsp + 0x40]; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x48; ret; 
0x000000000001dbee: mov rcx, qword ptr [rsp + 0x48]; mov qword ptr [rax + 0x18], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x118; ret; 
0x00000000000177d4: mov rcx, qword ptr [rsp + 0x50]; mov qword ptr [rax + 0x18], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x0000000000012b03: mov rcx, qword ptr [rsp + 0x50]; mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x58]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0xa0; ret; 
0x0000000000012b0c: mov rcx, qword ptr [rsp + 0x58]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0xa0; ret; 
0x0000000000017a1a: mov rcx, qword ptr [rsp + 0x68]; mov qword ptr [rax + 8], rcx; mov word ptr [rax], 3; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; ret; 
0x0000000000018eac: mov rcx, qword ptr [rsp + 0xc8]; lea rax, [rip - 0x1d5b]; call rax; 
0x000000000002aa6b: mov rcx, qword ptr [rsp + 7]; mov qword ptr [rdi + 1], rax; mov qword ptr [rdi + 8], rcx; add rsp, 0x20; ret; 
0x0000000000016035: mov rcx, qword ptr [rsp + 8]; mov qword ptr [rdi + 8], rcx; mov cl, byte ptr [rsp + 0x10]; mov byte ptr [rdi + 0x10], cl; add rsp, 0x18; ret; 
0x0000000000010dce: mov rcx, qword ptr [rsp + 8]; mov qword ptr [rdi + 8], rcx; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x0000000000017e5f: mov rcx, qword ptr [rsp + 8]; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000005ed5e: mov rcx, qword ptr ds:[rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x000000000005c0d2: mov rcx, qword ptr ds:[rsi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov esi, eax; pop rax; jmp rcx; 
0x0000000000016eff: mov rcx, rax; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x28; ret; 
0x0000000000021866: mov rcx, rdi; mov qword ptr [rcx], rax; movaps xmm0, xmmword ptr [rsp]; movups xmmword ptr [rcx + 8], xmm0; add rsp, 0x18; ret; 
0x000000000005cf3f: mov rcx, rsi; cmp rsi, rdi; jne 0x5cf30; ret; 
0x000000000003b450: mov rdi, qword ptr [r12 - 1]; mov rax, qword ptr [r12 + 7]; call qword ptr [rax]; 
0x00000000000389b8: mov rdi, qword ptr [r12]; call rbx; 
0x000000000005a18d: mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x000000000005a1b2: mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; lea rsi, [rip + 0xb561]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x00000000000393b7: mov rdi, qword ptr [r14 - 1]; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x000000000005ecca: mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x683b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ecb0: mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x6a68]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df8b: mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x757a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df71: mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x77a7]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7c0: mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x9d45]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7a6: mov rdi, qword ptr [r14]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x9f72]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000020e92: mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000005a2c2: mov rdi, qword ptr [r15]; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xb243]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a2a2: mov rdi, qword ptr [r15]; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xb476]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000001a084: mov rdi, qword ptr [rax + 8]; lea rax, [rip + 0x961]; call rax; 
0x000000000003c949: mov rdi, qword ptr [rax - 1]; mov rax, qword ptr [rax + 7]; call qword ptr [rax]; 
0x000000000001e324: mov rdi, qword ptr [rax]; call qword ptr [rip + 0x5b0db]; add rsp, 0x28; ret; 
0x000000000001e301: mov rdi, qword ptr [rax]; lea rax, [rip - 0xaab]; call rax; 
0x000000000005ef64: mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x67ae]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005dde3: mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x792f]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ddc7: mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x794c]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005b6bf: mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0xa053]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a102: mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0xb610]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000001e973: mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000005a42c: mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xb2ea]; mov edx, 1; jmp rax; 
0x000000000000ecd1: mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x000000000000ed07: mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0x12540; add rsp, 0x28; ret; 
0x000000000000f153: mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0x126b0; add rsp, 0x28; ret; 
0x000000000000e268: mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call 0xbc70; pop rcx; ret; 
0x000000000001e1cb: mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call qword ptr [rip + 0x5bcb0]; add rsp, 0x28; ret; 
0x000000000001ab53: mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; call qword ptr [rip + 0x5f218]; add rsp, 0x28; ret; 
0x000000000001e1a4: mov rdi, qword ptr [rax]; mov rsi, qword ptr [rax + 8]; lea rax, [rip - 0xac2]; call rax; 
0x0000000000038487: mov rdi, qword ptr [rbp - 1]; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x0000000000037bfa: mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000059f8d: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000041fc9: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000005b899: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9c6b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b87e: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9e99]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a363: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb3b5]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a335: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb3d7]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059fe7: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb720]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000059fb1: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb754]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059f9c: mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000003d0cd: mov rdi, qword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x000000000004a80b: mov rdi, qword ptr [rbx + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000003befa: mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000001f3aa: mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000005ec3e: mov rdi, qword ptr [rbx]; mov rax, qword ptr [rbx + 8]; lea rsi, [rip + 0x39e0]; mov edx, 4; call qword ptr [rax + 0x18]; 
0x00000000000582e5: mov rdi, qword ptr [rbx]; mov rax, qword ptr [rbx + 8]; lea rsi, [rip + 0xd30b]; mov edx, 3; call qword ptr [rax + 0x18]; 
0x000000000005822c: mov rdi, qword ptr [rbx]; mov rax, qword ptr [rbx + 8]; lea rsi, [rip + 0xd3c2]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000036d0a: mov rdi, qword ptr [rdi + 0x10]; mov edx, 1; call qword ptr [rip + 0x42a6f]; lea rax, [rip + 0x400a0]; pop rcx; ret; 
0x000000000004cceb: mov rdi, qword ptr [rdi + 0x10]; mov rax, rdi; pop rcx; ret; 
0x000000000004a7a7: mov rdi, qword ptr [rdi + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000000c0dd: mov rdi, qword ptr [rdi]; call 0x10d40; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000c142: mov rdi, qword ptr [rdi]; call 0x10d60; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000022721: mov rdi, qword ptr [rdi]; call 0x1ed20; xor eax, eax; pop rcx; ret; 
0x0000000000022731: mov rdi, qword ptr [rdi]; call 0x234e0; xor eax, eax; pop rcx; ret; 
0x0000000000056a41: mov rdi, qword ptr [rdi]; call 0x574b0; xor eax, eax; pop rcx; ret; 
0x000000000000ebe9: mov rdi, qword ptr [rdi]; call 0xec00; add rsp, 0x18; ret; 
0x00000000000184b5: mov rdi, qword ptr [rdi]; call qword ptr [rip + 0x61b2a]; pop rax; ret; 
0x000000000000e0ce: mov rdi, qword ptr [rdi]; call qword ptr [rip + 0x6be69]; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000001e2ee: mov rdi, qword ptr [rdi]; lea rax, [rip - 0xc8]; call rax; 
0x000000000005b63f: mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000001f757: mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax]; 
0x000000000000bc3b: mov rdi, qword ptr [rip + 0x6e3be]; call 0x9080; call 0xbbb0; mov byte ptr [rip + 0x6e3e5], 1; pop rbp; ret; 
0x000000000003d3ea: mov rdi, qword ptr [rsi + 0x10]; mov rax, qword ptr [rsi + 0x18]; call qword ptr [rax + 0x28]; 
0x000000000005eec8: mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x71ef]; mov edx, 9; call qword ptr [rax + 0x18]; 
0x000000000005deff: mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x81a2]; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000005dd5d: mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x8315]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000005b8da: mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x9d67]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000042782: mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rsp + 8]; call qword ptr [rax + 0x20]; 
0x000000000005f120: mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x740d]; mov edx, 0xb; jmp rax; 
0x000000000005ec00: mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0x74ae]; mov edx, 5; jmp rax; 
0x0000000000057e20: mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rax, qword ptr [rax + 0x18]; lea rsi, [rip + 0xd764]; mov edx, 0xe; jmp rax; 
0x000000000005b5fa: mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000005ed5c: mov rdi, qword ptr [rsi]; mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x000000000005c0d0: mov rdi, qword ptr [rsi]; mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov esi, eax; pop rax; jmp rcx; 
0x0000000000010b7b: mov rdi, qword ptr [rsp + 0x10]; lea rax, [rip + 0x2e3f9]; call rax; 
0x000000000000e186: mov rdi, qword ptr [rsp + 0x10]; lea rax, [rip + 0x49e4e]; lea rsi, [rsp + 0x28]; call rax; 
0x0000000000011596: mov rdi, qword ptr [rsp + 0x10]; lea rax, [rip - 0x5b72]; call rax; 
0x0000000000012934: mov rdi, qword ptr [rsp + 0x10]; lea rdx, [rip + 0x63658]; lea rax, [rip - 0x7227]; mov esi, 0x100; call rax; 
0x0000000000059ed6: mov rdi, qword ptr [rsp + 0x10]; lea rsi, [rip + 0xb0f2]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000001a50b: mov rdi, qword ptr [rsp + 0x10]; mov byte ptr [rsp + 0x47], 0; lea rax, [rip - 0xdac]; call rax; 
0x000000000005a3e8: mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; lea rsi, [rip + 0xb320]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a24d: mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 0x18]; lea rsi, [rip + 0xb4bb]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059dbf: mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000f691: mov rdi, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call 0xed30; add rsp, 0x78; ret; 
0x000000000000f711: mov rdi, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call 0xeff0; add rsp, 0x78; ret; 
0x000000000001518f: mov rdi, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; lea rax, [rip + 0x5b60]; call rax; 
0x00000000000183f5: mov rdi, qword ptr [rsp + 0x10]; mov rsi, rax; call 0x18d10; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x48; ret; 
0x00000000000359e9: mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x0000000000019d91: mov rdi, qword ptr [rsp + 0x148]; call 0x9060; ud2; lea rax, [rip + 0xd59]; lea rdi, [rsp + 0xb0]; call rax; 
0x0000000000019a67: mov rdi, qword ptr [rsp + 0x158]; call 0x9060; ud2; lea rax, [rip + 0x1083]; lea rdi, [rsp + 0xb0]; call rax; 
0x0000000000010b8b: mov rdi, qword ptr [rsp + 0x18]; call qword ptr [rip + 0x68eba]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000000e160: mov rdi, qword ptr [rsp + 0x18]; lea rax, [rip + 0x100a4]; call rax; 
0x0000000000010b51: mov rdi, qword ptr [rsp + 0x18]; lea rax, [rip + 0xd6b3]; call rax; 
0x000000000001a124: mov rdi, qword ptr [rsp + 0x18]; lea rax, [rip - 0x3e50]; lea rsi, [rsp + 0x58]; call rax; 
0x00000000000141f4: mov rdi, qword ptr [rsp + 0x18]; lea rcx, [rip + 0x61e00]; lea rax, [rip - 0x8877]; lea rdx, [rsp + 0x28]; call rax; 
0x000000000001e131: mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x20]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x278; ret; 
0x000000000000e3e7: mov rdi, qword ptr [rsp + 0x18]; mov rsi, rax; call 0xe280; add rsp, 0x38; ret; 
0x0000000000016e58: mov rdi, qword ptr [rsp + 0x18]; mov rsi, rax; call qword ptr [rip + 0x62dba]; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x000000000000e38c: mov rdi, qword ptr [rsp + 0x20]; add rdx, qword ptr [rdi + 0x10]; mov qword ptr [rdi + 0x10], rdx; add rsp, 0xb8; ret; 
0x0000000000016b7e: mov rdi, qword ptr [rsp + 0x20]; lea rax, [rip + 0xd6]; call rax; 
0x000000000001bb9d: mov rdi, qword ptr [rsp + 0x20]; lea rsi, [rip + 0x5a7bf]; lea rax, [rip - 0x48b0]; call rax; 
0x0000000000014329: mov rdi, qword ptr [rsp + 0x20]; mov edx, 0x38; call 0x9078; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x58; ret; 
0x0000000000016a71: mov rdi, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x63084]; add rsp, 0x148; ret; 
0x0000000000018989: mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x1d1b]; call rax; 
0x000000000000d4de: mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x2b0d6]; call rax; 
0x00000000000169de: mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x4096]; call rax; 
0x0000000000016987: mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x40ed]; call rax; 
0x000000000001c52f: mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip - 0x10f6b]; call rax; 
0x000000000001bbc4: mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip - 0x5b00]; call rax; 
0x000000000001559f: mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip - 0x9fdb]; call rax; 
0x000000000005a0a7: mov rdi, qword ptr [rsp + 0x28]; mov rax, qword ptr [rsp + 0x30]; lea rsi, [rip + 0xb661]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000002d7e3: mov rdi, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x148]; call rbx; 
0x00000000000308d8: mov rdi, qword ptr [rsp + 0x38]; add rax, qword ptr [rdi + 0x60]; lea rdi, [rip + 0x30f64]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000000edd7: mov rdi, qword ptr [rsp + 0x38]; call 0x9060; ud2; lea rax, [rip - 0x364a]; call rax; 
0x000000000000f09f: mov rdi, qword ptr [rsp + 0x38]; call 0x9060; ud2; lea rax, [rip - 0x3912]; call rax; 
0x00000000000187bb: mov rdi, qword ptr [rsp + 0x40]; lea rax, [rip + 0x1fa9]; call rax; 
0x000000000001c9b2: mov rdi, qword ptr [rsp + 0x48]; mov qword ptr [rsp + 0xa8], rdi; lea rax, [rip - 0x786]; xor esi, esi; call rax; 
0x000000000001cd1c: mov rdi, qword ptr [rsp + 0x50]; lea rax, [rip + 0x58]; call rax; 
0x000000000001ccc1: mov rdi, qword ptr [rsp + 0x60]; lea rax, [rip + 0x583]; call rax; 
0x0000000000047473: mov rdi, qword ptr [rsp + 0x80]; lea rsi, [rsp + 0x430]; mov rax, qword ptr [rsp + 0xb0]; call qword ptr [rax + 0x20]; 
0x000000000001362b: mov rdi, qword ptr [rsp + 0x90]; call 0x124c0; add rsp, 0x98; ret; 
0x000000000001a3b6: mov rdi, qword ptr [rsp + 0xa0]; call 0x9060; ud2; lea rax, [rip + 0x8c4]; lea rdi, [rsp + 0x18]; call rax; 
0x000000000000ea0d: mov rdi, qword ptr [rsp + 0xf0]; mov rsi, qword ptr [rsp + 0xf8]; lea r8, [rip + 0x6746c]; call 0x11490; add rsp, 0x1c8; ret; 
0x000000000001bcda: mov rdi, qword ptr [rsp + 0xf8]; call 0x9060; ud2; lea rax, [rip + 0x2520]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000000ef2d: mov rdi, qword ptr [rsp + 8]; add rdi, 0x18; call qword ptr [rip + 0x6ae6c]; add rsp, 0x28; ret; 
0x000000000000ef09: mov rdi, qword ptr [rsp + 8]; add rdi, 0x18; lea rax, [rip + 0xf327]; call rax; 
0x000000000000f2f4: mov rdi, qword ptr [rsp + 8]; add rdi, 0x20; lea rax, [rip + 0xb90c]; call rax; 
0x000000000000f2d0: mov rdi, qword ptr [rsp + 8]; add rdi, 0x20; lea rax, [rip + 0xb930]; call rax; 
0x000000000000f3f7: mov rdi, qword ptr [rsp + 8]; add rdi, 0xa8; call 0xf580; add rsp, 0x28; ret; 
0x000000000000f207: mov rdi, qword ptr [rsp + 8]; add rdi, 4; call qword ptr [rip + 0x6a3ca]; add rsp, 0x18; ret; 
0x000000000001e166: mov rdi, qword ptr [rsp + 8]; add rdi, 8; call qword ptr [rip + 0x5b5e3]; add rsp, 0x18; ret; 
0x000000000001a9d0: mov rdi, qword ptr [rsp + 8]; add rdi, 8; call qword ptr [rip + 0x5f141]; add rsp, 0x18; ret; 
0x000000000000eea1: mov rdi, qword ptr [rsp + 8]; call 0xeed0; add rsp, 0x28; ret; 
0x000000000000f1a1: mov rdi, qword ptr [rsp + 8]; call 0xf1e0; add rsp, 0x28; ret; 
0x000000000000f451: mov rdi, qword ptr [rsp + 8]; call 0xf4d0; add rsp, 0x28; ret; 
0x000000000001e279: mov rdi, qword ptr [rsp + 8]; call qword ptr [rip + 0x5bd2c]; add rsp, 0x28; ret; 
0x000000000001aba9: mov rdi, qword ptr [rsp + 8]; call qword ptr [rip + 0x5f2dc]; add rsp, 0x28; ret; 
0x000000000001aac5: mov rdi, qword ptr [rsp + 8]; call qword ptr [rip + 0x5f460]; add rsp, 0x28; ret; 
0x000000000000f564: mov rdi, qword ptr [rsp + 8]; call qword ptr [rip + 0x6a5b1]; add rsp, 0x18; ret; 
0x000000000000ec84: mov rdi, qword ptr [rsp + 8]; call qword ptr [rip + 0x6ae91]; add rsp, 0x18; ret; 
0x0000000000010b04: mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x2e470]; call rax; 
0x000000000001bdc5: mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x3c11f]; call rax; 
0x000000000001e259: mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x5b]; call rax; 
0x000000000001aaa5: mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x8f]; call rax; 
0x000000000001ab89: mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0xbb]; call rax; 
0x0000000000019f48: mov rdi, qword ptr [rsp + 8]; lea rax, [rip - 0x3a34]; call rax; 
0x00000000000114e8: mov rdi, qword ptr [rsp + 8]; lea rax, [rip - 0x5ab4]; call rax; 
0x00000000000128fa: mov rdi, qword ptr [rsp + 8]; lea rdx, [rip + 0x6367a]; lea rax, [rip - 0x71ed]; mov esi, 0x100; call rax; 
0x000000000001629c: mov rdi, qword ptr [rsp + 8]; lea rsi, [rip + 0x5fe88]; lea rax, [rip - 0xacbf]; call rax; 
0x000000000000e8fb: mov rdi, qword ptr [rsp + 8]; lea rsi, [rip + 0x675d1]; lea rax, [rip - 0x331e]; call rax; 
0x000000000000c59c: mov rdi, qword ptr [rsp + 8]; lea rsi, [rip + 0x69588]; lea rax, [rip - 0xfbf]; call rax; 
0x000000000001df9b: mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x288; ret; 
0x000000000005abda: mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000005aac8: mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000005ac2c: mov rdi, qword ptr [rsp + 8]; mov rcx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000001d315: mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [rsp + 0x10]; lea rax, [rip - 0x11d56]; call rax; 
0x000000000001adf5: mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [rsp + 0x10]; lea rax, [rip - 0xf836]; call rax; 
0x000000000002f214: mov rdi, qword ptr [rsp + 8]; mov rsi, qword ptr [rsp + 0x570]; call rbx; 
0x0000000000013d83: mov rdi, qword ptr [rsp + 8]; mov rsi, rax; call 0x13ba0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x0000000000019b1a: mov rdi, qword ptr [rsp]; call qword ptr [rip + 0x5fe24]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000019afb: mov rdi, qword ptr [rsp]; lea rax, [rip + 0x100a]; call rax; 
0x0000000000016dc8: mov rdi, qword ptr [rsp]; lea rsi, [rsp + 0x10]; call qword ptr [rip + 0x62949]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000019796: mov rdi, qword ptr [rsp]; lea rsi, [rsp + 0x18]; call qword ptr [rip + 0x5fceb]; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x000000000000e15f: mov rdi, qword ptr es:[rsp + 0x18]; lea rax, [rip + 0x100a4]; call rax; 
0x000000000005ebde: mov rdi, r10; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1a8ea]; add rsp, 0x28; ret; 
0x000000000005eaae: mov rdi, r10; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1aa1a]; add rsp, 0x28; ret; 
0x000000000005e985: mov rdi, r10; xor ecx, ecx; call qword ptr [rip + 0x1ab48]; add rsp, 0x30; pop rbx; ret; 
0x000000000003886a: mov rdi, r12; call rbx; 
0x000000000002f203: mov rdi, r12; lea rbx, [rip - 0x1a4ad]; call rbx; 
0x0000000000059bbc: mov rdi, r13; call qword ptr [rax + 0x18]; 
0x000000000005b947: mov rdi, r13; mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000005bcd3: mov rdi, r13; mov rdx, r9; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x0000000000032fb8: mov rdi, r13; mov rsi, qword ptr [rsp + 0x198]; call rbx; 
0x0000000000045b1f: mov rdi, r13; mov rsi, qword ptr [rsp + 0x330]; call rbx; 
0x000000000005bb1a: mov rdi, r13; mov rsi, r15; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x0000000000035c36: mov rdi, r14; call qword ptr [rbp]; 
0x0000000000053732: mov rdi, r14; call qword ptr [rip + 0x25c75]; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x000000000003d0ad: mov rdi, r14; call qword ptr [rip + 0x3c6d2]; call qword ptr [rip + 0x3c32c]; ud2; mov rdi, r15; call rax; 
0x000000000003b350: mov rdi, r14; call rax; 
0x0000000000045b0e: mov rdi, r14; lea rbx, [rip - 0x30db8]; call rbx; 
0x000000000003e426: mov rdi, r15; add rdi, 8; lea rsi, [rsp + 0xb0]; mov edx, 0xa8; call rbx; 
0x000000000005858e: mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x000000000003c50d: mov rdi, r15; call qword ptr [rip + 0x3d232]; mov r15, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000003c4de: mov rdi, r15; call qword ptr [rip + 0x3d261]; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000003cf3e: mov rdi, r15; call rax; 
0x000000000002d7d2: mov rdi, r15; lea rbx, [rip - 0x18a7c]; call rbx; 
0x0000000000032fa7: mov rdi, r15; lea rbx, [rip - 0x1e251]; call rbx; 
0x00000000000454d5: mov rdi, r15; lea rbx, [rip - 0x3078f]; call rbx; 
0x0000000000046d31: mov rdi, r15; lea rbx, [rip - 0x31fdb]; call rbx; 
0x000000000005ae75: mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000005a094: mov rdi, r15; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000005b08c: mov rdi, r15; mov rsi, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x0000000000059fd0: mov rdi, r15; mov rsi, rbp; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000035625: mov rdi, r15; xor edx, edx; call rbp; cmp eax, -1; jne 0x356f8; call rbx; 
0x000000000004a90c: mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x000000000003c4ea: mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000005aa37: mov rdi, rax; call qword ptr [rip + 0x1f408]; add rsp, 0x38; ret; 
0x0000000000057796: mov rdi, rax; call qword ptr [rip + 0x222a1]; add rsp, 0x18; ret; 
0x000000000003dd9e: mov rdi, rax; call qword ptr [rip + 0x3be49]; pop rcx; ret; 
0x000000000002b999: mov rdi, rax; call qword ptr [rip + 0x4e24e]; pop rcx; ret; 
0x000000000002b974: mov rdi, rax; call qword ptr [rip + 0x4e273]; pop rcx; ret; 
0x000000000000e241: mov rdi, rax; call qword ptr [rip + 0x6bb16]; and al, 1; movzx eax, al; add rsp, 0x48; ret; 
0x000000000005b57b: mov rdi, rax; jmp rcx; 
0x000000000000c8df: mov rdi, rax; lea rsi, [rip + 0x69307]; call 0x14500; add rsp, 0x128; ret; 
0x000000000005b5a7: mov rdi, rax; mov rsi, rcx; call qword ptr [rip + 0x1e895]; add rsp, 0x38; ret; 
0x0000000000015cd8: mov rdi, rax; mov rsi, rdx; call 0x151b0; add rsp, 0x18; ret; 
0x0000000000018c0e: mov rdi, rax; mov rsi, rdx; call 0x1bd90; add rsp, 0x18; ret; 
0x0000000000012458: mov rdi, rax; mov rsi, rdx; call 0xf9d0; add rsp, 0x18; ret; 
0x00000000000466a2: mov rdi, rax; shl rdi, 5; mov esi, 8; mov qword ptr [rsp + 0x330], rdi; mov rbp, rcx; call rcx; 
0x0000000000049f57: mov rdi, rax; xor r8d, r8d; call qword ptr [rip + 0x2f605]; pop rbx; ret; 
0x0000000000037c0a: mov rdi, rbp; call rbx; 
0x000000000005adf9: mov rdi, rbp; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x00000000000426d9: mov rdi, rbp; mov esi, 1; xor edx, edx; call rbx; 
0x000000000005b064: mov rdi, rbp; mov rsi, qword ptr [rsp + 0x10]; mov rdx, r15; call qword ptr [rbx + 0x18]; 
0x00000000000426cd: mov rdi, rbp; xor esi, esi; mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000058159: mov rdi, rbx; call qword ptr [rip + 0x21d6e]; add rsp, 0xa0; pop rbx; ret; 
0x0000000000035e4d: mov rdi, rbx; call qword ptr [rip + 0x43f3a]; add rsp, 0x10; pop rbx; ret; 
0x00000000000422c9: mov rdi, rbx; mov eax, edi; add rsp, 0x78; pop rbx; pop rbp; ret; 
0x000000000005bd89: mov rdi, rbx; mov esi, 0x27; mov r13, rax; call rax; 
0x000000000005ee7e: mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1a64c]; add rsp, 0x88; ret; 
0x000000000005e658: mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1ae72]; add rsp, 0x88; ret; 
0x000000000005e423: mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1b0a7]; add rsp, 0x88; ret; 
0x000000000005e2f8: mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1b1d2]; add rsp, 0x88; ret; 
0x000000000005e258: mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1b272]; add rsp, 0x88; ret; 
0x000000000005e1c5: mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1b305]; add rsp, 0x88; ret; 
0x000000000005e135: mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1b395]; add rsp, 0x88; ret; 
0x000000000005e0a3: mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1b427]; add rsp, 0x88; ret; 
0x000000000005e013: mov rdi, rsi; mov esi, 1; call qword ptr [rip + 0x1b4b7]; add rsp, 0x88; ret; 
0x000000000005e847: mov rdi, rsi; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1ac81]; add rsp, 0x28; ret; 
0x000000000005e75a: mov rdi, rsi; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1ad6e]; add rsp, 0x28; ret; 
0x000000000005e6ac: mov rdi, rsi; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1ae1c]; add rsp, 0x88; ret; 
0x000000000005e477: mov rdi, rsi; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1b051]; add rsp, 0x88; ret; 
0x000000000005c188: mov rdi, rsi; mov rsi, rax; call qword ptr [rip + 0x1dd3c]; pop rcx; ret; 
0x000000000001e3b3: mov rdi, rsp; call 0x1e3c0; add rsp, 0x58; ret; 
0x0000000000036918: mov rdi, rsp; call 0x20db0; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x0000000000037da5: mov rdi, rsp; call qword ptr [rip + 0x41a4a]; pop rcx; ret; 
0x000000000001d22c: mov rdi, rsp; call qword ptr [rip + 0x5c4ab]; mov rdi, rsp; call qword ptr [rip + 0x5cd82]; add rsp, 0x18; ret; 
0x000000000001d235: mov rdi, rsp; call qword ptr [rip + 0x5cd82]; add rsp, 0x18; ret; 
0x00000000000389b4: mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000037bf6: mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000005ac3a: mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000001731b: mov rdx, qword ptr [rcx + 0x10]; mov qword ptr [rsp + 0x38], rax; mov qword ptr [rsp + 0x40], rdx; add rsp, 0x48; ret; 
0x00000000000143df: mov rdx, qword ptr [rcx + 0x10]; mov qword ptr [rsp + 0x58], rax; mov qword ptr [rsp + 0x60], rdx; add rsp, 0x68; ret; 
0x0000000000056cc4: mov rdx, qword ptr [rdi + 0x10]; ret; 
0x000000000004cce7: mov rdx, qword ptr [rdi + 0x18]; mov rdi, qword ptr [rdi + 0x10]; mov rax, rdi; pop rcx; ret; 
0x000000000005d4b4: mov rdx, qword ptr [rdi + 0x18]; ret; 
0x0000000000053544: mov rdx, qword ptr [rdi + 0x28]; ret; 
0x000000000002a26d: mov rdx, qword ptr [rdi + 8]; mov eax, 1; ret; 
0x000000000002a297: mov rdx, qword ptr [rdi + 8]; mov rax, rdx; not rax; shr rax, 0x3f; ret; 
0x0000000000013783: mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000004b3a9: mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x0000000000015cb4: mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x60; ret; 
0x000000000000e6c4: mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x70; ret; 
0x000000000000e649: mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x78; ret; 
0x0000000000013772: mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x0000000000013cba: mov rdx, qword ptr [rsp + 0x10]; call 0x12a30; mov rax, qword ptr [rsp]; add rsp, 0x68; ret; 
0x0000000000014b5c: mov rdx, qword ptr [rsp + 0x10]; call 0xc300; add rsp, 0x28; ret; 
0x000000000001bd0f: mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; lea rax, [rip + 0xb00]; mov edi, 0x27; call rax; 
0x000000000000d61f: mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; lea rax, [rip + 0xc1d0]; lea rdi, [rsp + 0x278]; call rax; 
0x0000000000011645: mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000001529f: mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x000000000001741b: mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000000fe40: mov rdx, qword ptr [rsp + 0x18]; add rsp, 0xc0; ret; 
0x000000000001a98b: mov rdx, qword ptr [rsp + 0x18]; call 0x18d10; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000bd1f: mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rcx], rdx; add rsp, 0x78; ret; 
0x0000000000010c16: mov rdx, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x2e0c9]; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000019450: mov rdx, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x430bf]; lea rdi, [rsp + 0x630]; call rax; 
0x000000000000d36b: mov rdx, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x49e74]; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000cdad: mov rdx, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x4a432]; lea rdi, [rsp + 0x328]; call rax; 
0x0000000000010faa: mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000001bee9: mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x98; ret; 
0x000000000005b094: mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x0000000000011474: mov rdx, qword ptr [rsp + 0x28]; add rsp, 0x88; ret; 
0x000000000001da25: mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x5bd58]; add rsp, 0x68; ret; 
0x000000000001b8f5: mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x5de88]; add rsp, 0x68; ret; 
0x0000000000011a75: mov rdx, qword ptr [rsp + 0x28]; call qword ptr [rip + 0x67d08]; add rsp, 0x68; ret; 
0x000000000001b1c1: mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x228; ret; 
0x00000000000196ab: mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x000000000001157f: mov rdx, qword ptr [rsp + 0x38]; add rsp, 0xb8; ret; 
0x00000000000426d2: mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x000000000001a54d: mov rdx, qword ptr [rsp + 0x38]; lea rax, [rip + 0x417]; call rax; 
0x000000000000bf2d: mov rdx, qword ptr [rsp + 0x38]; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xd0; ret; 
0x000000000000bcaa: mov rdx, qword ptr [rsp + 0x38]; mov qword ptr [rsp + 0x40], rax; mov qword ptr [rsp + 0x48], rdx; add rsp, 0x50; ret; 
0x000000000001be2f: mov rdx, qword ptr [rsp + 0x38]; mov qword ptr [rsp + 0x78], rax; mov qword ptr [rsp + 0x80], rdx; add rsp, 0x88; ret; 
0x0000000000019ef9: mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; lea rax, [rip - 0x3fba]; lea rdi, [rsp + 0x20]; call rax; 
0x000000000001004c: mov rdx, qword ptr [rsp + 0x40]; add rsp, 0xc8; ret; 
0x000000000001201e: mov rdx, qword ptr [rsp + 0x48]; add rsp, 0x248; ret; 
0x000000000001e38d: mov rdx, qword ptr [rsp + 0x50]; lea rax, [rip - 0x2189]; lea rdi, [rsp + 0x20]; call rax; 
0x00000000000107c0: mov rdx, qword ptr [rsp + 0x58]; mov qword ptr [rcx + 0x20], rdx; add rsp, 0xb8; ret; 
0x0000000000010cc6: mov rdx, qword ptr [rsp + 0x60]; mov qword ptr [rsp + 0x68], rax; mov qword ptr [rsp + 0x70], rdx; add rsp, 0x78; ret; 
0x000000000001b4f3: mov rdx, qword ptr [rsp + 0x70]; add rsp, 0x2c8; ret; 
0x0000000000010ed2: mov rdx, qword ptr [rsp + 0x70]; call 0xe3b0; add rsp, 0x78; ret; 
0x000000000001caee: mov rdx, qword ptr [rsp + 0x70]; mov qword ptr [rsp + 0x130], rdx; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x000000000001538d: mov rdx, qword ptr [rsp + 0x80]; add rsp, 0x148; ret; 
0x0000000000011852: mov rdx, qword ptr [rsp + 0xa0]; add rsp, 0x158; ret; 
0x0000000000014751: mov rdx, qword ptr [rsp + 0xb0]; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x148; ret; 
0x00000000000124f9: mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000001e5b5: mov rdx, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000013a2b: mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000164db: mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000bfd6: mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000000c479: mov rdx, qword ptr [rsp + 8]; add rsp, 0x40; ret; 
0x0000000000015f37: mov rdx, qword ptr [rsp + 8]; mov qword ptr [rsp + 0x28], rax; mov qword ptr [rsp + 0x30], rdx; add rsp, 0x38; ret; 
0x000000000000e5cd: mov rdx, qword ptr [rsp]; call 0xe1f0; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000011344: mov rdx, qword ptr [rsp]; lea rdi, [rip + 0x4f1b5]; lea rax, [rip - 0x5ce6]; mov esi, 0x23; call rax; 
0x0000000000017e5b: mov rdx, qword ptr [rsp]; mov rcx, qword ptr [rsp + 8]; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000005f1b5: mov rdx, r11; ret; 
0x0000000000059fa7: mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000000a2cc: mov rdx, r14; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004a8db: mov rdx, r14; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000026634: mov rdx, r14; pop rbx; pop r14; pop r15; ret; 
0x000000000005b06c: mov rdx, r15; call qword ptr [rbx + 0x18]; 
0x000000000000e8f3: mov rdx, r8; call 0xc4b0; mov rdi, qword ptr [rsp + 8]; lea rsi, [rip + 0x675d1]; lea rax, [rip - 0x331e]; call rax; 
0x000000000005bcd6: mov rdx, r9; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x00000000000402fb: mov rdx, rbx; add rsp, 0x88; pop rbx; pop r14; ret; 
0x0000000000053e2b: mov rdx, rbx; and r8d, 3; lea rax, [rip + 0x10df7]; movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x000000000004d405: mov rdx, rcx; add rsi, rax; mov rax, rsi; pop rcx; ret; 
0x000000000005c372: mov rdx, rcx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000005b604: mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000004aa0a: mov rdx, rcx; ret; 
0x0000000000056d4a: mov rdx, rsi; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x00000000000100b4: mov rdx, rsi; mov rax, rdi; mov qword ptr [rsp], rax; mov qword ptr [rsp + 8], rdx; add rsp, 0x10; ret; 
0x000000000005d4c0: mov rdx, rsi; mov rax, rdi; ret; 
0x000000000005f28e: mov rdx, rsi; ret; 
0x000000000005edb7: mov rdx, rsp; call qword ptr [rip + 0x1b088]; add rsp, 0x38; ret; 
0x000000000005aa34: mov rdx, rsp; mov rdi, rax; call qword ptr [rip + 0x1f408]; add rsp, 0x38; ret; 
0x000000000005b5a4: mov rdx, rsp; mov rdi, rax; mov rsi, rcx; call qword ptr [rip + 0x1e895]; add rsp, 0x38; ret; 
0x000000000000ed0a: mov rsi, qword ptr [rax + 8]; call 0x12540; add rsp, 0x28; ret; 
0x000000000000f156: mov rsi, qword ptr [rax + 8]; call 0x126b0; add rsp, 0x28; ret; 
0x000000000000e26b: mov rsi, qword ptr [rax + 8]; call 0xbc70; pop rcx; ret; 
0x000000000001e1ce: mov rsi, qword ptr [rax + 8]; call qword ptr [rip + 0x5bcb0]; add rsp, 0x28; ret; 
0x000000000001ab56: mov rsi, qword ptr [rax + 8]; call qword ptr [rip + 0x5f218]; add rsp, 0x28; ret; 
0x000000000000bf57: mov rsi, qword ptr [rax + 8]; call qword ptr [rip + 0x6d727]; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000001e1a7: mov rsi, qword ptr [rax + 8]; lea rax, [rip - 0xac2]; call rax; 
0x000000000005ac36: mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x0000000000039fd0: mov rsi, qword ptr [rbx + 8]; mov edi, 6; lea rax, [rip + 0x27bec]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000005abe4: mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000005aad2: mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x0000000000017c6b: mov rsi, qword ptr [rsp + 0x10]; lea rax, [rip + 0x799]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000001d31a: mov rsi, qword ptr [rsp + 0x10]; lea rax, [rip - 0x11d56]; call rax; 
0x000000000001adfa: mov rsi, qword ptr [rsp + 0x10]; lea rax, [rip - 0xf836]; call rax; 
0x00000000000114e3: mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; lea rax, [rip - 0x5ab4]; call rax; 
0x000000000005b08f: mov rsi, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x000000000005b067: mov rsi, qword ptr [rsp + 0x10]; mov rdx, r15; call qword ptr [rbx + 0x18]; 
0x000000000002d7e8: mov rsi, qword ptr [rsp + 0x148]; call rbx; 
0x000000000000f696: mov rsi, qword ptr [rsp + 0x18]; call 0xed30; add rsp, 0x78; ret; 
0x000000000000f716: mov rsi, qword ptr [rsp + 0x18]; call 0xeff0; add rsp, 0x78; ret; 
0x0000000000015194: mov rsi, qword ptr [rsp + 0x18]; lea rax, [rip + 0x5b60]; call rax; 
0x0000000000015194: mov rsi, qword ptr [rsp + 0x18]; lea rax, [rip + 0x5b60]; call rax; add rsp, 0x28; ret; 
0x000000000001bd14: mov rsi, qword ptr [rsp + 0x18]; lea rax, [rip + 0xb00]; mov edi, 0x27; call rax; 
0x000000000000d624: mov rsi, qword ptr [rsp + 0x18]; lea rax, [rip + 0xc1d0]; lea rdi, [rsp + 0x278]; call rax; 
0x0000000000010aff: mov rsi, qword ptr [rsp + 0x18]; mov rdi, qword ptr [rsp + 8]; lea rax, [rip + 0x2e470]; call rax; 
0x0000000000032fbb: mov rsi, qword ptr [rsp + 0x198]; call rbx; 
0x0000000000010c1b: mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x2e0c9]; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000019455: mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x430bf]; lea rdi, [rsp + 0x630]; call rax; 
0x000000000000d370: mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x49e74]; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000cdb2: mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x4a432]; lea rdi, [rsp + 0x328]; call rax; 
0x0000000000011591: mov rsi, qword ptr [rsp + 0x20]; mov rdi, qword ptr [rsp + 0x10]; lea rax, [rip - 0x5b72]; call rax; 
0x0000000000018984: mov rsi, qword ptr [rsp + 0x20]; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x1d1b]; call rax; 
0x000000000000d2d5: mov rsi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x2dbcf]; lea rdi, [rsp + 0x1c8]; call rax; 
0x000000000000cd17: mov rsi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x2e18d]; lea rdi, [rsp + 0x1c8]; call rax; 
0x00000000000169c9: mov rsi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x345b]; lea rdi, [rsp + 0x30]; call rax; 
0x0000000000016b03: mov rsi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x3641]; lea rdi, [rsp + 0x68]; call rax; 
0x0000000000010b76: mov rsi, qword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x10]; lea rax, [rip + 0x2e3f9]; call rax; 
0x000000000001c52a: mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip - 0x10f6b]; call rax; 
0x000000000001559a: mov rsi, qword ptr [rsp + 0x30]; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip - 0x9fdb]; call rax; 
0x000000000001a548: mov rsi, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; lea rax, [rip + 0x417]; call rax; 
0x0000000000045b22: mov rsi, qword ptr [rsp + 0x330]; call rbx; 
0x00000000000187b6: mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x40]; lea rax, [rip + 0x1fa9]; call rax; 
0x000000000001e388: mov rsi, qword ptr [rsp + 0x48]; mov rdx, qword ptr [rsp + 0x50]; lea rax, [rip - 0x2189]; lea rdi, [rsp + 0x20]; call rax; 
0x000000000002f219: mov rsi, qword ptr [rsp + 0x570]; call rbx; 
0x0000000000010ecd: mov rsi, qword ptr [rsp + 0x68]; mov rdx, qword ptr [rsp + 0x70]; call 0xe3b0; add rsp, 0x78; ret; 
0x000000000000ea15: mov rsi, qword ptr [rsp + 0xf8]; lea r8, [rip + 0x6746c]; call 0x11490; add rsp, 0x1c8; ret; 
0x0000000000016b79: mov rsi, qword ptr [rsp + 8]; mov rdi, qword ptr [rsp + 0x20]; lea rax, [rip + 0xd6]; call rax; 
0x000000000005bccc: mov rsi, qword ptr [rsp]; add rsi, r15; mov rdi, r13; mov rdx, r9; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x0000000000059fa4: mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000005bb1d: mov rsi, r15; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x0000000000013d88: mov rsi, rax; call 0x13ba0; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x00000000000183fa: mov rsi, rax; call 0x18d10; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x48; ret; 
0x000000000000e3ec: mov rsi, rax; call 0xe280; add rsp, 0x38; ret; 
0x000000000005c18b: mov rsi, rax; call qword ptr [rip + 0x1dd3c]; pop rcx; ret; 
0x00000000000359e0: mov rsi, rax; call qword ptr [rip + 0x44027]; mov rdi, qword ptr [rsp + 0x110]; mov rax, qword ptr [rsp + 0x118]; call qword ptr [rax + 0x28]; 
0x0000000000016e5d: mov rsi, rax; call qword ptr [rip + 0x62dba]; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x38; ret; 
0x000000000005ed67: mov rsi, rax; jmp rcx; 
0x000000000001bb87: mov rsi, rax; lea rax, [rip + 0x4098f]; lea rdi, [rsp + 0x68]; mov qword ptr [rsp + 0x20], rdi; call rax; 
0x000000000001c853: mov rsi, rax; mov al, byte ptr [rsp + 0x16]; movzx edi, al; call qword ptr [rip + 0x5d3ed]; add rsp, 0x28; ret; 
0x000000000001bf6e: mov rsi, rax; mov al, byte ptr [rsp + 0x16]; movzx edi, al; call qword ptr [rip + 0x5dcd2]; add rsp, 0x18; ret; 
0x000000000001bb26: mov rsi, rax; mov qword ptr [rsp + 0x20], rsi; call qword ptr [rip + 0x5e324]; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x28; ret; 
0x0000000000059fd3: mov rsi, rbp; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000005b5aa: mov rsi, rcx; call qword ptr [rip + 0x1e895]; add rsp, 0x38; ret; 
0x0000000000015cdb: mov rsi, rdx; call 0x151b0; add rsp, 0x18; ret; 
0x0000000000018c11: mov rsi, rdx; call 0x1bd90; add rsp, 0x18; ret; 
0x000000000001245b: mov rsi, rdx; call 0xf9d0; add rsp, 0x18; ret; 
0x000000000005b601: mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000005474a: mov si, 0x400; mov cx, 1; lea rdx, [rip + 0x1054b]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000029f97: mov word ptr [r14 + 8], dx; mov qword ptr [r14], 0x26; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000599b8: mov word ptr [rax + 0x1c], dx; mov cx, 1; mov word ptr [rax], cx; ret; 
0x00000000000206f8: mov word ptr [rax + 0x415b0005], ss; pop rsp; pop r13; pop r14; pop r15; ret; 
0x00000000000599c7: mov word ptr [rax + 6], dx; mov dword ptr [rax + 2], ecx; xor ecx, ecx; mov word ptr [rax], cx; ret; 
0x0000000000015fb0: mov word ptr [rax + rax], ds; add byte ptr [rax - 0x73], cl; push rsp; and al, 0x18; call rax; 
0x000000000001a10e: mov word ptr [rax + rbp*4], fs; add byte ptr [rax], al; add byte ptr [rax - 0x74b7efb8], cl; and al, 0x20; add rsp, 0xd8; ret; 
0x0000000000044bed: mov word ptr [rax + rcx*2], fs; add al, 0; add byte ptr [rcx], dh; rol byte ptr [rax + 0xf084979], cl; xchg eax, esp; ret 0x8b48; 
0x0000000000018eae: mov word ptr [rax + rcx*8], fs; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xffffe2a5; call rax; 
0x000000000002ee29: mov word ptr [rax + rdi*2], fs; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add dword ptr [r8 + 0x39], ecx; ret 0x860f; 
0x000000000001a07e: mov word ptr [rax + rdx*4], fs; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; js 0x1a090; lea rax, [rip + 0x961]; call rax; 
0x000000000004946a: mov word ptr [rax - 0x77], cs; ret; 
0x0000000000017c08: mov word ptr [rax], 2; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000017a23: mov word ptr [rax], 3; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; ret; 
0x000000000001848f: mov word ptr [rax], 3; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xb8; ret; 
0x00000000000599c0: mov word ptr [rax], cx; ret; 
0x00000000000598e2: mov word ptr [rbx], 2; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x000000000000a8b4: mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x0000000000059a49: mov word ptr [rdi + 0x18], dx; mov dword ptr [rdi + 0x10], ecx; mov dword ptr [rdi + 0x14], r8d; ret; 
0x000000000002a665: mov word ptr [rdi + 5], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x18; ret; 
0x000000000002a880: mov word ptr [rdi + 6], 0; mov dword ptr [rdi + 2], 0; mov qword ptr [rdi + 8], rax; add rsp, 0x10; ret; 
0x000000000002b9ea: mov word ptr [rdi + 8], cx; mov qword ptr [rdi], rax; ret; 
0x0000000000016ebd: mov word ptr [rdi], 2; add rsp, 0x18; ret; 
0x0000000000020b04: mov word ptr [rip + 0x5e415b00], es; pop r15; ret; 
0x0000000000013825: mov word ptr [rsp + 0x16], ax; movzx eax, ax; add rsp, 0x18; ret; 
0x0000000000011856: movabs al, byte ptr [0x158c48148000000]; add byte ptr [rax], al; ret; 
0x000000000001f77e: movabs al, byte ptr [0x415b08c483480005]; pop rsi; ret; 
0x00000000000104cc: movabs al, byte ptr [0x49beffffb1]; call rax; 
0x000000000001679c: movabs al, byte ptr [0x4bf000024]; call rax; 
0x0000000000039902: movabs al, byte ptr [0x825f3d8d48000000]; add al, byte ptr [rax]; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000001a3ba: movabs al, byte ptr [0xfffeec9de8000000]; ud2; lea rax, [rip + 0x8c4]; lea rdi, [rsp + 0x18]; call rax; 
0x000000000005df09: movabs byte ptr [0x11ba000081], al; call qword ptr [rax + 0x18]; 
0x000000000001f4d5: movabs byte ptr [0x415d415c415b0005], al; pop rsi; pop r15; ret; 
0x000000000003b0a2: movabs byte ptr [0x41ef89288b0003e3], al; call rsi; 
0x0000000000018cfa: movabs byte ptr [0x5924048b4800060f], al; ret; 
0x000000000001f3e2: movabs byte ptr [0x5f415e415b0005a3], al; ret; 
0x000000000003405a: movabs byte ptr [0x8024bc8d48fffeb7], al; add byte ptr [rax], al; add al, ch; xchg eax, ebp; ret 0xfffe; 
0x00000000000194aa: movabs dword ptr [0x336b058d48000475], eax; add byte ptr [rax], al; mov edi, 0x27; mov edx, 0x1b; call rax; 
0x00000000000431e3: movabs eax, dword ptr [0x8d48d18948000369]; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xb3e8; 
0x000000000005975b: movabs eax, dword ptr [0x920ff80166fffffe]; ret 0xff81; 
0x000000000001e940: movabs rax, 0x5203149ad97ccfc6; ret; 
0x000000000001e960: movabs rax, 0x89a76c34a9f81ac8; ret; 
0x000000000004f0e5: movabs rdi, 0x48c9310a731af980; shl eax, 0x20; or rax, rcx; ret; 
0x000000000000c972: movabs rsp, 0xa024bc8d480002; add byte ptr [rax], al; call rax; 
0x000000000001e419: movaps xmm0, xmmword ptr [rsp + 0x10]; movups xmmword ptr [rax], xmm0; lea rdx, [rip + 0x57fd0]; add rsp, 0x38; ret; 
0x000000000001a8f9: movaps xmm0, xmmword ptr [rsp + 0x10]; movups xmmword ptr [rax], xmm0; lea rdx, [rip + 0x5ba08]; add rsp, 0x38; ret; 
0x000000000001a048: movaps xmm0, xmmword ptr [rsp + 0x40]; movaps xmmword ptr [rsp + 0x70], xmm0; lea rax, [rip + 0xc67]; lea rdi, [rsp + 0x58]; lea rdx, [rsp + 0x70]; call rax; 
0x000000000002186c: movaps xmm0, xmmword ptr [rsp]; movups xmmword ptr [rcx + 8], xmm0; add rsp, 0x18; ret; 
0x000000000000936c: movaps xmm0, xmmword ptr [rsp]; movups xmmword ptr [rdi + rax*8], xmm0; add rsp, 0x20; pop rbx; ret; 
0x000000000000daeb: movaps xmmword ptr [rsp + 0x100], xmm0; lea rax, [rip + 0x85d6]; lea rdi, [rsp + 0x100]; call rax; 
0x000000000005edae: movaps xmmword ptr [rsp + 0x10], xmm1; movaps xmmword ptr [rsp], xmm0; mov rdx, rsp; call qword ptr [rip + 0x1b088]; add rsp, 0x38; ret; 
0x0000000000017e0a: movaps xmmword ptr [rsp + 0x140], xmm0; lea rax, [rip - 0x1dc9]; lea rsi, [rsp + 0x140]; call rax; 
0x0000000000016480: movaps xmmword ptr [rsp + 0x20], xmm0; lea rax, [rip + 0x3b14]; lea rdx, [rsp + 0x20]; call rax; 
0x0000000000014409: movaps xmmword ptr [rsp + 0x20], xmm0; lea rcx, [rip + 0x61c2b]; lea rax, [rip - 0x8a8c]; lea rdx, [rsp + 0x20]; call rax; 
0x0000000000016704: movaps xmmword ptr [rsp + 0x70], xmm0; lea rax, [rip + 0x3a40]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000001a04d: movaps xmmword ptr [rsp + 0x70], xmm0; lea rax, [rip + 0xc67]; lea rdi, [rsp + 0x58]; lea rdx, [rsp + 0x70]; call rax; 
0x000000000001a2fc: movaps xmmword ptr [rsp + 0x70], xmm0; lea rax, [rip - 0x2d98]; lea rsi, [rsp + 0x70]; call rax; 
0x000000000001e3af: movaps xmmword ptr [rsp], xmm0; mov rdi, rsp; call 0x1e3c0; add rsp, 0x58; ret; 
0x000000000005edb3: movaps xmmword ptr [rsp], xmm0; mov rdx, rsp; call qword ptr [rip + 0x1b088]; add rsp, 0x38; ret; 
0x000000000005aa30: movaps xmmword ptr [rsp], xmm0; mov rdx, rsp; mov rdi, rax; call qword ptr [rip + 0x1f408]; add rsp, 0x38; ret; 
0x000000000000cdbb: movsb byte ptr [rdi], byte ptr [rsi]; add al, 0; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000d91a: movsb byte ptr [rdi], byte ptr [rsi]; add al, byte ptr [rax]; call rax; 
0x000000000000d937: movsb byte ptr [rdi], byte ptr [rsi]; add al, byte ptr [rax]; lea rdi, [rsp + 0x98]; call rax; 
0x000000000001eccf: movsb byte ptr [rdi], byte ptr [rsi]; add dword ptr [rax], eax; pop rcx; ret; 
0x000000000000a825: movsb byte ptr [rdi], byte ptr [rsi]; pop rbx; ret; 
0x000000000000e050: movsd dword ptr [rdi], dword ptr [rsi]; add al, byte ptr [rax]; lea rdi, [rsp + 0x1c8]; call rax; 
0x000000000001ec62: movsd dword ptr [rdi], dword ptr [rsi]; add dword ptr [rax], eax; pop rcx; ret; 
0x000000000001f195: movsd dword ptr [rdi], dword ptr [rsi]; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x00000000000433c1: movsd dword ptr [rdi], dword ptr [rsi]; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000001ba7f: movsd dword ptr [rdi], dword ptr [rsi]; push rax; add al, 0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004ccb7: movsd dword ptr [rdi], dword ptr [rsi]; rol dword ptr [rdx], 1; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x0000000000014377: movsd dword ptr [rdi], dword ptr [rsi]; sahf; add byte ptr [rax], al; lea rdi, [rsp + 0x30]; call rax; 
0x000000000000afe1: movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x0000000000037b6e: movsxd rax, dword ptr [r12 + rbp*4]; add rax, r12; jmp rax; 
0x0000000000039e6e: movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x000000000005bb83: movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; mov esi, 0x5c; jmp rax; 
0x000000000002a39c: movsxd rax, dword ptr [r9 + rax*4]; add rax, r9; jmp rax; 
0x0000000000028295: movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x000000000003bf21: movsxd rax, dword ptr [rax]; add byte ptr [rcx - 0x63ea0039], cl; fild dword ptr [rbx]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000029991: movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x0000000000039e6f: movsxd rax, dword ptr [rbp + rcx*4]; add rax, r13; jmp rax; 
0x000000000002a39d: movsxd rax, dword ptr [rcx + rax*4]; add rax, r9; jmp rax; 
0x000000000000dfee: movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000005bba1: movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor ebx, ebx; mov r15d, r12d; jmp rax; 
0x000000000002fad9: movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor edx, edx; jmp rax; 
0x000000000005c03b: movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor r12d, r12d; mov ebp, edx; jmp rax; 
0x000000000003935b: movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x0000000000028296: movsxd rax, dword ptr [rcx + rcx*4]; add rax, r9; jmp rax; 
0x0000000000029933: movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000005475a: movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000002c0a9: movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x000000000004b39c: movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; lea rdx, [rip + 0x18eef]; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000005bb84: movsxd rax, dword ptr [rsi + rax*4]; add rax, r14; mov esi, 0x5c; jmp rax; 
0x000000000000fb1f: movsxd rax, dword ptr [rsi]; add byte ptr [rax - 0x73], cl; add eax, 0xffffbb47; mov esi, 0x49; call rax; 
0x000000000000afe2: movsxd rax, dword ptr [rsp + rax*4]; add rax, r12; jmp rax; 
0x0000000000037b6f: movsxd rax, dword ptr [rsp + rbp*4]; add rax, r12; jmp rax; 
0x0000000000053e39: movsxd rbx, dword ptr [rax + r8*4]; add rbx, rax; jmp rbx; 
0x0000000000053e3a: movsxd rbx, dword ptr [rax + rax*4]; add rbx, rax; jmp rbx; 
0x000000000000a8b1: movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x000000000003498f: movsxd rcx, dword ptr [r14 + rdx*4]; add rcx, r14; jmp rcx; 
0x000000000002c37c: movsxd rcx, dword ptr [r8 + rbp*4]; add rcx, r8; jmp rcx; 
0x000000000002c37d: movsxd rcx, dword ptr [rax + rbp*4]; add rcx, r8; jmp rcx; 
0x00000000000275ed: movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005bfef: movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; mov edx, ebp; mov ebp, 0x110001; jmp rcx; 
0x000000000005be9c: movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; mov edx, r15d; jmp rcx; 
0x0000000000037225: movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x000000000003ff03: movsxd rcx, dword ptr [rax - 0x77]; ret; 
0x000000000002c3a3: movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000057e64: movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000034990: movsxd rcx, dword ptr [rsi + rdx*4]; add rcx, r14; jmp rcx; 
0x000000000000a8b2: movsxd rcx, dword ptr [rsp + rcx*4]; add rcx, r12; jmp rcx; 
0x000000000002b01f: movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x000000000002b020: movsxd rdi, dword ptr [rax + rbx*4]; add rdi, r8; jmp rdi; 
0x00000000000505e9: movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000003d3d4: movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x0000000000038990: movsxd rdi, edi; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x0000000000039b0c: movsxd rdx, dword ptr [r8 + rdx*4]; add rdx, r8; jmp rdx; 
0x0000000000039fe1: movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x0000000000039b0d: movsxd rdx, dword ptr [rax + rdx*4]; add rdx, r8; jmp rdx; 
0x000000000002b9bb: movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x0000000000040b91: movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x0000000000039c10: movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000003a39d: movsxd rsi, dword ptr [r12 + rsi*4]; add rsi, r12; jmp rsi; 
0x000000000002b61f: movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x000000000005bdc5: movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x000000000005bdc6: movsxd rsi, dword ptr [rcx + rdi*4]; add rsi, rcx; jmp rsi; 
0x00000000000308e9: movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x000000000003a39e: movsxd rsi, dword ptr [rsp + rsi*4]; add rsi, r12; jmp rsi; 
0x000000000000e0ae: movsxd rsi, edi; lea rdi, [rip - 0x3d7]; xor ecx, ecx; call 0xfb80; pop rcx; ret; 
0x000000000002a4c7: movups xmm0, xmmword ptr [r8 + 8]; movups xmmword ptr [rdi + 8], xmm0; xor eax, eax; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x0000000000014405: movups xmm0, xmmword ptr [rax + 8]; movaps xmmword ptr [rsp + 0x20], xmm0; lea rcx, [rip + 0x61c2b]; lea rax, [rip - 0x8a8c]; lea rdx, [rsp + 0x20]; call rax; 
0x000000000002a4c8: movups xmm0, xmmword ptr [rax + 8]; movups xmmword ptr [rdi + 8], xmm0; xor eax, eax; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x000000000003da9a: movups xmm0, xmmword ptr [rcx]; movups xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 0x20]; 
0x000000000001f2b8: movups xmm0, xmmword ptr [rdi]; movups xmmword ptr [rsi], xmm0; ret; 
0x00000000000599e9: movups xmm0, xmmword ptr [rsi + 4]; movups xmmword ptr [rax + 1], xmm0; mov cl, 1; mov byte ptr [rax], cl; ret; 
0x000000000002b9da: movups xmm0, xmmword ptr [rsi + 8]; movups xmmword ptr [rdi + 8], xmm0; mov qword ptr [rdi], rax; ret; 
0x0000000000059a43: movups xmm0, xmmword ptr [rsi]; movups xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x18], dx; mov dword ptr [rdi + 0x10], ecx; mov dword ptr [rdi + 0x14], r8d; ret; 
0x000000000001e3aa: movups xmm0, xmmword ptr [rsp + 0x20]; movaps xmmword ptr [rsp], xmm0; mov rdi, rsp; call 0x1e3c0; add rsp, 0x58; ret; 
0x000000000000bddc: movups xmm0, xmmword ptr [rsp + 0x28]; movups xmmword ptr [rcx], xmm0; add rsp, 0xb8; ret; 
0x000000000001647b: movups xmm0, xmmword ptr [rsp + 0x38]; movaps xmmword ptr [rsp + 0x20], xmm0; lea rax, [rip + 0x3b14]; lea rdx, [rsp + 0x20]; call rax; 
0x000000000001a2f7: movups xmm0, xmmword ptr [rsp + 0x38]; movaps xmmword ptr [rsp + 0x70], xmm0; lea rax, [rip - 0x2d98]; lea rsi, [rsp + 0x70]; call rax; 
0x00000000000166ff: movups xmm0, xmmword ptr [rsp + 0x58]; movaps xmmword ptr [rsp + 0x70], xmm0; lea rax, [rip + 0x3a40]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000000e141: movups xmm0, xmmword ptr [rsp + 0x68]; movups xmmword ptr [rsi], xmm0; lea rdx, [rip + 0x67cf8]; lea rax, [rip + 0x4c879]; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000036d62: movups xmm0, xmmword ptr [rsp + 8]; movups xmmword ptr [rax], xmm0; inc rax; add rsp, 0x20; pop rbx; ret; 
0x00000000000368ed: movups xmm0, xmmword ptr [rsp]; movups xmmword ptr [rbx], xmm0; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x000000000004b3d7: movups xmm0, xmmword ptr [rsp]; movups xmmword ptr [rdi], xmm0; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000004f4a0: movups xmmword ptr [r14 + 0x10], xmm1; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000002a08e: movups xmmword ptr [r14 + 8], xmm0; mov qword ptr [r14], 8; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004f49c: movups xmmword ptr [r14], xmm0; movups xmmword ptr [r14 + 0x10], xmm1; add rsp, 0x28; pop rbx; pop r14; ret; 
0x00000000000599ed: movups xmmword ptr [rax + 1], xmm0; mov cl, 1; mov byte ptr [rax], cl; ret; 
0x00000000000599ac: movups xmmword ptr [rax + 4], xmm0; mov qword ptr [rax + 0x14], 0; mov word ptr [rax + 0x1c], dx; mov cx, 1; mov word ptr [rax], cx; ret; 
0x0000000000036d67: movups xmmword ptr [rax], xmm0; inc rax; add rsp, 0x20; pop rbx; ret; 
0x000000000003cc44: movups xmmword ptr [rax], xmm0; lea rdx, [rip + 0x3a912]; add rsp, 0x58; pop rbx; pop r14; ret; 
0x000000000001e41e: movups xmmword ptr [rax], xmm0; lea rdx, [rip + 0x57fd0]; add rsp, 0x38; ret; 
0x000000000001a8fe: movups xmmword ptr [rax], xmm0; lea rdx, [rip + 0x5ba08]; add rsp, 0x38; ret; 
0x000000000004cc6a: movups xmmword ptr [rax], xmm0; mov qword ptr [rbx], 1; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000005c24e: movups xmmword ptr [rbx + 0x10], xmm0; mov dword ptr [rbx + 0x30], ebp; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000053512: movups xmmword ptr [rbx + 0x10], xmm1; movups xmmword ptr [rbx], xmm0; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x000000000004cc86: movups xmmword ptr [rbx + rdi + 0x10], xmm0; inc qword ptr [rbx + 8]; add rsp, 0x18; pop rbx; pop r14; ret; 
0x000000000003cd03: movups xmmword ptr [rbx], xmm0; lea rdx, [rip + 0x3a853]; mov rax, rbx; add rsp, 0x50; pop rbx; ret; 
0x00000000000368f1: movups xmmword ptr [rbx], xmm0; mov rax, rbx; add rsp, 0x1b0; pop rbx; ret; 
0x0000000000053516: movups xmmword ptr [rbx], xmm0; mov rax, rbx; add rsp, 0x40; pop rbx; ret; 
0x0000000000021870: movups xmmword ptr [rcx + 8], xmm0; add rsp, 0x18; ret; 
0x000000000000bde1: movups xmmword ptr [rcx], xmm0; add rsp, 0xb8; ret; 
0x000000000004cb75: movups xmmword ptr [rdi + 0xc], xmm0; ret; 
0x000000000002b9de: movups xmmword ptr [rdi + 8], xmm0; mov qword ptr [rdi], rax; ret; 
0x000000000002a4cc: movups xmmword ptr [rdi + 8], xmm0; xor eax, eax; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x0000000000009370: movups xmmword ptr [rdi + rax*8], xmm0; add rsp, 0x20; pop rbx; ret; 
0x000000000004b3db: movups xmmword ptr [rdi], xmm0; mov rcx, qword ptr [rsp + 0x10]; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x0000000000059a46: movups xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x18], dx; mov dword ptr [rdi + 0x10], ecx; mov dword ptr [rdi + 0x14], r8d; ret; 
0x000000000004cb72: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0xc], xmm0; ret; 
0x00000000000354eb: movups xmmword ptr [rdi], xmm0; pop rbx; pop r14; pop rbp; ret; 
0x000000000004f4a1: movups xmmword ptr [rsi + 0x10], xmm1; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000002a08f: movups xmmword ptr [rsi + 8], xmm0; mov qword ptr [r14], 8; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000e146: movups xmmword ptr [rsi], xmm0; lea rdx, [rip + 0x67cf8]; lea rax, [rip + 0x4c879]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000004f49d: movups xmmword ptr [rsi], xmm0; movups xmmword ptr [r14 + 0x10], xmm1; add rsp, 0x28; pop rbx; pop r14; ret; 
0x000000000001f2bb: movups xmmword ptr [rsi], xmm0; ret; 
0x000000000003da9d: movups xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 0x20]; 
0x0000000000011ab8: movzx eax, al; add rsp, 0x10; ret; 
0x000000000000bf63: movzx eax, al; add rsp, 0x18; ret; 
0x000000000001ac86: movzx eax, al; add rsp, 0x20; ret; 
0x00000000000128d4: movzx eax, al; add rsp, 0x28; ret; 
0x000000000000c0be: movzx eax, al; add rsp, 0x38; ret; 
0x000000000000c121: movzx eax, al; add rsp, 0x48; ret; 
0x00000000000141dc: movzx eax, al; cmp rax, 0; jne 0x141ea; add rsp, 0x58; ret; 
0x0000000000042793: movzx eax, al; lea eax, [rax + rax*8]; add rsp, 0x28; ret; 
0x000000000001382a: movzx eax, ax; add rsp, 0x18; ret; 
0x000000000003a60b: movzx eax, byte ptr [rax]; lea rcx, [rip + 0x275ff]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000059b50: movzx eax, byte ptr [rdi + 0x20]; ret; 
0x000000000005b5d0: movzx eax, byte ptr [rdi + 0x30]; and al, 0x10; shr al, 4; ret; 
0x000000000005b5e0: movzx eax, byte ptr [rdi + 0x30]; and al, 0x20; shr al, 5; ret; 
0x000000000005b5c0: movzx eax, byte ptr [rdi + 0x30]; and al, 4; shr al, 2; ret; 
0x00000000000540ab: movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + r10], al; pop rax; ret; 
0x0000000000053f12: movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x000000000003e60b: movzx eax, byte ptr [rip + 0x3bb16]; lea rdx, [rip + 0x3bb07]; lea rax, [rip + 0x3bb09]; pop rcx; ret; 
0x000000000000fbf4: movzx eax, byte ptr [rsp + 7]; add rsp, 0x18; ret; 
0x000000000005998a: movzx eax, cl; or rax, rsi; ret; 
0x000000000002a364: movzx eax, cl; ret; 
0x000000000003577a: movzx eax, dh; lea rcx, [rip + 0x2c2d4]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000543ce: movzx eax, dl; lea rcx, [rip + 0x10868]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000543cd: movzx eax, r10b; lea rcx, [rip + 0x10868]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000035779: movzx eax, r14b; lea rcx, [rip + 0x2c2d4]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000059a70: movzx eax, word ptr [rdi + 0x18]; ret; 
0x0000000000059a30: movzx eax, word ptr [rdi + 4]; ret; 
0x000000000001dd7c: movzx eax, word ptr [rsp + 0x64]; shl rax, 0x20; or rsi, rax; lea rax, [rip - 0x1bff]; call rax; 
0x000000000001c1c5: movzx eax, word ptr [rsp + 0xc]; shl rax, 0x20; or rsi, rax; lea rax, [rip + 0x1c28]; call rax; 
0x0000000000039e6a: movzx ecx, byte ptr [r10]; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x0000000000057e84: movzx ecx, byte ptr [rdi + 0xc]; lea rsi, [rip + 0xd469]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000039e6b: movzx ecx, byte ptr [rdx]; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x000000000002b9cf: movzx ecx, byte ptr [rsi + 8]; mov byte ptr [rdi + 8], cl; mov qword ptr [rdi], rax; ret; 
0x00000000000118d9: movzx ecx, byte ptr [rsp + 0xc]; shl rcx, 0x20; or rax, rcx; add rsp, 0x28; ret; 
0x000000000003d2eb: movzx ecx, cl; lea rdx, [rip + 0x24937]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000004d5f5: movzx ecx, cl; mov qword ptr [rax], rcx; test cl, cl; je 0x4d602; mov al, 1; ret; 
0x000000000004abc8: movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, -0x10; mov eax, 1; ret; 
0x000000000004ac0d: movzx ecx, cx; lea rdx, [rcx + rax]; add rdx, 0x10; mov eax, 1; ret; 
0x00000000000139dc: movzx ecx, cx; mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x38; ret; 
0x000000000002b9e6: movzx ecx, word ptr [rsi + 8]; mov word ptr [rdi + 8], cx; mov qword ptr [rdi], rax; ret; 
0x000000000001c85a: movzx edi, al; call qword ptr [rip + 0x5d3ed]; add rsp, 0x28; ret; 
0x000000000001bf75: movzx edi, al; call qword ptr [rip + 0x5dcd2]; add rsp, 0x18; ret; 
0x0000000000021000: movzx edi, al; call rbx; 
0x000000000004abdd: movzx edx, ax; add rdx, rcx; mov eax, 1; ret; 
0x000000000004aae0: movzx edx, ax; mov eax, 1; ret; 
0x0000000000039c00: movzx edx, byte ptr [rcx]; mov eax, 6; lea rsi, [rip + 0x27f8d]; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000002a27a: movzx edx, byte ptr [rdi + 8]; mov eax, 1; ret; 
0x000000000003d3c9: movzx edx, cl; lea rcx, [rip + 0x2488d]; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x000000000004abf5: movzx edx, cx; add rdx, rax; mov eax, 1; ret; 
0x0000000000019068: movzx edx, word ptr [rax + 0x12]; call qword ptr [rip + 0x60db6]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000002a284: movzx edx, word ptr [rdi + 8]; mov eax, 1; ret; 
0x0000000000059980: movzx esi, al; shl rsi, 8; or rsi, rdx; movzx eax, cl; or rax, rsi; ret; 
0x000000000003a395: movzx esi, byte ptr [rdx]; mov edx, 6; movsxd rsi, dword ptr [r12 + rsi*4]; add rsi, r12; jmp rsi; 
0x0000000000012b7e: mul byte ptr [rdi + rdi*8 - 1]; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x0000000000037d8d: mul dword ptr [rdx]; add al, 0; pop rcx; ret; 
0x0000000000031c81: mul eax; add al, 0; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xffbb; 
0x00000000000576a3: neg eax; and rax, rcx; ret; 
0x000000000004ef0d: neg eax; mov qword ptr [rdi], r9; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x000000000004cd3e: neg ecx; mov rax, qword ptr [rdi + 0x18]; cmp rax, rcx; jae 0x4cd52; mov qword ptr [rdi + 0x18], 0; ret; 
0x000000000004ef0c: neg r8; mov qword ptr [rdi], r9; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x00000000000576a2: neg rax; and rax, rcx; ret; 
0x000000000004cd3d: neg rcx; mov rax, qword ptr [rdi + 0x18]; cmp rax, rcx; jae 0x4cd52; mov qword ptr [rdi + 0x18], 0; ret; 
0x000000000005f378: nop dword ptr [rax + rax]; endbr64; ret; 
0x00000000000377ab: nop dword ptr [rax + rax]; mov al, 1; ret; 
0x000000000001feb8: nop dword ptr [rax + rax]; mov qword ptr [rsi + 0x10], rdi; ret; 
0x000000000001f2ab: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x10]; mov qword ptr [rsi + 0x10], rax; movups xmm0, xmmword ptr [rdi]; movups xmmword ptr [rsi], xmm0; ret; 
0x000000000005d4a8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x18]; ret; 
0x0000000000059b28: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x10]; ret; 
0x000000000001e96b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000005d49b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000001c00b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; ret; 
0x000000000003cd78: nop dword ptr [rax + rax]; mov rax, rdi; lea rdx, [rip + 0x3a7f6]; ret; 
0x0000000000059a1b: nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000001e95b: nop dword ptr [rax + rax]; movabs rax, 0x89a76c34a9f81ac8; ret; 
0x000000000005b5cb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi + 0x30]; and al, 0x10; shr al, 4; ret; 
0x000000000005b5db: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi + 0x30]; and al, 0x20; shr al, 5; ret; 
0x00000000000377a3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov al, 1; ret; 
0x000000000001c003: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; ret; 
0x000000000004b095: nop dword ptr [rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000040a65: nop dword ptr [rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000059a77: nop dword ptr [rax + rax]; nop; mov eax, dword ptr [rdi + 0x10]; ret; 
0x0000000000059a86: nop dword ptr [rax + rax]; nop; mov eax, dword ptr [rdi + 0x14]; ret; 
0x0000000000059b37: nop dword ptr [rax + rax]; nop; mov rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000059a57: nop dword ptr [rax + rax]; nop; mov rax, rdi; ret; 
0x0000000000059b47: nop dword ptr [rax + rax]; nop; movzx eax, byte ptr [rdi + 0x20]; ret; 
0x0000000000059a66: nop dword ptr [rax + rax]; nop; movzx eax, word ptr [rdi + 0x18]; ret; 
0x0000000000059a26: nop dword ptr [rax + rax]; nop; movzx eax, word ptr [rdi + 4]; ret; 
0x000000000004d3a7: nop dword ptr [rax + rax]; nop; ret; 
0x000000000001c016: nop dword ptr [rax + rax]; nop; xor eax, eax; ret; 
0x000000000003e5cb: nop dword ptr [rax + rax]; push rax; call qword ptr [rip + 0x3ae71]; mov eax, dword ptr [rax]; pop rcx; ret; 
0x0000000000015e7b: nop dword ptr [rax + rax]; push rax; call qword ptr [rip + 0x63a59]; pop rcx; ret; 
0x000000000001ab2b: nop dword ptr [rax + rax]; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5e88d]; pop rax; ret; 
0x0000000000016deb: nop dword ptr [rax + rax]; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x62f35]; pop rax; ret; 
0x000000000001da9b: nop dword ptr [rax + rax]; push rax; mov qword ptr [rsp], rdi; mov eax, dword ptr [rdi + 0x80]; pop rcx; ret; 
0x000000000000efcb: nop dword ptr [rax + rax]; push rax; mov qword ptr [rsp], rdi; pop rax; ret; 
0x000000000000bc13: nop dword ptr [rax + rax]; ret; 
0x0000000000059a0b: nop dword ptr [rax + rax]; shl rsi, 0x20; mov eax, edi; or rax, rsi; ret; 
0x0000000000010c5b: nop dword ptr [rax + rax]; sub rsp, 0x78; mov qword ptr [rsp], rdi; lea rax, [rip + 0x60c1]; call rax; 
0x000000000004cd2b: nop dword ptr [rax + rax]; test rsi, rsi; js 0x4cd3a; add qword ptr [rdi + 0x18], rsi; ret; 
0x000000000005aded: nop dword ptr [rax]; dec r14; je 0x5b064; mov rdi, rbp; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x000000000002031c: nop dword ptr [rax]; inc qword ptr [rdi + 0x10]; ret; 
0x0000000000040a59: nop dword ptr [rax]; mov al, 1; ret; 
0x000000000003885d: nop dword ptr [rax]; mov esi, 0x18; mov edx, 8; mov rdi, r12; call rbx; 
0x000000000005353c: nop dword ptr [rax]; mov rax, qword ptr [rdi + 0x20]; mov rdx, qword ptr [rdi + 0x28]; ret; 
0x0000000000056cb9: nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; mov rdx, qword ptr [rdi + 0x10]; ret; 
0x000000000005ed0c: nop dword ptr [rax]; mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rdi, rax; jmp rcx; 
0x000000000005a9fd: nop dword ptr [rax]; mov rax, rdi; lea rdx, [rip - 0x325a]; ret; 
0x000000000005d4b9: nop dword ptr [rax]; mov rdx, rsi; mov rax, rdi; ret; 
0x000000000001e93d: nop dword ptr [rax]; movabs rax, 0x5203149ad97ccfc6; ret; 
0x0000000000020ffd: nop dword ptr [rax]; movzx edi, al; call rbx; 
0x000000000001e2cd: nop dword ptr [rax]; push rax; mov qword ptr [rsp], rdi; call 0x1d220; pop rax; ret; 
0x000000000000ef6c: nop dword ptr [rax]; push rax; mov qword ptr [rsp], rdi; call 0xef90; pop rax; ret; 
0x000000000000f1dc: nop dword ptr [rax]; push rax; mov qword ptr [rsp], rdi; call 0xf730; pop rax; ret; 
0x000000000000ecac: nop dword ptr [rax]; push rax; mov qword ptr [rsp], rdi; call 0xf930; pop rax; ret; 
0x000000000001e22d: nop dword ptr [rax]; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5b485]; pop rax; ret; 
0x000000000001e21d: nop dword ptr [rax]; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5b5d5]; pop rax; ret; 
0x000000000001e2ac: nop dword ptr [rax]; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5b685]; pop rax; ret; 
0x000000000001e2bd: nop dword ptr [rax]; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5b7bd]; pop rax; ret; 
0x000000000001e20d: nop dword ptr [rax]; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5bb8d]; pop rax; ret; 
0x000000000001c93c: nop dword ptr [rax]; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5d4b5]; pop rcx; ret; 
0x000000000001aa7d: nop dword ptr [rax]; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5ea85]; pop rax; ret; 
0x000000000000eedc: nop dword ptr [rax]; push rax; mov qword ptr [rsp], rdi; pop rax; ret; 
0x000000000000bbd1: nop dword ptr [rax]; ret; 
0x0000000000040a6d: nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000005f377: nop dword ptr cs:[rax + rax]; endbr64; ret; 
0x000000000001feb7: nop dword ptr cs:[rax + rax]; mov qword ptr [rsi + 0x10], rdi; ret; 
0x00000000000377a2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov al, 1; ret; 
0x000000000001c002: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; ret; 
0x000000000004b094: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000040a64: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000059a76: nop dword ptr cs:[rax + rax]; nop; mov eax, dword ptr [rdi + 0x10]; ret; 
0x0000000000059a85: nop dword ptr cs:[rax + rax]; nop; mov eax, dword ptr [rdi + 0x14]; ret; 
0x0000000000059b36: nop dword ptr cs:[rax + rax]; nop; mov rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000059a56: nop dword ptr cs:[rax + rax]; nop; mov rax, rdi; ret; 
0x0000000000059b46: nop dword ptr cs:[rax + rax]; nop; movzx eax, byte ptr [rdi + 0x20]; ret; 
0x0000000000059a65: nop dword ptr cs:[rax + rax]; nop; movzx eax, word ptr [rdi + 0x18]; ret; 
0x0000000000059a25: nop dword ptr cs:[rax + rax]; nop; movzx eax, word ptr [rdi + 4]; ret; 
0x000000000004d3a6: nop dword ptr cs:[rax + rax]; nop; ret; 
0x000000000001c015: nop dword ptr cs:[rax + rax]; nop; xor eax, eax; ret; 
0x000000000001f2aa: nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 0x10]; mov qword ptr [rsi + 0x10], rax; movups xmm0, xmmword ptr [rdi]; movups xmmword ptr [rsi], xmm0; ret; 
0x0000000000059a1a: nop word ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000005b5ca: nop word ptr [rax + rax]; movzx eax, byte ptr [rdi + 0x30]; and al, 0x10; shr al, 4; ret; 
0x000000000005b5da: nop word ptr [rax + rax]; movzx eax, byte ptr [rdi + 0x30]; and al, 0x20; shr al, 5; ret; 
0x000000000001da9a: nop word ptr [rax + rax]; push rax; mov qword ptr [rsp], rdi; mov eax, dword ptr [rdi + 0x80]; pop rcx; ret; 
0x000000000000efca: nop word ptr [rax + rax]; push rax; mov qword ptr [rsp], rdi; pop rax; ret; 
0x000000000000bc12: nop word ptr [rax + rax]; ret; 
0x000000000005f376: nop word ptr cs:[rax + rax]; endbr64; ret; 
0x000000000001feb6: nop word ptr cs:[rax + rax]; mov qword ptr [rsi + 0x10], rdi; ret; 
0x00000000000377a1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov al, 1; ret; 
0x000000000001c001: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; ret; 
0x000000000004b093: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000040a63: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000059a75: nop word ptr cs:[rax + rax]; nop; mov eax, dword ptr [rdi + 0x10]; ret; 
0x0000000000059a84: nop word ptr cs:[rax + rax]; nop; mov eax, dword ptr [rdi + 0x14]; ret; 
0x0000000000059b35: nop word ptr cs:[rax + rax]; nop; mov rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000059a55: nop word ptr cs:[rax + rax]; nop; mov rax, rdi; ret; 
0x0000000000059b45: nop word ptr cs:[rax + rax]; nop; movzx eax, byte ptr [rdi + 0x20]; ret; 
0x0000000000059a64: nop word ptr cs:[rax + rax]; nop; movzx eax, word ptr [rdi + 0x18]; ret; 
0x0000000000059a24: nop word ptr cs:[rax + rax]; nop; movzx eax, word ptr [rdi + 4]; ret; 
0x000000000004d3a5: nop word ptr cs:[rax + rax]; nop; ret; 
0x000000000001c014: nop word ptr cs:[rax + rax]; nop; xor eax, eax; ret; 
0x000000000001881e: nop; add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0xffffd667; lea rdi, [rsp + 0x170]; call rax; 
0x000000000001a080: nop; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; js 0x1a090; lea rax, [rip + 0x961]; call rax; 
0x00000000000516f3: nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out 0xe8, al; int1; ret 0xffff; 
0x00000000000206f9: nop; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x0000000000039b0f: nop; add rdx, r8; jmp rdx; 
0x000000000005a41f: nop; cmp byte ptr [rdi + 8], 0; je 0x5a429; mov al, 1; ret; 
0x000000000002083f: nop; cmp dword ptr [rdi], 2; jae 0x20846; ret; 
0x000000000001f2bf: nop; inc qword ptr [rdi]; ret; 
0x0000000000010086: nop; lea rdi, [rip + 0x50342]; lea rdx, [rip + 0x65ea3]; lea rax, [rip - 0x4a2c]; mov esi, 0x49; call rax; 
0x0000000000059a7f: nop; mov eax, dword ptr [rdi + 0x10]; ret; 
0x0000000000059a8f: nop; mov eax, dword ptr [rdi + 0x14]; ret; 
0x0000000000059b3f: nop; mov rax, qword ptr [rdi + 0x18]; ret; 
0x000000000005b90f: nop; mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rcx, qword ptr [rcx + 0x20]; mov rdi, rax; jmp rcx; 
0x000000000001377f: nop; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000002b9af: nop; mov rax, qword ptr [rsi]; lea rcx, [rip + 0x35be2]; movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x0000000000059a5f: nop; mov rax, rdi; ret; 
0x0000000000057e0f: nop; movabs rax, 0x5203149ad97ccfc6; ret; 
0x0000000000059b4f: nop; movzx eax, byte ptr [rdi + 0x20]; ret; 
0x0000000000059a6f: nop; movzx eax, word ptr [rdi + 0x18]; ret; 
0x0000000000059a2f: nop; movzx eax, word ptr [rdi + 4]; ret; 
0x00000000000217cf: nop; pop rbx; ret; 
0x000000000001f08f: nop; push rax; call 0x35cf0; ud2; nop dword ptr [rax + rax]; ret; 
0x000000000000ee5f: nop; push rax; mov qword ptr [rsp], rdi; call 0xeb70; pop rax; ret; 
0x000000000000f12f: nop; push rax; mov qword ptr [rsp], rdi; call 0xeca0; pop rax; ret; 
0x000000000000ec9f: nop; push rax; mov qword ptr [rsp], rdi; call 0xf850; pop rax; ret; 
0x000000000001e1ff: nop; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5b845]; pop rax; ret; 
0x000000000001aa6f: nop; push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5eefd]; pop rax; ret; 
0x000000000001da8f: nop; push rax; mov qword ptr [rsp], rdi; mov ax, word ptr [rdi]; pop rcx; ret; 
0x000000000005793e: nop; ret 0xc183; 
0x000000000004cccc: nop; ret; 
0x000000000000ec3f: nop; sub rsp, 0x18; mov qword ptr [rsp + 0x10], rdi; call rdi; 
0x000000000000c3ef: nop; sub rsp, 0x28; mov qword ptr [rsp + 8], rdi; call 0xec40; add rsp, 0x28; ret; 
0x000000000001967f: nop; sub rsp, 0x38; mov qword ptr [rsp + 8], rdi; lea rax, [rip - 0x2960]; call rax; 
0x000000000001c01f: nop; xor eax, eax; ret; 
0x0000000000015465: not dword ptr [rdi]; add al, 0; call rax; 
0x000000000002a29f: not eax; shr rax, 0x3f; ret; 
0x000000000002a29e: not rax; shr rax, 0x3f; ret; 
0x000000000005aa3c: or ah, dh; add dword ptr [rax], eax; add rsp, 0x38; ret; 
0x0000000000050102: or al, 0; add byte ptr [rax + rax*8 - 0xb7eb8b], al; ret; 
0x000000000002d494: or al, 0; add byte ptr [rax - 0x73], cl; add dword ptr [r9 + 0x39], ecx; ret 0x860f; 
0x000000000001a056: or al, 0; add byte ptr [rax - 0x73], cl; jl 0x1a081; pop rax; lea rdx, [rsp + 0x70]; call rax; 
0x00000000000297a7: or al, 0; add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; pop rsi; adc cl, ch; ret; 
0x0000000000057e9a: or al, 0; mov eax, 0x7d; ret; 
0x0000000000040b8c: or al, 0x11; add al, byte ptr [rax]; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x000000000004aaac: or al, 0x16; inc rcx; inc rdx; cmp rcx, r8; jb 0x4aaa0; ret; 
0x000000000000bfcb: or al, 0x24; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000005769a: or al, 0x32; dec rcx; mov rax, rdx; neg rax; and rax, rcx; ret; 
0x000000000000fb4f: or al, 0x48; add esp, 0x10; ret; 
0x000000000002a639: or al, 0x48; add esp, 0x18; ret; 
0x0000000000017f26: or al, 0x48; add esp, 0xa8; ret; 
0x0000000000018aea: or al, 0x48; lea eax, [rip + 0x2eae]; lea rdi, [rsp + 0x210]; call rax; 
0x0000000000057e87: or al, 0x48; lea esi, [rip + 0xd469]; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x000000000002a828: or al, 0x48; mov dword ptr [rdi + 8], edx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000001c1c9: or al, 0x48; shl eax, 0x20; or rsi, rax; lea rax, [rip + 0x1c28]; call rax; 
0x00000000000118dd: or al, 0x48; shl ecx, 0x20; or rax, rcx; add rsp, 0x28; ret; 
0x000000000004f32d: or al, 0x4c; mov dword ptr [rbx + 0x20], esi; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000004f733: or al, 0x80; ret 0xeba9; 
0x00000000000275ee: or al, 0x88; add rcx, rax; jmp rcx; 
0x000000000005bff0: or al, 0x88; add rcx, rax; mov edx, ebp; mov ebp, 0x110001; jmp rcx; 
0x000000000005be9d: or al, 0x88; add rcx, rax; mov edx, r15d; jmp rcx; 
0x000000000001ba47: or al, 0x89; ja 0x1ba53; mov qword ptr [rdi], rcx; add rsp, 0x28; ret; 
0x000000000000eb07: or al, 0x89; jl 0xeb2f; adc al, 0x83; jmp qword ptr [rax]; 
0x0000000000017f23: or al, 0x89; or al, 0x48; add esp, 0xa8; ret; 
0x000000000002c3a4: or al, 0x8a; add rcx, rdx; jmp rcx; 
0x000000000000fb4b: or al, 0x8b; and al, 0xc; add rsp, 0x10; ret; 
0x000000000000a8b3: or al, 0x8c; add rcx, r12; jmp rcx; 
0x0000000000057e65: or al, 0x8e; add rcx, rsi; jmp rcx; 
0x0000000000034991: or al, 0x96; add rcx, r14; jmp rcx; 
0x000000000002c37e: or al, 0xa8; add rcx, r8; jmp rcx; 
0x0000000000037226: or al, 0xb8; add rcx, rax; jmp rcx; 
0x000000000000f300: or al, 0xb9; add byte ptr [rax], al; call rax; 
0x000000000001baea: or al, 0xb; mov dword ptr [rdi + 8], 0; mov qword ptr [rdi], rsi; pop rcx; ret; 
0x0000000000018ae4: or al, 0xeb; add byte ptr [rbx + 0x480c2474], cl; lea eax, [rip + 0x2eae]; lea rdi, [rsp + 0x210]; call rax; 
0x0000000000057eeb: or al, 1; ret; 
0x0000000000057ecd: or al, 2; mov eax, 0x7b; ret; 
0x0000000000057ed7: or al, 3; mov eax, 0x75; ret; 
0x0000000000038763: or al, 4; add byte ptr [rbx + 0x41df8918], cl; call rsi; 
0x0000000000057ee1: or al, 4; mov eax, 0x5c; ret; 
0x000000000005ba0d: or al, 9; ret; 
0x0000000000039654: or al, byte ptr [rax + rax]; mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x000000000004be67: or al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000001f7bd: or al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret; 
0x000000000005caf5: or al, byte ptr [rbx]; ror byte ptr [rdi], 0x9d; ret 0x148; 
0x0000000000058d6a: or al, byte ptr [rcx + 0xf]; xchg eax, edx; ret 0xe73; 
0x000000000005cacd: or al, byte ptr [rcx]; ror byte ptr [rdi], 0x9d; ret 0x148; 
0x000000000005cae1: or al, byte ptr [rdx]; ror byte ptr [rdi], 0x9d; ret 0x148; 
0x000000000005cb31: or al, byte ptr [rsi]; ror byte ptr [rdi], 0x9d; ret 0x148; 
0x000000000000eea5: or al, ch; and eax, 0x48000000; add esp, 0x28; ret; 
0x000000000000a04b: or al, ch; inc dword ptr [rdi]; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000000f455: or al, ch; jne 0xf459; add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000000ed0d: or al, ch; sub eax, 0x48000038; add esp, 0x28; ret; 
0x000000000000f1a5: or al, ch; xor eax, 0x48000000; add esp, 0x28; ret; 
0x000000000005efab: or al, cl; ret; 
0x000000000004efc0: or al, dh; add dword ptr [r8], r8d; mov al, 1; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000001e5e8: or bh, bh; adc eax, 0x5b5d1; add rsp, 0x18; ret; 
0x000000000001e16e: or bh, bh; adc eax, 0x5b5e3; add rsp, 0x18; ret; 
0x000000000001e1d1: or bh, bh; adc eax, 0x5bcb0; add rsp, 0x28; ret; 
0x000000000001e27d: or bh, bh; adc eax, 0x5bd2c; add rsp, 0x28; ret; 
0x000000000001a95c: or bh, bh; adc eax, 0x5f07d; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x000000000001a9d8: or bh, bh; adc eax, 0x5f141; add rsp, 0x18; ret; 
0x000000000001ab59: or bh, bh; adc eax, 0x5f218; add rsp, 0x28; ret; 
0x000000000001abad: or bh, bh; adc eax, 0x5f2dc; add rsp, 0x28; ret; 
0x000000000001aac9: or bh, bh; adc eax, 0x5f460; add rsp, 0x28; ret; 
0x000000000000f568: or bh, bh; adc eax, 0x6a5b1; add rsp, 0x18; ret; 
0x000000000000ec88: or bh, bh; adc eax, 0x6ae91; add rsp, 0x18; ret; 
0x000000000000bf5a: or bh, bh; adc eax, 0x6d727; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000000c0b5: or bh, bh; adc eax, 0x6dd8c; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x00000000000318f6: or bh, bh; add al, byte ptr [rax]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000001a8c8: or bl, ch; and byte ptr [rax - 0x73], cl; add eax, 0x392e; lea rdi, [rsp + 0x10]; call rax; 
0x000000000001e3e8: or bl, ch; and byte ptr [rax - 0x73], cl; add eax, 0xfffffe0e; lea rdi, [rsp + 0x10]; call rax; 
0x000000000003c50a: or bl, ch; cmp cl, byte ptr [rcx + rcx*4 - 1]; call qword ptr [rip + 0x3d232]; mov r15, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000003d3e7: or bl, ch; or byte ptr [rax - 0x75], cl; jle 0x3d3fe; mov rax, qword ptr [rsi + 0x18]; call qword ptr [rax + 0x28]; 
0x000000000003d3e6: or bl, r13b; or byte ptr [rax - 0x75], cl; jle 0x3d3fe; mov rax, qword ptr [rsi + 0x18]; call qword ptr [rax + 0x28]; 
0x0000000000017f1f: or byte ptr [r11 + 0x4f890c4e], r9b; or al, 0x48; add esp, 0xa8; ret; 
0x000000000002a57f: or byte ptr [r11], r10b; mov qword ptr [rdi + 0x10], rax; mov eax, 1; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x0000000000044bf7: or byte ptr [r15], cl; xchg eax, esp; ret 0x8b48; 
0x0000000000035597: or byte ptr [r15], r14b; mov qword ptr [rdi], 1; pop rbx; pop r14; pop rbp; ret; 
0x00000000000409ec: or byte ptr [r8 + 1], dil; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x000000000003e9c6: or byte ptr [r8 + 1], dil; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000005ec43: or byte ptr [r8 - 0x73], cl; xor eax, 0x39e0; mov edx, 4; call qword ptr [rax + 0x18]; 
0x00000000000582ea: or byte ptr [r8 - 0x73], cl; xor eax, 0xd30b; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000058231: or byte ptr [r8 - 0x73], cl; xor eax, 0xd3c2; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005b89f: or byte ptr [r8 - 0x73], r9b; xor eax, 0x9c6b; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b884: or byte ptr [r8 - 0x73], r9b; xor eax, 0x9e99; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a2c7: or byte ptr [r8 - 0x73], r9b; xor eax, 0xb243; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a369: or byte ptr [r8 - 0x73], r9b; xor eax, 0xb3b5; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a33b: or byte ptr [r8 - 0x73], r9b; xor eax, 0xb3d7; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a2a7: or byte ptr [r8 - 0x73], r9b; xor eax, 0xb476; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000059fed: or byte ptr [r8 - 0x73], r9b; xor eax, 0xb720; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000059fb7: or byte ptr [r8 - 0x73], r9b; xor eax, 0xb754; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000010dd5: or byte ptr [r8 - 0x75], r9b; and al, 0x10; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x00000000000170f1: or byte ptr [r8 - 0x75], r9b; and al, 0x18; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x20; ret; 
0x0000000000010d2e: or byte ptr [r8 - 0x75], r9b; and al, 0x20; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x48; ret; 
0x00000000000170a9: or byte ptr [r8 - 0x75], r9b; and al, 0x28; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x38; ret; 
0x0000000000016fd2: or byte ptr [r8 - 0x75], r9b; and al, 0x40; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x48; ret; 
0x00000000000137fa: or byte ptr [r8 - 0x77], r9b; and al, 8; add rsp, 0x10; ret; 
0x00000000000163ba: or byte ptr [r8 - 0x77], r9b; ja 0x163d0; add rsp, 0x18; ret; 
0x000000000002a595: or byte ptr [r8 - 0x77], r9b; push rdi; adc byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 7; add rsp, 0x28; ret; 
0x0000000000050d7c: or byte ptr [r8], al; xor eax, eax; pop rbx; ret; 
0x000000000004eec6: or byte ptr [r8], r8b; mov qword ptr [rdi], 0; pop rbx; ret; 
0x0000000000059bba: or byte ptr [r9 + r9*4 - 0x11], r9b; call qword ptr [rax + 0x18]; 
0x0000000000059fa2: or byte ptr [r9 + rcx*4 - 0xa], r9b; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x00000000000285fc: or byte ptr [r9], r14b; ror byte ptr [rax - 0x39], cl; ret; 
0x000000000002a4ce: or byte ptr [r9], r14b; ror byte ptr [rax - 0x77], 7; add rsp, 0x28; ret; 
0x0000000000057e6e: or byte ptr [r9], r8b; add byte ptr [rcx], dl; add byte ptr [rax + 0x5c], bh; ret; 
0x00000000000409ce: or byte ptr [r9], sil; ror byte ptr [rax - 0x77], 3; mov rax, rbx; pop rbx; ret; 
0x000000000003e9ab: or byte ptr [r9], sil; ror byte ptr [rax - 0x77], 3; pop rbx; ret; 
0x00000000000268d3: or byte ptr [rax + 0x39], 0xc6; jne 0x268f0; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000269ad: or byte ptr [rax + 0x39], 0xc6; jne 0x269ca; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026a7a: or byte ptr [rax + 0x39], 0xc6; jne 0x26a97; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026b3c: or byte ptr [rax + 0x39], 0xc6; jne 0x26b59; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026c19: or byte ptr [rax + 0x39], 0xc6; jne 0x26c36; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026cea: or byte ptr [rax + 0x39], 0xc6; jne 0x26d07; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026dc8: or byte ptr [rax + 0x39], 0xc6; jne 0x26de5; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026ea9: or byte ptr [rax + 0x39], 0xc6; jne 0x26ec6; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000026f7b: or byte ptr [rax + 0x39], 0xc6; jne 0x26f98; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000027059: or byte ptr [rax + 0x39], 0xc6; jne 0x27076; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000002712a: or byte ptr [rax + 0x39], 0xc6; jne 0x27147; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000000271fa: or byte ptr [rax + 0x39], 0xc6; jne 0x27217; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004ad5c: or byte ptr [rax + 0x39], 0xc6; jne 0x4ad79; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004b28a: or byte ptr [rax + 0x39], 0xc6; jne 0x4b2a7; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004b35d: or byte ptr [rax + 0x39], 0xc6; jne 0x4b37a; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000056b9c: or byte ptr [rax + 0x39], 0xc6; jne 0x56bb9; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000009c0c: or byte ptr [rax + 0x39], 0xc6; jne 0x9c29; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000009ce9: or byte ptr [rax + 0x39], 0xc6; jne 0x9d06; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000009dba: or byte ptr [rax + 0x39], 0xc6; jne 0x9dd7; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000b47c: or byte ptr [rax + 0x39], 0xc6; jne 0xb499; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000000b59c: or byte ptr [rax + 0x39], 0xc6; jne 0xb5b9; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000053e3c: or byte ptr [rax + 1], 0xc3; jmp rbx; 
0x00000000000409ed: or byte ptr [rax + 1], bh; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x000000000003e9c7: or byte ptr [rax + 1], bh; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000002a270: or byte ptr [rax + 1], bh; ret; 
0x0000000000028246: or byte ptr [rax + 1], cl; ret; 
0x0000000000028245: or byte ptr [rax + 1], r9b; ret; 
0x000000000003cd56: or byte ptr [rax - 0x73], cl; adc eax, 0x3a822; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000128fe: or byte ptr [rax - 0x73], cl; adc eax, 0x6367a; lea rax, [rip - 0x71ed]; mov esi, 0x100; call rax; 
0x0000000000010b08: or byte ptr [rax - 0x73], cl; add eax, 0x2e470; call rax; 
0x000000000001bdc9: or byte ptr [rax - 0x73], cl; add eax, 0x3c11f; call rax; 
0x0000000000019aef: or byte ptr [rax - 0x73], cl; add eax, 0x3fee9; call rax; 
0x000000000001e25d: or byte ptr [rax - 0x73], cl; add eax, 0x5b; call rax; 
0x000000000001aaa9: or byte ptr [rax - 0x73], cl; add eax, 0x8f; call rax; 
0x000000000001a087: or byte ptr [rax - 0x73], cl; add eax, 0x961; call rax; 
0x000000000001ab8d: or byte ptr [rax - 0x73], cl; add eax, 0xbb; call rax; 
0x00000000000114ec: or byte ptr [rax - 0x73], cl; add eax, 0xffffa54c; call rax; 
0x0000000000019f4c: or byte ptr [rax - 0x73], cl; add eax, 0xffffc5cc; call rax; 
0x0000000000019688: or byte ptr [rax - 0x73], cl; add eax, 0xffffd6a0; call rax; 
0x0000000000017c2c: or byte ptr [rax - 0x73], cl; add eax, 0xffffe88c; call rax; 
0x0000000000017c2c: or byte ptr [rax - 0x73], cl; add eax, 0xffffe88c; call rax; add rsp, 0x18; ret; 
0x000000000001e1aa: or byte ptr [rax - 0x73], cl; add eax, 0xfffff53e; call rax; 
0x000000000003e42c: or byte ptr [rax - 0x73], cl; mov ah, 0x24; mov al, 0; add byte ptr [rax], al; mov edx, 0xa8; call rbx; 
0x000000000000dfe5: or byte ptr [rax - 0x73], cl; or eax, 0x5206b; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004a6ff: or byte ptr [rax - 0x73], cl; pop rbp; dec dword ptr [rax - 0x75]; jge 0x4a707; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000005a9b1: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x1f48b]; add rsp, 0x48; ret; 
0x000000000005a961: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x1f4db]; add rsp, 0x48; ret; 
0x000000000005a911: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x1f52b]; add rsp, 0x48; ret; 
0x000000000005a55e: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x1f8de]; add rsp, 0x48; ret; 
0x0000000000056a81: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x233bb]; add rsp, 0x48; ret; 
0x000000000004d5c1: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x2c87b]; add rsp, 0x48; ret; 
0x0000000000022a21: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x5741b]; add rsp, 0x48; ret; 
0x00000000000229d1: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x5746b]; add rsp, 0x48; ret; 
0x0000000000022981: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x574bb]; add rsp, 0x48; ret; 
0x0000000000022931: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x5750b]; add rsp, 0x48; ret; 
0x000000000001efbe: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x5ae7e]; add rsp, 0x48; ret; 
0x000000000001ef7e: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x5aebe]; add rsp, 0x48; ret; 
0x000000000001ef3e: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; call qword ptr [rip + 0x5aefe]; add rsp, 0x48; ret; 
0x000000000005ec44: or byte ptr [rax - 0x73], cl; xor eax, 0x39e0; mov edx, 4; call qword ptr [rax + 0x18]; 
0x00000000000162a0: or byte ptr [rax - 0x73], cl; xor eax, 0x5fe88; lea rax, [rip - 0xacbf]; call rax; 
0x000000000000e8ff: or byte ptr [rax - 0x73], cl; xor eax, 0x675d1; lea rax, [rip - 0x331e]; call rax; 
0x000000000005ef6a: or byte ptr [rax - 0x73], cl; xor eax, 0x67ae; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ecd0: or byte ptr [rax - 0x73], cl; xor eax, 0x683b; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000000c5a0: or byte ptr [rax - 0x73], cl; xor eax, 0x69588; lea rax, [rip - 0xfbf]; call rax; 
0x000000000005ecb6: or byte ptr [rax - 0x73], cl; xor eax, 0x6a68; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005eece: or byte ptr [rax - 0x73], cl; xor eax, 0x71ef; mov edx, 9; call qword ptr [rax + 0x18]; 
0x000000000005df91: or byte ptr [rax - 0x73], cl; xor eax, 0x757a; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df77: or byte ptr [rax - 0x73], cl; xor eax, 0x77a7; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005dde9: or byte ptr [rax - 0x73], cl; xor eax, 0x792f; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ddcd: or byte ptr [rax - 0x73], cl; xor eax, 0x794c; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005df05: or byte ptr [rax - 0x73], cl; xor eax, 0x81a2; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000005dd63: or byte ptr [rax - 0x73], cl; xor eax, 0x8315; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000005b8a0: or byte ptr [rax - 0x73], cl; xor eax, 0x9c6b; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7c6: or byte ptr [rax - 0x73], cl; xor eax, 0x9d45; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b8e0: or byte ptr [rax - 0x73], cl; xor eax, 0x9d67; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b885: or byte ptr [rax - 0x73], cl; xor eax, 0x9e99; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7ac: or byte ptr [rax - 0x73], cl; xor eax, 0x9f72; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b6c5: or byte ptr [rax - 0x73], cl; xor eax, 0xa053; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a2c8: or byte ptr [rax - 0x73], cl; xor eax, 0xb243; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a36a: or byte ptr [rax - 0x73], cl; xor eax, 0xb3b5; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a33c: or byte ptr [rax - 0x73], cl; xor eax, 0xb3d7; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a2a8: or byte ptr [rax - 0x73], cl; xor eax, 0xb476; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a1ba: or byte ptr [rax - 0x73], cl; xor eax, 0xb561; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a108: or byte ptr [rax - 0x73], cl; xor eax, 0xb610; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000059fee: or byte ptr [rax - 0x73], cl; xor eax, 0xb720; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000059fb8: or byte ptr [rax - 0x73], cl; xor eax, 0xb754; mov edx, 2; call qword ptr [rax + 0x18]; 
0x00000000000582eb: or byte ptr [rax - 0x73], cl; xor eax, 0xd30b; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000058232: or byte ptr [rax - 0x73], cl; xor eax, 0xd3c2; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005eccf: or byte ptr [rax - 0x73], r9b; xor eax, 0x683b; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ecb5: or byte ptr [rax - 0x73], r9b; xor eax, 0x6a68; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005eecd: or byte ptr [rax - 0x73], r9b; xor eax, 0x71ef; mov edx, 9; call qword ptr [rax + 0x18]; 
0x000000000005df90: or byte ptr [rax - 0x73], r9b; xor eax, 0x757a; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df76: or byte ptr [rax - 0x73], r9b; xor eax, 0x77a7; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df04: or byte ptr [rax - 0x73], r9b; xor eax, 0x81a2; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000005dd62: or byte ptr [rax - 0x73], r9b; xor eax, 0x8315; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000005b7c5: or byte ptr [rax - 0x73], r9b; xor eax, 0x9d45; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b8df: or byte ptr [rax - 0x73], r9b; xor eax, 0x9d67; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7ab: or byte ptr [rax - 0x73], r9b; xor eax, 0x9f72; mov edx, 1; call qword ptr [rax + 0x18]; 
0x00000000000136a9: or byte ptr [rax - 0x75], cl; adc al, bpl; mov ebp, 0x48fffffc; mov eax, dword ptr [rsp + 0x10]; add rsp, 0x18; ret; 
0x000000000003991a: or byte ptr [rax - 0x75], cl; adc cl, byte ptr [rax - 0x7d]; ret 0xeb04; 
0x0000000000013a26: or byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x00000000000164d6: or byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000000bfd1: or byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x0000000000009007: or byte ptr [rax - 0x75], cl; add eax, 0x70979; test rax, rax; je 0x9016; call rax; 
0x0000000000017860: or byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x40; ret; 
0x000000000001df9f: or byte ptr [rax - 0x75], cl; and al, 0x10; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x288; ret; 
0x0000000000010dd6: or byte ptr [rax - 0x75], cl; and al, 0x10; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000005ac30: or byte ptr [rax - 0x75], cl; and al, 0x10; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000005abde: or byte ptr [rax - 0x75], cl; and al, 0x10; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000005aacc: or byte ptr [rax - 0x75], cl; and al, 0x10; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000001b9ea: or byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x38; ret; 
0x00000000000170f2: or byte ptr [rax - 0x75], cl; and al, 0x18; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x20; ret; 
0x0000000000010d2f: or byte ptr [rax - 0x75], cl; and al, 0x20; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x48; ret; 
0x0000000000011217: or byte ptr [rax - 0x75], cl; and al, 0x28; mov qword ptr [rax + 0x10], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x38; ret; 
0x000000000001b9e1: or byte ptr [rax - 0x75], cl; and al, 0x28; mov qword ptr [rax + 8], rcx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x00000000000170aa: or byte ptr [rax - 0x75], cl; and al, 0x28; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x38; ret; 
0x0000000000017857: or byte ptr [rax - 0x75], cl; and al, 0x30; mov qword ptr [rax + 8], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000016fd3: or byte ptr [rax - 0x75], cl; and al, 0x40; mov qword ptr [rdi + 0x10], rcx; mov qword ptr [rdi], 1; add rsp, 0x48; ret; 
0x000000000001a69d: or byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x20; ret; 
0x0000000000011912: or byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x28; ret; 
0x00000000000196fc: or byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x30; ret; 
0x000000000001c8d2: or byte ptr [rax - 0x75], cl; and al, 8; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x10; ret; 
0x000000000001d267: or byte ptr [rax - 0x75], cl; and al, 8; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x30; ret; 
0x000000000001bf3a: or byte ptr [rax - 0x75], cl; and al, 8; mov qword ptr [rsp], rax; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000005bd84: or byte ptr [rax - 0x75], cl; and byte ptr [rax - 0x77], cl; fistp qword ptr [rsi + 0x27]; mov r13, rax; call rax; 
0x000000000001e323: or byte ptr [rax - 0x75], cl; cmp bh, bh; adc eax, 0x5b0db; add rsp, 0x28; ret; 
0x000000000001e300: or byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x73], cl; add eax, 0xfffff555; call rax; 
0x000000000001ab52: or byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x75], cl; jo 0x1ab62; call qword ptr [rip + 0x5f218]; add rsp, 0x28; ret; 
0x000000000001e1a3: or byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x75], cl; jo 0x1e1b3; lea rax, [rip - 0xac2]; call rax; 
0x000000000001e1ca: or byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x75], cl; jo 0x1e1da; call qword ptr [rip + 0x5bcb0]; add rsp, 0x28; ret; 
0x000000000000ed06: or byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x75], cl; jo 0xed16; call 0x12540; add rsp, 0x28; ret; 
0x000000000000f152: or byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x75], cl; jo 0xf162; call 0x126b0; add rsp, 0x28; ret; 
0x000000000001adf9: or byte ptr [rax - 0x75], cl; je 0x1ae22; adc byte ptr [rax - 0x73], cl; add eax, 0xffff07ca; call rax; 
0x000000000001d319: or byte ptr [rax - 0x75], cl; je 0x1d342; adc byte ptr [rax - 0x73], cl; add eax, 0xfffee2aa; call rax; 
0x0000000000016b7d: or byte ptr [rax - 0x75], cl; jl 0x16ba6; and byte ptr [rax - 0x73], cl; add eax, 0xd6; call rax; 
0x000000000001bdc4: or byte ptr [rax - 0x75], cl; jl 0x1bded; or byte ptr [rax - 0x73], cl; add eax, 0x3c11f; call rax; 
0x000000000003d3e9: or byte ptr [rax - 0x75], cl; jle 0x3d3fe; mov rax, qword ptr [rsi + 0x18]; call qword ptr [rax + 0x28]; 
0x000000000002f218: or byte ptr [rax - 0x75], cl; mov ah, 0x24; jo 0x2f224; add byte ptr [rax], al; call rbx; 
0x000000000001447c: or byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; and al, 0x50; add rsp, 0x58; ret; 
0x0000000000038e93: or byte ptr [rax - 0x75], cl; push rax; adc al, ch; ret; 
0x000000000003a3aa: or byte ptr [rax - 0x75], cl; push rdx; adc byte ptr [rax - 0x7d], cl; ret 0xeb04; 
0x0000000000015cb3: or byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; add rsp, 0x60; ret; 
0x000000000000e6c3: or byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; add rsp, 0x70; ret; 
0x000000000000e648: or byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; add rsp, 0x78; ret; 
0x0000000000013771: or byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; add rsp, 0x98; ret; 
0x0000000000014b5b: or byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; call 0xc300; add rsp, 0x28; ret; 
0x0000000000049f52: or byte ptr [rax - 0x75], cl; sbb byte ptr [r8 - 0x77], r9b; mov dword ptr [rbp + 0x31], 0x515ffc0; test byte ptr [rdx], 0; pop rbx; ret; 
0x000000000005f126: or byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x73], cl; xor eax, 0x740d; mov edx, 0xb; jmp rax; 
0x000000000005ec06: or byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x73], cl; xor eax, 0x74ae; mov edx, 5; jmp rax; 
0x000000000005a432: or byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x73], cl; xor eax, 0xb2ea; mov edx, 1; jmp rax; 
0x0000000000057e26: or byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x73], cl; xor eax, 0xd764; mov edx, 0xe; jmp rax; 
0x000000000005bd83: or byte ptr [rax - 0x75], r9b; and byte ptr [rax - 0x77], cl; fistp qword ptr [rsi + 0x27]; mov r13, rax; call rax; 
0x000000000005f125: or byte ptr [rax - 0x75], r9b; sbb byte ptr [rax - 0x73], cl; xor eax, 0x740d; mov edx, 0xb; jmp rax; 
0x000000000005ec05: or byte ptr [rax - 0x75], r9b; sbb byte ptr [rax - 0x73], cl; xor eax, 0x74ae; mov edx, 5; jmp rax; 
0x0000000000057e25: or byte ptr [rax - 0x75], r9b; sbb byte ptr [rax - 0x73], cl; xor eax, 0xd764; mov edx, 0xe; jmp rax; 
0x000000000001a1ff: or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x68; ret; 
0x000000000001c8d7: or byte ptr [rax - 0x77], cl; add al, 0x24; mov rax, qword ptr [rsp]; add rsp, 0x10; ret; 
0x000000000001d26c: or byte ptr [rax - 0x77], cl; add al, 0x24; mov rax, qword ptr [rsp]; add rsp, 0x30; ret; 
0x000000000001bf3f: or byte ptr [rax - 0x77], cl; add al, 0x24; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000000c18e: or byte ptr [rax - 0x77], cl; and al, 0x10; add rsp, 0x28; ret; 
0x000000000000f619: or byte ptr [rax - 0x77], cl; and al, 0x10; add rsp, 0x70; ret; 
0x0000000000019ac6: or byte ptr [rax - 0x77], cl; and al, 0x10; call qword ptr [rip + 0x5fdc6]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000016e86: or byte ptr [rax - 0x77], cl; and al, 0x10; call qword ptr [rip + 0x628fe]; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000016eb3: or byte ptr [rax - 0x77], cl; and al, 0x10; mov qword ptr [rdi + 8], rcx; mov word ptr [rdi], 2; add rsp, 0x18; ret; 
0x0000000000017003: or byte ptr [rax - 0x77], cl; and al, 0x10; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x18; ret; 
0x000000000001bd9f: or byte ptr [rax - 0x77], cl; and al, 0x10; mov qword ptr [rsp + 0x18], rsi; add rsp, 0x20; ret; 
0x000000000000e6b9: or byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x70; ret; 
0x000000000000e63e: or byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x78; ret; 
0x0000000000013767: or byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rsp + 8]; mov rdx, qword ptr [rsp + 0x10]; add rsp, 0x98; ret; 
0x000000000000eccb: or byte ptr [rax - 0x77], cl; and al, 0x10; mov rdi, qword ptr [rax]; mov rax, qword ptr [rax + 8]; mov rax, qword ptr [rax]; call rax; 
0x00000000000144a2: or byte ptr [rax - 0x77], cl; and al, 0x28; lea rcx, [rip + 0x61b71]; lea rax, [rip - 0x8b26]; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000015f3b: or byte ptr [rax - 0x77], cl; and al, 0x28; mov qword ptr [rsp + 0x30], rdx; add rsp, 0x38; ret; 
0x0000000000010f11: or byte ptr [rax - 0x77], cl; and al, 0x28; mov qword ptr [rsp + 0x30], rdx; mov qword ptr [rdi + 0x10], 0; add rsp, 0x38; ret; 
0x000000000001bd32: or byte ptr [rax - 0x77], cl; and al, 0x48; lea rax, [rip + 0x24d1]; lea rdi, [rsp + 0x50]; call rax; 
0x0000000000014480: or byte ptr [rax - 0x77], cl; and al, 0x50; add rsp, 0x58; ret; 
0x00000000000137fb: or byte ptr [rax - 0x77], cl; and al, 8; add rsp, 0x10; ret; 
0x00000000000476c1: or byte ptr [rax - 0x77], cl; fisttp qword ptr [rax - 0x75]; je 0x476ed; sbb cl, ch; ret 0xfff8; 
0x000000000003da94: or byte ptr [rax - 0x77], cl; insb byte ptr [rdi], dx; and al, 8; movups xmm0, xmmword ptr [rcx]; movups xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 0x20]; 
0x00000000000163bb: or byte ptr [rax - 0x77], cl; ja 0x163d0; add rsp, 0x18; ret; 
0x000000000001c958: or byte ptr [rax - 0x77], cl; je 0x1c981; adc al, ch; or eax, 0x4800001a; add esp, 0x18; ret; 
0x00000000000124a8: or byte ptr [rax - 0x77], cl; jl 0x124d1; adc al, ch; mov ebp, 0x48ffffca; add esp, 0x18; ret; 
0x00000000000124c8: or byte ptr [rax - 0x77], cl; jl 0x124f1; adc al, ch; mov ebp, 0x48ffffcf; add esp, 0x18; ret; 
0x000000000001ab78: or byte ptr [rax - 0x77], cl; jl 0x1aba1; adc byte ptr [rax - 0x73], cl; add eax, 0xffffc13b; call rax; 
0x000000000001ac98: or byte ptr [rax - 0x77], cl; jl 0x1acc1; adc byte ptr [rcx], dh; shr byte ptr [rax - 0x14fd8aff], 5; add rsp, 0x18; ret; 
0x000000000001e248: or byte ptr [rax - 0x77], cl; jl 0x1e271; adc byte ptr [rax - 0x73], cl; add eax, 0xffffe55b; call rax; 
0x000000000000eef8: or byte ptr [rax - 0x77], cl; jl 0xef21; adc byte ptr [rax - 0x73], cl; add eax, 0xf33b; call rax; 
0x000000000000f228: or byte ptr [rax - 0x77], cl; jl 0xf251; adc byte ptr [rax - 0x7d], cl; mov dword ptr [rax + 0x48], 0xb857058d; add byte ptr [rax], al; call rax; 
0x0000000000011333: or byte ptr [rax - 0x77], cl; jno 0x11348; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xc8; ret; 
0x0000000000016264: or byte ptr [rax - 0x77], cl; jno 0x16289; mov qword ptr [rcx + 0x28], rdx; add rsp, 0xa8; ret; 
0x000000000000c564: or byte ptr [rax - 0x77], cl; jno 0xc589; mov qword ptr [rcx + 0x28], rdx; add rsp, 0xa8; ret; 
0x0000000000056d36: or byte ptr [rax - 0x77], cl; jo 0x56d4b; ret; 
0x0000000000056d53: or byte ptr [rax - 0x77], cl; jo 0x56d68; ret; 
0x0000000000056d6b: or byte ptr [rax - 0x77], cl; jo 0x56d80; ret; 
0x0000000000056d85: or byte ptr [rax - 0x77], cl; jo 0x56d9a; ret; 
0x0000000000010dd2: or byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x75], r9b; and al, 0x10; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x18; ret; 
0x000000000002a596: or byte ptr [rax - 0x77], cl; push rdi; adc byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 7; add rsp, 0x28; ret; 
0x000000000001e5cc: or byte ptr [rax - 0x77], cl; push rsp; and al, 0x10; add rsp, 0x18; ret; 
0x0000000000014862: or byte ptr [rax - 0x77], cl; ret 0x448a; 
0x000000000003cc6c: or byte ptr [rax - 0x77], cl; ret; 
0x000000000005abd4: or byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rdx + 0x48], cl; mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000003bef4: or byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rcx + 0x4a], 0x8b; cmp al, 0x2b; call rax; 
0x00000000000393c8: or byte ptr [rax - 0x7b], cl; test byte ptr [rax - 0x73], 0x1d; lea edi, [rcx + 0xa74fffd]; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000000570e3: or byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000005ca0e: or byte ptr [rax - 0x7d], cl; ret 0xffe; 
0x0000000000057987: or byte ptr [rax - 0x7f], cl; ret 0x100; 
0x000000000002f7d3: or byte ptr [rax - 1], cl; ret 0x8949; 
0x000000000004568f: or byte ptr [rax - 1], cl; ret; 
0x0000000000012eaa: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x118; ret; 
0x000000000001799b: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x40; ret; 
0x000000000001015f: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x108; ret; 
0x000000000000fc89: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0xe0; ret; 
0x000000000002a096: or byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000045503: or byte ptr [rax], al; add byte ptr [rax], al; call rbx; 
0x00000000000466aa: or byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x330], rdi; mov rbp, rcx; call rcx; 
0x00000000000124f1: or byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp]; mov rdx, qword ptr [rsp + 8]; add rsp, 0x10; ret; 
0x000000000002d7df: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x148]; call rbx; 
0x0000000000038866: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x000000000002f1ff: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r12; lea rbx, [rip - 0x1a4ad]; call rbx; 
0x0000000000032fb4: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r13; mov rsi, qword ptr [rsp + 0x198]; call rbx; 
0x0000000000045b1b: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r13; mov rsi, qword ptr [rsp + 0x330]; call rbx; 
0x0000000000045b0a: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r14; lea rbx, [rip - 0x30db8]; call rbx; 
0x000000000002d7ce: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r15; lea rbx, [rip - 0x18a7c]; call rbx; 
0x0000000000032fa3: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r15; lea rbx, [rip - 0x1e251]; call rbx; 
0x00000000000454d1: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r15; lea rbx, [rip - 0x3078f]; call rbx; 
0x0000000000046d2d: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r15; lea rbx, [rip - 0x31fdb]; call rbx; 
0x0000000000057792: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rax; call qword ptr [rip + 0x222a1]; add rsp, 0x18; ret; 
0x0000000000037c06: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; call rbx; 
0x000000000005a422: or byte ptr [rax], al; je 0x5a429; mov al, 1; ret; 
0x000000000004eec7: or byte ptr [rax], al; mov qword ptr [rdi], 0; pop rbx; ret; 
0x0000000000050d7d: or byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x00000000000555e7: or byte ptr [rbp - 0x6bf0be37], al; ret 0x4c89; 
0x000000000001c8f8: or byte ptr [rbx + 0x24448907], cl; add al, 0x8b; and al, 4; add rsp, 0x10; ret; 
0x000000000003d417: or byte ptr [rbx + 0x41], bl; pop rsi; pop r15; pop rbp; ret; 
0x000000000005c6fa: or byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x000000000001f355: or byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000005b124: or byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; jmp rax; 
0x000000000001f2a1: or byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x000000000001cb35: or byte ptr [rbx + 0x48082444], cl; add esp, 0x10; ret; 
0x000000000001e667: or byte ptr [rbx + 0x48082444], cl; add esp, 0x18; ret; 
0x000000000001c055: or byte ptr [rbx + 0x48082444], cl; add esp, 0xc; ret; 
0x0000000000017f20: or byte ptr [rbx + 0x4f890c4e], cl; or al, 0x48; add esp, 0xa8; ret; 
0x000000000002c378: or byte ptr [rbx + 3], dl; add byte ptr [rcx + 0x63], cl; or al, 0xa8; add rcx, r8; jmp rcx; 
0x0000000000043c7e: or byte ptr [rbx + r13*2 - 0x2a], cl; cmp byte ptr [rbp + 1], cl; ret 0xff31; 
0x0000000000043c7f: or byte ptr [rbx + rbp*2 - 0x2a], cl; cmp byte ptr [rbp + 1], cl; ret 0xff31; 
0x000000000004222a: or byte ptr [rbx - 0x17], bl; fild word ptr [rsi + rdi*8 - 1]; pop rbx; ret; 
0x000000000002a580: or byte ptr [rbx], dl; mov qword ptr [rdi + 0x10], rax; mov eax, 1; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x000000000001c1c2: or byte ptr [rcx + 0x44b70fc6], cl; and al, 0xc; shl rax, 0x20; or rsi, rax; lea rax, [rip + 0x1c28]; call rax; 
0x0000000000017f1d: or byte ptr [rcx + 0x4e8b084f], cl; or al, 0x89; or al, 0x48; add esp, 0xa8; ret; 
0x0000000000017f1c: or byte ptr [rcx + 0x4e8b084f], r9b; or al, 0x89; or al, 0x48; add esp, 0xa8; ret; 
0x000000000005d669: or byte ptr [rcx + rcx*4 + 0x40], cl; adc byte ptr [rax - 0x77], cl; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000402f7: or byte ptr [rcx + rcx*4 - 0x10], cl; mov rdx, rbx; add rsp, 0x88; pop rbx; pop r14; ret; 
0x0000000000059bbb: or byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax + 0x18]; 
0x0000000000059fa3: or byte ptr [rcx + rcx*4 - 0xa], cl; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000004d5fa: or byte ptr [rcx + rcx*8 + 0x1b00374], al; ret; 
0x000000000000fb47: or byte ptr [rcx - 0x74f3db84], cl; and al, 0xc; add rsp, 0x10; ret; 
0x0000000000056045: or byte ptr [rcx - 0x77], al; ret 0x6eb; 
0x0000000000021766: or byte ptr [rcx - 0x7d], cl; ret 0x4c10; 
0x00000000000596b2: or byte ptr [rcx - 1], 0xff; jmp qword ptr [rsi + 1]; 
0x000000000002d35e: or byte ptr [rcx - 1], cl; ret 0x8349; 
0x00000000000543d5: or byte ptr [rcx], al; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x0000000000040c42: or byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; pop r14; ret; 
0x000000000001016c: or byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x0000000000057e6f: or byte ptr [rcx], al; add byte ptr [rcx], dl; add byte ptr [rax + 0x5c], bh; ret; 
0x0000000000040380: or byte ptr [rcx], bl; add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000005de91: or byte ptr [rcx], dh; rol byte ptr [rcx - 0x78], 0; mov rax, r8; ret; 
0x00000000000285fd: or byte ptr [rcx], dh; ror byte ptr [rax - 0x39], cl; ret; 
0x00000000000409cf: or byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 3; mov rax, rbx; pop rbx; ret; 
0x000000000003e9ac: or byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 3; pop rbx; ret; 
0x000000000002a4cf: or byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 7; add rsp, 0x28; ret; 
0x000000000004f83f: or byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; and byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x000000000004f4f4: or byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000005de90: or byte ptr [rcx], sil; rol byte ptr [rcx - 0x78], 0; mov rax, r8; ret; 
0x0000000000039fd3: or byte ptr [rdi + 6], bh; lea rax, [rip + 0x27bec]; movsxd rdx, dword ptr [rax + rcx*4]; add rdx, rax; jmp rdx; 
0x000000000003da99: or byte ptr [rdi], cl; adc byte ptr [rcx], al; movups xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 0x20]; 
0x0000000000036d66: or byte ptr [rdi], cl; adc dword ptr [rax], eax; inc rax; add rsp, 0x20; pop rbx; ret; 
0x000000000002b9dd: or byte ptr [rdi], cl; adc dword ptr [rdi + 8], eax; mov qword ptr [rdi], rax; ret; 
0x000000000002a4cb: or byte ptr [rdi], cl; adc dword ptr [rdi + 8], eax; xor eax, eax; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x000000000003a60a: or byte ptr [rdi], cl; mov dh, 0; lea rcx, [rip + 0x275ff]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003a394: or byte ptr [rdi], cl; mov dh, 0x32; mov edx, 6; movsxd rsi, dword ptr [r12 + rsi*4]; add rsi, r12; jmp rsi; 
0x0000000000014408: or byte ptr [rdi], cl; sub dword ptr [rsp + 0x20], eax; lea rcx, [rip + 0x61c2b]; lea rax, [rip - 0x8a8c]; lea rdx, [rsp + 0x20]; call rax; 
0x0000000000046031: or byte ptr [rdi], cl; xchg eax, esp; ret 0x8948; 
0x0000000000044bf8: or byte ptr [rdi], cl; xchg eax, esp; ret 0x8b48; 
0x0000000000035598: or byte ptr [rdi], dh; mov qword ptr [rdi], 1; pop rbx; pop r14; pop rbp; ret; 
0x000000000002b9dc: or byte ptr [rdi], r9b; adc dword ptr [rdi + 8], eax; mov qword ptr [rdi], rax; ret; 
0x000000000001a10c: or byte ptr [rdx + 0xa8248c], cl; add byte ptr [rax], al; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x20]; add rsp, 0xd8; ret; 
0x000000000001635a: or byte ptr [rdx - 0x77a7dbb4], cl; adc byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x68; ret; 
0x0000000000019f89: or byte ptr [rdx - 0x77a7dbb4], cl; adc byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x88; ret; 
0x00000000000165ad: or byte ptr [rdx - 0x77bfdbb4], cl; adc byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x50; ret; 
0x000000000002080b: or byte ptr [rdx], al; jae 0x20826; cmp dword ptr [rbx + 0x10], 2; jae 0x20835; pop rbx; ret; 
0x0000000000017a22: or byte ptr [rsi - 0x39], ah; add byte ptr [rbx], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x78; ret; 
0x0000000000017c07: or byte ptr [rsi - 0x39], ah; add byte ptr [rdx], al; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x48; ret; 
0x0000000000017a21: or byte ptr [rsi - 0x39], spl; add byte ptr [rbx], al; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x78; ret; 
0x0000000000017c06: or byte ptr [rsi - 0x39], spl; add byte ptr [rdx], al; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x48; ret; 
0x0000000000019ebc: or cl, byte ptr [rax - 0x75]; and al, 0x10; add rsp, 0x58; ret; 
0x0000000000018489: or cl, byte ptr [rax - 0x75]; and al, 0x10; mov word ptr [rax], 3; mov rax, qword ptr [rsp + 0x18]; add rsp, 0xb8; ret; 
0x0000000000017558: or cl, byte ptr [rax - 0x75]; and al, 0x18; add rsp, 0x58; ret; 
0x000000000000c2e5: or cl, byte ptr [rax - 0x75]; and al, 0x18; add rsp, 0x68; ret; 
0x000000000001a4af: or cl, byte ptr [rax - 0x75]; and al, 0x20; add rsp, 0x58; ret; 
0x00000000000174b3: or cl, byte ptr [rax - 0x75]; and al, 8; add rsp, 0x48; ret; 
0x0000000000043c8e: or cl, byte ptr [rax - 0x75]; pop rdx; sub byte ptr [rax - 0x75], cl; xor byte ptr [rax - 0x7d], cl; ret 0x4838; 
0x0000000000037bf5: or cl, byte ptr [rax - 0x75]; push rax; adc byte ptr [rax - 0x75], cl; jge 0x37bfe; call rbx; 
0x00000000000393d4: or cl, byte ptr [rax - 0x75]; push rax; adc byte ptr [rax - 0x75], cl; jge 0x393dd; call rbx; 
0x0000000000039e6d: or cl, byte ptr [rcx + 0x63]; lea r8d, [rax]; add rax, r13; jmp rax; 
0x0000000000057ebb: or cl, byte ptr [rdi]; ror dword ptr [r8 - 0x7b], 0xf6; je 0x57ee9; dec rsi; mov qword ptr [rdi], rsi; ret; 
0x0000000000058c58: or cl, byte ptr [rdi]; xchg eax, edx; ret; 
0x0000000000056fac: or dh, al; add al, 0x18; add byte ptr [rax - 1], cl; ret; 
0x0000000000017abe: or dh, al; add byte ptr [rcx], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000015fa7: or dh, al; and al, 0x37; add byte ptr [rax - 0x73], cl; add eax, 0x1c8c; lea rdx, [rsp + 0x18]; call rax; 
0x0000000000057dee: or dh, byte ptr [rax - 0x3b7cb7ff]; cmp byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000004f0eb: or dh, byte ptr [rcx]; leave; shl rax, 0x20; or rax, rcx; ret; 
0x000000000001ba75: or dh, byte ptr [rdi + 0x14]; mov rax, qword ptr [rsp]; lea rcx, [rip + 0x450a5]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000019b02: or dl, byte ptr [rax]; add byte ptr [rax], al; call rax; 
0x000000000005b611: or dword ptr [r8], eax; mov rax, rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000005bba3: or dword ptr [rax + 1], 0x45db31c8; mov edi, esp; jmp rax; 
0x000000000001cb92: or dword ptr [rax + 1], 0x48e0ffc8; lea edi, [rip + 0x440dd]; lea rdx, [rip + 0x5981a]; lea rax, [rip - 0x1153d]; mov esi, 0x28; call rax; 
0x000000000002a267: or dword ptr [rax + 1], 0x48e0ffc8; mov edx, dword ptr [rdi + 8]; mov eax, 1; ret; 
0x000000000002b9bd: or dword ptr [rax + 1], 0x48e2ffca; mov ecx, dword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; mov qword ptr [rdi], rax; ret; 
0x000000000005c03d: or dword ptr [rax + 1], 0xe43145c8; mov ebp, edx; jmp rax; 
0x000000000001bb8e: or dword ptr [rax + rax], eax; lea rdi, [rsp + 0x68]; mov qword ptr [rsp + 0x20], rdi; call rax; 
0x0000000000037d7b: or dword ptr [rax - 0x73], ecx; add eax, 0x42305; pop rcx; ret; 
0x00000000000378eb: or dword ptr [rax - 0x73], ecx; add eax, 0x4275d; pop rcx; ret; 
0x00000000000196f3: or dword ptr [rax - 0x75], ecx; add al, 0x24; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 8]; add rsp, 0x30; ret; 
0x000000000000989e: or dword ptr [rax - 0x7d], ecx; ret 0x4dfe; 
0x0000000000032d5d: or dword ptr [rax - 0x7d], ecx; ret; 
0x000000000004fca1: or dword ptr [rax - 1], ecx; ret; 
0x0000000000028354: or dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; or eax, 0x38d1a; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000183ff: or dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x48; ret; 
0x000000000005eed7: or dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x0000000000027748: or dword ptr [rax], eax; add byte ptr [rcx - 1], cl; ret 0x394c; 
0x000000000005b612: or dword ptr [rax], eax; mov rax, rbx; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000d193: or dword ptr [rax], ecx; add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x11070; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000c229: or dword ptr [rbx + 0x48142444], ecx; add esp, 0x28; ret; 
0x000000000000d8e1: or dword ptr [rcx], eax; add byte ptr [rax - 0x73], cl; jl 0xd90c; push rax; call rax; 
0x0000000000054b77: or dword ptr [rcx], edi; ret 0x830f; 
0x000000000000900c: or dword ptr [rdi], eax; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x000000000001bad6: or dword ptr [rdx + 0x480b2444], ecx; add esp, 0x10; ret; 
0x00000000000543d3: or eax, 0x10868; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000050e05: or eax, 0x1363e; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004cce6: or eax, 0x18578b48; mov rdi, qword ptr [rdi + 0x10]; mov rax, rdi; pop rcx; ret; 
0x0000000000040b8b: or eax, 0x2110c; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x000000000004037f: or eax, 0x21908; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003d3ce: or eax, 0x2488d; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x000000000003a610: or eax, 0x275ff; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000395ba: or eax, 0x2859d; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000039355: or eax, 0x287f2; movsxd rax, dword ptr [rcx + rbp*4]; add rax, rcx; jmp rax; 
0x00000000000370b9: or eax, 0x2a9ca; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000036dc6: or eax, 0x2acad; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000368b4: or eax, 0x2b1af; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000036886: or eax, 0x2b1dd; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003577f: or eax, 0x2c2d4; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000034c6b: or eax, 0x2cdd0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000034c0f: or eax, 0x2ce14; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000032720: or eax, 0x2f187; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000032598: or eax, 0x2f2cf; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003020a: or eax, 0x31511; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000301b6: or eax, 0x315c9; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002fad3: or eax, 0x31c30; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; xor edx, edx; jmp rax; 
0x000000000002c179: or eax, 0x35536; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002b9b5: or eax, 0x35be2; movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x000000000002aeb0: or eax, 0x36667; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a8b0: or eax, 0x36c47; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a6e0: or eax, 0x36df7; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a397: or eax, 0x37128; movsxd rax, dword ptr [r9 + rax*4]; add rax, r9; jmp rax; 
0x000000000002a32f: or eax, 0x37178; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a2bf: or eax, 0x371d0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002a25f: or eax, 0x37218; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029e25: or eax, 0x37406; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000029eaf: or eax, 0x375a8; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000028359: or eax, 0x38d1a; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001cb8a: or eax, 0x440dd; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000599e8: or eax, 0x446100f; movups xmmword ptr [rax + 1], xmm0; mov cl, 1; mov byte ptr [rax], cl; ret; 
0x000000000001ba7e: or eax, 0x450a5; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000001c95f: or eax, 0x4800001a; add esp, 0x18; ret; 
0x000000000000e74c: or eax, 0x51b4b; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000dfe8: or eax, 0x5206b; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000ef97: or eax, 0x580006ae; ret; 
0x0000000000017349: or eax, 0x5edfa; lea rax, [rip - 0xb9c5]; mov esi, 0x2b; lea rdx, [rsp + 0x10]; call rax; 
0x0000000000014545: or eax, 0x61ad6; lea rax, [rip - 0x8bc1]; mov esi, 0x2b; lea rdx, [rsp + 0x18]; call rax; 
0x00000000000144aa: or eax, 0x61b71; lea rax, [rip - 0x8b26]; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000014410: or eax, 0x61c2b; lea rax, [rip - 0x8a8c]; lea rdx, [rsp + 0x20]; call rax; 
0x000000000001435f: or eax, 0x61cbc; lea rax, [rip - 0x89db]; lea rdx, [rsp + 0x30]; call rax; 
0x000000000001428c: or eax, 0x61d8f; lea rax, [rip - 0x8908]; lea rdx, [rsp + 0x28]; call rax; 
0x00000000000141fb: or eax, 0x61e00; lea rax, [rip - 0x8877]; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000053e36: or eax, 0x634a0001; sbb al, 0x80; add rbx, rax; jmp rbx; 
0x000000000005dc73: or eax, 0x7fce; mov edx, 0x28; mov r8d, 0x11f; call 0x5db10; pop rcx; ret; 
0x000000000005dcaa: or eax, 0x81e2; mov edx, 0x2c; mov r8d, 0xc4; call 0x5db10; pop rcx; ret; 
0x000000000001906f: or eax, 0x8b480006; and al, 0x10; add rsp, 0x48; ret; 
0x0000000000018618: or eax, 0x8b480006; and al, 0x58; add rsp, 0x3a8; ret; 
0x000000000001c40d: or eax, 0x8d482beb; add eax, 0x3a849; call rax; 
0x000000000001547d: or eax, 0x8d482beb; add eax, 0x417d9; call rax; 
0x000000000005bdc0: or eax, 0x95ff; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x000000000005f12e: or eax, 0xba000074; or eax, dword ptr [rax]; add byte ptr [rax], al; jmp rax; 
0x0000000000022736: or eax, 0xc0310000; pop rcx; ret; 
0x000000000004aadb: or eax, 0xc0bc0f66; movzx edx, ax; mov eax, 1; ret; 
0x00000000000423ad: or eax, 0xffff9bbe; cmovne rcx, rax; call rcx; 
0x000000000003e9c1: or eax, 2; mov qword ptr [rbx + 8], rax; mov eax, 1; mov qword ptr [rbx], rax; pop rbx; ret; 
0x0000000000029e91: or eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000005f133: or eax, dword ptr [rax]; add byte ptr [rax], al; jmp rax; 
0x000000000002c579: or eax, dword ptr [rax]; add byte ptr [rcx - 0x44], al; add byte ptr ss:[rax], al; add cl, ch; ret 0xfffb; 
0x000000000001bd1d: or eax, dword ptr [rax]; add byte ptr [rdi + 0x27], bh; call rax; 
0x000000000001e7af: or eax, dword ptr [rcx]; add byte ptr [rax], al; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000057970: or eax, eax; or rax, rdx; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000118e3: or eax, ecx; add rsp, 0x28; ret; 
0x0000000000057ccd: or eax, ecx; add rsp, 0x50; pop rbx; pop r14; pop rbp; ret; 
0x000000000004f0f3: or eax, ecx; ret; 
0x0000000000057973: or eax, edx; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000005998e: or eax, esi; ret; 
0x0000000000036240: or ebp, ebx; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002e915: or ebp, ebx; add ch, bl; adc cl, byte ptr [rax - 0x77]; ret; 
0x0000000000012feb: or ebp, ebx; add rsp, 0x68; ret; 
0x0000000000018cdd: or ebp, ebx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x38; ret; 
0x000000000001a75b: or ebp, ebx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000001a5a4: or ebp, ebx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; ret; 
0x000000000001cd68: or ebp, ebx; out dx, eax; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x108; ret; 
0x000000000003fea9: or ebp, ecx; wait; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000019a75: or ecx, dword ptr [rax - 0x73]; add eax, 0x1083; lea rdi, [rsp + 0xb0]; call rax; 
0x000000000000d1b6: or ecx, dword ptr [rax - 0x73]; add eax, 0x11052; lea rdi, [rsp + 0x120]; call rax; 
0x000000000000cbf8: or ecx, dword ptr [rax - 0x73]; add eax, 0x11610; lea rdi, [rsp + 0x120]; call rax; 
0x000000000001bce8: or ecx, dword ptr [rax - 0x73]; add eax, 0x2520; lea rdi, [rsp + 0x50]; call rax; 
0x000000000001520c: or ecx, dword ptr [rax - 0x73]; add eax, 0x41a4c; call rax; 
0x000000000000fa2c: or ecx, dword ptr [rax - 0x73]; add eax, 0x4722c; call rax; 
0x000000000001a3c4: or ecx, dword ptr [rax - 0x73]; add eax, 0x8c4; lea rdi, [rsp + 0x18]; call rax; 
0x0000000000019d9f: or ecx, dword ptr [rax - 0x73]; add eax, 0xd59; lea rdi, [rsp + 0xb0]; call rax; 
0x0000000000014580: or ecx, dword ptr [rax - 0x73]; add eax, 0xffff7218; call rax; 
0x00000000000144e0: or ecx, dword ptr [rax - 0x73]; add eax, 0xffff72b8; call rax; 
0x0000000000014395: or ecx, dword ptr [rax - 0x73]; add eax, 0xffff7403; call rax; 
0x00000000000142c2: or ecx, dword ptr [rax - 0x73]; add eax, 0xffff74d6; call rax; 
0x000000000000f0aa: or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc6ee; call rax; 
0x000000000000ede2: or ecx, dword ptr [rax - 0x73]; add eax, 0xffffc9b6; call rax; 
0x0000000000019dbd: or ecx, dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x158; ret; 
0x0000000000019a93: or ecx, dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x178; ret; 
0x0000000000014d3a: or ecx, dword ptr [rax - 0x75]; and al, 0x40; mov edx, dword ptr [rsp + 0x48]; add rsp, 0xf8; ret; 
0x000000000001a38e: or ecx, dword ptr [rax - 0x75]; and al, 8; add rsp, 0xb8; ret; 
0x0000000000016986: or ecx, dword ptr [rax - 0x75]; jl 0x169af; sub byte ptr [rax - 0x73], cl; add eax, 0x40ed; call rax; 
0x000000000001e293: or ecx, dword ptr [rax - 0x75]; jl 0x1e2bc; sbb al, ch; ret 0xfead; 
0x000000000000ec83: or ecx, dword ptr [rax - 0x75]; jl 0xecac; or bh, bh; adc eax, 0x6ae91; add rsp, 0x18; ret; 
0x000000000000f563: or ecx, dword ptr [rax - 0x75]; jl 0xf58c; or bh, bh; adc eax, 0x6a5b1; add rsp, 0x18; ret; 
0x000000000003e9a8: or ecx, dword ptr [rax - 0x77]; or byte ptr [r9], sil; ror byte ptr [rax - 0x77], 3; pop rbx; ret; 
0x000000000000aa88: or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000003d0bd: or ecx, dword ptr [rcx + rcx*4 - 1]; call rax; 
0x0000000000054928: or ecx, dword ptr [rcx - 1]; ret; 
0x000000000001bad5: or ecx, dword ptr [rcx]; mov al, byte ptr [rsp + 0xb]; add rsp, 0x10; ret; 
0x000000000001e934: or edi, edi; adc eax, 0x5b1ad; ud2; nop dword ptr [rax]; movabs rax, 0x5203149ad97ccfc6; ret; 
0x0000000000059f8a: or edx, 2; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x000000000001967e: or edx, dword ptr [rax + 0x38ec8348]; mov qword ptr [rsp + 8], rdi; lea rax, [rip - 0x2960]; call rax; 
0x000000000001e29f: or edx, dword ptr [rax + 0x48]; mov dword ptr [rsp], edi; call 0x1c7a0; pop rax; ret; 
0x00000000000582ef: or edx, ebx; add byte ptr [rax], al; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000039b78: or esi, dword ptr [rcx + 0x2e3f802f]; je 0x39b89; xor eax, eax; pop rcx; ret; 
0x000000000001c1cf: or esi, eax; lea rax, [rip + 0x1c28]; call rax; 
0x000000000001c1cf: or esi, eax; lea rax, [rip + 0x1c28]; call rax; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001dd86: or esi, eax; lea rax, [rip - 0x1bff]; call rax; 
0x0000000000059988: or esi, edx; movzx eax, cl; or rax, rsi; ret; 
0x000000000003e9c0: or rax, 2; mov qword ptr [rbx + 8], rax; mov eax, 1; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000005796f: or rax, r8; or rax, rdx; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000057ccc: or rax, r9; add rsp, 0x50; pop rbx; pop r14; pop rbp; ret; 
0x00000000000118e2: or rax, rcx; add rsp, 0x28; ret; 
0x000000000004f0f2: or rax, rcx; ret; 
0x0000000000057972: or rax, rdx; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x000000000005998d: or rax, rsi; ret; 
0x0000000000059f89: or rdx, 2; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x000000000001c1ce: or rsi, rax; lea rax, [rip + 0x1c28]; call rax; 
0x000000000001c1ce: or rsi, rax; lea rax, [rip + 0x1c28]; call rax; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001dd85: or rsi, rax; lea rax, [rip - 0x1bff]; call rax; 
0x0000000000059987: or rsi, rdx; movzx eax, cl; or rax, rsi; ret; 
0x0000000000017abd: or sil, al; add byte ptr [rcx], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000056fab: or sil, r8b; add al, 0x18; add byte ptr [rax - 1], cl; ret; 
0x000000000000dbad: out 0, al; add byte ptr [rax], al; lea rax, [rip + 0x10658]; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000059a12: out 0x20, al; mov eax, edi; or rax, rsi; ret; 
0x0000000000037d86: out 0x21, al; std; dec dword ptr [rax - 0x73]; add eax, 0x422f7; pop rcx; ret; 
0x000000000005a1a6: out 0x41, al; call qword ptr [rsi + 0x18]; 
0x000000000003e83d: out 0x41, al; call rdi; 
0x0000000000059b85: out 0x41, eax; call qword ptr [rsi + 0x18]; 
0x000000000002f205: out 0x48, eax; lea ebx, [rip - 0x1a4ad]; call rbx; 
0x000000000000c985: out 0xb3, eax; add al, byte ptr [rax]; call rax; 
0x00000000000516f9: out 0xe8, al; int1; ret 0xffff; 
0x000000000001e3b5: out 0xe8, eax; add eax, 0x48000000; add esp, 0x58; ret; 
0x00000000000583b5: out 0xf, eax; xchg eax, esp; ret 0xca20; 
0x000000000004cd81: out 0xfe, al; inc dword ptr [rax]; add byte ptr [rsi - 0x7d], ah; inc byte ptr [rdx]; sete al; ret; 
0x0000000000037da7: out 0xff, eax; adc eax, 0x41a4a; pop rcx; ret; 
0x000000000001d22e: out 0xff, eax; adc eax, 0x5c4ab; mov rdi, rsp; call qword ptr [rip + 0x5cd82]; add rsp, 0x18; ret; 
0x000000000001d237: out 0xff, eax; adc eax, 0x5cd82; add rsp, 0x18; ret; 
0x000000000002f1fc: out 4, al; mov edx, 8; mov rdi, r12; lea rbx, [rip - 0x1a4ad]; call rbx; 
0x0000000000045b07: out 4, al; mov edx, 8; mov rdi, r14; lea rbx, [rip - 0x30db8]; call rbx; 
0x000000000002d7cb: out 4, al; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x18a7c]; call rbx; 
0x0000000000032fa0: out 4, al; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x1e251]; call rbx; 
0x0000000000046d2a: out 4, al; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x31fdb]; call rbx; 
0x00000000000466a7: out 5, eax; mov esi, 8; mov qword ptr [rsp + 0x330], rdi; mov rbp, rcx; call rcx; 
0x000000000000b3cf: out 6, eax; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x0000000000059985: out 8, al; or rsi, rdx; movzx eax, cl; or rax, rsi; ret; 
0x000000000004a888: out dx, al; add al, byte ptr [rax]; ret; 
0x000000000003fe8c: out dx, al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002b625: out dx, al; jmp rsi; 
0x0000000000059fd5: out dx, al; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000046abe: out dx, eax; adc eax, 0x8d490000; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000000d57e: out dx, eax; add al, 0; lea rdi, [rsp + 0x260]; mov qword ptr [rsp + 0x40], rdi; call rax; 
0x000000000004a7d0: out dx, eax; add al, byte ptr [rax]; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000003721b: out dx, eax; and byte ptr [rax - 0x73], cl; add eax, 0x2a874; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x000000000004012e: out dx, eax; and byte ptr [rax - 0x7d], cl; ret; 
0x0000000000059bbe: out dx, eax; call qword ptr [rax + 0x18]; 
0x0000000000037c0c: out dx, eax; call rbx; 
0x000000000005eed2: out dx, eax; jno 0x5eed5; add byte ptr [rdx + 9], bh; call qword ptr [rax + 0x18]; 
0x000000000004b3a5: out dx, eax; mov es, word ptr [rcx]; add byte ptr [rax - 0x75], cl; adc al, 0xca; ret; 
0x000000000005b949: out dx, eax; mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000005adfb: out dx, eax; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x00000000000426db: out dx, eax; mov esi, 1; xor edx, edx; call rbx; 
0x000000000001cd6a: out dx, eax; mov rax, qword ptr [rsp + 0x38]; add rsp, 0x108; ret; 
0x000000000005bcd5: out dx, eax; mov rdx, r9; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x000000000005b066: out dx, eax; mov rsi, qword ptr [rsp + 0x10]; mov rdx, r15; call qword ptr [rbx + 0x18]; 
0x0000000000032fba: out dx, eax; mov rsi, qword ptr [rsp + 0x198]; call rbx; 
0x0000000000045b21: out dx, eax; mov rsi, qword ptr [rsp + 0x330]; call rbx; 
0x000000000005bb1c: out dx, eax; mov rsi, r15; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x00000000000426cf: out dx, eax; xor esi, esi; mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x000000000004cd71: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000393b5: outsb dx, byte ptr [rsi]; dec dword ptr [rcx - 0x75]; jle 0x393ba; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x000000000005e766: outsb dx, byte ptr [rsi]; lodsd eax, dword ptr [rsi]; add dword ptr [rax], eax; add rsp, 0x28; ret; 
0x000000000003d176: outsb dx, byte ptr [rsi]; ret 3; 
0x000000000003afb6: outsb dx, byte ptr [rsi]; ret; 
0x000000000001ff9d: outsd dx, dword ptr [rsi]; add byte ptr [eax], al; ret; 
0x000000000001ccba: outsd dx, dword ptr [rsi]; add byte ptr [rax - 0x77], cl; and al, 0x60; mov rdi, qword ptr [rsp + 0x60]; lea rax, [rip + 0x583]; call rax; 
0x000000000001f74b: outsd dx, dword ptr [rsi]; add byte ptr [rax], al; ret; 
0x000000000003498e: outsd dx, dword ptr [rsi]; movsxd rcx, dword ptr [r14 + rdx*4]; add rcx, r14; jmp rcx; 
0x000000000005cbff: outsd dx, dword ptr [rsi]; pop rdx; adc byte ptr [rax - 0x7d], cl; ret 0x6620; 
0x0000000000036d15: outsd dx, dword ptr [rsi]; sub al, byte ptr [rax + rax]; lea rax, [rip + 0x400a0]; pop rcx; ret; 
0x000000000003f4bd: paddd mm7, mm7; jmp qword ptr [rsi + 0x66]; 
0x0000000000038517: pcmpeqw mm0, qword ptr [rip - 0x11e9e18]; dec dword ptr [rax - 0x7b]; fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x000000000001e13c: pop qword ptr [rax + 0x48000000]; add esp, 0x278; ret; 
0x000000000001dfa6: pop qword ptr [rax + 0x48000000]; add esp, 0x288; ret; 
0x000000000001aaad: pop qword ptr [rax]; add byte ptr [rax], al; call rax; 
0x0000000000040b08: pop qword ptr [rbx]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002083c: pop qword ptr [rip + 0x3f839000]; add dh, byte ptr [rbx + 1]; ret; 
0x000000000005b059: pop r12; pop r13; pop r14; pop r15; pop rbp; jmp rax; 
0x00000000000097ab: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000001eb7f: pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000005b126: pop r12; pop r14; pop r15; jmp rax; 
0x000000000000a712: pop r12; pop r14; pop r15; pop rbp; ret; 
0x000000000000a0ea: pop r12; pop r14; pop r15; ret; 
0x000000000005b05b: pop r13; pop r14; pop r15; pop rbp; jmp rax; 
0x00000000000097ad: pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000001eb81: pop r13; pop r14; pop r15; ret; 
0x000000000005ed08: pop r14; jmp rax; 
0x000000000005b128: pop r14; pop r15; jmp rax; 
0x0000000000037213: pop r14; pop r15; jmp rcx; 
0x000000000005b05d: pop r14; pop r15; pop rbp; jmp rax; 
0x00000000000097af: pop r14; pop r15; pop rbp; ret; 
0x000000000003adb8: pop r14; pop r15; ret; 
0x00000000000235e8: pop r14; pop rbp; ret; 
0x0000000000009c17: pop r14; ret; 
0x000000000005b12a: pop r15; jmp rax; 
0x0000000000037215: pop r15; jmp rcx; 
0x000000000005b05f: pop r15; pop rbp; jmp rax; 
0x00000000000097b1: pop r15; pop rbp; ret; 
0x000000000000a0ee: pop r15; ret; 
0x0000000000021559: pop rax; adc byte ptr [rcx + rcx*4 + 0x48], cl; sbb byte ptr [rcx - 0x7d], cl; ret 0x4c20; 
0x00000000000167bf: pop rax; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0xffffeae6; xor esi, esi; call rax; 
0x000000000002c9d7: pop rax; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000001861f: pop rax; add rsp, 0x3a8; ret; 
0x0000000000016679: pop rax; call rax; 
0x000000000005c0dd: pop rax; jmp rcx; 
0x000000000001db7c: pop rax; lea rax, [rip + 0x3be8c]; call rax; 
0x000000000001a05d: pop rax; lea rdx, [rsp + 0x70]; call rax; 
0x000000000001dde3: pop rax; lea rsi, [rsp + 0x40]; call qword ptr [rip + 0x5bbc1]; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x000000000001635e: pop rax; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x0000000000019f8d: pop rax; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x88; ret; 
0x000000000001db78: pop rax; mov edi, dword ptr [rsp + 0x58]; lea rax, [rip + 0x3be8c]; call rax; 
0x0000000000019004: pop rax; mov edx, 0x88; call 0x9078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x278; ret; 
0x00000000000107c4: pop rax; mov qword ptr [rcx + 0x20], rdx; add rsp, 0xb8; ret; 
0x0000000000012b10: pop rax; mov qword ptr [rdi + 0x38], rcx; add rsp, 0xa0; ret; 
0x00000000000143e7: pop rax; mov qword ptr [rsp + 0x60], rdx; add rsp, 0x68; ret; 
0x0000000000010cc5: pop rax; mov rdx, qword ptr [rsp + 0x60]; mov qword ptr [rsp + 0x68], rax; mov qword ptr [rsp + 0x70], rdx; add rsp, 0x78; ret; 
0x0000000000016703: pop rax; movaps xmmword ptr [rsp + 0x70], xmm0; lea rax, [rip + 0x3a40]; lea rdi, [rsp + 0x90]; call rax; 
0x0000000000038049: pop rax; pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000003cc51: pop rax; pop rbx; pop r14; ret; 
0x000000000000ecaa: pop rax; ret; 
0x0000000000010f8c: pop rbp; add byte ptr [rax], al; call rax; 
0x000000000002b01b: pop rbp; add eax, dword ptr gs:[rax]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x0000000000047911: pop rbp; dec dword ptr [rax - 0x75]; jge 0x47916; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000004a702: pop rbp; dec dword ptr [rax - 0x75]; jge 0x4a707; mov rax, qword ptr [rbp + 7]; call qword ptr [rax]; 
0x000000000005b061: pop rbp; jmp rax; 
0x000000000000d662: pop rbp; lea rax, [rip - 0x1eca]; call rax; 
0x000000000005f36b: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000005b05c: pop rbp; pop r14; pop r15; pop rbp; jmp rax; 
0x00000000000097ae: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x000000000001eb82: pop rbp; pop r14; pop r15; ret; 
0x00000000000097b3: pop rbp; ret; 
0x0000000000015d48: pop rbx; add byte ptr [rax], al; add rsp, 0x48; ret; 
0x000000000001519d: pop rbx; add byte ptr [rax], al; call rax; 
0x000000000001519d: pop rbx; add byte ptr [rax], al; call rax; add rsp, 0x28; ret; 
0x0000000000020b4e: pop rbx; add byte ptr [rax], al; ret; 
0x0000000000035f83: pop rbx; add byte ptr [rax], al; test rax, rax; je 0x35f8d; pop rcx; ret; 
0x000000000000c0e1: pop rbx; add byte ptr [rax], r8b; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x000000000002f341: pop rbx; add cl, byte ptr [rax - 0x7d]; ret; 
0x000000000002b9b7: pop rbx; add eax, dword ptr [rax]; movsxd rdx, dword ptr [rcx + rax*4]; add rdx, rcx; jmp rdx; 
0x000000000001eb7e: pop rbx; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000005b125: pop rbx; pop r12; pop r14; pop r15; jmp rax; 
0x000000000000a711: pop rbx; pop r12; pop r14; pop r15; pop rbp; ret; 
0x000000000000a0e9: pop rbx; pop r12; pop r14; pop r15; ret; 
0x000000000005ed07: pop rbx; pop r14; jmp rax; 
0x0000000000037212: pop rbx; pop r14; pop r15; jmp rcx; 
0x000000000003d418: pop rbx; pop r14; pop r15; pop rbp; ret; 
0x000000000001ee11: pop rbx; pop r14; pop r15; ret; 
0x00000000000235e7: pop rbx; pop r14; pop rbp; ret; 
0x0000000000009c16: pop rbx; pop r14; ret; 
0x000000000001f051: pop rbx; pop rbp; ret; 
0x0000000000009114: pop rbx; ret; 
0x00000000000284dc: pop rcx; add cl, byte ptr [rax - 0x7d]; ret 0x49fe; 
0x000000000000a4e8: pop rcx; ret; 
0x000000000001e8dc: pop rdi; adc byte ptr [rax - 0x77], cl; ja 0x1e8fa; add rsp, 0x10; pop rbx; ret; 
0x000000000005aaac: pop rdi; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000001c0ed: pop rdi; add al, 0; lea rdx, [rip + 0x5a2b0]; lea rax, [rip - 0x10a8f]; mov esi, 0x19; call rax; 
0x000000000002b61b: pop rdi; add eax, dword ptr [rax]; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x000000000003ec5f: pop rdi; dec dword ptr [rcx - 0x75]; jg 0x3ec64; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000005b12b: pop rdi; jmp rax; 
0x0000000000037216: pop rdi; jmp rcx; 
0x000000000005d495: pop rdi; mov edi, 0xb0f0001; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000005b060: pop rdi; pop rbp; jmp rax; 
0x00000000000097b2: pop rdi; pop rbp; ret; 
0x000000000000a0ef: pop rdi; ret; 
0x000000000005cc00: pop rdx; adc byte ptr [rax - 0x7d], cl; ret 0x6620; 
0x0000000000020bb3: pop rdx; add byte ptr [rax], al; ret; 
0x000000000002d48c: pop rdx; dec byte ptr [rcx + 0x39]; fimul dword ptr [rdi]; xchg byte ptr [rsp + rcx - 0x72b80000], ch; add dword ptr [r9 + 0x39], ecx; ret 0x860f; 
0x000000000001f092: pop rdx; insb byte ptr [rdi], dx; add dword ptr [rax], eax; ud2; nop dword ptr [rax + rax]; ret; 
0x00000000000570e2: pop rdx; or byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x00000000000144c2: pop rdx; popfq; add byte ptr [rax], al; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000043c91: pop rdx; sub byte ptr [rax - 0x75], cl; xor byte ptr [rax - 0x7d], cl; ret 0x4838; 
0x000000000005a2dc: pop rsi; adc byte ptr [rcx + 0x5e415bd8], cl; pop r15; ret; 
0x0000000000056fa7: pop rsi; adc byte ptr [rcx - 0x75], cl; or sil, r8b; add al, 0x18; add byte ptr [rax - 1], cl; ret; 
0x00000000000297ae: pop rsi; adc cl, ch; ret; 
0x000000000005ed09: pop rsi; jmp rax; 
0x000000000004f4f3: pop rsi; or byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000005b129: pop rsi; pop r15; jmp rax; 
0x0000000000037214: pop rsi; pop r15; jmp rcx; 
0x000000000005b05e: pop rsi; pop r15; pop rbp; jmp rax; 
0x00000000000097b0: pop rsi; pop r15; pop rbp; ret; 
0x000000000000a19e: pop rsi; pop r15; ret; 
0x00000000000235e9: pop rsi; pop rbp; ret; 
0x0000000000009c18: pop rsi; ret; 
0x0000000000025ade: pop rsi; syscall; 
0x0000000000053738: pop rsp; add al, byte ptr [rax]; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x00000000000393b0: pop rsp; and al, 0x10; lea rbp, [r14 - 1]; mov rdi, qword ptr [r14 - 1]; mov rax, qword ptr [r14 + 7]; call qword ptr [rax]; 
0x0000000000040879: pop rsp; and al, 0x10; mov rax, rbx; add rsp, 0x70; pop rbx; ret; 
0x0000000000031890: pop rsp; inc dword ptr [rdx]; add byte ptr [rax + 0x63], cl; xor al, 0xb7; add rsi, rdi; jmp rsi; 
0x000000000005b05a: pop rsp; pop r13; pop r14; pop r15; pop rbp; jmp rax; 
0x00000000000097ac: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000001eb80: pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000005b127: pop rsp; pop r14; pop r15; jmp rax; 
0x000000000000a713: pop rsp; pop r14; pop r15; pop rbp; ret; 
0x000000000000a0eb: pop rsp; pop r14; pop r15; ret; 
0x00000000000144c3: popfq; add byte ptr [rax], al; lea rdi, [rsp + 0x28]; call rax; 
0x000000000005b7cb: popfq; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000001fa5b: popfq; add eax, 0xc4834800; or byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000002a6ba: popfq; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000005c90a: popfq; ret 0x148; 
0x00000000000395bb: popfq; test dword ptr [rdx], eax; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000001c3ef: por mm3, qword ptr [rsi]; lea rax, [rip + 0x3a867]; call rax; 
0x000000000001545f: por mm3, qword ptr [rsi]; lea rax, [rip + 0x417f7]; call rax; 
0x000000000001a59d: push -0x1154218; dec dword ptr [rdi]; or ebp, ebx; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; ret; 
0x000000000002d9ae: push -0x427cbe9a; ret 1; 
0x000000000005ecba: push -0x45ffff96; add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000005ecbb: push 0; add byte ptr [rdx + 1], bh; call qword ptr [rax + 0x18]; 
0x000000000001b4e9: push 0; mov rax, qword ptr [rsp + 0x68]; mov rdx, qword ptr [rsp + 0x70]; add rsp, 0x2c8; ret; 
0x000000000001ade0: push 0x24448948; jo 0x1ae2f; mov dword ptr [rsp + 0x28], eax; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x000000000001d300: push 0x24448948; jo 0x1d34f; mov dword ptr [rsp + 0x28], eax; mov rax, qword ptr [rsp + 0x28]; add rsp, 0x78; ret; 
0x0000000000017a19: push 0x244c8b48; push 0x8488948; mov word ptr [rax], 3; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; ret; 
0x0000000000010ccf: push 0x24548948; jo 0x10d1e; add esp, 0x78; ret; 
0x000000000001b4f2: push 0x24548b48; jo 0x1b541; add esp, 0x2c8; ret; 
0x00000000000543d4: push 0x48000108; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000e145: push 0x4806110f; lea edx, [rip + 0x67cf8]; lea rax, [rip + 0x4c879]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000004cae8: push 0x486a4f88; mov eax, edi; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000004caeb: push 0x48; mov eax, edi; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000001a304: push 0x48ffffd2; lea esi, [rsp + 0x70]; call rax; 
0x000000000000dc71: push 0x48fffffc; lea eax, [rip + 0x10594]; lea rdi, [rsp + 0xe8]; call rax; 
0x00000000000458d8: push 0x801f0f; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; call 0x24509431; call 0xffffffff834c6e5f; ret; 
0x0000000000017a1e: push 0x8488948; mov word ptr [rax], 3; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x78; ret; 
0x000000000003981b: push qword ptr [rax + rcx - 0x7b]; ror byte ptr [rdi], 0x85; ret 1; 
0x000000000003a611: push qword ptr [rbp + 2]; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x0000000000040460: push qword ptr [rbx + rax*2 - 0x77]; ret 0x2b8; 
0x000000000003e9a6: push qword ptr [rbx + rcx + 0x48]; mov dword ptr [rbx + 8], eax; xor eax, eax; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000005b0b9: push qword ptr [rcx + rdx + 0x4c]; mov edi, edi; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000000e0b6: push qword ptr [rcx]; leave; call 0xfb80; pop rcx; ret; 
0x000000000000c65d: push qword ptr [rcx]; leave; mov edi, ecx; call rax; 
0x0000000000010d90: push qword ptr [rcx]; shl byte ptr [rcx + rax], 0xf; mov dh, 0xc0; add rsp, 0x38; ret; 
0x0000000000037bf3: push qword ptr [rdx + rcx + 0x48]; mov edx, dword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000020642: push qword ptr [rsi + rax - 1]; and eax, 0x591c5; ret; 
0x0000000000038e96: push rax; adc al, ch; ret; 
0x000000000001906a: push rax; adc bh, bh; adc eax, 0x60db6; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x0000000000037bf8: push rax; adc byte ptr [rax - 0x75], cl; jge 0x37bfe; call rbx; 
0x00000000000393d7: push rax; adc byte ptr [rax - 0x75], cl; jge 0x393dd; call rbx; 
0x00000000000389b6: push rax; adc byte ptr [rcx - 0x75], cl; cmp al, 0x24; call rbx; 
0x000000000001ba80: push rax; add al, 0; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000132a0: push rax; add rsp, 0x118; ret; 
0x0000000000014485: push rax; add rsp, 0x58; ret; 
0x00000000000192dc: push rax; add rsp, 0x788; ret; 
0x000000000004278f: push rax; and byte ptr [rcx + rax], dh; movzx eax, al; lea eax, [rax + rax*8]; add rsp, 0x28; ret; 
0x000000000000f915: push rax; call 0x10ff0; lea rdi, [rsp + 8]; call 0xecb0; add rsp, 0xc8; ret; 
0x0000000000019710: push rax; call 0x1a8a0; pop rcx; ret; 
0x000000000001f090: push rax; call 0x35cf0; ud2; nop dword ptr [rax + rax]; ret; 
0x0000000000058085: push rax; call qword ptr [rip + 0x21dbc]; add rsp, 0xa0; pop rbx; ret; 
0x000000000003e5d0: push rax; call qword ptr [rip + 0x3ae71]; mov eax, dword ptr [rax]; pop rcx; ret; 
0x0000000000019e20: push rax; call qword ptr [rip + 0x5f641]; pop rax; ret; 
0x0000000000015e80: push rax; call qword ptr [rip + 0x63a59]; pop rcx; ret; 
0x000000000000e03d: push rax; call qword ptr [rip + 0x6ba0c]; add rsp, 0x218; ret; 
0x000000000000da97: push rax; call qword ptr [rip + 0x6bfb2]; add rsp, 0x1d8; ret; 
0x000000000000d8e8: push rax; call rax; 
0x000000000005dc40: push rax; cmp edi, 0x20; jae 0x5dc4a; xor eax, eax; pop rcx; ret; 
0x000000000001cd20: push rax; lea rax, [rip + 0x58]; call rax; 
0x000000000001e391: push rax; lea rax, [rip - 0x2189]; lea rdi, [rsp + 0x20]; call rax; 
0x0000000000015f70: push rax; mov byte ptr [rsp + 0x37], 1; lea rax, [rip + 0x423]; lea rdi, [rsp + 0x18]; call rax; 
0x000000000001c030: push rax; mov dword ptr [rsp + 4], edi; mov dword ptr [rsp], edi; mov eax, dword ptr [rsp]; pop rcx; ret; 
0x00000000000177d8: push rax; mov qword ptr [rax + 0x18], rcx; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x68; ret; 
0x0000000000012b07: push rax; mov qword ptr [rdi + 0x30], rcx; mov rcx, qword ptr [rsp + 0x58]; mov qword ptr [rdi + 0x38], rcx; add rsp, 0xa0; ret; 
0x000000000001ab10: push rax; mov qword ptr [rsp], rdi; add rdi, 0x20; call qword ptr [rip + 0x5e9b1]; pop rax; ret; 
0x00000000000115b0: push rax; mov qword ptr [rsp], rdi; call 0x115e0; pop rcx; ret; 
0x000000000001e2a0: push rax; mov qword ptr [rsp], rdi; call 0x1c7a0; pop rax; ret; 
0x000000000001e2d0: push rax; mov qword ptr [rsp], rdi; call 0x1d220; pop rax; ret; 
0x000000000000ee60: push rax; mov qword ptr [rsp], rdi; call 0xeb70; pop rax; ret; 
0x000000000000f130: push rax; mov qword ptr [rsp], rdi; call 0xeca0; pop rax; ret; 
0x000000000000ef70: push rax; mov qword ptr [rsp], rdi; call 0xef90; pop rax; ret; 
0x000000000000f1d0: push rax; mov qword ptr [rsp], rdi; call 0xf170; pop rax; ret; 
0x000000000000ef60: push rax; mov qword ptr [rsp], rdi; call 0xf220; pop rax; ret; 
0x000000000000f1e0: push rax; mov qword ptr [rsp], rdi; call 0xf730; pop rax; ret; 
0x000000000000eed0: push rax; mov qword ptr [rsp], rdi; call 0xf790; pop rax; ret; 
0x000000000000f4d0: push rax; mov qword ptr [rsp], rdi; call 0xf7f0; pop rax; ret; 
0x000000000000eca0: push rax; mov qword ptr [rsp], rdi; call 0xf850; pop rax; ret; 
0x000000000000ecb0: push rax; mov qword ptr [rsp], rdi; call 0xf930; pop rax; ret; 
0x000000000001e230: push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5b485]; pop rax; ret; 
0x000000000001e220: push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5b5d5]; pop rax; ret; 
0x000000000001e2b0: push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5b685]; pop rax; ret; 
0x000000000001e2c0: push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5b7bd]; pop rax; ret; 
0x000000000001e200: push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5b845]; pop rax; ret; 
0x000000000001e210: push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5bb8d]; pop rax; ret; 
0x000000000001c940: push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5d4b5]; pop rcx; ret; 
0x000000000001ab30: push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5e88d]; pop rax; ret; 
0x000000000001ac50: push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5e9ed]; pop rax; ret; 
0x000000000001aa80: push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5ea85]; pop rax; ret; 
0x000000000001aa70: push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5eefd]; pop rax; ret; 
0x000000000001ab00: push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x5f015]; pop rax; ret; 
0x0000000000016df0: push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x62f35]; pop rax; ret; 
0x000000000000f480: push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x6a38d]; pop rax; ret; 
0x000000000000ef90: push rax; mov qword ptr [rsp], rdi; call qword ptr [rip + 0x6ae0d]; pop rax; ret; 
0x000000000001e590: push rax; mov qword ptr [rsp], rdi; lea rax, [rip + 4]; call rax; 
0x000000000001e590: push rax; mov qword ptr [rsp], rdi; lea rax, [rip + 4]; call rax; pop rcx; ret; 
0x000000000001da90: push rax; mov qword ptr [rsp], rdi; mov ax, word ptr [rdi]; pop rcx; ret; 
0x000000000001daa0: push rax; mov qword ptr [rsp], rdi; mov eax, dword ptr [rdi + 0x80]; pop rcx; ret; 
0x000000000001c7a0: push rax; mov qword ptr [rsp], rdi; mov edi, dword ptr [rdi]; call qword ptr [rip + 0x5d063]; pop rax; ret; 
0x00000000000184b0: push rax; mov qword ptr [rsp], rdi; mov rdi, qword ptr [rdi]; call qword ptr [rip + 0x61b2a]; pop rax; ret; 
0x0000000000037da0: push rax; mov qword ptr [rsp], rdi; mov rdi, rsp; call qword ptr [rip + 0x41a4a]; pop rcx; ret; 
0x000000000000eee0: push rax; mov qword ptr [rsp], rdi; pop rax; ret; 
0x00000000000423a0: push rax; mov rax, qword ptr [rip + 0x37d30]; test rax, rax; lea rcx, [rip - 0x6442]; cmovne rcx, rax; call rcx; 
0x0000000000016520: push rax; mov rax, rdi; mov byte ptr [rdi], 2; pop rcx; ret; 
0x0000000000016510: push rax; mov rax, rdi; mov byte ptr [rdi], 3; pop rcx; ret; 
0x000000000004a7a3: push rax; mov rbx, rdi; mov rdi, qword ptr [rdi + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000001f753: push rax; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax]; 
0x0000000000022720: push rax; mov rdi, qword ptr [rdi]; call 0x1ed20; xor eax, eax; pop rcx; ret; 
0x0000000000022730: push rax; mov rdi, qword ptr [rdi]; call 0x234e0; xor eax, eax; pop rcx; ret; 
0x0000000000056a40: push rax; mov rdi, qword ptr [rdi]; call 0x574b0; xor eax, eax; pop rcx; ret; 
0x000000000005b63e: push rax; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000001e387: push rax; mov rsi, qword ptr [rsp + 0x48]; mov rdx, qword ptr [rsp + 0x50]; lea rax, [rip - 0x2189]; lea rdi, [rsp + 0x20]; call rax; 
0x000000000001a1fe: push rax; or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x68; ret; 
0x000000000003c032: push rax; pop rbx; pop r14; pop r15; ret; 
0x0000000000057cd2: push rax; pop rbx; pop r14; pop rbp; ret; 
0x000000000003cd13: push rax; pop rbx; ret; 
0x000000000000bcbc: push rax; ret; 
0x000000000004ae95: push rax; sub al, 0x5b; pop r14; ret; 
0x000000000003d3f3: push rax; sub byte ptr [rax - 0x77], cl; ret 0xdeb; 
0x000000000000fa60: push rax; xor eax, eax; pop rcx; ret; 
0x000000000002c17b: push rbp; add eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000002c0a5: push rbp; add eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rcx*4]; add rax, rdx; jmp rax; 
0x00000000000194a6: push rbp; lea rsi, [rip + 0x475a3]; lea rax, [rip + 0x336b]; mov edi, 0x27; mov edx, 0x1b; call rax; 
0x000000000002c379: push rbx; add eax, dword ptr [rax]; movsxd rcx, dword ptr [r8 + rbp*4]; add rcx, r8; jmp rcx; 
0x000000000004a804: push rbx; mov r15, rdi; mov rbx, qword ptr [rdi]; mov rdi, qword ptr [rbx + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000005a410: push rbx; mov rbx, rdi; call 0x5a2f0; mov rax, rbx; pop rbx; ret; 
0x000000000000d919: push rbx; movsb byte ptr [rdi], byte ptr [rsi]; add al, byte ptr [rax]; call rax; 
0x000000000004a7a2: push rbx; push rax; mov rbx, rdi; mov rdi, qword ptr [rdi + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000001f752: push rbx; push rax; mov rbx, rdi; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax]; 
0x000000000002db09: push rbx; ret; 
0x000000000004a900: push rbx; sub rsp, 0x40; mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x000000000001731d: push rcx; adc byte ptr [rax - 0x77], cl; and al, 0x38; mov qword ptr [rsp + 0x40], rdx; add rsp, 0x48; ret; 
0x00000000000143e1: push rcx; adc byte ptr [rax - 0x77], cl; and al, 0x58; mov qword ptr [rsp + 0x60], rdx; add rsp, 0x68; ret; 
0x0000000000049f47: push rdi; adc byte ptr [rbx + 4], dh; xor eax, eax; pop rbx; ret; 
0x000000000002a599: push rdi; adc byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 7; add rsp, 0x28; ret; 
0x0000000000022875: push rdi; add dword ptr [eax], eax; pop rcx; ret; 
0x0000000000017d8f: push rdi; add dword ptr [rax], eax; add byte ptr [rax], al; lea rax, [rip - 0x188b]; call rax; 
0x0000000000022c04: push rdi; cmovl edi, dword ptr [rcx]; ret 0x860f; 
0x000000000001ba46: push rdi; or al, 0x89; ja 0x1ba53; mov qword ptr [rdi], rcx; add rsp, 0x28; ret; 
0x000000000002a26f: push rdi; or byte ptr [rax + 1], bh; ret; 
0x000000000003ddbd: push rdi; ret; 
0x000000000004cce9: push rdi; sbb byte ptr [rax - 0x75], cl; jg 0x4ccff; mov rax, rdi; pop rcx; ret; 
0x00000000000455e8: push rdi; sbb byte ptr [rbp + 0x39], cl; ret 0x830f; 
0x000000000003a3ad: push rdx; adc byte ptr [rax - 0x7d], cl; ret 0xeb04; 
0x000000000002c39f: push rdx; add eax, dword ptr [rax]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x000000000003ec5c: push rdx; lea rbx, [r15 - 1]; mov rdi, qword ptr [r15 - 1]; mov rax, qword ptr [r15 + 7]; call qword ptr [rax]; 
0x000000000001e949: push rdx; ret; 
0x000000000005b541: push rsi; and byte ptr [rax - 1], cl; ret; 
0x000000000003498c: push rsi; ja 0x349fe; movsxd rcx, dword ptr [r14 + rdx*4]; add rcx, r14; jmp rcx; 
0x0000000000009510: push rsi; jmp qword ptr [rsi + 0x66]; 
0x000000000003d387: push rsi; ret; 
0x000000000001e5cf: push rsp; and al, 0x10; add rsp, 0x18; ret; 
0x0000000000015cb6: push rsp; and al, 0x10; add rsp, 0x60; ret; 
0x000000000000e6c6: push rsp; and al, 0x10; add rsp, 0x70; ret; 
0x000000000000e64b: push rsp; and al, 0x10; add rsp, 0x78; ret; 
0x0000000000013774: push rsp; and al, 0x10; add rsp, 0x98; ret; 
0x0000000000013cbc: push rsp; and al, 0x10; call 0x12a30; mov rax, qword ptr [rsp]; add rsp, 0x68; ret; 
0x000000000001aceb: push rsp; and al, 0x10; call 0x1a930; mov rax, qword ptr [rsp + 8]; add rsp, 0x38; ret; 
0x0000000000014b5e: push rsp; and al, 0x10; call 0xc300; add rsp, 0x28; ret; 
0x000000000005a9b4: push rsp; and al, 0x10; call qword ptr [rip + 0x1f48b]; add rsp, 0x48; ret; 
0x000000000005a964: push rsp; and al, 0x10; call qword ptr [rip + 0x1f4db]; add rsp, 0x48; ret; 
0x000000000005a914: push rsp; and al, 0x10; call qword ptr [rip + 0x1f52b]; add rsp, 0x48; ret; 
0x000000000005a561: push rsp; and al, 0x10; call qword ptr [rip + 0x1f8de]; add rsp, 0x48; ret; 
0x0000000000056a84: push rsp; and al, 0x10; call qword ptr [rip + 0x233bb]; add rsp, 0x48; ret; 
0x000000000004d5c4: push rsp; and al, 0x10; call qword ptr [rip + 0x2c87b]; add rsp, 0x48; ret; 
0x0000000000022a24: push rsp; and al, 0x10; call qword ptr [rip + 0x5741b]; add rsp, 0x48; ret; 
0x00000000000229d4: push rsp; and al, 0x10; call qword ptr [rip + 0x5746b]; add rsp, 0x48; ret; 
0x0000000000022984: push rsp; and al, 0x10; call qword ptr [rip + 0x574bb]; add rsp, 0x48; ret; 
0x0000000000022934: push rsp; and al, 0x10; call qword ptr [rip + 0x5750b]; add rsp, 0x48; ret; 
0x000000000001efc1: push rsp; and al, 0x10; call qword ptr [rip + 0x5ae7e]; add rsp, 0x48; ret; 
0x000000000001ef81: push rsp; and al, 0x10; call qword ptr [rip + 0x5aebe]; add rsp, 0x48; ret; 
0x000000000001ef41: push rsp; and al, 0x10; call qword ptr [rip + 0x5aefe]; add rsp, 0x48; ret; 
0x0000000000016382: push rsp; and al, 0x10; call qword ptr [rip + 0x6337d]; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000015ea2: push rsp; and al, 0x10; call qword ptr [rip + 0x63f85]; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000011932: push rsp; and al, 0x10; call qword ptr [rip + 0x67e45]; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001735c: push rsp; and al, 0x10; call rax; 
0x000000000001b91f: push rsp; and al, 0x10; mov ecx, 1; call 0x1ae10; add rsp, 0x18; ret; 
0x000000000001da4f: push rsp; and al, 0x10; mov ecx, 1; call 0x1d330; add rsp, 0x18; ret; 
0x000000000001bd11: push rsp; and al, 0x10; mov rsi, qword ptr [rsp + 0x18]; lea rax, [rip + 0xb00]; mov edi, 0x27; call rax; 
0x000000000000d621: push rsp; and al, 0x10; mov rsi, qword ptr [rsp + 0x18]; lea rax, [rip + 0xc1d0]; lea rdi, [rsp + 0x278]; call rax; 
0x000000000001b98f: push rsp; and al, 0x10; xor ecx, ecx; call 0x1ae10; add rsp, 0x18; ret; 
0x000000000001da7f: push rsp; and al, 0x10; xor ecx, ecx; call 0x1d330; add rsp, 0x18; ret; 
0x0000000000011647: push rsp; and al, 0x18; add rsp, 0x38; ret; 
0x00000000000152a1: push rsp; and al, 0x18; add rsp, 0x40; ret; 
0x000000000001741d: push rsp; and al, 0x18; add rsp, 0x58; ret; 
0x000000000000fe42: push rsp; and al, 0x18; add rsp, 0xc0; ret; 
0x000000000001a98d: push rsp; and al, 0x18; call 0x18d10; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000001c223: push rsp; and al, 0x18; call qword ptr [rip + 0x5d524]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000014558: push rsp; and al, 0x18; call rax; 
0x000000000000bd21: push rsp; and al, 0x18; mov qword ptr [rcx], rdx; add rsp, 0x78; ret; 
0x000000000000bd1c: push rsp; and al, 0x18; mov rdx, qword ptr [rsp + 0x18]; mov qword ptr [rcx], rdx; add rsp, 0x78; ret; 
0x0000000000010c18: push rsp; and al, 0x18; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x2e0c9]; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000019452: push rsp; and al, 0x18; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x430bf]; lea rdi, [rsp + 0x630]; call rax; 
0x000000000000d36d: push rsp; and al, 0x18; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x49e74]; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000cdaf: push rsp; and al, 0x18; mov rsi, qword ptr [rsp + 0x20]; lea rax, [rip + 0x4a432]; lea rdi, [rsp + 0x328]; call rax; 
0x000000000001482d: push rsp; and al, 0x1c; add rsp, 0x78; ret; 
0x0000000000010fac: push rsp; and al, 0x20; add rsp, 0x28; ret; 
0x000000000000c37c: push rsp; and al, 0x20; add rsp, 0x48; ret; 
0x000000000001beeb: push rsp; and al, 0x20; add rsp, 0x98; ret; 
0x000000000005b096: push rsp; and al, 0x20; call qword ptr [rbp + 0x18]; 
0x000000000001441e: push rsp; and al, 0x20; call rax; 
0x0000000000010fa2: push rsp; and al, 0x20; mov rax, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x28; ret; 
0x000000000001c8ad: push rsp; and al, 0x20; shl rdx, 0; call 0x9078; add rsp, 0x28; ret; 
0x0000000000011476: push rsp; and al, 0x28; add rsp, 0x88; ret; 
0x000000000001da27: push rsp; and al, 0x28; call qword ptr [rip + 0x5bd58]; add rsp, 0x68; ret; 
0x000000000001b8f7: push rsp; and al, 0x28; call qword ptr [rip + 0x5de88]; add rsp, 0x68; ret; 
0x0000000000011a77: push rsp; and al, 0x28; call qword ptr [rip + 0x67d08]; add rsp, 0x68; ret; 
0x0000000000014209: push rsp; and al, 0x28; call rax; 
0x000000000001b1c3: push rsp; and al, 0x30; add rsp, 0x228; ret; 
0x0000000000015f43: push rsp; and al, 0x30; add rsp, 0x38; ret; 
0x000000000000e2b1: push rsp; and al, 0x30; call 0xe2c0; add rsp, 0x38; ret; 
0x000000000001436d: push rsp; and al, 0x30; call rax; 
0x0000000000010f19: push rsp; and al, 0x30; mov qword ptr [rdi + 0x10], 0; add rsp, 0x38; ret; 
0x00000000000196a3: push rsp; and al, 0x30; mov rax, qword ptr [rsp + 0x28]; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x0000000000011581: push rsp; and al, 0x38; add rsp, 0xb8; ret; 
0x0000000000059b12: push rsp; and al, 0x38; call qword ptr [rip + 0x2032d]; add rsp, 0x68; ret; 
0x00000000000426d4: push rsp; and al, 0x38; call rbx; 
0x000000000001a54f: push rsp; and al, 0x38; lea rax, [rip + 0x417]; call rax; 
0x000000000000bf2f: push rsp; and al, 0x38; mov qword ptr [rcx + 0x18], rdx; add rsp, 0xd0; ret; 
0x000000000000bcac: push rsp; and al, 0x38; mov qword ptr [rsp + 0x40], rax; mov qword ptr [rsp + 0x48], rdx; add rsp, 0x50; ret; 
0x000000000000f77d: push rsp; and al, 0x38; mov qword ptr [rsp + 0x40], rcx; call 0x11a00; add rsp, 0x48; ret; 
0x0000000000015d3e: push rsp; and al, 0x38; mov qword ptr [rsp + 0x40], rcx; call 0x1b880; add rsp, 0x48; ret; 
0x000000000001c74e: push rsp; and al, 0x38; mov qword ptr [rsp + 0x40], rcx; call 0x1d9b0; add rsp, 0x48; ret; 
0x000000000001be31: push rsp; and al, 0x38; mov qword ptr [rsp + 0x78], rax; mov qword ptr [rsp + 0x80], rdx; add rsp, 0x88; ret; 
0x000000000000d4a6: push rsp; and al, 0x38; mov rax, qword ptr [rip + 0x6c310]; call rax; 
0x0000000000019efb: push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; lea rax, [rip - 0x3fba]; lea rdi, [rsp + 0x20]; call rax; 
0x0000000000017326: push rsp; and al, 0x40; add rsp, 0x48; ret; 
0x000000000000fb09: push rsp; and al, 0x40; add rsp, 0x88; ret; 
0x000000000001004e: push rsp; and al, 0x40; add rsp, 0xc8; ret; 
0x0000000000012020: push rsp; and al, 0x48; add rsp, 0x248; ret; 
0x000000000000bcb6: push rsp; and al, 0x48; add rsp, 0x50; ret; 
0x0000000000014d41: push rsp; and al, 0x48; add rsp, 0xf8; ret; 
0x0000000000012016: push rsp; and al, 0x48; mov rax, qword ptr [rsp + 0x40]; mov rdx, qword ptr [rsp + 0x48]; add rsp, 0x248; ret; 
0x000000000003d0ca: push rsp; and al, 0x48; mov rdi, qword ptr [rbx + 0x10]; mov rax, qword ptr [rbx + 0x18]; lea rsi, [rsp + 0x40]; call qword ptr [rax + 0x28]; 
0x0000000000058083: push rsp; and al, 0x50; call qword ptr [rip + 0x21dbc]; add rsp, 0xa0; pop rbx; ret; 
0x000000000000d994: push rsp; and al, 0x50; call rax; 
0x000000000001e38f: push rsp; and al, 0x50; lea rax, [rip - 0x2189]; lea rdi, [rsp + 0x20]; call rax; 
0x00000000000107c2: push rsp; and al, 0x58; mov qword ptr [rcx + 0x20], rdx; add rsp, 0xb8; ret; 
0x00000000000143ea: push rsp; and al, 0x60; add rsp, 0x68; ret; 
0x0000000000010cc8: push rsp; and al, 0x60; mov qword ptr [rsp + 0x68], rax; mov qword ptr [rsp + 0x70], rdx; add rsp, 0x78; ret; 
0x000000000001b4f5: push rsp; and al, 0x70; add rsp, 0x2c8; ret; 
0x0000000000010cd2: push rsp; and al, 0x70; add rsp, 0x78; ret; 
0x0000000000010ed4: push rsp; and al, 0x70; call 0xe3b0; add rsp, 0x78; ret; 
0x000000000001a060: push rsp; and al, 0x70; call rax; 
0x000000000001caf0: push rsp; and al, 0x70; mov qword ptr [rsp + 0x130], rdx; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x00000000000100c0: push rsp; and al, 8; add rsp, 0x10; ret; 
0x000000000001e5b7: push rsp; and al, 8; add rsp, 0x18; ret; 
0x0000000000013a2d: push rsp; and al, 8; add rsp, 0x20; ret; 
0x00000000000164dd: push rsp; and al, 8; add rsp, 0x28; ret; 
0x000000000000bfd8: push rsp; and al, 8; add rsp, 0x30; ret; 
0x000000000000c47b: push rsp; and al, 8; add rsp, 0x40; ret; 
0x0000000000015f39: push rsp; and al, 8; mov qword ptr [rsp + 0x28], rax; mov qword ptr [rsp + 0x30], rdx; add rsp, 0x38; ret; 
0x000000000003da92: push rsp; and al, 8; mov qword ptr [rsp + 8], rbp; movups xmm0, xmmword ptr [rcx]; movups xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 0x20]; 
0x0000000000059fbc: push rsp; mov bh, 0; add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; 
0x000000000005ac3c: push rsp; sub byte ptr [rax], cl; call qword ptr [rcx + 0x18]; 
0x0000000000014563: pushfq; add byte ptr [rax], al; lea rdi, [rsp + 0x18]; call rax; 
0x000000000005b8a5: pushfq; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005f3a1: pushfq; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000003bf28: pushfq; fild dword ptr [rbx]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000011ab4: pushfq; shl byte ptr [rcx + rax], 0xf; mov dh, 0xc0; add rsp, 0x10; ret; 
0x0000000000036590: pushfq; xor al, 4; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000000f08d: rcl byte ptr [rax], 0x48; mov dword ptr [rsp + 0x20], eax; lea rax, [rip + 0xb9f5]; call rax; 
0x000000000000f04f: rcl byte ptr [rax], 0x48; mov dword ptr [rsp + 0x20], eax; lea rax, [rip + 0xba33]; call rax; 
0x000000000000dc6c: rcr byte ptr [rax], 0; add cl, ch; push 0x48fffffc; lea eax, [rip + 0x10594]; lea rdi, [rsp + 0xe8]; call rax; 
0x0000000000039213: rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop r14; pop r15; ret; 
0x0000000000035e89: rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x000000000004f3e9: ret 0; 
0x000000000005798a: ret 0x100; 
0x00000000000090fb: ret 0x1074; 
0x000000000002385d: ret 0x110; 
0x0000000000023850: ret 0x120; 
0x0000000000043098: ret 0x12e8; 
0x000000000002b086: ret 0x13b0; 
0x0000000000045e66: ret 0x13c; 
0x0000000000053a52: ret 0x144; 
0x000000000005c90b: ret 0x148; 
0x00000000000567d9: ret 0x148d; 
0x0000000000029b92: ret 0x149; 
0x000000000000983e: ret 0x15ff; 
0x0000000000055472: ret 0x17eb; 
0x000000000004d3f4: ret 0x1976; 
0x000000000000e0ba: ret 0x1a; 
0x000000000004abfa: ret 0x1b8; 
0x0000000000045e5e: ret 0x1ba; 
0x000000000004f2d4: ret 0x1bf; 
0x000000000000c4f7: ret 0x1c72; 
0x000000000005c262: ret 0x1ca; 
0x000000000005e0eb: ret 0x1f0f; 
0x0000000000053e8a: ret 0x214c; 
0x00000000000090f8: ret 0x2166; 
0x00000000000136de: ret 0x220; 
0x0000000000057262: ret 0x222; 
0x00000000000240fc: ret 0x228; 
0x000000000003ca12: ret 0x254; 
0x0000000000053cfa: ret 0x25f; 
0x000000000005e50b: ret 0x2710; 
0x000000000001e83d: ret 0x280f; 
0x0000000000057d05: ret 0x2944; 
0x0000000000038b60: ret 0x2948; 
0x0000000000045579: ret 0x294c; 
0x000000000003e0b7: ret 0x298b; 
0x000000000004fcc2: ret 0x299; 
0x0000000000040464: ret 0x2b8; 
0x0000000000042b7c: ret 0x2ee8; 
0x000000000004eed6: ret 0x3074; 
0x000000000000d17a: ret 0x30e8; 
0x00000000000231bd: ret 0x3145; 
0x0000000000058d9e: ret 0x31d0; 
0x0000000000043179: ret 0x31e8; 
0x00000000000474c2: ret 0x322; 
0x000000000004288a: ret 0x36d; 
0x00000000000219c0: ret 0x3948; 
0x00000000000098cf: ret 0x3949; 
0x000000000004083a: ret 0x394; 
0x0000000000021a88: ret 0x394c; 
0x000000000001bc70: ret 0x3ae8; 
0x000000000003f6a1: ret 0x3b66; 
0x000000000003b222: ret 0x3e8; 
0x000000000000e5aa: ret 0x3e; 
0x000000000005ac0d: ret 0x3eb; 
0x0000000000037012: ret 0x3fd; 
0x00000000000345dd: ret 0x3fe9; 
0x0000000000042f6a: ret 0x40e8; 
0x000000000004b53b: ret 0x40f8; 
0x0000000000038722: ret 0x413; 
0x000000000004f079: ret 0x41e3; 
0x000000000004e516: ret 0x428d; 
0x000000000000b0dd: ret 0x4475; 
0x000000000003928f: ret 0x4489; 
0x0000000000014865: ret 0x448a; 
0x0000000000014930: ret 0x448b; 
0x0000000000057905: ret 0x44d0; 
0x0000000000009179: ret 0x4774; 
0x000000000000eab0: ret 0x4801; 
0x00000000000098b2: ret 0x4802; 
0x000000000005d33d: ret 0x4804; 
0x0000000000031182: ret 0x4808; 
0x00000000000388d2: ret 0x4810; 
0x00000000000103ac: ret 0x4811; 
0x0000000000021b7e: ret 0x4818; 
0x0000000000043c99: ret 0x4838; 
0x00000000000376a5: ret 0x4840; 
0x000000000005cd2c: ret 0x4866; 
0x000000000002edb5: ret 0x4876; 
0x000000000003230e: ret 0x48f0; 
0x0000000000049cbb: ret 0x48f8; 
0x0000000000029bd3: ret 0x48fc; 
0x00000000000497f3: ret 0x48fd; 
0x00000000000224b9: ret 0x48fe; 
0x000000000002af0e: ret 0x4902; 
0x000000000004a61c: ret 0x4908; 
0x000000000004adc7: ret 0x4918; 
0x000000000004aded: ret 0x4920; 
0x0000000000028508: ret 0x49fc; 
0x00000000000284e0: ret 0x49fe; 
0x0000000000018360: ret 0x4ae8; 
0x0000000000052c72: ret 0x4b8d; 
0x0000000000042c5f: ret 0x4be8; 
0x0000000000053ef7: ret 0x4c02; 
0x0000000000021769: ret 0x4c10; 
0x0000000000021561: ret 0x4c20; 
0x00000000000555ed: ret 0x4c89; 
0x0000000000029bb4: ret 0x4cfe; 
0x00000000000098a1: ret 0x4dfe; 
0x000000000005932f: ret 0x4e72; 
0x000000000004ce1e: ret 0x4e78; 
0x0000000000042a5b: ret 0x4fe8; 
0x000000000004c2d6: ret 0x540; 
0x000000000002190f: ret 0x5488; 
0x0000000000020632: ret 0x595; 
0x000000000004304e: ret 0x5ce8; 
0x000000000001ad4a: ret 0x5f1; 
0x00000000000180da: ret 0x614; 
0x0000000000058e64: ret 0x61eb; 
0x0000000000059815: ret 0x6608; 
0x000000000005cc04: ret 0x6620; 
0x000000000005e603: ret 0x6666; 
0x000000000005cd27: ret 0x66ee; 
0x000000000002686f: ret 0x6948; 
0x000000000002694f: ret 0x6b48; 
0x0000000000042aa4: ret 0x6e8; 
0x0000000000056048: ret 0x6eb; 
0x000000000004e93b: ret 0x7401; 
0x0000000000054712: ret 0x7402; 
0x0000000000052c1d: ret 0x7406; 
0x00000000000546e7: ret 0x7502; 
0x000000000003b685: ret 0x75e9; 
0x000000000001e8ba: ret 0x75f8; 
0x0000000000053b4c: ret 0x75fc; 
0x0000000000042b33: ret 0x77e8; 
0x0000000000043230: ret 0x7ae8; 
0x000000000002ac5d: ret 0x7c6; 
0x0000000000039c6e: ret 0x7c80; 
0x000000000004312c: ret 0x7ee8; 
0x000000000002d8de: ret 0x7feb; 
0x000000000005d5af: ret 0x800f; 
0x0000000000056010: ret 0x8040; 
0x0000000000049884: ret 0x80fd; 
0x0000000000059625: ret 0x8141; 
0x00000000000136db: ret 0x8148; 
0x0000000000009a4e: ret 0x820f; 
0x00000000000099eb: ret 0x830f; 
0x000000000000eaad: ret 0x8348; 
0x000000000002d361: ret 0x8349; 
0x000000000002fc86: ret 0x8366; 
0x000000000004cde2: ret 0x839f; 
0x000000000005333a: ret 0x83c6; 
0x000000000005de75: ret 0x83d0; 
0x0000000000009129: ret 0x840f; 
0x000000000003ffe7: ret 0x8545; 
0x0000000000032753: ret 0x8548; 
0x0000000000022c08: ret 0x860f; 
0x000000000005db47: ret 0x870f; 
0x000000000005e594: ret 0x8830; 
0x000000000005492d: ret 0x8841; 
0x0000000000054c5c: ret 0x8910; 
0x000000000005f180: ret 0x8944; 
0x000000000000920e: ret 0x8948; 
0x00000000000219f0: ret 0x8949; 
0x0000000000021664: ret 0x894c; 
0x0000000000009a48: ret 0x894d; 
0x000000000004f3ee: ret 0x89e3; 
0x000000000005703f: ret 0x8ae9; 
0x0000000000015522: ret 0x8b48; 
0x0000000000038955: ret 0x8b49; 
0x0000000000043c8b: ret 0x8b4c; 
0x0000000000052cc0: ret 0x8d04; 
0x0000000000009c7f: ret 0x8d48; 
0x000000000002cb35: ret 0x8d49; 
0x000000000001e8bd: ret 0x8d4b; 
0x0000000000042f1d: ret 0x8de8; 
0x000000000005d1fd: ret 0x8feb; 
0x000000000005e20d: ret 0x9066; 
0x000000000004266d: ret 0x948; 
0x00000000000597be: ret 0x972; 
0x0000000000042a12: ret 0x98e8; 
0x0000000000042c08: ret 0xa2e8; 
0x0000000000054419: ret 0xa4eb; 
0x0000000000025ed8: ret 0xa575; 
0x00000000000565a2: ret 0xa940; 
0x0000000000043001: ret 0xa9e8; 
0x000000000002aaa0: ret 0xae8; 
0x00000000000431f7: ret 0xb3e8; 
0x000000000000e8f5: ret 0xb5e8; 
0x000000000002927a: ret 0xb60f; 
0x000000000004abdc: ret 0xb70f; 
0x000000000004cde5: ret 0xb80a; 
0x000000000004ac16: ret 0xb810; 
0x000000000004ac38: ret 0xb820; 
0x000000000004abd1: ret 0xb8f0; 
0x000000000004df25: ret 0xb90a; 
0x00000000000585af: ret 0xb940; 
0x000000000004d03b: ret 0xbb0a; 
0x0000000000022182: ret 0xbb75; 
0x0000000000045e8a: ret 0xbd; 
0x000000000004a08b: ret 0xbf0c; 
0x000000000004fd8a: ret 0xbf; 
0x00000000000249cd: ret 0xc031; 
0x0000000000042aea: ret 0xc0e8; 
0x0000000000052cce: ret 0xc102; 
0x0000000000052ce6: ret 0xc103; 
0x0000000000009207: ret 0xc148; 
0x000000000002766f: ret 0xc183; 
0x000000000002190d: ret 0xc208; 
0x00000000000558f5: ret 0xc5e9; 
0x000000000000a8e3: ret 0xc748; 
0x0000000000024a5d: ret 0xc749; 
0x00000000000430e2: ret 0xc8e8; 
0x000000000002a6d6: ret 0xc8ff; 
0x000000000005680e: ret 0xc901; 
0x0000000000053c0d: ret 0xc9fe; 
0x00000000000583b8: ret 0xca20; 
0x000000000003ef9b: ret 0xcfe8; 
0x0000000000057913: ret 0xd001; 
0x000000000002512c: ret 0xd089; 
0x0000000000021f3c: ret 0xd149; 
0x00000000000405c1: ret 0xd184; 
0x000000000002d0e1: ret 0xd231; 
0x0000000000046c2d: ret 0xd2eb; 
0x0000000000058236: ret 0xd3; 
0x0000000000042cd5: ret 0xd5e8; 
0x000000000004e4f3: ret 0xda09; 
0x0000000000042ed0: ret 0xdae8; 
0x000000000002874d: ret 0xdb85; 
0x0000000000021af3: ret 0xdeb; 
0x00000000000429cc: ret 0xdee8; 
0x0000000000029a9f: ret 0xe0ff; 
0x0000000000011f9d: ret 0xe280; 
0x0000000000027872: ret 0xe283; 
0x0000000000039b12: ret 0xe2ff; 
0x0000000000058d6e: ret 0xe73; 
0x0000000000057853: ret 0xe801; 
0x000000000005e55d: ret 0xe8c1; 
0x0000000000042bc2: ret 0xe8e8; 
0x00000000000467c0: ret 0xe972; 
0x000000000003209d: ret 0xeac1; 
0x0000000000039968: ret 0xeb02; 
0x0000000000039920: ret 0xeb04; 
0x0000000000039cbd: ret 0xeb07; 
0x0000000000039944: ret 0xeb08; 
0x0000000000057c87: ret 0xeb29; 
0x000000000004f062: ret 0xeba9; 
0x0000000000021548: ret 0xebe0; 
0x0000000000021754: ret 0xebf0; 
0x00000000000431be: ret 0xece8; 
0x0000000000030f37: ret 0xed31; 
0x000000000005db6f: ret 0xee75; 
0x0000000000053bc6: ret 0xeec1; 
0x00000000000592de: ret 0xf01; 
0x000000000002f196: ret 0xf02; 
0x000000000002f795: ret 0xf03; 
0x000000000002d8cf: ret 0xf10; 
0x0000000000039cd2: ret 0xf280; 
0x0000000000042fb7: ret 0xf3e8; 
0x0000000000045990: ret 0xf40; 
0x0000000000049eea: ret 0xf41; 
0x000000000003f28a: ret 0xf48; 
0x00000000000554b8: ret 0xf640; 
0x0000000000031174: ret 0xf66; 
0x000000000004cdee: ret 0xf883; 
0x0000000000027f25: ret 0xf983; 
0x000000000002b3d9: ret 0xfb80; 
0x000000000005b19c: ret 0xfd81; 
0x000000000001e29a: ret 0xfead; 
0x0000000000019d9a: ret 0xfef2; 
0x0000000000043c86: ret 0xff31; 
0x0000000000037691: ret 0xff3; 
0x0000000000049ef6: ret 0xff3d; 
0x0000000000028396: ret 0xff48; 
0x000000000002c2d7: ret 0xff49; 
0x0000000000034c3a: ret 0xff51; 
0x0000000000054142: ret 0xff58; 
0x00000000000596bc: ret 0xff81; 
0x0000000000031c88: ret 0xffbb; 
0x000000000000aa9a: ret 0xffe5; 
0x000000000005b65a: ret 0xffe8; 
0x000000000005ca11: ret 0xffe; 
0x000000000000c65a: ret 0xfff0; 
0x000000000005688a: ret 0xfff1; 
0x00000000000519ba: ret 0xfff2; 
0x000000000005107a: ret 0xfff4; 
0x000000000002fc4f: ret 0xfff7; 
0x00000000000476cb: ret 0xfff8; 
0x00000000000137da: ret 0xfffb; 
0x000000000004a695: ret 0xfffd; 
0x000000000001cd64: ret 0xfffe; 
0x00000000000272cc: ret 0xffff; 
0x0000000000027bcc: ret 1; 
0x0000000000035781: ret 2; 
0x0000000000021942: ret 3; 
0x0000000000028c1c: ret 4; 
0x000000000001d522: ret 5; 
0x000000000000d891: ret 6; 
0x00000000000107d0: ret; 
0x0000000000032743: retf 0x148; ret 0x840f; 
0x000000000004d3f1: retf 0x2948; ret 0x1976; 
0x00000000000370ba: retf 0x2a9; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000002992e: retf 0x377; add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x0000000000059f8b: retf 0x4802; mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x000000000004cddf: retf 0x8320; ret 0x839f; 
0x0000000000038cdf: retf 0x8348; ret 0x4808; 
0x00000000000376a2: retf 0x8348; ret 0x4840; 
0x000000000004adc4: retf 0x8348; ret 0x4918; 
0x000000000005bcd8: retf 0x8b48; and al, 0x30; call qword ptr [rax + 0x18]; 
0x0000000000059812: retf 0xc166; ret 0x6608; 
0x000000000005de8b: retf 0xe275; mov qword ptr [r8 + 8], rax; xor eax, eax; mov byte ptr [r8], al; mov rax, r8; ret; 
0x0000000000040b96: retf 0xe2ff; mov al, 1; ret; 
0x000000000002b9c0: retf 0xe2ff; mov rcx, qword ptr [rsi + 8]; mov qword ptr [rdi + 8], rcx; mov qword ptr [rdi], rax; ret; 
0x00000000000124b0: retf 0xffff; add rsp, 0x18; ret; 
0x000000000000ed1c: retf 0xffff; call rax; 
0x0000000000022d15: retf 3; add byte ptr [rax - 1], cl; ret; 
0x000000000004d3a2: retf; add al, byte ptr [rax]; nop word ptr cs:[rax + rax]; nop; ret; 
0x000000000003e7f9: retf; mov bl, 3; add byte ptr [rax - 0x77], cl; ret; 
0x000000000000edd6: retf; mov rdi, qword ptr [rsp + 0x38]; call 0x9060; ud2; lea rax, [rip - 0x364a]; call rax; 
0x0000000000044bf4: rol byte ptr [rax + 0xf084979], cl; xchg eax, esp; ret 0x8b48; 
0x0000000000045709: rol byte ptr [rax], 0; add byte ptr [rax + 1], cl; ret 0xc148; 
0x000000000003a05a: rol byte ptr [rax], 0; add byte ptr [rax + 6], bh; lea rdx, [rip + 0x27b7a]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000031889: rol byte ptr [rax], 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x2ff5c; movsxd rsi, dword ptr [rdi + rsi*4]; add rsi, rdi; jmp rsi; 
0x0000000000017db9: rol byte ptr [rax], 0; add byte ptr [rax - 0x73], cl; mov ah, 0x24; fadd dword ptr [rax]; add byte ptr [rax], al; call rax; 
0x0000000000012cfc: rol byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rsp + 0x10]; add rsp, 0xc8; ret; 
0x000000000003e0b2: rol byte ptr [rax], 0; add byte ptr [rcx], cl; ret 0x298b; 
0x0000000000017e06: rol byte ptr [rax], 0; add byte ptr [rdi], cl; sub dword ptr [rsp + 0x140], eax; lea rax, [rip - 0x1dc9]; lea rsi, [rsp + 0x140]; call rax; 
0x0000000000010c3b: rol byte ptr [rax], 1; add byte ptr [rax], al; call 0x9078; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x118; ret; 
0x000000000000c9b0: rol byte ptr [rax], 1; add byte ptr [rax], al; call rax; 
0x000000000000cf61: rol byte ptr [rax], 1; add byte ptr [rax], al; lea rax, [rip + 0x2ae34]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000000c9a1: rol byte ptr [rax], 1; add byte ptr [rax], al; lea rax, [rip + 0x2b3f4]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000003720e: rol byte ptr [rax], 1; add byte ptr [rax], al; pop rbx; pop r14; pop r15; jmp rcx; 
0x0000000000037522: rol byte ptr [rax], 1; add byte ptr [rax], al; pop rbx; pop r14; pop r15; ret; 
0x000000000000bf39: rol byte ptr [rax], 1; add byte ptr [rax], al; ret; 
0x0000000000058586: rol byte ptr [rax], 1; add byte ptr [rdx + 2], bh; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x0000000000058d63: rol byte ptr [rbp + 0x31], 1; rol byte ptr [rcx - 0x7d], cl; stc; or al, byte ptr [rcx + 0xf]; xchg eax, edx; ret 0xe73; 
0x0000000000059682: rol byte ptr [rbx - 0x6df0ef01], cl; ret 0x894c; 
0x0000000000059728: rol byte ptr [rbx - 0x6df0ef01], cl; ret 0x8b48; 
0x00000000000597b8: rol byte ptr [rbx - 0x6df0ef01], cl; ret 0x972; 
0x000000000003c4e4: rol byte ptr [rbx], cl; add byte ptr [rax - 0x77], cl; ret; 
0x000000000005de93: rol byte ptr [rcx - 0x78], 0; mov rax, r8; ret; 
0x0000000000058d66: rol byte ptr [rcx - 0x7d], cl; stc; or al, byte ptr [rcx + 0xf]; xchg eax, edx; ret 0xe73; 
0x0000000000018fb9: rol byte ptr [rip + 0x58d4800], cl; sub eax, 0x48ffff26; lea edi, [rsp + 0x28]; call rax; 
0x0000000000025ed4: rol byte ptr [rsp + rcx*2], 0x39; ret 0xa575; 
0x000000000000d62c: rol cl, 1; add byte ptr [rax], al; lea rdi, [rsp + 0x278]; call rax; 
0x000000000003d0b2: rol dh, cl; add eax, dword ptr [rax]; call qword ptr [rip + 0x3c32c]; ud2; mov rdi, r15; call rax; 
0x0000000000014540: rol dword ptr [rax + rax], 0x48; lea ecx, [rip + 0x61ad6]; lea rax, [rip - 0x8bc1]; mov esi, 0x2b; lea rdx, [rsp + 0x18]; call rax; 
0x0000000000053e19: rol dword ptr [rax + rcx*2], 0xff; ret 0xff49; 
0x000000000000d62d: rol dword ptr [rax], 0; lea rdi, [rsp + 0x278]; call rax; 
0x00000000000132cb: rol dword ptr [rax], 1; add byte ptr [rax], al; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000000bf89: rol dword ptr [rax], cl; add byte ptr [rax], al; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000058237: rol dword ptr [rax], cl; add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; 
0x00000000000582f0: rol dword ptr [rax], cl; add byte ptr [rdx + 3], bh; call qword ptr [rax + 0x18]; 
0x000000000004aad7: rol dword ptr [rbp + 0x660d74c0], 0xf; mov esp, 0xd0b70fc0; mov eax, 1; ret; 
0x000000000005efa1: rol dword ptr [rbx - 0x7c7e39], 0x21; setb al; or al, cl; ret; 
0x000000000001bdce: rol dword ptr [rbx], 0; call rax; 
0x000000000003cc63: rol dword ptr [rbx], 1; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000000e535: rol dword ptr [rcx], 0x48; mov dword ptr [rax + 0x10], ecx; add rsp, 0xc8; ret; 
0x00000000000132f8: rol dword ptr [rcx], 0xe8; add byte ptr [r8], al; add byte ptr [rax - 0x75], cl; add al, 0x24; pop rcx; ret; 
0x00000000000132c8: rol dword ptr [rcx], 0xe8; rol dword ptr [rax], 1; add byte ptr [rax], al; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x000000000002aeaa: rol dword ptr [rdx], 0; add byte ptr [rax - 0x73], cl; or eax, 0x36667; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000004ccb8: rol dword ptr [rdx], 1; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000001c1fb: rol dword ptr [rip + 0x48b4800], cl; and al, 0x59; ret; 
0x000000000004b4a4: ror byte ptr [r8 - 1], cl; ret; 
0x000000000003a408: ror byte ptr [rax + 0x39], 1; ret; 
0x000000000002b014: ror byte ptr [rax + 1], 0xe9; lea r8, [rip + 0x3655d]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x000000000002806d: ror byte ptr [rax + 1], cl; ret 0x8948; 
0x0000000000057971: ror byte ptr [rax + 9], 0xd0; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000285ff: ror byte ptr [rax - 0x39], cl; ret; 
0x000000000005c904: ror byte ptr [rax - 0x73], 0x71; add dword ptr [rdi], ecx; popfq; ret 0x148; 
0x00000000000423aa: ror byte ptr [rax - 0x73], 0xd; mov esi, 0x48ffff9b; cmovne ecx, eax; call rcx; 
0x000000000004b3a1: ror byte ptr [rax - 0x73], 1; adc eax, 0x18eef; mov rdx, qword ptr [rdx + rcx*8]; ret; 
0x000000000000d4eb: ror byte ptr [rax - 0x73], 1; add eax, 0x2a87d; call rax; 
0x000000000002c176: ror byte ptr [rax - 0x73], cl; or eax, 0x35536; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000059db7: ror byte ptr [rax - 0x75], 0x4c; and al, 0x18; mov byte ptr [rcx], al; mov rdi, qword ptr [rsp + 0x10]; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000001c1d9: ror byte ptr [rax - 0x75], 1; add al, 0x24; add rsp, 0x18; ret; 
0x000000000001bb9c: ror byte ptr [rax - 0x75], 1; jl 0x1bbc5; and byte ptr [rax - 0x73], cl; xor eax, 0x5a7bf; lea rax, [rip - 0x48b0]; call rax; 
0x000000000002ed53: ror byte ptr [rax - 0x75], 1; xchg eax, esp; and al, 0x60; add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret 0xc148; 
0x0000000000045704: ror byte ptr [rax - 0x75], 1; xchg eax, esp; and al, 0xc0; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0xc148; 
0x000000000000f11d: ror byte ptr [rax - 0x77], 0x44; and al, 0x18; lea rax, [rip + 0xb966]; call rax; 
0x000000000000f0d8: ror byte ptr [rax - 0x77], 0x44; and al, 0x18; lea rax, [rip + 0xb9ab]; call rax; 
0x000000000005cf3e: ror byte ptr [rax - 0x77], 1; int1; cmp rsi, rdi; jne 0x5cf30; ret; 
0x0000000000021f42: ror byte ptr [rax - 0x77], 1; ret 0x3949; 
0x0000000000056c4e: ror byte ptr [rax - 0x77], 3; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000409d1: ror byte ptr [rax - 0x77], 3; mov rax, rbx; pop rbx; ret; 
0x000000000003e9ae: ror byte ptr [rax - 0x77], 3; pop rbx; ret; 
0x000000000002a4d1: ror byte ptr [rax - 0x77], 7; add rsp, 0x28; ret; 
0x000000000001ee0c: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x00000000000235e2: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x000000000004f841: ror byte ptr [rax - 0x7d], 0xc4; and byte ptr [rbx + 0x41], bl; pop rsi; pop rbp; ret; 
0x0000000000010f7a: ror byte ptr [rax - 0x7d], 0xc4; cmp bl, al; sub rsp, 0x28; mov qword ptr [rsp], rdi; lea rax, [rip + 0x5da1]; call rax; 
0x000000000003d413: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x41], bl; pop rsi; pop r15; pop rbp; ret; 
0x000000000004aa66: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x0000000000022a93: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x0000000000038e7a: ror byte ptr [rax - 0x7d], 0xc4; pop rbx; pop r14; pop r15; ret; 
0x000000000004f4f6: ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x00000000000141de: ror byte ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x58; ret; 
0x000000000001c407: ror byte ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + rcx - 0x15], dh; sub ecx, dword ptr [rax - 0x73]; add eax, 0x3a849; call rax; 
0x0000000000015477: ror byte ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + rcx - 0x15], dh; sub ecx, dword ptr [rax - 0x73]; add eax, 0x417d9; call rax; 
0x000000000004b4a5: ror byte ptr [rax - 1], cl; ret; 
0x000000000002806a: ror byte ptr [rax - 9], cl; ror byte ptr [rax + 1], cl; ret 0x8948; 
0x000000000005efaa: ror byte ptr [rax], 0xc8; ret; 
0x000000000000afe0: ror byte ptr [rcx + 0x63], 4; test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x000000000002b011: ror byte ptr [rcx + rax - 0x40], 1; add rcx, rbp; lea r8, [rip + 0x3655d]; movsxd rdi, dword ptr [r8 + rbx*4]; add rdi, r8; jmp rdi; 
0x0000000000057ccb: ror byte ptr [rcx + rcx - 0x38], 0x48; add esp, 0x50; pop rbx; pop r14; pop rbp; ret; 
0x000000000005f1b4: ror byte ptr [rcx + rcx*4 - 0x26], 1; ret; 
0x0000000000018ae0: ror byte ptr [rcx - 0x14f3dbbc], 1; add byte ptr [rbx + 0x480c2474], cl; lea eax, [rip + 0x2eae]; lea rdi, [rsp + 0x210]; call rax; 
0x00000000000137d6: ror byte ptr [rcx - 0x43d173f], 0xff; dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x18; ret; 
0x00000000000137a6: ror byte ptr [rcx - 0x46d173f], 0xff; dec dword ptr [rax - 0x75]; add al, 0x24; add rsp, 0x18; ret; 
0x0000000000058f73: ror byte ptr [rdi], 0x83; cwde; add dword ptr [rax], eax; add byte ptr [rcx - 1], cl; ret 0xff48; 
0x000000000005915e: ror byte ptr [rdi], 0x83; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret 0xff48; 
0x000000000005aaa3: ror byte ptr [rdi], 0x84; add word ptr [rax], ax; add byte ptr [rcx - 0x75], cl; pop rdi; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000000433be: ror byte ptr [rdi], 0x84; movsd dword ptr [rdi], dword ptr [rsi]; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003cfb8: ror byte ptr [rdi], 0x84; test dword ptr [rax], 0x89480000; ret; 
0x000000000005ab93: ror byte ptr [rdi], 0x85; lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000003981f: ror byte ptr [rdi], 0x85; ret 1; 
0x0000000000051fd5: ror byte ptr [rdi], 0x85; ret 2; 
0x0000000000039632: ror byte ptr [rdi], 0x94; ret; 
0x00000000000233c7: ror byte ptr [rdi], 0x95; ret; 
0x000000000005cacf: ror byte ptr [rdi], 0x9d; ret 0x148; 
0x000000000004aadf: ror byte ptr [rdi], 0xb7; sar byte ptr [rax + 1], 1; ret; 
0x000000000000d1b4: ror byte ptr [rdi], 1; or ecx, dword ptr [rax - 0x73]; add eax, 0x11052; lea rdi, [rsp + 0x120]; call rax; 
0x000000000000cbf6: ror byte ptr [rdi], 1; or ecx, dword ptr [rax - 0x73]; add eax, 0x11610; lea rdi, [rsp + 0x120]; call rax; 
0x0000000000019dbb: ror byte ptr [rdi], 1; or ecx, dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x158; ret; 
0x0000000000019a91: ror byte ptr [rdi], 1; or ecx, dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x178; ret; 
0x0000000000014d38: ror byte ptr [rdi], 1; or ecx, dword ptr [rax - 0x75]; and al, 0x40; mov edx, dword ptr [rsp + 0x48]; add rsp, 0xf8; ret; 
0x000000000001a38c: ror byte ptr [rdi], 1; or ecx, dword ptr [rax - 0x75]; and al, 8; add rsp, 0xb8; ret; 
0x000000000001e291: ror byte ptr [rdi], 1; or ecx, dword ptr [rax - 0x75]; jl 0x1e2bc; sbb al, ch; ret 0xfead; 
0x000000000002aef8: ror byte ptr [rdi], cl; mov edx, ebx; add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000029a17: ror byte ptr [rdi], cl; test byte ptr [rdx], dl; add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add r9, qword ptr [r8 - 0x7d]; ret; 
0x0000000000027f8e: ror byte ptr [rdi], cl; xchg eax, ebp; ret; 
0x0000000000057909: ror byte ptr [rdi], cl; xor dword ptr [rcx - 1], 0xffffffff; inc dword ptr [rcx + 0xf]; scasd eax, dword ptr [rdi]; ret 0xd001; 
0x0000000000034c6c: ror ch, 1; add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000057ebd: ror dword ptr [r8 - 0x7b], 0xf6; je 0x57ee9; dec rsi; mov qword ptr [rdi], rsi; ret; 
0x000000000004abf7: ror dword ptr [rax + 1], 1; ret 0x1b8; 
0x000000000005998c: ror dword ptr [rax + 9], 0xf0; ret; 
0x0000000000027f2f: ror dword ptr [rax + 9], cl; ret; 
0x000000000004308a: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x12e8; 
0x000000000004316b: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x31e8; 
0x0000000000042f5c: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x40e8; 
0x0000000000043040: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x5ce8; 
0x0000000000043222: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x7ae8; 
0x000000000004311e: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x7ee8; 
0x0000000000042f0f: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0x8de8; 
0x0000000000042ff3: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xa9e8; 
0x00000000000431e9: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xb3e8; 
0x00000000000430d4: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xc8e8; 
0x0000000000042ec2: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xdae8; 
0x00000000000431b0: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xece8; 
0x0000000000042fa9: ror dword ptr [rax - 0x73], 1; mov esp, 0xb024; add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x77]; ret 0xf3e8; 
0x000000000003d3cb: ror dword ptr [rax - 0x73], 1; or eax, 0x2488d; movsxd rdi, dword ptr [rcx + rdx*4]; add rdi, rcx; jmp rdi; 
0x000000000005ed5b: ror dword ptr [rax - 0x75], 0x3e; mov rcx, qword ptr [rsi + 8]; mov rcx, qword ptr [rcx + 0x18]; mov rsi, rax; jmp rcx; 
0x0000000000016f01: ror dword ptr [rax - 0x75], 0x44; and al, 0x10; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], 0; add rsp, 0x28; ret; 
0x00000000000426d8: ror dword ptr [rax - 0x77], cl; out dx, eax; mov esi, 1; xor edx, edx; call rbx; 
0x0000000000057ebe: ror dword ptr [rax - 0x7b], 0xf6; je 0x57ee9; dec rsi; mov qword ptr [rdi], rsi; ret; 
0x0000000000019f41: ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 0x10], dh; mov rdi, qword ptr [rsp + 8]; lea rax, [rip - 0x3a34]; call rax; 
0x000000000001cd15: ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 0x14], dh; mov rdi, qword ptr [rsp + 0x50]; lea rax, [rip + 0x58]; call rax; 
0x00000000000129d9: ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 0xa], dh; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x0000000000015206: ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 0xb], dh; lea rax, [rip + 0x41a4c]; call rax; 
0x000000000000fa26: ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 0xb], dh; lea rax, [rip + 0x4722c]; call rax; 
0x000000000000f4b0: ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x000000000000fa0a: ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x0000000000014265: ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 5], dh; add rsp, 0x58; ret; 
0x000000000000d65a: ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rsp + rbx - 0x15], dh; pop rbp; lea rax, [rip - 0x1eca]; call rax; 
0x0000000000019eb6: ror dword ptr [rax - 0x7d], 0xf8; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x000000000002a309: ror dword ptr [rax - 0x7f], 0xfa; add byte ptr [rcx], al; add byte ptr [rax], al; setb al; and al, cl; ret; 
0x000000000004aab0: ror dword ptr [rax - 1], 0xc2; cmp rcx, r8; jb 0x4aaa0; ret; 
0x000000000004f07d: ror dword ptr [rax - 1], cl; ret; 
0x0000000000028288: ror dword ptr [rbp - 0x67c00b8], 0x2b; ja 0x28349; movsxd rax, dword ptr [r9 + rcx*4]; add rax, r9; jmp rax; 
0x0000000000054b08: ror dword ptr [rbp - 0x77], 1; ret; 
0x000000000002c32c: ror dword ptr [rcx + 0x29], cl; ret; 
0x000000000000ec27: ror dword ptr [rcx + 0x4c8948d0], 0x24; sbb byte ptr [rcx - 0x14dfdbbc], cl; in al, 0x8b; and al, 4; add rsp, 0x28; ret; 
0x000000000000a8b0: ror dword ptr [rcx + 0x63], 0xc; mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x000000000005a7a4: ror dword ptr [rcx + rax - 0xf], 0xf; xchg eax, edx; ret 0x8348; 
0x000000000005f2c9: ror dword ptr [rcx + rcx*4 - 0x28], cl; mov rdx, rsi; ret; 
0x000000000004764e: ror dword ptr [rcx - 0x77], 4; test dword ptr [rax - 1], 0xb48948c6; and al, 0x60; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret; 
0x000000000005e8f6: ror dword ptr [rcx - 0x7f], 0xfb; jmp rax; 
0x000000000004ef0b: ror dword ptr [rcx - 9], 1; fmul dword ptr [rcx + rcx*4 + 0xf]; mov qword ptr [rdi + 8], r8; pop rbx; ret; 
0x000000000005a583: ror dword ptr [rdi], 1; xchg eax, edx; ret 0x8348; 
0x0000000000057980: ror dword ptr [rdi], 1; xchg eax, edx; ret 0xc148; 
0x0000000000046abb: ror dword ptr [rdi], cl; xchg bh, ch; adc eax, 0x8d490000; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000015ddd: rsm; add al, 0; lea rdx, [rip + 0x60320]; lea rax, [rip - 0xa77f]; mov esi, 0x19; call rax; 
0x000000000000d379: sahf; add al, 0; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000e18f: sahf; add al, 0; lea rsi, [rsp + 0x28]; call rax; 
0x0000000000014378: sahf; add byte ptr [rax], al; lea rdi, [rsp + 0x30]; call rax; 
0x000000000005b88a: sahf; add byte ptr [rax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000014a45: sahf; mov eax, dword ptr [rsp + 0x18]; mov edx, dword ptr [rsp + 0x1c]; add rsp, 0x78; ret; 
0x0000000000059f9b: sahf; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000000e58e: sahf; xor eax, 0x1a80000; jne 0xe59b; add rsp, 0x38; ret; 
0x00000000000233c4: sal al, 0x84; ror byte ptr [rdi], 0x95; ret; 
0x000000000000bc0d: sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x000000000003bfe4: sal byte ptr [rax + rcx*2 + 0x48], 0x89; ret; 
0x0000000000040ad1: sal byte ptr [rax + rsi*2 + 0x48], 0x89; ret; 
0x0000000000038685: sal byte ptr [rbp + 0x10], 0x48; add esp, 0xb0; pop rbx; ret; 
0x000000000005ecc7: sal byte ptr [rbp + 0x18], 0x49; mov edi, dword ptr [rsi]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x683b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df88: sal byte ptr [rbp + 0x18], 0x49; mov edi, dword ptr [rsi]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x757a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7bd: sal byte ptr [rbp + 0x18], 0x49; mov edi, dword ptr [rsi]; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x9d45]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b896: sal byte ptr [rbp + 0x19], 0x48; mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9c6b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000003f4b9: sal byte ptr [rbp + 0x2a], 0xe9; paddd mm7, mm7; jmp qword ptr [rsi + 0x66]; 
0x000000000004efbe: sal byte ptr [rbp + 0xa], 0xc6; add dword ptr [r8], r8d; mov al, 1; mov byte ptr [rdi], al; pop rbx; ret; 
0x000000000004f32b: sal byte ptr [rbp + 0xc], 0x4c; mov dword ptr [rbx + 0x20], esi; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000003c10b: sal byte ptr [rbp + 6], 0x48; mov eax, dword ptr [rsp]; pop rcx; ret; 
0x000000000004aad9: sal byte ptr [rbp + rcx + 0x66], 0xf; mov esp, 0xd0b70fc0; mov eax, 1; ret; 
0x0000000000053715: sal byte ptr [rbp + rcx - 0x50], 1; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x000000000005abd7: sal byte ptr [rbp + rdx + 0x48], cl; mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x0000000000059f99: sal byte ptr [rbp - 0x62], 0x48; mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; mov rsi, r14; mov rdx, r13; call qword ptr [rax + 0x18]; 
0x000000000003e414: sal byte ptr [rbp - 0x6f45fffd], 0; add byte ptr [rax], al; call rbx; 
0x0000000000059fae: sal byte ptr [rbp - 0x77], 0x48; mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb754]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000024890: sal byte ptr [rbx + rdi*2 + 0x48], 0x8d; dec qword ptr [rax - 0x77]; ret 0x8348; 
0x000000000005ded8: sal byte ptr [rbx - 0x2b], 1; mov byte ptr [r8 + 1], 2; mov al, 1; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000002a2c0: sal byte ptr [rcx + 3], 1; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000005aac5: sal byte ptr [rcx + rbx + 0x48], cl; mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000000bbcc: sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x000000000001bb62: sal byte ptr [rcx + rdi*2 - 0x15], 0; mov edi, dword ptr [rsp + 0x44]; mov rax, qword ptr [rip + 0x5db9e]; call rax; 
0x0000000000058c52: sal byte ptr [rcx], 1; fild dword ptr [rcx - 0x7d]; cld; or cl, byte ptr [rdi]; xchg eax, edx; ret; 
0x000000000003dd73: sal byte ptr [rcx], 1; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x000000000003bef7: sal byte ptr [rdi + rcx + 0x4a], 0x8b; cmp al, 0x2b; call rax; 
0x0000000000009011: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000057dec: sal byte ptr [rdx + rcx - 0x50], 1; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000046e44: sal byte ptr [rdx + rsi + 0x4c], 0x89; ret; 
0x000000000003df05: sal byte ptr [rsi + 0x49], 0x83; jmp qword ptr [rcx]; 
0x000000000002495d: sal byte ptr [rsi + rbp*2 + 0x48], 0x8d; dec qword ptr [rax - 0x77]; ret 0x8348; 
0x000000000003d067: sal byte ptr [rsp + rcx*2 + 0x48], 0x89; ret; 
0x000000000003f695: sal byte ptr [rsp + rcx*2 + 0xf], 0xb7; mov bl, byte ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x3b66; 
0x0000000000029266: sal dh, cl; ret; 
0x000000000003472b: sal dword ptr [rax + 0x48], 0xc7; ret; 
0x000000000000e903: sal dword ptr [rbp + 6], 1; add byte ptr [rax - 0x73], cl; add eax, 0xffffcce2; call rax; 
0x000000000005f0c9: sal dword ptr [rbp - 0x1c], 1; mov rax, r9; and al, 1; pop rcx; ret; 
0x0000000000053336: sal dword ptr [rdx + 8], 0x83; ret 0x83c6; 
0x000000000005d9a0: sal dword ptr [rsi + rax*8 + 0x48], 0x89; ret 0x8948; 
0x0000000000022bff: sal dword ptr [rsi + rbx*8 + 0x49], 0x8d; push rdi; cmovl edi, dword ptr [rcx]; ret 0x860f; 
0x000000000001e83a: sar al, 0x75; ret 0x280f; 
0x00000000000249ca: sar al, 0x75; ret 0xc031; 
0x0000000000040457: sar bh, 0x15; add dl, byte ptr [rcx - 0x77cfffd]; push qword ptr [rbx + rax*2 - 0x77]; ret 0x2b8; 
0x0000000000049f5c: sar bh, 0x15; add eax, 0x5b0002f6; ret; 
0x0000000000040e9e: sar bh, 0x15; ret; 
0x0000000000019f07: sar bh, 0xff; lea rdi, [rsp + 0x20]; call rax; 
0x000000000004aae2: sar byte ptr [rax + 1], 1; ret; 
0x000000000004eec0: sar byte ptr [rbp + 0x11], 0xeb; and esi, eax; or byte ptr [r8], r8b; mov qword ptr [rdi], 0; pop rbx; ret; 
0x000000000000a5b6: sar byte ptr [rcx + 8], 0x41; call rsp; 
0x000000000000a823: sar byte ptr [rsi - 0x5c], 0x5b; ret; 
0x0000000000019f06: sar dil, 0xff; lea rdi, [rsp + 0x20]; call rax; 
0x000000000004f100: sar dword ptr [rax + 0x110000], 0x48; cmovae eax, edx; shl rax, 0x20; or rax, rcx; ret; 
0x000000000001ddeb: sar dword ptr [rbx - 0x74b7fffb], 0x44; and al, 0x10; add rsp, 0x68; ret; 
0x000000000002d7dd: sar dword ptr [rdx + 8], cl; mov rdi, qword ptr [rsp + 0x30]; mov rsi, qword ptr [rsp + 0x148]; call rbx; 
0x0000000000032fb2: sar dword ptr [rdx + 8], cl; mov rdi, r13; mov rsi, qword ptr [rsp + 0x198]; call rbx; 
0x0000000000045b19: sar dword ptr [rdx + 8], cl; mov rdi, r13; mov rsi, qword ptr [rsp + 0x330]; call rbx; 
0x0000000000037bff: sar dword ptr [rsi + 0x18], cl; mov edx, 8; mov rdi, rbp; call rbx; 
0x0000000000024a5a: sar eax, 0x75; ret 0xc749; 
0x0000000000037bf1: sar ebp, 1; push qword ptr [rdx + rcx + 0x48]; mov edx, dword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000001ab82: sar edi, 0xff; call rax; 
0x000000000001a12d: sar edi, 0xff; lea rsi, [rsp + 0x58]; call rax; 
0x0000000000019d70: sar edi, 1; dec dword ptr [rax - 0x73]; mov ah, 0x24; adc byte ptr [rcx], al; add byte ptr [rax], al; call rax; 
0x000000000001bbc1: sar edi, 1; dec dword ptr [rax - 0x75]; jl 0x1bbec; sub byte ptr [rax - 0x73], cl; add eax, 0xffffa500; call rax; 
0x00000000000592ff: sar esi, 0xf; mov dh, 0x72; add dword ptr [rax - 0x7d], ecx; ret 0x4802; 
0x000000000000bc00: sar esi, 1; je 0xbc18; mov rax, qword ptr [rip + 0x6e295]; test rax, rax; je 0xbc18; jmp rax; 
0x000000000001bce4: sar esi, cl; dec dword ptr [rdi]; or ecx, dword ptr [rax - 0x73]; add eax, 0x2520; lea rdi, [rsp + 0x50]; call rax; 
0x000000000001bbc0: sar rdi, 1; dec dword ptr [rax - 0x75]; jl 0x1bbec; sub byte ptr [rax - 0x73], cl; add eax, 0xffffa500; call rax; 
0x000000000000bbff: sar rsi, 1; je 0xbc18; mov rax, qword ptr [rip + 0x6e295]; test rax, rax; je 0xbc18; jmp rax; 
0x000000000001c1d5: sbb al, 0; add bh, bh; ror byte ptr [rax - 0x75], 1; add al, 0x24; add rsp, 0x18; ret; 
0x000000000002c398: sbb al, 0; add byte ptr [rax - 0x73], cl; adc eax, 0x352f2; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000015fb1: sbb al, 0; add byte ptr [rax - 0x73], cl; push rsp; and al, 0x18; call rax; 
0x000000000002a19c: sbb al, 0; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000000c791: sbb al, 0; add byte ptr [rax], al; call rax; 
0x0000000000036626: sbb al, 0x20; add byte ptr [rax - 1], cl; ret; 
0x000000000001482f: sbb al, 0x48; add esp, 0x78; ret; 
0x000000000005ddc6: sbb al, 0x48; mov edi, dword ptr [rax]; mov rax, qword ptr [rax + 8]; lea rsi, [rip + 0x794c]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000053e3b: sbb al, 0x80; add rbx, rax; jmp rbx; 
0x000000000005e6b8: sbb al, 0xae; add dword ptr [rax], eax; add rsp, 0x88; ret; 
0x000000000000d660: sbb al, 0xeb; pop rbp; lea rax, [rip - 0x1eca]; call rax; 
0x000000000002fad5: sbb al, 3; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; xor edx, edx; jmp rax; 
0x0000000000014412: sbb al, 6; add byte ptr [rax - 0x73], cl; add eax, 0xffff7574; lea rdx, [rsp + 0x20]; call rax; 
0x0000000000014361: sbb al, 6; add byte ptr [rax - 0x73], cl; add eax, 0xffff7625; lea rdx, [rsp + 0x30]; call rax; 
0x0000000000037daa: sbb al, byte ptr [rax + r8]; pop rcx; ret; 
0x0000000000015211: sbb al, byte ptr [rax + rax]; call rax; 
0x0000000000037dab: sbb al, byte ptr [rax + rax]; pop rcx; ret; 
0x0000000000052c6b: sbb al, byte ptr [rbx + rbx*8 - 0xb7ef88]; ret 0x4b8d; 
0x0000000000053f0e: sbb al, byte ptr [rcx]; add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x0000000000013821: sbb al, byte ptr [rdx]; add byte ptr [rax], al; mov word ptr [rsp + 0x16], ax; movzx eax, ax; add rsp, 0x18; ret; 
0x0000000000014547: sbb al, byte ptr [rsi]; add byte ptr [rax - 0x73], cl; add eax, 0xffff743f; mov esi, 0x2b; lea rdx, [rsp + 0x18]; call rax; 
0x000000000001e298: sbb al, ch; ret 0xfead; 
0x00000000000188f6: sbb ax, 0; lea rdi, [rsp + 0x140]; call rax; 
0x000000000001e963: sbb bh, al; test eax, 0x89a76c34; ret; 
0x000000000001c225: sbb bh, bh; adc eax, 0x5d524; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000001979e: sbb bh, bh; adc eax, 0x5fceb; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x0000000000010b8f: sbb bh, bh; adc eax, 0x68eba; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x48; ret; 
0x000000000000ef35: sbb bh, bh; adc eax, 0x6ae6c; add rsp, 0x28; ret; 
0x000000000003d3f1: sbb bh, bh; push rax; sub byte ptr [rax - 0x77], cl; ret 0xdeb; 
0x0000000000015fb8: sbb bh, bh; shr bl, 1; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x68; ret; 
0x000000000003cfb2: sbb bh, byte ptr [rdi - 0x7ab70001]; ror byte ptr [rdi], 0x84; test dword ptr [rax], 0x89480000; ret; 
0x000000000001cba2: sbb bl, byte ptr [rax - 0x72b7fffb]; add eax, 0xfffeeac3; mov esi, 0x28; call rax; 
0x000000000001bccc: sbb bl, ch; lea rax, [rip - 0x10536]; call rax; 
0x000000000003dd71: sbb bl, ch; sal byte ptr [rcx], 1; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x0000000000049f55: sbb byte ptr [r8 - 0x77], r9b; mov dword ptr [rbp + 0x31], 0x515ffc0; test byte ptr [rdx], 0; pop rbx; ret; 
0x000000000003931e: sbb byte ptr [rax + 0x39], cl; ret 0x8948; 
0x0000000000059dbc: sbb byte ptr [rax + 0x7c8b4801], cl; and al, 0x10; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000040b86: sbb byte ptr [rax + 0xd8d4822], dh; or al, 0x11; add al, byte ptr [rax]; movsxd rdx, dword ptr [rcx + rdi*4]; add rdx, rcx; jmp rdx; 
0x000000000000c64f: sbb byte ptr [rax - 0x73], cl; adc eax, 0x694f1; lea rax, [rip - 0xf3e]; xor ecx, ecx; mov edi, ecx; call rax; 
0x000000000000e164: sbb byte ptr [rax - 0x73], cl; add eax, 0x100a4; call rax; 
0x00000000000118ad: sbb byte ptr [rax - 0x73], cl; add eax, 0x4806b; call rax; 
0x0000000000015198: sbb byte ptr [rax - 0x73], cl; add eax, 0x5b60; call rax; 
0x0000000000015198: sbb byte ptr [rax - 0x73], cl; add eax, 0x5b60; call rax; add rsp, 0x28; ret; 
0x000000000001bd18: sbb byte ptr [rax - 0x73], cl; add eax, 0xb00; mov edi, 0x27; call rax; 
0x000000000000f122: sbb byte ptr [rax - 0x73], cl; add eax, 0xb966; call rax; 
0x000000000000f0dd: sbb byte ptr [rax - 0x73], cl; add eax, 0xb9ab; call rax; 
0x000000000000d628: sbb byte ptr [rax - 0x73], cl; add eax, 0xc1d0; lea rdi, [rsp + 0x278]; call rax; 
0x0000000000010b55: sbb byte ptr [rax - 0x73], cl; add eax, 0xd6b3; call rax; 
0x000000000000ef11: sbb byte ptr [rax - 0x73], cl; add eax, 0xf327; call rax; 
0x000000000001a128: sbb byte ptr [rax - 0x73], cl; add eax, 0xffffc1b0; lea rsi, [rsp + 0x58]; call rax; 
0x00000000000141f8: sbb byte ptr [rax - 0x73], cl; or eax, 0x61e00; lea rax, [rip - 0x8877]; lea rdx, [rsp + 0x28]; call rax; 
0x000000000005f12a: sbb byte ptr [rax - 0x73], cl; xor eax, 0x740d; mov edx, 0xb; jmp rax; 
0x000000000005ec0a: sbb byte ptr [rax - 0x73], cl; xor eax, 0x74ae; mov edx, 5; jmp rax; 
0x000000000005a436: sbb byte ptr [rax - 0x73], cl; xor eax, 0xb2ea; mov edx, 1; jmp rax; 
0x000000000005a3f1: sbb byte ptr [rax - 0x73], cl; xor eax, 0xb320; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a256: sbb byte ptr [rax - 0x73], cl; xor eax, 0xb4bb; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000057e2a: sbb byte ptr [rax - 0x73], cl; xor eax, 0xd764; mov edx, 0xe; jmp rax; 
0x00000000000177dc: sbb byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x68; ret; 
0x0000000000015299: sbb byte ptr [rax - 0x75], cl; and al, 0x10; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x40; ret; 
0x000000000001dbf6: sbb byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x118; ret; 
0x0000000000010fd9: sbb byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x20; ret; 
0x000000000001e135: sbb byte ptr [rax - 0x75], cl; and al, 0x20; mov dword ptr [rdi + 0x80], ecx; add rsp, 0x278; ret; 
0x000000000000f60f: sbb byte ptr [rax - 0x75], cl; and al, 0x20; mov qword ptr [rsp + 8], rcx; mov qword ptr [rsp + 0x10], rax; add rsp, 0x70; ret; 
0x0000000000010c1a: sbb byte ptr [rax - 0x75], cl; je 0x10c43; and byte ptr [rax - 0x73], cl; add eax, 0x2e0c9; lea rdi, [rsp + 0x38]; call rax; 
0x0000000000019454: sbb byte ptr [rax - 0x75], cl; je 0x1947d; and byte ptr [rax - 0x73], cl; add eax, 0x430bf; lea rdi, [rsp + 0x630]; call rax; 
0x000000000000cdb1: sbb byte ptr [rax - 0x75], cl; je 0xcdda; and byte ptr [rax - 0x73], cl; add eax, 0x4a432; lea rdi, [rsp + 0x328]; call rax; 
0x000000000000d36f: sbb byte ptr [rax - 0x75], cl; je 0xd398; and byte ptr [rax - 0x73], cl; add eax, 0x49e74; lea rdi, [rsp + 0x328]; call rax; 
0x000000000004ccea: sbb byte ptr [rax - 0x75], cl; jg 0x4ccff; mov rax, rdi; pop rcx; ret; 
0x0000000000010b03: sbb byte ptr [rax - 0x75], cl; jl 0x10b2c; or byte ptr [rax - 0x73], cl; add eax, 0x2e470; call rax; 
0x000000000005eec7: sbb byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rip + 0x71ef]; mov edx, 9; call qword ptr [rax + 0x18]; 
0x000000000005dd5c: sbb byte ptr [rax - 0x75], cl; mov rax, qword ptr ds:[rsi + 8]; lea rsi, [rip + 0x8315]; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x000000000000bd1e: sbb byte ptr [rax - 0x75], cl; push rsp; and al, 0x18; mov qword ptr [rcx], rdx; add rsp, 0x78; ret; 
0x0000000000010fa9: sbb byte ptr [rax - 0x75], cl; push rsp; and al, 0x20; add rsp, 0x28; ret; 
0x000000000001bee8: sbb byte ptr [rax - 0x75], cl; push rsp; and al, 0x20; add rsp, 0x98; ret; 
0x00000000000107bf: sbb byte ptr [rax - 0x75], cl; push rsp; and al, 0x58; mov qword ptr [rcx + 0x20], rdx; add rsp, 0xb8; ret; 
0x0000000000044f84: sbb byte ptr [rax - 0x75], cl; xchg al, dl; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x820f; 
0x0000000000009fee: sbb byte ptr [rax - 0x77], cl; and al, 0x10; lea rdi, [rsp + 0x10]; call 0xaaa0; add rsp, 0x28; ret; 
0x0000000000009f9e: sbb byte ptr [rax - 0x77], cl; and al, 0x10; lea rdi, [rsp + 0x10]; call 0xad10; add rsp, 0x28; ret; 
0x000000000000fe35: sbb byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0xc0; ret; 
0x000000000001bede: sbb byte ptr [rax - 0x77], cl; and al, 0x20; mov rax, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x20]; add rsp, 0x98; ret; 
0x000000000001a698: sbb byte ptr [rax - 0x77], cl; and al, 8; mov rax, qword ptr [rsp + 8]; add rsp, 0x20; ret; 
0x0000000000017c23: sbb byte ptr [rax - 0x77], cl; cmp al, 0x24; mov qword ptr [rsp + 8], rsi; lea rax, [rip - 0x1774]; call rax; 
0x000000000001e5c3: sbb byte ptr [rax - 0x77], cl; cmp al, 0x24; mov qword ptr [rsp + 8], rsi; mov qword ptr [rsp + 0x10], rdx; add rsp, 0x18; ret; 
0x000000000001e362: sbb byte ptr [rax - 0x77], cl; cmp al, 0x24; mov rax, qword ptr [rsp]; add rsp, 0x20; ret; 
0x00000000000151b8: sbb byte ptr [rax - 0x77], cl; je 0x151e1; and byte ptr [rax - 0x73], cl; add eax, 0x21cb; call rax; 
0x000000000000f9d8: sbb byte ptr [rax - 0x77], cl; je 0xfa01; and byte ptr [rax - 0x73], cl; add eax, 0x79ab; call rax; 
0x000000000001e5e3: sbb byte ptr [rax - 0x77], cl; jl 0x1e60c; or bh, bh; adc eax, 0x5b5d1; add rsp, 0x18; ret; 
0x000000000000ec43: sbb byte ptr [rax - 0x77], cl; jl 0xec6c; adc bh, bh; xlatb; add rsp, 0x18; ret; 
0x0000000000049f56: sbb byte ptr [rax - 0x77], cl; mov dword ptr [rbp + 0x31], 0x515ffc0; test byte ptr [rdx], 0; pop rbx; ret; 
0x0000000000010d2b: sbb byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x75], r9b; and al, 0x20; mov qword ptr [rdi + 0x10], rcx; add rsp, 0x48; ret; 
0x000000000005935a: sbb byte ptr [rax - 0x77], cl; ret 0x15ff; 
0x000000000003ef48: sbb byte ptr [rax - 0x77], cl; ret; 
0x0000000000009464: sbb byte ptr [rax - 1], cl; ret; 
0x000000000004ade6: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4920; 
0x0000000000038861: sbb byte ptr [rax], al; add byte ptr [rax], al; mov edx, 8; mov rdi, r12; call rbx; 
0x0000000000037c01: sbb byte ptr [rax], al; add byte ptr [rax], al; mov edx, 8; mov rdi, rbp; call rbx; 
0x000000000000dc6d: sbb byte ptr [rax], al; add cl, ch; push 0x48fffffc; lea eax, [rip + 0x10594]; lea rdi, [rsp + 0xe8]; call rax; 
0x000000000001ac7f: sbb byte ptr [rax], al; sete al; and al, 1; movzx eax, al; add rsp, 0x20; ret; 
0x000000000004ade5: sbb byte ptr [rax], r8b; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4920; 
0x00000000000455e9: sbb byte ptr [rbp + 0x39], cl; ret 0x830f; 
0x000000000003e4bc: sbb byte ptr [rbp + 0x44c60003], dh; sbb al, 0x20; add byte ptr [rax - 1], cl; ret; 
0x000000000004cbc7: sbb byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x0000000000036054: sbb byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x000000000001482b: sbb byte ptr [rbx + 0x481c2454], cl; add esp, 0x78; ret; 
0x000000000000c37a: sbb byte ptr [rbx + 0x48202454], cl; add esp, 0x48; ret; 
0x000000000005d671: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000021762: sbb byte ptr [rcx + rcx*4 + 0x48], cl; or byte ptr [rcx - 0x7d], cl; ret 0x4c10; 
0x000000000000ee9a: sbb byte ptr [rcx - 0x14dfdbbc], cl; in al, 0x48; mov edi, dword ptr [rsp + 8]; call 0xeed0; add rsp, 0x28; ret; 
0x000000000000f19a: sbb byte ptr [rcx - 0x14dfdbbc], cl; in al, 0x48; mov edi, dword ptr [rsp + 8]; call 0xf1e0; add rsp, 0x28; ret; 
0x000000000000f44a: sbb byte ptr [rcx - 0x14dfdbbc], cl; in al, 0x48; mov edi, dword ptr [rsp + 8]; call 0xf4d0; add rsp, 0x28; ret; 
0x000000000000ec2e: sbb byte ptr [rcx - 0x14dfdbbc], cl; in al, 0x8b; and al, 4; add rsp, 0x28; ret; 
0x000000000000950d: sbb byte ptr [rcx - 0x73], cl; push rsi; jmp qword ptr [rsi + 0x66]; 
0x000000000005ecc9: sbb byte ptr [rcx - 0x75], cl; mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x683b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df8a: sbb byte ptr [rcx - 0x75], cl; mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x757a]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7bf: sbb byte ptr [rcx - 0x75], cl; mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x9d45]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000000eb03: sbb byte ptr [rcx - 0x76f3db84], cl; jl 0xeb2f; adc al, 0x83; jmp qword ptr [rax]; 
0x000000000002155e: sbb byte ptr [rcx - 0x7d], cl; ret 0x4c20; 
0x00000000000359f5: sbb byte ptr [rcx], al; add byte ptr [rax], al; call qword ptr [rax + 0x28]; 
0x0000000000010c4c: sbb byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x000000000002a260: sbb byte ptr [rdx + 3], dh; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x0000000000013820: sbb byte ptr [rdx], 2; add byte ptr [rax], al; mov word ptr [rsp + 0x16], ax; movzx eax, ax; add rsp, 0x18; ret; 
0x000000000000e047: sbb byte ptr [rdx], al; add byte ptr [rax], al; ret; 
0x00000000000505dd: sbb byte ptr [rip - 0x72b80000], al; sbb eax, 0x13e00; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x00000000000194f4: sbb byte ptr [rsi], al; add byte ptr [rax], al; call rax; 
0x000000000002a25c: sbb cl, byte ptr [rax - 0x73]; or eax, 0x37218; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000003b24e: sbb cl, byte ptr [rax - 0x77]; ret; 
0x000000000002835a: sbb cl, byte ptr [rbp + 0x63480003]; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000005ecaf: sbb cl, byte ptr [rcx - 0x75]; mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x6a68]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df70: sbb cl, byte ptr [rcx - 0x75]; mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x77a7]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7a5: sbb cl, byte ptr [rcx - 0x75]; mov rax, qword ptr ds:[r14 + 8]; lea rsi, [rip + 0x9f72]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x00000000000476c9: sbb cl, ch; ret 0xfff8; 
0x0000000000017d8b: sbb dh, al; test byte ptr [rdi + rdx*2], ah; add dword ptr [rax], eax; add byte ptr [rax], al; lea rax, [rip - 0x188b]; call rax; 
0x000000000004f0e9: sbb dh, byte ptr [rbx + 0xa]; xor ecx, ecx; shl rax, 0x20; or rax, rcx; ret; 
0x000000000001a4a8: sbb dh, dh; and al, 0x4f; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x000000000003d3f0: sbb dil, r15b; push rax; sub byte ptr [rax - 0x77], cl; ret 0xdeb; 
0x000000000002f085: sbb dword ptr [rax + 0x39], ecx; ret; 
0x0000000000058f75: sbb dword ptr [rax + 0x49000001], -1; ret 0xff48; 
0x000000000004d3f6: sbb dword ptr [rax + 0x7ebf063c], eax; adc eax, 0x48c60148; mov eax, esi; pop rcx; ret; 
0x000000000005b898: sbb dword ptr [rax - 0x75], ecx; jge 0x5b89d; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9c6b]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005aac7: sbb dword ptr [rax - 0x75], ecx; jl 0x5aaf0; or byte ptr [rax - 0x75], cl; and al, 0x10; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x0000000000015deb: sbb dword ptr [rax - 1], 0x19beff; add byte ptr [rax], al; call rax; 
0x0000000000039736: sbb dword ptr [rax - 1], ecx; ret 0x3949; 
0x0000000000011400: sbb dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x00000000000099e4: sbb dword ptr [rdx + 0x4d000000], 0x39; ret 0x830f; 
0x0000000000053f0d: sbb dword ptr [rdx], 1; add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + rcx], al; pop rbx; ret; 
0x0000000000040381: sbb dword ptr [rdx], eax; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x0000000000018080: sbb dword ptr [rsi], eax; add byte ptr [rax - 0x75], cl; and al, 0x28; add rsp, 0x478; ret; 
0x00000000000505e3: sbb eax, 0x13e00; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x000000000003e413: sbb eax, 0x3b5c0; mov edx, 0x90; call rbx; 
0x000000000000f98d: sbb eax, 0x58c48348; ret; 
0x0000000000037517: sbb eax, 0x89000422; ret; 
0x000000000001e61f: sbb eax, 0x89ffffda; add al, 0x24; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000001428e: sbb eax, 0x8d480006; add eax, 0xffff76f8; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000019a8d: sbb eax, 0xd0ffffff; ud2; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x178; ret; 
0x000000000001aa9f: sbb eax, 0xebffffb4; and byte ptr [rax - 0x75], cl; jl 0x1aacd; or byte ptr [rax - 0x73], cl; add eax, 0x8f; call rax; 
0x0000000000046d36: sbb eax, 0xfffce025; call rbx; 
0x0000000000045b13: sbb eax, 0xfffcf248; call rbx; 
0x00000000000454da: sbb eax, 0xfffcf871; call rbx; 
0x00000000000393ce: sbb eax, 0xfffdb98d; je 0x393df; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000037bef: sbb eax, 0xfffdd16c; je 0x37c00; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000032fac: sbb eax, 0xfffe1daf; call rbx; 
0x000000000002f208: sbb eax, 0xfffe5b53; call rbx; 
0x000000000002d7d7: sbb eax, 0xfffe7584; call rbx; 
0x000000000000a504: sbb eax, 0xffff9db9; jmp qword ptr [rsi + 0xf]; 
0x00000000000194bb: sbb eax, dword ptr [rax]; add byte ptr [rax], al; call rax; 
0x0000000000055422: sbb eax, dword ptr [rcx + 0xf]; mov dh, 0x73; add cl, byte ptr [rcx - 0x7d]; ret; 
0x00000000000144ac: sbb eax, dword ptr [rsi]; add byte ptr [rax - 0x73], cl; add eax, 0xffff74da; lea rdx, [rsp + 0x28]; call rax; 
0x000000000005a334: sbb ecx, dword ptr [rax - 0x75]; jge 0x5a339; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0xb3d7]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005b87d: sbb ecx, dword ptr [rax - 0x75]; jge 0x5b882; mov rax, qword ptr [rbp + 8]; lea rsi, [rip + 0x9e99]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005f1af: sbb edx, -1; mov rax, r10; mov rdx, r11; ret; 
0x0000000000022a29: sbb esi, dword ptr [rbp + rax]; add rsp, 0x48; ret; 
0x000000000005f289: sbb esi, ecx; mov rax, r11; mov rdx, rsi; ret; 
0x000000000005f1ac: sbb esi, ecx; sbb r10, -1; mov rax, r10; mov rdx, r11; ret; 
0x000000000005f1ae: sbb r10, -1; mov rax, r10; mov rdx, r11; ret; 
0x0000000000015210: sbb r8b, byte ptr [rax + rax]; call rax; 
0x000000000005f288: sbb rsi, r9; mov rax, r11; mov rdx, rsi; ret; 
0x000000000005f1ab: sbb rsi, r9; sbb r10, -1; mov rax, r10; mov rdx, r11; ret; 
0x000000000001a4a7: sbb sil, sil; and al, 0x4f; add dword ptr [rbp + 0xa], esi; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x000000000000cf46: scasb al, byte ptr [rdi]; add al, byte ptr [rax]; call rax; 
0x000000000000d7ad: scasb al, byte ptr [rdi]; add al, byte ptr [rax]; lea rdi, [rsp + 0x2a8]; call rax; 
0x000000000000d717: scasb al, byte ptr [rdi]; add al, byte ptr [rax]; lea rdi, [rsp + 0x2e8]; call rax; 
0x000000000000cf69: scasb al, byte ptr [rdi]; add al, byte ptr [rax]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000005ef6e: scasb al, byte ptr [rdi]; add byte ptr [eax], al; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000018aee: scasb al, byte ptr [rdi]; add byte ptr cs:[rax], al; lea rdi, [rsp + 0x210]; call rax; 
0x000000000005e663: scasb al, byte ptr [rdi]; add dword ptr [rax], eax; add rsp, 0x88; ret; 
0x000000000003e5d4: scasb al, byte ptr [rdi]; add eax, dword ptr [rax]; mov eax, dword ptr [rax]; pop rcx; ret; 
0x000000000005ec0e: scasb al, byte ptr [rdi]; je 0x5ec11; add byte ptr [rdx + 5], bh; jmp rax; 
0x000000000000c9d4: scasd eax, dword ptr [rdi]; add al, byte ptr [rax]; call rax; 
0x000000000001a0d9: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip - 0x3bc5]; lea rdi, [rsp + 0x98]; call rax; 
0x0000000000019fce: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rcx], al; lea rax, [rip - 0x259a]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000005a525: scasd eax, dword ptr [rdi]; cmc; add dword ptr [rax], eax; pop rcx; ret; 
0x000000000005a625: scasd eax, dword ptr [rdi]; hlt; add dword ptr [rax], eax; pop rcx; ret; 
0x00000000000209d5: scasd eax, dword ptr [rdi]; lea eax, [rip + 0x5c415b00]; pop r13; pop r14; pop r15; ret; 
0x00000000000368b5: scasd eax, dword ptr [rdi]; mov cl, 2; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x00000000000091c0: scasd eax, dword ptr [rdi]; pop rbx; ret; 
0x0000000000057912: scasd eax, dword ptr [rdi]; ret 0xd001; 
0x0000000000057852: scasd eax, dword ptr [rdi]; ret 0xe801; 
0x0000000000011b83: seta al; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x000000000004f0fe: setae cl; mov eax, 0x110000; cmovae rax, rdx; shl rax, 0x20; or rax, rcx; ret; 
0x000000000002a2dc: setb al; and al, cl; ret; 
0x000000000005efa8: setb al; or al, cl; ret; 
0x000000000005dd4a: setb al; pop rcx; ret; 
0x000000000005ef9f: setb cl; add edi, -0x7f; cmp edi, 0x21; setb al; or al, cl; ret; 
0x000000000002a35f: setb cl; and cl, al; movzx eax, cl; ret; 
0x000000000001ac81: sete al; and al, 1; movzx eax, al; add rsp, 0x20; ret; 
0x000000000003dd57: sete al; pop rbx; pop r14; pop r15; ret; 
0x000000000000a4e5: sete al; pop rcx; ret; 
0x000000000004cd8a: sete al; ret; 
0x000000000005b71f: sete byte ptr [rbx + 0x11]; mov rax, rbx; pop rbx; pop r14; pop r15; ret; 
0x0000000000059f86: sete dl; or rdx, 2; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x18]; 
0x000000000005cf39: setge dl; add rax, rdx; mov rcx, rsi; cmp rsi, rdi; jne 0x5cf30; ret; 
0x0000000000011ab3: setl al; and al, 1; movzx eax, al; add rsp, 0x10; ret; 
0x0000000000009111: setne al; pop rbx; ret; 
0x000000000002a2de: shl byte ptr [rax], 0xc8; ret; 
0x0000000000011ab5: shl byte ptr [rcx + rax], 0xf; mov dh, 0xc0; add rsp, 0x10; ret; 
0x0000000000010d53: shl byte ptr [rcx + rax], 0xf; mov dh, 0xc0; add rsp, 0x18; ret; 
0x000000000001ac83: shl byte ptr [rcx + rax], 0xf; mov dh, 0xc0; add rsp, 0x20; ret; 
0x0000000000010d92: shl byte ptr [rcx + rax], 0xf; mov dh, 0xc0; add rsp, 0x38; ret; 
0x000000000005f0d5: shl byte ptr [rcx + rax], 1; pop rcx; ret; 
0x0000000000058204: shl byte ptr [rsi + 0xf], 1; xlatb; ret 0xff3d; 
0x000000000001bd4b: shl dword ptr [rax + rax], 0; lea rdi, [rsp + 0x80]; call rax; 
0x000000000001bd3b: shl dword ptr [rax + rax], 1; add byte ptr [rax - 0x73], cl; jl 0x1bd67; push rax; call rax; 
0x0000000000010c6b: shl dword ptr [rax], 0; call rax; 
0x000000000002a361: shl dword ptr [rax], 0xc1; movzx eax, cl; ret; 
0x0000000000056834: shl dword ptr [rsi + 0xf], 0x7e; ret 0x144; 
0x00000000000567c9: shl dword ptr [rsi + 0xf], 1; jo 0x567a7; jmp qword ptr [rsi + 0xf]; 
0x000000000004f0ef: shl eax, 0x20; or rax, rcx; ret; 
0x000000000001c1cb: shl eax, 0x20; or rsi, rax; lea rax, [rip + 0x1c28]; call rax; 
0x000000000001dd82: shl eax, 0x20; or rsi, rax; lea rax, [rip - 0x1bff]; call rax; 
0x000000000005ac29: shl ebp, 4; mov rdi, qword ptr [rsp + 8]; mov rcx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x00000000000118df: shl ecx, 0x20; or rax, rcx; add rsp, 0x28; ret; 
0x000000000000f115: shl ecx, 4; add rdi, rcx; inc rax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb966]; call rax; 
0x000000000000f0d0: shl ecx, 4; add rdi, rcx; inc rax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb9ab]; call rax; 
0x00000000000466a6: shl edi, 5; mov esi, 8; mov qword ptr [rsp + 0x330], rdi; mov rbp, rcx; call rcx; 
0x000000000001c8b1: shl edx, 0; call 0x9078; add rsp, 0x28; ret; 
0x0000000000059a11: shl esi, 0x20; mov eax, edi; or rax, rsi; ret; 
0x000000000002f1fb: shl esi, 4; mov edx, 8; mov rdi, r12; lea rbx, [rip - 0x1a4ad]; call rbx; 
0x0000000000045b06: shl esi, 4; mov edx, 8; mov rdi, r14; lea rbx, [rip - 0x30db8]; call rbx; 
0x000000000002d7ca: shl esi, 4; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x18a7c]; call rbx; 
0x0000000000032f9f: shl esi, 4; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x1e251]; call rbx; 
0x0000000000046d29: shl esi, 4; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x31fdb]; call rbx; 
0x0000000000059984: shl esi, 8; or rsi, rdx; movzx eax, cl; or rax, rsi; ret; 
0x000000000005ac28: shl r13, 4; mov rdi, qword ptr [rsp + 8]; mov rcx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rax + r13]; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000004f0ee: shl rax, 0x20; or rax, rcx; ret; 
0x000000000001c1ca: shl rax, 0x20; or rsi, rax; lea rax, [rip + 0x1c28]; call rax; 
0x000000000001dd81: shl rax, 0x20; or rsi, rax; lea rax, [rip - 0x1bff]; call rax; 
0x00000000000118de: shl rcx, 0x20; or rax, rcx; add rsp, 0x28; ret; 
0x000000000000f114: shl rcx, 4; add rdi, rcx; inc rax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb966]; call rax; 
0x000000000000f0cf: shl rcx, 4; add rdi, rcx; inc rax; mov qword ptr [rsp + 0x18], rax; lea rax, [rip + 0xb9ab]; call rax; 
0x00000000000466a5: shl rdi, 5; mov esi, 8; mov qword ptr [rsp + 0x330], rdi; mov rbp, rcx; call rcx; 
0x000000000001c8b0: shl rdx, 0; call 0x9078; add rsp, 0x28; ret; 
0x0000000000059a10: shl rsi, 0x20; mov eax, edi; or rax, rsi; ret; 
0x000000000002f1fa: shl rsi, 4; mov edx, 8; mov rdi, r12; lea rbx, [rip - 0x1a4ad]; call rbx; 
0x0000000000045b05: shl rsi, 4; mov edx, 8; mov rdi, r14; lea rbx, [rip - 0x30db8]; call rbx; 
0x000000000002d7c9: shl rsi, 4; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x18a7c]; call rbx; 
0x0000000000032f9e: shl rsi, 4; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x1e251]; call rbx; 
0x0000000000046d28: shl rsi, 4; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x31fdb]; call rbx; 
0x0000000000059983: shl rsi, 8; or rsi, rdx; movzx eax, cl; or rax, rsi; ret; 
0x000000000005b5c6: shr al, 2; ret; 
0x000000000005b5d6: shr al, 4; ret; 
0x000000000005b5e6: shr al, 5; ret; 
0x000000000000d723: shr bl, 1; add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x10ae1; lea rdi, [rsp + 0x248]; call rax; 
0x0000000000017d9c: shr bl, 1; add bl, ch; add byte ptr [rax - 0x75], cl; and al, 0x20; add rsp, 0x188; ret; 
0x000000000000dc30: shr bl, 1; add byte ptr [rax - 0x73], cl; add eax, 0x105d6; lea rdi, [rsp + 0x100]; call rax; 
0x0000000000018bad: shr bl, 1; add byte ptr [rax - 0x73], cl; add eax, 0x2059; lea rdi, [rsp + 0x140]; call rax; 
0x000000000000d913: shr bl, 1; add byte ptr [rax - 0x73], cl; add eax, 0x2a453; call rax; 
0x000000000000cf3f: shr bl, 1; add byte ptr [rax - 0x73], cl; add eax, 0x2ae27; call rax; 
0x000000000000c97f: shr bl, 1; add byte ptr [rax - 0x73], cl; add eax, 0x2b3e7; call rax; 
0x000000000000d7b9: shr bl, 1; add byte ptr [rax - 0x73], cl; add eax, 0xd3ad; lea rdi, [rsp + 0x290]; call rax; 
0x0000000000015fba: shr bl, 1; add byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x68; ret; 
0x0000000000016492: shr bl, 1; add byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0xc8; ret; 
0x0000000000010b11: shr bl, 1; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x48; ret; 
0x0000000000018ebc: shr bl, 1; add eax, 0xfffef2e9; dec dword ptr [rax - 0x75]; and al, 0x20; add rsp, 0xf8; ret; 
0x000000000000ef06: shr bl, 1; and al, 0x48; mov edi, dword ptr [rsp + 8]; add rdi, 0x18; lea rax, [rip + 0xf327]; call rax; 
0x000000000001455c: shr bl, 1; and byte ptr [rax - 0x73], cl; add eax, 0x9cba; lea rdi, [rsp + 0x18]; call rax; 
0x00000000000144bc: shr bl, 1; and byte ptr [rax - 0x73], cl; add eax, 0x9d5a; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000014371: shr bl, 1; and byte ptr [rax - 0x73], cl; add eax, 0x9ea5; lea rdi, [rsp + 0x30]; call rax; 
0x000000000001429e: shr bl, 1; and byte ptr [rax - 0x73], cl; add eax, 0x9f78; lea rdi, [rsp + 0x28]; call rax; 
0x000000000001ab86: shr bl, 1; and byte ptr [rax - 0x75], cl; jl 0x1abb1; or byte ptr [rax - 0x73], cl; add eax, 0xbb; call rax; 
0x000000000001e256: shr bl, 1; and byte ptr [rax - 0x75], cl; jl 0x1e281; or byte ptr [rax - 0x73], cl; add eax, 0x5b; call rax; 
0x000000000001e2f9: shr bl, 1; and ecx, dword ptr [rax - 0x75]; and al, 8; mov rdi, qword ptr [rax]; lea rax, [rip - 0xaab]; call rax; 
0x000000000001691b: shr bl, 1; cmp dword ptr [rax - 0x73], ecx; add eax, 0xffff4e7b; call rax; 
0x0000000000019db0: shr bl, 1; fimul word ptr [rax - 0x73]; add eax, 0xffff19e6; call rax; 
0x0000000000019a86: shr bl, 1; fimul word ptr [rax - 0x73]; add eax, 0xffff1d10; call rax; 
0x0000000000016994: shr bl, 1; loope 0x169e0; mov eax, dword ptr [rsp + 0x38]; add rsp, 0x1a8; ret; 
0x000000000000f12b: shr bl, 1; mov ebx, 0x48509066; mov dword ptr [rsp], edi; call 0xeca0; pop rax; ret; 
0x000000000000e15d: shr bl, 1; mov rdi, qword ptr es:[rsp + 0x18]; lea rax, [rip + 0x100a4]; call rax; 
0x000000000001bd45: shr bl, 1; sub al, 0x48; lea eax, [rip + 0x24c1]; lea rdi, [rsp + 0x80]; call rax; 
0x00000000000169db: shr bl, 1; sub dword ptr [rax - 0x75], ecx; jl 0x16a06; sub byte ptr [rax - 0x73], cl; add eax, 0x4096; call rax; 
0x000000000000fc7e: shr byte ptr [rax - 0x14ab8aff], 0x16; mov qword ptr [rsp + 8], 0; mov rax, qword ptr [rsp + 8]; add rsp, 0xe0; ret; 
0x000000000001ac9f: shr byte ptr [rax - 0x14fd8aff], 5; add rsp, 0x18; ret; 
0x00000000000333b8: shr cl, 0x84; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000331a8: shr cl, 0x94; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000005cc85: shr cl, 0xe8; add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret; 
0x000000000001cbb3: shr cl, 1; ret; 
0x000000000002a2a2: shr eax, 0x3f; ret; 
0x000000000003721a: shr edi, 0x20; lea rax, [rip + 0x2a874]; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x00000000000226d7: shr edi, 8; mov eax, edi; ret; 
0x000000000002a2a1: shr rax, 0x3f; ret; 
0x0000000000037219: shr rdi, 0x20; lea rax, [rip + 0x2a874]; movsxd rcx, dword ptr [rax + rdi*4]; add rcx, rax; jmp rcx; 
0x00000000000226d6: shr rdi, 8; mov eax, edi; ret; 
0x0000000000053dc7: sidt [rax - 1]; ret 0x8948; 
0x000000000005a589: stc; adc byte ptr [rdi], cl; xchg eax, ebx; ret; 
0x0000000000038e3a: stc; add dword ptr [rbp + 0x3d], esi; lea r15, [rbx - 1]; mov rdi, qword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x00000000000318a3: stc; add eax, 0x8d488477; adc eax, 0x2ff86; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000049a63: stc; add eax, dword ptr [rbx]; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x00000000000275e1: stc; and eax, 0x8d482e77; add eax, 0x39944; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000002a68c: stc; jne 0x2a5fa; mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x18; ret; 
0x000000000002a825: stc; jne 0x2a835; mov qword ptr [rdi + 8], rdx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x0000000000021868: stc; mov qword ptr [rcx], rax; movaps xmm0, xmmword ptr [rsp]; movups xmmword ptr [rcx + 8], xmm0; add rsp, 0x18; ret; 
0x0000000000058d69: stc; or al, byte ptr [rcx + 0xf]; xchg eax, edx; ret 0xe73; 
0x000000000001cd63: stc; ret 0xfffe; 
0x000000000004f0e8: stc; sbb dh, byte ptr [rbx + 0xa]; xor ecx, ecx; shl rax, 0x20; or rax, rcx; ret; 
0x000000000005a5d9: stc; sub byte ptr [rdi], cl; xchg eax, ebx; ret; 
0x000000000002828d: stc; sub ecx, dword ptr [rdi]; xchg dword ptr [rax + rax + 0x63490000], esi; add al, 0x89; add rax, r9; jmp rax; 
0x000000000005600c: std; add dword ptr [rdi], ecx; xchg eax, esp; ret 0x8040; 
0x0000000000019acf: std; add eax, 0x448b4800; and al, 8; add rsp, 0x18; ret; 
0x0000000000034989: std; cmp edx, 0x56; ja 0x349fe; movsxd rcx, dword ptr [r14 + rdx*4]; add rcx, r14; jmp rcx; 
0x0000000000037d88: std; dec dword ptr [rax - 0x73]; add eax, 0x422f7; pop rcx; ret; 
0x00000000000378f8: std; dec dword ptr [rax - 0x73]; add eax, 0x4274f; pop rcx; ret; 
0x000000000004295f: std; je 0x42965; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000003becc: std; jmp qword ptr [rsi - 0x70]; 
0x000000000004a887: std; out dx, al; add al, byte ptr [rax]; ret; 
0x0000000000037bf2: std; push qword ptr [rdx + rcx + 0x48]; mov edx, dword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000000108af: sti; add al, 0; lea rdx, [rip + 0x65697]; lea rax, [rip - 0x5250]; mov esi, 0x49; call rax; 
0x000000000002c111: sti; add dword ptr [rax], eax; add byte ptr [rcx + 0x39], cl; ret; 
0x00000000000141a1: sti; add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x18; ret; 
0x00000000000091bd: sti; add esi, dword ptr [rbp - 0x51]; pop rbx; ret; 
0x000000000001bc11: sti; and eax, 0x8d480000; jl 0x1bc3d; push rax; call rax; 
0x000000000005a413: sti; call 0x5a2f0; mov rax, rbx; pop rbx; ret; 
0x0000000000057fa3: sti; dec rdx; call qword ptr [rip + 0x21bf3]; mov rax, rbx; pop rbx; ret; 
0x000000000002874a: sti; jg 0x287c1; ret 0xdb85; 
0x000000000005e8f9: sti; jmp rax; 
0x000000000004037a: sti; mov eax, esi; lea rcx, [rip + 0x21908]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000005b639: sti; mov r13, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000004a7a6: sti; mov rdi, qword ptr [rdi + 0x28]; mov rax, qword ptr [rbx + 0x30]; call qword ptr [rax]; 
0x000000000005b746: sti; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax + 0x18]; 
0x000000000001f756: sti; mov rdi, qword ptr [rdi]; mov rax, qword ptr [rbx + 8]; call qword ptr [rax]; 
0x000000000005b8d9: sti; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x9d67]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b5f9: sti; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x0000000000015dde: stosb byte ptr [rdi], al; add al, 0; lea rdx, [rip + 0x60320]; lea rax, [rip - 0xa77f]; mov esi, 0x19; call rax; 
0x000000000000db7a: stosb byte ptr [rdi], al; add al, byte ptr [rax]; lea rdi, [rsp + 0x160]; call rax; 
0x000000000005dd35: stosb byte ptr [rdi], al; add byte ptr [rax], al; je 0x5dd3e; xor eax, eax; pop rcx; ret; 
0x0000000000029baa: stosb byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rbp + rcx*4 + 0x79], cl; add cl, byte ptr [rcx - 0x7d]; ret 0x4cfe; 
0x000000000005eabb: stosb byte ptr [rdi], al; add dword ptr [rax], eax; add rsp, 0x28; ret; 
0x000000000000ebd3: stosb byte ptr [rdi], al; add rsp, 0x48; ret; 
0x00000000000457b9: stosb byte ptr [rdi], al; sub dword ptr [rax], eax; add byte ptr [rcx - 0x73], cl; add dword ptr [r8 + 0x39], ecx; ret; 
0x0000000000016e0a: stosb byte ptr [rdi], al; sub dword ptr [rsi], eax; add byte ptr [rax - 0x75], cl; add al, 0x24; pop rcx; ret; 
0x000000000000da84: stosd dword ptr [rdi], eax; add al, byte ptr [rax]; lea rdi, [rsp + 0x190]; call rax; 
0x000000000005e98d: stosd dword ptr [rdi], eax; add dword ptr [rax], eax; add rsp, 0x30; pop rbx; ret; 
0x000000000005e98c: stosq qword ptr [rdi], rax; add dword ptr [rax], eax; add rsp, 0x30; pop rbx; ret; 
0x000000000004c834: sub ah, byte ptr [rsi - 0x77]; lahf; xor byte ptr [rip - 0xb80000], al; ret 0x3948; 
0x0000000000029f16: sub al, 0; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000005dcb0: sub al, 0; add byte ptr [rax], al; mov r8d, 0xc4; call 0x5db10; pop rcx; ret; 
0x000000000000d6e6: sub al, 0x48; lea eax, [rip + 0x10b22]; lea rdi, [rsp + 0x248]; call rax; 
0x000000000000d5d7: sub al, 0x48; lea eax, [rip + 0x10c31]; lea rdi, [rsp + 0x248]; call rax; 
0x000000000000d114: sub al, 0x48; lea eax, [rip + 0x110f4]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000cf02: sub al, 0x48; lea eax, [rip + 0x11306]; lea rdi, [rsp + 0x88]; call rax; 
0x000000000000cb54: sub al, 0x48; lea eax, [rip + 0x116b4]; lea rdi, [rsp + 0x178]; call rax; 
0x000000000000c942: sub al, 0x48; lea eax, [rip + 0x118c6]; lea rdi, [rsp + 0x88]; call rax; 
0x000000000001890a: sub al, 0x48; lea eax, [rip + 0x22fe]; lea rdi, [rsp + 0x140]; call rax; 
0x000000000001bd47: sub al, 0x48; lea eax, [rip + 0x24c1]; lea rdi, [rsp + 0x80]; call rax; 
0x000000000001873c: sub al, 0x48; lea eax, [rip + 0x24cc]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000005bb16: sub al, 0x49; add edi, esi; mov rdi, r13; mov rsi, r15; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x000000000004ae96: sub al, 0x5b; pop r14; ret; 
0x000000000000fa30: sub al, 0x72; add al, 0; call rax; 
0x000000000001e280: sub al, 0xbd; add eax, 0xc4834800; sub bl, al; lea rax, [rip - 0x12af0]; call rax; 
0x000000000003d0b8: sub al, 0xc3; add eax, dword ptr [rax]; ud2; mov rdi, r15; call rax; 
0x0000000000016c90: sub al, 6; add byte ptr [rax + 0x48057501], ch; add esp, 0x38; ret; 
0x000000000000d8e0: sub al, 9; add dword ptr [rax], eax; lea rdi, [rsp + 0x50]; call rax; 
0x0000000000036d16: sub al, byte ptr [rax + rax]; lea rax, [rip + 0x400a0]; pop rcx; ret; 
0x0000000000029fe5: sub al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001da29: sub bh, bh; adc eax, 0x5bd58; add rsp, 0x68; ret; 
0x000000000001b8f9: sub bh, bh; adc eax, 0x5de88; add rsp, 0x68; ret; 
0x0000000000016a75: sub bh, bh; adc eax, 0x63084; add rsp, 0x148; ret; 
0x0000000000011a79: sub bh, bh; adc eax, 0x67d08; add rsp, 0x68; ret; 
0x000000000001e1db: sub bl, al; lea rax, [rip - 0x12a44]; call rax; 
0x000000000001e287: sub bl, al; lea rax, [rip - 0x12af0]; call rax; 
0x000000000001e330: sub bl, al; lea rax, [rip - 0x12b99]; call rax; 
0x000000000000ed16: sub bl, al; lea rax, [rip - 0x357f]; call rax; 
0x000000000000eeae: sub bl, al; lea rax, [rip - 0x3717]; call rax; 
0x000000000000ef3f: sub bl, al; lea rax, [rip - 0x37a8]; call rax; 
0x000000000000f1ae: sub bl, al; lea rax, [rip - 0x3a17]; call rax; 
0x000000000000f45e: sub bl, al; lea rax, [rip - 0x3cc7]; call rax; 
0x0000000000019b2c: sub bl, al; lea rax, [rip - 0xe395]; call rax; 
0x000000000001aad3: sub bl, al; lea rax, [rip - 0xf33c]; call rax; 
0x000000000001abb7: sub bl, al; lea rax, [rip - 0xf420]; call rax; 
0x000000000000ec3c: sub bl, al; nop; sub rsp, 0x18; mov qword ptr [rsp + 0x10], rdi; call rdi; 
0x0000000000010b4e: sub bl, ch; and byte ptr [rax - 0x75], cl; jl 0x10b79; sbb byte ptr [rax - 0x73], cl; add eax, 0xd6b3; call rax; 
0x0000000000018908: sub bl, ch; sub al, 0x48; lea eax, [rip + 0x22fe]; lea rdi, [rsp + 0x140]; call rax; 
0x000000000001c1d4: sub byte ptr [rax + rax], bl; add bh, bh; ror byte ptr [rax - 0x75], 1; add al, 0x24; add rsp, 0x18; ret; 
0x000000000001898d: sub byte ptr [rax - 0x73], cl; add eax, 0x1d1b; call rax; 
0x000000000000d4e2: sub byte ptr [rax - 0x73], cl; add eax, 0x2b0d6; call rax; 
0x000000000000d2d9: sub byte ptr [rax - 0x73], cl; add eax, 0x2dbcf; lea rdi, [rsp + 0x1c8]; call rax; 
0x000000000000cd1b: sub byte ptr [rax - 0x73], cl; add eax, 0x2e18d; lea rdi, [rsp + 0x1c8]; call rax; 
0x00000000000169cd: sub byte ptr [rax - 0x73], cl; add eax, 0x345b; lea rdi, [rsp + 0x30]; call rax; 
0x0000000000016b07: sub byte ptr [rax - 0x73], cl; add eax, 0x3641; lea rdi, [rsp + 0x68]; call rax; 
0x00000000000169e2: sub byte ptr [rax - 0x73], cl; add eax, 0x4096; call rax; 
0x000000000001698b: sub byte ptr [rax - 0x73], cl; add eax, 0x40ed; call rax; 
0x000000000001c533: sub byte ptr [rax - 0x73], cl; add eax, 0xfffef095; call rax; 
0x00000000000155a3: sub byte ptr [rax - 0x73], cl; add eax, 0xffff6025; call rax; 
0x000000000001bbc8: sub byte ptr [rax - 0x73], cl; add eax, 0xffffa500; call rax; 
0x00000000000144a7: sub byte ptr [rax - 0x73], cl; or eax, 0x61b71; lea rax, [rip - 0x8b26]; lea rdx, [rsp + 0x28]; call rax; 
0x0000000000014289: sub byte ptr [rax - 0x73], cl; or eax, 0x61d8f; lea rax, [rip - 0x8908]; lea rdx, [rsp + 0x28]; call rax; 
0x000000000001adea: sub byte ptr [rax - 0x75], cl; and al, 0x28; add rsp, 0x78; ret; 
0x000000000005a0ab: sub byte ptr [rax - 0x75], cl; and al, 0x30; lea rsi, [rip + 0xb661]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000010b7a: sub byte ptr [rax - 0x75], cl; jl 0x10ba3; adc byte ptr [rax - 0x73], cl; add eax, 0x2e3f9; call rax; 
0x000000000001da24: sub byte ptr [rax - 0x75], cl; push rsp; and al, 0x28; call qword ptr [rip + 0x5bd58]; add rsp, 0x68; ret; 
0x000000000001b8f4: sub byte ptr [rax - 0x75], cl; push rsp; and al, 0x28; call qword ptr [rip + 0x5de88]; add rsp, 0x68; ret; 
0x0000000000011a74: sub byte ptr [rax - 0x75], cl; push rsp; and al, 0x28; call qword ptr [rip + 0x67d08]; add rsp, 0x68; ret; 
0x000000000001b1c0: sub byte ptr [rax - 0x75], cl; push rsp; and al, 0x30; add rsp, 0x228; ret; 
0x00000000000196aa: sub byte ptr [rax - 0x75], cl; push rsp; and al, 0x30; add rsp, 0x38; ret; 
0x0000000000043c92: sub byte ptr [rax - 0x75], cl; xor byte ptr [rax - 0x7d], cl; ret 0x4838; 
0x000000000001121c: sub byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x38; ret; 
0x0000000000010f83: sub byte ptr [rax - 0x77], cl; cmp al, 0x24; lea rax, [rip + 0x5da1]; call rax; 
0x0000000000015226: sub byte ptr [rax - 0x77], cl; je 0x1524f; xor byte ptr [rax - 0x73], cl; add eax, 0xffff639d; call rax; 
0x000000000000fa46: sub byte ptr [rax - 0x77], cl; je 0xfa6f; xor byte ptr [rax - 0x73], cl; add eax, 0xffffbb7d; call rax; 
0x000000000001b9e6: sub byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x75], cl; and al, 0x18; add rsp, 0x38; ret; 
0x0000000000015f40: sub byte ptr [rax - 0x77], cl; push rsp; and al, 0x30; add rsp, 0x38; ret; 
0x000000000000e2ae: sub byte ptr [rax - 0x77], cl; push rsp; and al, 0x30; call 0xe2c0; add rsp, 0x38; ret; 
0x0000000000010f16: sub byte ptr [rax - 0x77], cl; push rsp; and al, 0x30; mov qword ptr [rdi + 0x10], 0; add rsp, 0x38; ret; 
0x000000000003d3f4: sub byte ptr [rax - 0x77], cl; ret 0xdeb; 
0x0000000000019ae3: sub byte ptr [rax - 0x77], cl; xor al, 0x24; mov rax, rdi; mov qword ptr [rsp + 8], rax; lea rax, [rip + 0x3fee9]; call rax; 
0x000000000002a0f3: sub byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x000000000001cbae: sub byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000005dc79: sub byte ptr [rax], al; add byte ptr [rax], al; mov r8d, 0x11f; call 0x5db10; pop rcx; ret; 
0x000000000005ac3d: sub byte ptr [rax], cl; call qword ptr [rcx + 0x18]; 
0x000000000005ed06: sub byte ptr [rbx + 0x41], bl; pop rsi; jmp rax; 
0x000000000004f4a8: sub byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000002ab7a: sub byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; pop rbp; ret; 
0x000000000000a0e8: sub byte ptr [rbx + 0x41], bl; pop rsp; pop r14; pop r15; ret; 
0x000000000001f050: sub byte ptr [rbx + 0x5d], bl; ret; 
0x000000000000b0d5: sub byte ptr [rbx + 0x6efe015], cl; add bh, bh; ret 0x4475; 
0x000000000000a013: sub byte ptr [rbx + 0x700a605], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x0000000000009fc3: sub byte ptr [rbx + 0x700b605], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x0000000000009f73: sub byte ptr [rbx + 0x7014605], cl; add byte ptr [rbx + 0x57504f8], al; add rsp, 0x28; ret; 
0x000000000000cdc2: sub byte ptr [rbx], al; add byte ptr [rax], al; call rax; 
0x00000000000454f9: sub byte ptr [rbx], al; add byte ptr [rax], al; mov edi, 0x100; mov esi, 8; call rbx; 
0x000000000002a398: sub byte ptr [rcx + 3], dh; add byte ptr [rcx + 0x63], cl; add al, 0x81; add rax, r9; jmp rax; 
0x000000000004ae92: sub byte ptr [rcx + rcx*4 + 0x50], al; sub al, 0x5b; pop r14; ret; 
0x000000000003c4dd: sub byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rip + 0x3d261]; mov rbx, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x000000000005a093: sub byte ptr [rcx + rcx*4 - 1], cl; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000de2e: sub byte ptr [rcx], al; add byte ptr [rax], al; call rax; 
0x000000000000c8f1: sub byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x000000000000bde0: sub byte ptr [rdi], cl; adc dword ptr [rcx], eax; add rsp, 0xb8; ret; 
0x000000000005a5da: sub byte ptr [rdi], cl; xchg eax, ebx; ret; 
0x000000000000d4d3: sub byte ptr [rdx + 1], bh; call 0xc4b0; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x2b0d6]; call rax; 
0x000000000005ac39: sub byte ptr [rdx - 0x75], cl; push rsp; sub byte ptr [rax], cl; call qword ptr [rcx + 0x18]; 
0x000000000001b1c9: sub byte ptr [rdx], al; add byte ptr [rax], al; ret; 
0x00000000000571cc: sub byte ptr [rdx], al; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x0000000000016e8f: sub byte ptr [rsi], al; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; ret; 
0x000000000001e41a: sub byte ptr [rsp + 0x10], al; movups xmmword ptr [rax], xmm0; lea rdx, [rip + 0x57fd0]; add rsp, 0x38; ret; 
0x000000000001a8fa: sub byte ptr [rsp + 0x10], al; movups xmmword ptr [rax], xmm0; lea rdx, [rip + 0x5ba08]; add rsp, 0x38; ret; 
0x000000000001a049: sub byte ptr [rsp + 0x40], al; movaps xmmword ptr [rsp + 0x70], xmm0; lea rax, [rip + 0xc67]; lea rdi, [rsp + 0x58]; lea rdx, [rsp + 0x70]; call rax; 
0x000000000002186d: sub byte ptr [rsp], al; movups xmmword ptr [rcx + 8], xmm0; add rsp, 0x18; ret; 
0x000000000000936d: sub byte ptr [rsp], al; movups xmmword ptr [rdi + rax*8], xmm0; add rsp, 0x20; pop rbx; ret; 
0x000000000003f4bb: sub ch, cl; paddd mm7, mm7; jmp qword ptr [rsi + 0x66]; 
0x000000000004e9b5: sub cl, byte ptr [rax - 0x77]; ret; 
0x0000000000035e87: sub dh, byte ptr [rcx]; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x000000000001cd11: sub dword ptr [rax + 0xf], ecx; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 0x14], dh; mov rdi, qword ptr [rsp + 0x50]; lea rax, [rip + 0x58]; call rax; 
0x000000000000dd14: sub dword ptr [rax - 0x73], ecx; add eax, 0x104f4; lea rdi, [rsp + 0x50]; call rax; 
0x000000000000d8dc: sub dword ptr [rax - 0x73], ecx; add eax, 0x1092c; lea rdi, [rsp + 0x50]; call rax; 
0x00000000000169dd: sub dword ptr [rax - 0x75], ecx; jl 0x16a06; sub byte ptr [rax - 0x73], cl; add eax, 0x4096; call rax; 
0x000000000002a050: sub dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000457ba: sub dword ptr [rax], eax; add byte ptr [rcx - 0x73], cl; add dword ptr [r8 + 0x39], ecx; ret; 
0x0000000000028353: sub dword ptr [rcx], ecx; add byte ptr [rax], al; lea rcx, [rip + 0x38d1a]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000204cb: sub dword ptr [rdi + 0x415b0005], edx; pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000016e0b: sub dword ptr [rsi], eax; add byte ptr [rax - 0x75], cl; add al, 0x24; pop rcx; ret; 
0x0000000000016dd4: sub dword ptr [rsi], eax; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x28; ret; 
0x000000000000daec: sub dword ptr [rsp + 0x100], eax; lea rax, [rip + 0x85d6]; lea rdi, [rsp + 0x100]; call rax; 
0x000000000005edaf: sub dword ptr [rsp + 0x10], ecx; movaps xmmword ptr [rsp], xmm0; mov rdx, rsp; call qword ptr [rip + 0x1b088]; add rsp, 0x38; ret; 
0x0000000000017e0b: sub dword ptr [rsp + 0x140], eax; lea rax, [rip - 0x1dc9]; lea rsi, [rsp + 0x140]; call rax; 
0x0000000000016481: sub dword ptr [rsp + 0x20], eax; lea rax, [rip + 0x3b14]; lea rdx, [rsp + 0x20]; call rax; 
0x000000000001440a: sub dword ptr [rsp + 0x20], eax; lea rcx, [rip + 0x61c2b]; lea rax, [rip - 0x8a8c]; lea rdx, [rsp + 0x20]; call rax; 
0x0000000000016705: sub dword ptr [rsp + 0x70], eax; lea rax, [rip + 0x3a40]; lea rdi, [rsp + 0x90]; call rax; 
0x000000000001a04e: sub dword ptr [rsp + 0x70], eax; lea rax, [rip + 0xc67]; lea rdi, [rsp + 0x58]; lea rdx, [rsp + 0x70]; call rax; 
0x000000000001a2fd: sub dword ptr [rsp + 0x70], eax; lea rax, [rip - 0x2d98]; lea rsi, [rsp + 0x70]; call rax; 
0x000000000001e3b0: sub dword ptr [rsp], eax; mov rdi, rsp; call 0x1e3c0; add rsp, 0x58; ret; 
0x000000000005edb4: sub dword ptr [rsp], eax; mov rdx, rsp; call qword ptr [rip + 0x1b088]; add rsp, 0x38; ret; 
0x000000000005aa31: sub dword ptr [rsp], eax; mov rdx, rsp; mov rdi, rax; call qword ptr [rip + 0x1f408]; add rsp, 0x38; ret; 
0x0000000000019d90: sub eax, 0x24bc8b48; add qword ptr [rax], rax; add al, ch; ret 0xfef2; 
0x000000000002b619: sub eax, 0x35f1e; movsxd rsi, dword ptr [rbp + rsi*4]; add rsi, rbp; jmp rsi; 
0x000000000002a1f9: sub eax, 0x48000000; add esp, 8; pop rbx; pop r14; ret; 
0x000000000000ed0f: sub eax, 0x48000038; add esp, 0x28; ret; 
0x0000000000059b17: sub eax, 0x48000203; add esp, 0x68; ret; 
0x0000000000018fbf: sub eax, 0x48ffff26; lea edi, [rsp + 0x28]; call rax; 
0x00000000000366a3: sub eax, 0x89480004; ret; 
0x0000000000016e63: sub eax, 0x8b480006; and al, 0x20; add rsp, 0x38; ret; 
0x0000000000056cb4: sub eax, 0xb0f0002; nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; mov rdx, qword ptr [rdi + 0x10]; ret; 
0x0000000000029f59: sub eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000012b67: sub eax, dword ptr [rax]; add byte ptr [rax], al; call rax; 
0x0000000000017356: sub eax, dword ptr [rax]; add byte ptr [rax], al; lea rdx, [rsp + 0x10]; call rax; 
0x0000000000014552: sub eax, dword ptr [rax]; add byte ptr [rax], al; lea rdx, [rsp + 0x18]; call rax; 
0x0000000000038391: sub ebp, dword ptr [rdi - 2]; dec dword ptr [rax - 0x77]; fucomip st(0); ret; 
0x0000000000014411: sub ebx, dword ptr [rsi + rax]; add byte ptr [rax - 0x73], cl; add eax, 0xffff7574; lea rdx, [rsp + 0x20]; call rax; 
0x000000000001c40f: sub ecx, dword ptr [rax - 0x73]; add eax, 0x3a849; call rax; 
0x000000000001547f: sub ecx, dword ptr [rax - 0x73]; add eax, 0x417d9; call rax; 
0x000000000000f26c: sub ecx, dword ptr [rax - 0x73]; add eax, 0xffffc52c; call rax; 
0x0000000000014c25: sub ecx, dword ptr [rax - 0x73]; cmp eax, 0x4bacc; lea rdx, [rip + 0x614bc]; lea rax, [rip - 0x95cb]; mov esi, 0x49; call rax; 
0x000000000000e038: sub ecx, dword ptr [rax - 0x73]; jl 0xe061; push rax; call qword ptr [rip + 0x6ba0c]; add rsp, 0x218; ret; 
0x0000000000043ca4: sub ecx, dword ptr [rax - 0x77]; fisttp qword ptr [rax - 0x7d]; ret; 
0x000000000002f3d5: sub ecx, dword ptr [rax - 1]; ret; 
0x000000000003bef3: sub ecx, dword ptr [rax]; test rax, rax; je 0x3bf09; mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000005a1b1: sub ecx, dword ptr [rcx - 0x75]; cmp al, 0x24; mov rax, qword ptr [r12 + 8]; lea rsi, [rip + 0xb561]; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000002828e: sub ecx, dword ptr [rdi]; xchg dword ptr [rax + rax + 0x63490000], esi; add al, 0x89; add rax, r9; jmp rax; 
0x0000000000024ad9: sub ecx, dword ptr [rsi + 5]; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x000000000004d3a1: sub ecx, ebx; add al, byte ptr [rax]; nop word ptr cs:[rax + rax]; nop; ret; 
0x00000000000540a6: sub edx, 0; add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; mov byte ptr [rdi + r10], al; pop rax; ret; 
0x000000000005a18b: sub edx, eax; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x000000000000d741: sub edx, esp; add byte ptr [rax], al; lea rdi, [rsp + 0x290]; call rax; 
0x0000000000029928: sub esi, dword ptr [rdi + 0x15]; lea rdi, [rip + 0x377ca]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000005a919: sub esi, ebp; add dword ptr [rax], eax; add rsp, 0x48; ret; 
0x000000000000ec41: sub esp, 0x18; mov qword ptr [rsp + 0x10], rdi; call rdi; 
0x000000000000ebe1: sub esp, 0x18; mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rdi]; call 0xec00; add rsp, 0x18; ret; 
0x00000000000139f1: sub esp, 0x18; mov qword ptr [rsp + 8], rdi; call 0x137f0; mov qword ptr [rsp + 0x10], rax; add rsp, 0x18; ret; 
0x0000000000011981: sub esp, 0x18; mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x10], rsi; call 0x11690; add rsp, 0x18; ret; 
0x000000000001ad01: sub esp, 0x18; mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x10], rsi; call 0x1a870; add rsp, 0x18; ret; 
0x0000000000017c21: sub esp, 0x18; mov qword ptr [rsp], rdi; mov qword ptr [rsp + 8], rsi; lea rax, [rip - 0x1774]; call rax; 
0x000000000000a011: sub esp, 0x28; mov eax, dword ptr [rip + 0x700a6]; cmp eax, 4; jne 0xa024; add rsp, 0x28; ret; 
0x0000000000009fc1: sub esp, 0x28; mov eax, dword ptr [rip + 0x700b6]; cmp eax, 4; jne 0x9fd4; add rsp, 0x28; ret; 
0x0000000000009f71: sub esp, 0x28; mov eax, dword ptr [rip + 0x70146]; cmp eax, 4; jne 0x9f84; add rsp, 0x28; ret; 
0x000000000000c3f1: sub esp, 0x28; mov qword ptr [rsp + 8], rdi; call 0xec40; add rsp, 0x28; ret; 
0x000000000001e2e1: sub esp, 0x28; mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rdi]; lea rax, [rip - 0xc8]; call rax; 
0x0000000000010f81: sub esp, 0x28; mov qword ptr [rsp], rdi; lea rax, [rip + 0x5da1]; call rax; 
0x0000000000019681: sub esp, 0x38; mov qword ptr [rsp + 8], rdi; lea rax, [rip - 0x2960]; call rax; 
0x000000000004a902: sub esp, 0x40; mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x0000000000010c61: sub esp, 0x78; mov qword ptr [rsp], rdi; lea rax, [rip + 0x60c1]; call rax; 
0x000000000005f3c9: sub esp, 8; add rsp, 8; ret; 
0x0000000000009005: sub esp, 8; mov rax, qword ptr [rip + 0x70979]; test rax, rax; je 0x9016; call rax; 
0x000000000005f2fe: sub esp, ebx; test qword ptr [rsp + 8], rsp; add rsp, rax; leave; ret; 
0x0000000000016dd3: sub qword ptr [r14], rax; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x28; ret; 
0x000000000001cd10: sub qword ptr [r8 + 0xf], r9; ror dword ptr [rax - 0x7d], 0xf8; add byte ptr [rbp + 0x14], dh; mov rdi, qword ptr [rsp + 0x50]; lea rax, [rip + 0x58]; call rax; 
0x000000000003bef2: sub r9d, dword ptr [rax]; test rax, rax; je 0x3bf09; mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000005a18a: sub rdx, rax; mov rdi, qword ptr [r12]; mov rax, qword ptr [r12 + 8]; call qword ptr [rax + 0x18]; 
0x000000000000ec40: sub rsp, 0x18; mov qword ptr [rsp + 0x10], rdi; call rdi; 
0x000000000000ebe0: sub rsp, 0x18; mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rdi]; call 0xec00; add rsp, 0x18; ret; 
0x00000000000139f0: sub rsp, 0x18; mov qword ptr [rsp + 8], rdi; call 0x137f0; mov qword ptr [rsp + 0x10], rax; add rsp, 0x18; ret; 
0x0000000000011980: sub rsp, 0x18; mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x10], rsi; call 0x11690; add rsp, 0x18; ret; 
0x000000000001ad00: sub rsp, 0x18; mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x10], rsi; call 0x1a870; add rsp, 0x18; ret; 
0x0000000000017c20: sub rsp, 0x18; mov qword ptr [rsp], rdi; mov qword ptr [rsp + 8], rsi; lea rax, [rip - 0x1774]; call rax; 
0x000000000000a010: sub rsp, 0x28; mov eax, dword ptr [rip + 0x700a6]; cmp eax, 4; jne 0xa024; add rsp, 0x28; ret; 
0x0000000000009fc0: sub rsp, 0x28; mov eax, dword ptr [rip + 0x700b6]; cmp eax, 4; jne 0x9fd4; add rsp, 0x28; ret; 
0x0000000000009f70: sub rsp, 0x28; mov eax, dword ptr [rip + 0x70146]; cmp eax, 4; jne 0x9f84; add rsp, 0x28; ret; 
0x000000000000c3f0: sub rsp, 0x28; mov qword ptr [rsp + 8], rdi; call 0xec40; add rsp, 0x28; ret; 
0x000000000001e2e0: sub rsp, 0x28; mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rdi]; lea rax, [rip - 0xc8]; call rax; 
0x0000000000010f80: sub rsp, 0x28; mov qword ptr [rsp], rdi; lea rax, [rip + 0x5da1]; call rax; 
0x0000000000019680: sub rsp, 0x38; mov qword ptr [rsp + 8], rdi; lea rax, [rip - 0x2960]; call rax; 
0x000000000004a901: sub rsp, 0x40; mov rax, qword ptr [rdi]; mov rcx, qword ptr [rdi + 8]; mov rdi, rax; call qword ptr [rcx + 0x18]; 
0x0000000000010c60: sub rsp, 0x78; mov qword ptr [rsp], rdi; lea rax, [rip + 0x60c1]; call rax; 
0x000000000005f3c8: sub rsp, 8; add rsp, 8; ret; 
0x0000000000009004: sub rsp, 8; mov rax, qword ptr [rip + 0x70979]; test rax, rax; je 0x9016; call rax; 
0x000000000005f2fd: sub rsp, r11; test qword ptr [rsp + 8], rsp; add rsp, rax; leave; ret; 
0x0000000000025adf: syscall; 
0x000000000005dbd9: sysenter; 
0x00000000000285ca: test ah, dh; add eax, dword ptr [rax]; add byte ptr [rcx], dh; jmp qword ptr [rsi + 0x66]; 
0x000000000000f3ff: test al, 0; add byte ptr [rax], al; call 0xf580; add rsp, 0x28; ret; 
0x000000000003e436: test al, 0; add byte ptr [rax], al; call rbx; 
0x000000000001c9bb: test al, 0; add byte ptr [rax], al; lea rax, [rip - 0x786]; xor esi, esi; call rax; 
0x000000000001a110: test al, 0; add byte ptr [rax], al; mov byte ptr [rax + 0x10], cl; mov rax, qword ptr [rsp + 0x20]; add rsp, 0xd8; ret; 
0x0000000000053678: test al, 0; add byte ptr [rax], al; pop rbx; pop r14; ret; 
0x000000000000c570: test al, 0; add byte ptr [rax], al; ret; 
0x000000000002c37f: test al, 0x4c; add ecx, eax; jmp rcx; 
0x0000000000029eb0: test al, 0x75; add eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000000104be: test al, 0xff; add al, 0; lea rdx, [rip + 0x65a87]; lea rax, [rip - 0x4e60]; mov esi, 0x49; call rax; 
0x000000000001699f: test al, 1; add byte ptr [rax], al; ret; 
0x0000000000016c93: test al, 1; jne 0x16c9c; add rsp, 0x38; ret; 
0x000000000000e592: test al, 1; jne 0xe59b; add rsp, 0x38; ret; 
0x0000000000037221: test al, 2; add byte ptr [rax + 0x63], cl; or al, 0xb8; add rcx, rax; jmp rcx; 
0x000000000000d7b4: test al, 2; add byte ptr [rax], al; call rax; 
0x0000000000018623: test al, 3; add byte ptr [rax], al; ret; 
0x000000000005a087: test al, al; jne 0x59f3a; lea rsi, [rsp + 0x28]; mov rdi, r15; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000059fc8: test al, al; jne 0x59f3a; mov rdi, r15; mov rsi, rbp; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000005ddb0: test al, al; mov al, 1; je 0x5ddbc; add rsp, 0x20; pop rbx; ret; 
0x00000000000313d1: test al, cl; add al, byte ptr [rax]; add byte ptr [rbp - 0x77], cl; ret 0x8b48; 
0x00000000000226d1: test bh, 1; jne 0x226dd; shr rdi, 8; mov eax, edi; ret; 
0x0000000000010c41: test bh, bh; dec dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x118; ret; 
0x000000000003cfba: test bh, dh; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000017e0c: test byte ptr [rax + rax*2], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0xffffe237; lea rsi, [rsp + 0x140]; call rax; 
0x000000000000daed: test byte ptr [rax + rax], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x85d6; lea rdi, [rsp + 0x100]; call rax; 
0x000000000002c9d5: test byte ptr [rax + rbx*2], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000000d92d: test byte ptr [rax + rbx*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x2a466; lea rdi, [rsp + 0x98]; call rax; 
0x000000000001551b: test byte ptr [rax + rdi*4], ah; add byte ptr [rax], al; add bl, ch; ret 0x8b48; 
0x0000000000010210: test byte ptr [rax + rdi*4], ah; add byte ptr [rax], al; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000103a0: test byte ptr [rax + rdi*4], ah; add byte ptr [rax], al; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4811; 
0x000000000000cf5f: test byte ptr [rax + rdx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x2ae34; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000000c99f: test byte ptr [rax + rdx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x2b3f4; lea rdi, [rsp + 0xd0]; call rax; 
0x00000000000393cb: test byte ptr [rax - 0x73], 0x1d; lea edi, [rcx + 0xa74fffd]; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000000318a6: test byte ptr [rax - 0x73], cl; adc eax, 0x2ff86; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x00000000000426d1: test byte ptr [rax - 0x75], 0x54; and al, 0x38; call rbx; 
0x0000000000056d64: test byte ptr [rax - 0x77], 0x10; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000005b8d6: test byte ptr [rax - 0x77], 0xfb; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; lea rsi, [rip + 0x9d67]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b5f6: test byte ptr [rax - 0x77], 0xfb; mov rdi, qword ptr [rsi]; mov rax, qword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x000000000000d4f7: test byte ptr [rax], ah; add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x2a89c; lea rdi, [rsp + 0x220]; call rax; 
0x000000000005f37a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; ret; 
0x000000000001feba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rdi; ret; 
0x000000000005d4aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x18]; ret; 
0x0000000000059b2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x10]; ret; 
0x000000000003cd7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; lea rdx, [rip + 0x3a7f6]; ret; 
0x00000000000377a5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov al, 1; ret; 
0x000000000001c005: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; ret; 
0x000000000004b097: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; ret; 
0x0000000000040a67: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000059a79: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, dword ptr [rdi + 0x10]; ret; 
0x0000000000059a88: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, dword ptr [rdi + 0x14]; ret; 
0x0000000000059b39: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000059a59: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, rdi; ret; 
0x0000000000059b49: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; movzx eax, byte ptr [rdi + 0x20]; ret; 
0x0000000000059a68: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; movzx eax, word ptr [rdi + 0x18]; ret; 
0x0000000000059a28: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; movzx eax, word ptr [rdi + 4]; ret; 
0x000000000004d3a9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; ret; 
0x000000000001c018: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x000000000001f09a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000053670: test byte ptr [rbp + 0x48000000], dh; add esp, 0xa8; pop rbx; pop r14; ret; 
0x000000000003e0ac: test byte ptr [rbp - 0x46000000], dl; rol byte ptr [rax], 0; add byte ptr [rcx], cl; ret 0x298b; 
0x000000000005adf4: test byte ptr [rbx + 2], ch; add byte ptr [rax], al; mov rdi, rbp; mov esi, 0x30; call qword ptr [rbx + 0x20]; 
0x000000000005c958: test byte ptr [rbx], bh; add al, 0; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000041fc4: test byte ptr [rcx + 0x48000000], ch; mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000000afe4: test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x0000000000039e65: test byte ptr [rcx + rax], al; add byte ptr [rax], al; movzx ecx, byte ptr [r10]; movsxd rax, dword ptr [r13 + rcx*4]; add rax, r13; jmp rax; 
0x00000000000546e2: test byte ptr [rcx + rcx*4 - 0x36], 0xf6; ret 0x7502; 
0x000000000005f2c6: test byte ptr [rcx - 0x77], 0xd3; mov rax, r11; mov rdx, rsi; ret; 
0x00000000000537ce: test byte ptr [rcx - 1], 0xd7; mov rax, rbx; pop rbx; pop r14; pop r15; ret; 
0x000000000005a473: test byte ptr [rcx], 0; pop rcx; ret; 
0x000000000004a612: test byte ptr [rcx], ch; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000016667: test byte ptr [rdi + rax], ah; add dword ptr [rax], eax; add byte ptr [rcx], al; lea rax, [rip + 0x37bb]; lea rdi, [rsp + 0x58]; call rax; 
0x000000000001a0d7: test byte ptr [rdi + rbp*4], ah; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip - 0x3bc5]; lea rdi, [rsp + 0x98]; call rax; 
0x0000000000019fcc: test byte ptr [rdi + rbp*4], ah; add byte ptr [rax], al; add byte ptr [rcx], al; lea rax, [rip - 0x259a]; lea rdi, [rsp + 0x28]; call rax; 
0x000000000000d877: test byte ptr [rdi + rbx], ah; add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x348; ret; 
0x0000000000017d8d: test byte ptr [rdi + rdx*2], ah; add dword ptr [rax], eax; add byte ptr [rax], al; lea rax, [rip - 0x188b]; call rax; 
0x000000000001c2bc: test byte ptr [rdi + rdx*8], ah; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x3d6]; call rax; 
0x000000000001532c: test byte ptr [rdi + rdx*8], ah; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x926]; call rax; 
0x0000000000018d9f: test byte ptr [rdi + rdx*8], ah; add byte ptr [rax], al; add byte ptr [rcx], al; lea rax, [rip + 0x39b3]; lea rdi, [rsp + 0x28]; call rax; 
0x00000000000443d3: test byte ptr [rdi], ch; xor eax, dword ptr [rax]; add byte ptr [rax - 1], cl; ret; 
0x0000000000049f60: test byte ptr [rdx], 0; pop rbx; ret; 
0x0000000000029a19: test byte ptr [rdx], dl; add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add r9, qword ptr [r8 - 0x7d]; ret; 
0x00000000000389af: test byte ptr [rsi + rdi*8 - 0x74b70001], ch; push rax; adc byte ptr [rcx - 0x75], cl; cmp al, 0x24; call rbx; 
0x0000000000038cc7: test byte ptr [rsi + rdi*8 - 1], al; dec dword ptr [rax + 0x29]; ret; 
0x0000000000027746: test byte ptr [rsi], dl; or dword ptr [rax], eax; add byte ptr [rcx - 1], cl; ret 0x394c; 
0x000000000000c223: test byte ptr [rsp + 0x1f], 1; jne 0xc233; mov eax, dword ptr [rsp + 0x14]; add rsp, 0x28; ret; 
0x000000000000c3d3: test byte ptr [rsp + 0x1f], 1; jne 0xc3e3; mov eax, dword ptr [rsp + 0x14]; add rsp, 0x28; ret; 
0x00000000000174ad: test byte ptr [rsp + 0x27], 1; jne 0x174be; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x000000000000c36f: test byte ptr [rsp + 0x2f], 1; jne 0xc384; mov rax, qword ptr [rsp + 0x18]; mov edx, dword ptr [rsp + 0x20]; add rsp, 0x48; ret; 
0x000000000001740f: test byte ptr [rsp + 0x37], 1; jne 0x17425; mov rax, qword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x0000000000017552: test byte ptr [rsp + 0x37], 1; jne 0x17563; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x58; ret; 
0x000000000001a643: test byte ptr [rsp + 0x47], 1; jne 0x1a654; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x58; ret; 
0x000000000001a4a9: test byte ptr [rsp + 0x4f], 1; jne 0x1a4ba; mov rax, qword ptr [rsp + 0x20]; add rsp, 0x58; ret; 
0x000000000000c2df: test byte ptr [rsp + 0x4f], 1; jne 0xc2f0; mov rax, qword ptr [rsp + 0x18]; add rsp, 0x68; ret; 
0x000000000004347e: test ch, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002a4b5: test cl, bl; add byte ptr [rax], al; add byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000004d5fb: test cl, cl; je 0x4d602; mov al, 1; ret; 
0x000000000005366d: test cl, cl; je 0x5372a; add rsp, 0xa8; pop rbx; pop r14; ret; 
0x000000000004c782: test dh, bl; fadd dword ptr [rax + rax]; add byte ptr [rax + 0x6b], cl; ret; 
0x00000000000226d0: test dil, 1; jne 0x226dd; shr rdi, 8; mov eax, edi; ret; 
0x000000000003cf39: test dword ptr [rax + 0x4c000001], eax; mov edi, edi; call rax; 
0x000000000005ab95: test dword ptr [rax + rax - 0x7cb80000], ebp; ret; 
0x0000000000057c08: test dword ptr [rax + rax - 0xb70000], edi; ret 0x144; 
0x000000000000e0af: test dword ptr [rax - 0x73], 0xfffc293d; push qword ptr [rcx]; leave; call 0xfb80; pop rcx; ret; 
0x000000000005b6fa: test dword ptr [rax - 0x77], 0x3e8b48fb; mov rax, qword ptr [rsi + 8]; mov rsi, rdx; mov rdx, rcx; call qword ptr [rax + 0x18]; 
0x0000000000010fd4: test dword ptr [rax - 0x77], 0x4818247c; mov eax, dword ptr [rsp + 0x18]; add rsp, 0x20; ret; 
0x000000000003e51d: test dword ptr [rax - 0x77], 0xbb3ae8de; cld; dec dword ptr [rax - 0x77]; ret; 
0x0000000000047652: test dword ptr [rax - 1], 0xb48948c6; and al, 0x60; add dword ptr [rax], eax; add byte ptr [rax - 1], cl; ret; 
0x000000000003cfbb: test dword ptr [rax], 0x89480000; ret; 
0x00000000000555e1: test dword ptr [rax], 0xcb60f00; or byte ptr [rbp - 0x6bf0be37], al; ret 0x4c89; 
0x0000000000029993: test dword ptr [rax], eax; add rax, rbp; jmp rax; 
0x0000000000029992: test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x000000000002a718: test dword ptr [rbp + 1], ebx; add byte ptr [rax], al; mov qword ptr [rdi + 8], rcx; mov byte ptr [rdi], 0x4b; add rsp, 0x10; ret; 
0x000000000005a08a: test dword ptr [rbx + 0x48fffffe], ebp; lea esi, [rsp + 0x28]; mov rdi, r15; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000029ea9: test dword ptr [rbx], eax; add byte ptr [rax], al; lea rcx, [rip + 0x375a8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000005bb19: test dword ptr [rcx + rcx*4 - 0x11], 0x48fe894c; mov eax, dword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x0000000000037bcf: test dword ptr [rdi + rdi*8 - 1], ebp; dec dword ptr [rax - 0x73]; imul edi, edi, 0x48; mov edi, dword ptr [rbx - 1]; mov rax, qword ptr [rbx + 7]; call qword ptr [rax]; 
0x000000000003dced: test dword ptr [rdx + 0x48000000], eax; lea eax, [rip + 0x23f7b]; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x00000000000395bc: test dword ptr [rdx], eax; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000005f301: test dword ptr [rsp + 8], esp; add rsp, rax; leave; ret; 
0x000000000000910e: test dx, dx; setne al; pop rbx; ret; 
0x0000000000041fc5: test eax, 0x48000000; mov edi, dword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000005b08b: test eax, 0x48ff894c; mov esi, dword ptr [rsp + 0x10]; mov rdx, qword ptr [rsp + 0x20]; call qword ptr [rbp + 0x18]; 
0x00000000000370bb: test eax, 0x63480002; add al, 0x81; add rax, rcx; jmp rax; 
0x000000000001e965: test eax, 0x89a76c34; ret; 
0x0000000000035f87: test eax, eax; je 0x35f8d; pop rcx; ret; 
0x000000000003bef6: test eax, eax; je 0x3bf09; mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000004aad8: test eax, eax; je 0x4aae9; bsf ax, ax; movzx edx, ax; mov eax, 1; ret; 
0x0000000000009010: test eax, eax; je 0x9016; call rax; 
0x0000000000009010: test eax, eax; je 0x9016; call rax; add rsp, 8; ret; 
0x000000000000bbcb: test eax, eax; je 0xbbd8; jmp rax; 
0x000000000000bc0c: test eax, eax; je 0xbc18; jmp rax; 
0x000000000000a822: test eax, eax; jle 0xa7ca; pop rbx; ret; 
0x0000000000038684: test eax, eax; jne 0x38698; add rsp, 0xb0; pop rbx; ret; 
0x000000000003c10a: test eax, eax; jne 0x3c114; mov rax, qword ptr [rsp]; pop rcx; ret; 
0x00000000000423a9: test eax, eax; lea rcx, [rip - 0x6442]; cmovne rcx, rax; call rcx; 
0x000000000003cfc9: test eax, ebp; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fmul dword ptr [rbp + rcx*4 + 0x73]; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000022725: test ebp, 0xc031ffff; pop rcx; ret; 
0x000000000005aac4: test edx, edx; je 0x5aae1; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000005abd6: test edx, edx; je 0x5abef; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x000000000000910f: test edx, edx; setne al; pop rbx; ret; 
0x0000000000057ec0: test esi, esi; je 0x57ee9; dec rsi; mov qword ptr [rdi], rsi; ret; 
0x000000000004cd31: test esi, esi; js 0x4cd3a; add qword ptr [rdi + 0x18], rsi; ret; 
0x00000000000393ca: test esi, esi; lea rbx, [rip - 0x24673]; je 0x393df; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000057e5f: test esp, edx; add byte ptr [rax], al; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000041fc1: test esp, esp; je 0x42072; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x000000000005f300: test qword ptr [rsp + 8], rsp; add rsp, rax; leave; ret; 
0x0000000000041fc0: test r12, r12; je 0x42072; mov rdi, qword ptr [rbp]; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 0x20]; 
0x0000000000035f86: test rax, rax; je 0x35f8d; pop rcx; ret; 
0x000000000003bef5: test rax, rax; je 0x3bf09; mov rdi, qword ptr [rbx + r13]; call rax; 
0x000000000000900f: test rax, rax; je 0x9016; call rax; 
0x000000000000900f: test rax, rax; je 0x9016; call rax; add rsp, 8; ret; 
0x000000000000bbca: test rax, rax; je 0xbbd8; jmp rax; 
0x000000000000bc0b: test rax, rax; je 0xbc18; jmp rax; 
0x000000000000a821: test rax, rax; jle 0xa7ca; pop rbx; ret; 
0x0000000000038683: test rax, rax; jne 0x38698; add rsp, 0xb0; pop rbx; ret; 
0x00000000000423a8: test rax, rax; lea rcx, [rip - 0x6442]; cmovne rcx, rax; call rcx; 
0x000000000005aac3: test rdx, rdx; je 0x5aae1; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx - 8]; call qword ptr [rax + 0x18]; 
0x000000000005abd5: test rdx, rdx; je 0x5abef; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rbx + r14]; call qword ptr [rax + 0x18]; 
0x0000000000057ebf: test rsi, rsi; je 0x57ee9; dec rsi; mov qword ptr [rdi], rsi; ret; 
0x000000000004cd30: test rsi, rsi; js 0x4cd3a; add qword ptr [rdi + 0x18], rsi; ret; 
0x00000000000393c9: test rsi, rsi; lea rbx, [rip - 0x24673]; je 0x393df; mov rdx, qword ptr [rax + 0x10]; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000001e933: ud2; call qword ptr [rip + 0x5b1ad]; ud2; nop dword ptr [rax]; movabs rax, 0x5203149ad97ccfc6; ret; 
0x0000000000019a74: ud2; lea rax, [rip + 0x1083]; lea rdi, [rsp + 0xb0]; call rax; 
0x000000000000d1b5: ud2; lea rax, [rip + 0x11052]; lea rdi, [rsp + 0x120]; call rax; 
0x000000000000cbf7: ud2; lea rax, [rip + 0x11610]; lea rdi, [rsp + 0x120]; call rax; 
0x000000000001bce7: ud2; lea rax, [rip + 0x2520]; lea rdi, [rsp + 0x50]; call rax; 
0x000000000001a3c3: ud2; lea rax, [rip + 0x8c4]; lea rdi, [rsp + 0x18]; call rax; 
0x0000000000019d9e: ud2; lea rax, [rip + 0xd59]; lea rdi, [rsp + 0xb0]; call rax; 
0x000000000000ede1: ud2; lea rax, [rip - 0x364a]; call rax; 
0x000000000000f0a9: ud2; lea rax, [rip - 0x3912]; call rax; 
0x00000000000142c1: ud2; lea rax, [rip - 0x8b2a]; call rax; 
0x0000000000014394: ud2; lea rax, [rip - 0x8bfd]; call rax; 
0x00000000000144df: ud2; lea rax, [rip - 0x8d48]; call rax; 
0x000000000001457f: ud2; lea rax, [rip - 0x8de8]; call rax; 
0x0000000000019dbc: ud2; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x158; ret; 
0x0000000000019a92: ud2; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x178; ret; 
0x0000000000014d39: ud2; mov rax, qword ptr [rsp + 0x40]; mov edx, dword ptr [rsp + 0x48]; add rsp, 0xf8; ret; 
0x000000000001a38d: ud2; mov rax, qword ptr [rsp + 8]; add rsp, 0xb8; ret; 
0x0000000000016985: ud2; mov rdi, qword ptr [rsp + 0x28]; lea rax, [rip + 0x40ed]; call rax; 
0x000000000003d0bc: ud2; mov rdi, r15; call rax; 
0x000000000005d499: ud2; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; mov rdx, qword ptr [rdi + 8]; ret; 
0x000000000003cd76: ud2; nop dword ptr [rax + rax]; mov rax, rdi; lea rdx, [rip + 0x3a7f6]; ret; 
0x000000000001f096: ud2; nop dword ptr [rax + rax]; ret; 
0x0000000000056cb7: ud2; nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; mov rdx, qword ptr [rdi + 0x10]; ret; 
0x000000000001e93b: ud2; nop dword ptr [rax]; movabs rax, 0x5203149ad97ccfc6; ret; 
0x000000000001aaea: ud2; nop dword ptr [rax]; push rax; mov qword ptr [rsp], rdi; pop rax; ret; 
0x000000000001967d: ud2; nop; sub rsp, 0x38; mov qword ptr [rsp + 8], rdi; lea rax, [rip - 0x2960]; call rax; 
0x000000000001e29e: ud2; push rax; mov qword ptr [rsp], rdi; call 0x1c7a0; pop rax; ret; 
0x000000000003feab: wait; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000001fbf7: wait; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x0000000000039356: xacquire xchg dword ptr [rdx], eax; add byte ptr [rax + 0x63], cl; add al, 0xa9; add rax, rcx; jmp rax; 
0x0000000000044f87: xchg al, dl; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x820f; 
0x00000000000318aa: xchg bh, bh; add al, byte ptr [rax]; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000046abd: xchg bh, ch; adc eax, 0x8d490000; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000005bb86: xchg byte ptr [rcx + rax - 0x10], cl; mov esi, 0x5c; jmp rax; 
0x000000000001fffe: xchg byte ptr [rdi + 0x415b0005], dl; pop rsi; pop r15; ret; 
0x000000000002d492: xchg byte ptr [rsp + rcx - 0x72b80000], ch; add dword ptr [r9 + 0x39], ecx; ret 0x860f; 
0x000000000001daa6: xchg dword ptr [rax + 0x59000000], eax; ret; 
0x0000000000029935: xchg dword ptr [rax + 1], ecx; clc; jmp rax; 
0x0000000000028290: xchg dword ptr [rax + rax + 0x63490000], esi; add al, 0x89; add rax, r9; jmp rax; 
0x00000000000505dc: xchg dword ptr [rax], ebx; add eax, 0x8d480000; sbb eax, 0x13e00; movsxd rdi, dword ptr [rbx + rdi*4]; add rdi, rbx; jmp rdi; 
0x0000000000029ea8: xchg dword ptr [rbp + 0x48000003], eax; lea ecx, [rip + 0x375a8]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000aafa: xchg dword ptr [rbx], edi; add dword ptr [rax], eax; add byte ptr [rcx + 0xc6349c1], cl; mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x000000000000ad6a: xchg dword ptr [rcx + rax], edi; add byte ptr [rax], al; mov ecx, eax; movsxd rcx, dword ptr [r12 + rcx*4]; add rcx, r12; jmp rcx; 
0x00000000000104c5: xchg dword ptr [rdx + 6], ebx; add byte ptr [rax - 0x73], cl; add eax, 0xffffb1a0; mov esi, 0x49; call rax; 
0x0000000000039357: xchg dword ptr [rdx], eax; add byte ptr [rax + 0x63], cl; add al, 0xa9; add rax, rcx; jmp rax; 
0x000000000003260b: xchg dword ptr [rdx], edi; adc eax, 0x8d480000; adc eax, 0x2f275; movsxd rcx, dword ptr [rdx + rcx*4]; add rcx, rdx; jmp rcx; 
0x0000000000032591: xchg dword ptr [rsi + 0x48000015], esp; lea ecx, [rip + 0x2f2cf]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000010f73: xchg dword ptr [rsi], eax; add byte ptr [rcx + rax], ah; movzx eax, al; add rsp, 0x38; ret; 
0x000000000000a8aa: xchg dword ptr [rsi], ebp; add dword ptr [rax], eax; add byte ptr [rcx + 0xc6349c1], cl; mov word ptr [rcx + rax - 0x1f], cs; jmp rcx; 
0x000000000002998b: xchg dword ptr [rsi], ecx; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x000000000000cb3c: xchg eax, ebp; add byte ptr [rax], al; lea rdi, [rsp + 0x178]; call rax; 
0x000000000005bed9: xchg eax, ebp; add byte ptr [rax], al; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000005be98: xchg eax, ebp; add byte ptr [rax], al; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; mov edx, r15d; jmp rcx; 
0x000000000005bdc2: xchg eax, ebp; add byte ptr [rax], al; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x0000000000039212: xchg eax, ebp; rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop r14; pop r15; ret; 
0x000000000002fc85: xchg eax, ebp; ret 0x8366; 
0x0000000000041298: xchg eax, ebp; ret 0x840f; 
0x0000000000049ee9: xchg eax, ebp; ret 0xf41; 
0x0000000000031c87: xchg eax, ebp; ret 0xffbb; 
0x0000000000034067: xchg eax, ebp; ret 0xfffe; 
0x00000000000233c9: xchg eax, ebp; ret; 
0x0000000000024693: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000059161: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret 0xff48; 
0x00000000000203a6: xchg eax, ebx; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x000000000002fc8c: xchg eax, ebx; ret; 
0x000000000004f0ff: xchg eax, ebx; sar dword ptr [rax + 0x110000], 0x48; cmovae eax, edx; shl rax, 0x20; or rax, rcx; ret; 
0x00000000000205ea: xchg eax, ecx; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x000000000003d3d6: xchg eax, ecx; add rdi, rcx; jmp rdi; 
0x000000000001329b: xchg eax, ecx; mov rax, qword ptr [rsp + 0x50]; add rsp, 0x118; ret; 
0x000000000000cb3b: xchg eax, ecx; xchg eax, ebp; add byte ptr [rax], al; lea rdi, [rsp + 0x178]; call rax; 
0x00000000000592d9: xchg eax, edi; add byte ptr [rax], al; add dh, dh; ret 0xf01; 
0x00000000000204cc: xchg eax, edi; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x000000000001ffff: xchg eax, edi; add eax, 0x5e415b00; pop r15; ret; 
0x0000000000011b84: xchg eax, edi; shl byte ptr [rcx + rax], 0xf; mov dh, 0xc0; add rsp, 0x38; ret; 
0x000000000000dc1a: xchg eax, edx; call 0xecdc1f; lea rax, [rip + 0x2a999]; lea rdi, [rsp + 0x120]; call rax; 
0x00000000000197f2: xchg eax, edx; inc byte ptr [rip + 0xf012400]; mov dh, 0xc0; add rsp, 0x38; ret; 
0x00000000000219bf: xchg eax, edx; ret 0x3948; 
0x0000000000021a87: xchg eax, edx; ret 0x394c; 
0x000000000002686e: xchg eax, edx; ret 0x6948; 
0x000000000002694e: xchg eax, edx; ret 0x6b48; 
0x0000000000059624: xchg eax, edx; ret 0x8141; 
0x000000000005a585: xchg eax, edx; ret 0x8348; 
0x0000000000026d5e: xchg eax, edx; ret 0x8948; 
0x0000000000059687: xchg eax, edx; ret 0x894c; 
0x000000000005972d: xchg eax, edx; ret 0x8b48; 
0x0000000000009c7e: xchg eax, edx; ret 0x8d48; 
0x00000000000597bd: xchg eax, edx; ret 0x972; 
0x0000000000057982: xchg eax, edx; ret 0xc148; 
0x0000000000058d6d: xchg eax, edx; ret 0xe73; 
0x000000000004598f: xchg eax, edx; ret 0xf40; 
0x00000000000596bb: xchg eax, edx; ret 0xff81; 
0x0000000000058c5a: xchg eax, edx; ret; 
0x000000000005efa0: xchg eax, edx; rol dword ptr [rbx - 0x7c7e39], 0x21; setb al; or al, cl; ret; 
0x000000000005efa9: xchg eax, edx; ror byte ptr [rax], 0xc8; ret; 
0x0000000000058f72: xchg eax, edx; ror byte ptr [rdi], 0x83; cwde; add dword ptr [rax], eax; add byte ptr [rcx - 1], cl; ret 0xff48; 
0x000000000005915d: xchg eax, edx; ror byte ptr [rdi], 0x83; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rcx - 1], cl; ret 0xff48; 
0x000000000002a2dd: xchg eax, edx; shl byte ptr [rax], 0xc8; ret; 
0x000000000002a360: xchg eax, edx; shl dword ptr [rax], 0xc1; movzx eax, cl; ret; 
0x0000000000045dca: xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x00000000000169e6: xchg eax, esi; add byte ptr [rax], al; call rax; 
0x000000000005be00: xchg eax, esi; add byte ptr [rax], al; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x0000000000034992: xchg eax, esi; add rcx, r14; jmp rcx; 
0x0000000000039c12: xchg eax, esi; add rdx, rsi; jmp rdx; 
0x000000000000de26: xchg eax, esi; cmpsd dword ptr [rsi], dword ptr [rdi]; add al, byte ptr [rax]; lea rdi, [rsp + 0x128]; call rax; 
0x00000000000405c0: xchg eax, esi; ret 0xd184; 
0x000000000005b720: xchg eax, esp; adc dword ptr [r8 - 0x77], ecx; fcomp dword ptr [rbx + 0x41]; pop rsi; pop r15; ret; 
0x00000000000331aa: xchg eax, esp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000005bfb0: xchg eax, esp; add byte ptr [rax], al; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x00000000000207bb: xchg eax, esp; add eax, 0x5c415b00; pop r13; pop r14; pop r15; ret; 
0x000000000002ed56: xchg eax, esp; and al, 0x60; add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret 0xc148; 
0x0000000000033ddc: xchg eax, esp; and al, 0xb4; add byte ptr [rax], al; add byte ptr [rcx], cl; ret 0xc148; 
0x0000000000045707: xchg eax, esp; and al, 0xc0; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0xc148; 
0x000000000003dd58: xchg eax, esp; rcr byte ptr [rbx + 0x41], 0x5e; pop r15; ret; 
0x00000000000555ec: xchg eax, esp; ret 0x4c89; 
0x0000000000058e63: xchg eax, esp; ret 0x61eb; 
0x000000000005600f: xchg eax, esp; ret 0x8040; 
0x0000000000059f87: xchg eax, esp; ret 0x8348; 
0x0000000000009d58: xchg eax, esp; ret 0x8948; 
0x0000000000044bfa: xchg eax, esp; ret 0x8b48; 
0x0000000000026f18: xchg eax, esp; ret 0x8d48; 
0x000000000002190c: xchg eax, esp; ret 0xc208; 
0x00000000000583b7: xchg eax, esp; ret 0xca20; 
0x0000000000039cd1: xchg eax, esp; ret 0xf280; 
0x000000000003f289: xchg eax, esp; ret 0xf48; 
0x0000000000039603: xchg eax, esp; ret; 
0x000000000001ac82: xchg eax, esp; shl byte ptr [rcx + rax], 0xf; mov dh, 0xc0; add rsp, 0x20; ret; 
0x0000000000032721: xchg ecx, esi; add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000000afda: xchg esi, edx; add al, byte ptr [rax]; add byte ptr [rcx + 0x46349c0], cl; test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x000000000005bf16: xchg rax, rbp; add byte ptr [rax], al; movsxd rcx, dword ptr [rax + rcx*4]; add rcx, rax; jmp rcx; 
0x000000000001c2be: xlatb; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x3d6]; call rax; 
0x000000000001532e: xlatb; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x926]; call rax; 
0x0000000000018da1: xlatb; add byte ptr [rax], al; add byte ptr [rcx], al; lea rax, [rip + 0x39b3]; lea rdi, [rsp + 0x28]; call rax; 
0x0000000000057e2f: xlatb; add byte ptr [rax], al; mov edx, 0xe; jmp rax; 
0x000000000000ec4a: xlatb; add rsp, 0x18; ret; 
0x000000000000dd3d: xlatb; lea rax, [rip + 0x2a87b]; lea rdi, [rsp + 0x68]; call rax; 
0x000000000000d905: xlatb; lea rax, [rip + 0x2acb3]; lea rdi, [rsp + 0x68]; call rax; 
0x000000000005a340: xlatb; mov bl, 0; add byte ptr [rdx + 2], bh; call qword ptr [rax + 0x18]; 
0x000000000005ebe0: xlatb; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1a8ea]; add rsp, 0x28; ret; 
0x000000000005eab0: xlatb; mov esi, 1; xor ecx, ecx; call qword ptr [rip + 0x1aa1a]; add rsp, 0x28; ret; 
0x0000000000041de2: xlatb; mov r14d, dword ptr [rax]; mov edi, r14d; call rbx; 
0x00000000000537d1: xlatb; mov rax, rbx; pop rbx; pop r14; pop r15; ret; 
0x0000000000058207: xlatb; ret 0xff3d; 
0x000000000005dd31: xlatb; ret; 
0x000000000004aad6: xlatb; rol dword ptr [rbp + 0x660d74c0], 0xf; mov esp, 0xd0b70fc0; mov eax, 1; ret; 
0x000000000005e987: xlatb; xor ecx, ecx; call qword ptr [rip + 0x1ab48]; add rsp, 0x30; pop rbx; ret; 
0x0000000000018728: xor al, 0x1f; add byte ptr [rax], al; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000005bcce: xor al, 0x24; add rsi, r15; mov rdi, r13; mov rdx, r9; mov rax, qword ptr [rsp + 0x30]; call qword ptr [rax + 0x18]; 
0x000000000003da8e: xor al, 0x24; lea rdx, [rsp + 8]; mov qword ptr [rsp + 8], rbp; movups xmm0, xmmword ptr [rcx]; movups xmmword ptr [rsp + 0x10], xmm0; call qword ptr [rax + 0x20]; 
0x000000000001bae6: xor al, 0x24; mov byte ptr [rdi + 0xc], 0xb; mov dword ptr [rdi + 8], 0; mov qword ptr [rdi], rsi; pop rcx; ret; 
0x0000000000019ae6: xor al, 0x24; mov rax, rdi; mov qword ptr [rsp + 8], rax; lea rax, [rip + 0x3fee9]; call rax; 
0x000000000005ac38: xor al, 0x28; mov rdx, qword ptr [rax + r13 + 8]; call qword ptr [rcx + 0x18]; 
0x000000000005abe6: xor al, 0x33; call qword ptr [rax + 0x18]; 
0x000000000005b0b5: xor al, 0x48; cmp eax, -1; je 0x5b0cd; mov rdi, r15; mov esi, ebx; call qword ptr [rbp + 0x20]; 
0x000000000000cf68: xor al, 0xae; add al, byte ptr [rax]; lea rdi, [rsp + 0xd0]; call rax; 
0x000000000003a39f: xor al, 0xb4; add rsi, r12; jmp rsi; 
0x00000000000308ea: xor al, 0xb7; add rsi, rdi; jmp rsi; 
0x000000000005bdc7: xor al, 0xb9; add rsi, rcx; jmp rsi; 
0x000000000001a861: xor al, 0xff; and al, 1; movzx eax, al; add rsp, 0x10; ret; 
0x0000000000020ff9: xor al, 1; add byte ptr [rax], al; nop dword ptr [rax]; movzx edi, al; call rbx; 
0x0000000000042791: xor al, 1; movzx eax, al; lea eax, [rax + rax*8]; add rsp, 0x28; ret; 
0x0000000000036591: xor al, 4; add byte ptr [rdi], cl; or ecx, dword ptr [rax - 0x77]; ret; 
0x0000000000012b5c: xor al, 6; add byte ptr [rax - 0x73], cl; add eax, 0xffff8b0a; mov esi, 0x2b; call rax; 
0x0000000000034725: xor al, byte ptr [rip + 0x6b490000]; sal dword ptr [rax + 0x48], 0xc7; ret; 
0x000000000004ca07: xor al, ch; ret; 
0x000000000000e58c: xor al, ch; sahf; xor eax, 0x1a80000; jne 0xe59b; add rsp, 0x38; ret; 
0x00000000000197ef: xor bh, bh; adc eax, 0x5fe92; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x0000000000016c8c: xor bh, bh; adc eax, 0x62c65; test al, 1; jne 0x16c9c; add rsp, 0x38; ret; 
0x0000000000010f6f: xor bh, bh; adc eax, 0x68712; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x000000000000c9ca: xor bh, byte ptr [rbx]; add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x2af09; call rax; 
0x000000000003a397: xor bh, byte ptr [rdx + 6]; movsxd rsi, dword ptr [r12 + rsi*4]; add rsi, r12; jmp rsi; 
0x000000000005b5c2: xor byte ptr [r12 + r8], r12b; shr al, 2; ret; 
0x000000000005ecab: xor byte ptr [r14*2 + 0x3e8b491a], r8b; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x6a68]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df6c: xor byte ptr [r14*2 + 0x3e8b491a], r8b; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x77a7]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7a1: xor byte ptr [r14*2 + 0x3e8b491a], r8b; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x9f72]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a29d: xor byte ptr [r14*2 + 0x3f8b4920], r8b; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xb476]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b5d2: xor byte ptr [r8 + r10], r12b; shr al, 4; ret; 
0x000000000005b5e2: xor byte ptr [r8 + r12], r12b; shr al, 5; ret; 
0x0000000000012d73: xor byte ptr [r8 - 0x75], r9b; and al, 0x38; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x0000000000012b0a: xor byte ptr [r8 - 0x75], r9b; and al, 0x58; mov qword ptr [rdi + 0x38], rcx; add rsp, 0xa0; ret; 
0x000000000004b87f: xor byte ptr [rax + 0x6b], cl; ret; 
0x0000000000046a02: xor byte ptr [rax + 1], cl; ret 0xc148; 
0x000000000001945e: xor byte ptr [rax + rax], al; lea rdi, [rsp + 0x630]; call rax; 
0x000000000005b5d3: xor byte ptr [rax + rdx], ah; shr al, 4; ret; 
0x000000000002f1f9: xor byte ptr [rax - 0x3f], cl; out 4, al; mov edx, 8; mov rdi, r12; lea rbx, [rip - 0x1a4ad]; call rbx; 
0x0000000000032f9d: xor byte ptr [rax - 0x3f], cl; out 4, al; mov edx, 8; mov rdi, r15; lea rbx, [rip - 0x1e251]; call rbx; 
0x000000000001522b: xor byte ptr [rax - 0x73], cl; add eax, 0xffff639d; call rax; 
0x000000000000fa4b: xor byte ptr [rax - 0x73], cl; add eax, 0xffffbb7d; call rax; 
0x000000000001435c: xor byte ptr [rax - 0x73], cl; or eax, 0x61cbc; lea rax, [rip - 0x89db]; lea rdx, [rsp + 0x30]; call rax; 
0x000000000005a0b0: xor byte ptr [rax - 0x73], cl; xor eax, 0xb661; mov edx, 2; call qword ptr [rax + 0x18]; 
0x00000000000196a5: xor byte ptr [rax - 0x75], cl; and al, 0x28; mov rdx, qword ptr [rsp + 0x30]; add rsp, 0x38; ret; 
0x0000000000012d74: xor byte ptr [rax - 0x75], cl; and al, 0x38; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x0000000000012b0b: xor byte ptr [rax - 0x75], cl; and al, 0x58; mov qword ptr [rdi + 0x38], rcx; add rsp, 0xa0; ret; 
0x000000000005b942: xor byte ptr [rax - 0x75], cl; and byte ptr [rcx + rcx*4 - 0x11], cl; mov esi, 0x22; mov qword ptr [rsp + 0x38], rax; call rax; 
0x000000000001559e: xor byte ptr [rax - 0x75], cl; jl 0x155c7; sub byte ptr [rax - 0x73], cl; add eax, 0xffff6025; call rax; 
0x000000000001c52e: xor byte ptr [rax - 0x75], cl; jl 0x1c557; sub byte ptr [rax - 0x73], cl; add eax, 0xfffef095; call rax; 
0x000000000001157e: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; add rsp, 0xb8; ret; 
0x000000000001a54c: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; lea rax, [rip + 0x417]; call rax; 
0x00000000000129f3: xor byte ptr [rax - 0x77], cl; and al, 0x38; lea rdx, [rip + 0x635b0]; lea rax, [rip + 0x47a09]; lea rsi, [rsp + 0x38]; call rax; 
0x0000000000011574: xor byte ptr [rax - 0x77], cl; and al, 0x38; mov rax, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; add rsp, 0xb8; ret; 
0x000000000001785c: xor byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x75], cl; and al, 0x10; add rsp, 0x40; ret; 
0x0000000000017aba: xor byte ptr [rax - 0x77], cl; or sil, al; add byte ptr [rcx], al; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x40; ret; 
0x0000000000012d70: xor byte ptr [rax - 0x77], cl; xor byte ptr [r8 - 0x75], r9b; and al, 0x38; mov qword ptr [rdi + 0x38], rcx; add rsp, 0x40; ret; 
0x0000000000043c96: xor byte ptr [rax - 0x7d], cl; ret 0x4838; 
0x000000000002fb8e: xor byte ptr [rax - 0x7d], cl; ret; 
0x0000000000059e35: xor byte ptr [rax - 1], cl; ret 0x3948; 
0x000000000005b5e3: xor byte ptr [rax], ah; shr al, 5; ret; 
0x000000000000dec4: xor byte ptr [rax], al; add bl, ch; add byte ptr [rax - 0x73], cl; add eax, 0x29a10; call rax; 
0x0000000000012b79: xor byte ptr [rax], al; add byte ptr [rax], al; call 0x9078; mov rax, qword ptr [rsp + 8]; add rsp, 0x48; ret; 
0x000000000005adfd: xor byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rbx + 0x20]; 
0x000000000005bdba: xor byte ptr [rax], al; add byte ptr [rax], al; lea rcx, [rip + 0x95ff]; movsxd rsi, dword ptr [rcx + r15*4]; add rsi, rcx; jmp rsi; 
0x00000000000423a4: xor byte ptr [rbp + 3], bh; add byte ptr [rax - 0x7b], cl; ror byte ptr [rax - 0x73], 0xd; mov esi, 0x48ffff9b; cmovne ecx, eax; call rcx; 
0x0000000000043c30: xor byte ptr [rbx + 0x41], bl; pop rsi; pop r15; ret; 
0x000000000002fad4: xor byte ptr [rbx + rax], bl; add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; xor edx, edx; jmp rax; 
0x0000000000045b26: xor byte ptr [rbx], al; add byte ptr [rax], al; call rbx; 
0x000000000000d576: xor byte ptr [rbx], al; add byte ptr [rax], al; lea rax, [rip + 0x4ef9f]; lea rdi, [rsp + 0x260]; mov qword ptr [rsp + 0x40], rdi; call rax; 
0x00000000000466b2: xor byte ptr [rbx], al; add byte ptr [rax], al; mov rbp, rcx; call rcx; 
0x0000000000041de5: xor byte ptr [rcx + rcx*4 - 9], al; call rbx; 
0x000000000001caf7: xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x10], rdx; add rsp, 0x138; ret; 
0x000000000000bddb: xor byte ptr [rdi], cl; adc byte ptr [rsp + 0x28], al; movups xmmword ptr [rcx], xmm0; add rsp, 0xb8; ret; 
0x000000000001647a: xor byte ptr [rdi], cl; adc byte ptr [rsp + 0x38], al; movaps xmmword ptr [rsp + 0x20], xmm0; lea rax, [rip + 0x3b14]; lea rdx, [rsp + 0x20]; call rax; 
0x0000000000058e61: xor byte ptr [rdi], cl; xchg eax, esp; ret 0x61eb; 
0x0000000000039601: xor byte ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000004c838: xor byte ptr [rip - 0xb80000], al; ret 0x3948; 
0x000000000005ecac: xor byte ptr [rsi*2 + 0x3e8b491a], al; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x6a68]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df6d: xor byte ptr [rsi*2 + 0x3e8b491a], al; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x77a7]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7a2: xor byte ptr [rsi*2 + 0x3e8b491a], al; mov rax, qword ptr [r14 + 8]; lea rsi, [rip + 0x9f72]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a29e: xor byte ptr [rsi*2 + 0x3f8b4920], al; mov rax, qword ptr [r15 + 8]; lea rsi, [rip + 0xb476]; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000019465: xor byte ptr [rsi], al; add byte ptr [rax], al; call rax; 
0x000000000005b5c3: xor byte ptr [rsp + rax], ah; shr al, 2; ret; 
0x000000000005769b: xor cl, byte ptr [rax - 1]; leave; mov rax, rdx; neg rax; and rax, rcx; ret; 
0x000000000005a4a4: xor dh, dh; add dword ptr [rax], eax; pop rcx; ret; 
0x000000000003c512: xor dl, dl; add eax, dword ptr [rax]; mov r15, rax; mov rdi, rax; call qword ptr [rdx + 0x18]; 
0x0000000000046bee: xor dword ptr [rax - 0x77], ecx; ret 0x3949; 
0x000000000004cc59: xor dword ptr [rax - 1], ecx; ret 0x8948; 
0x0000000000039608: xor dword ptr [rbx + 0x48d88901], esi; add esp, 0x20; pop rbx; ret; 
0x000000000005790b: xor dword ptr [rcx - 1], 0xffffffff; inc dword ptr [rcx + 0xf]; scasd eax, dword ptr [rdi]; ret 0xd001; 
0x000000000005278d: xor eax, 0x11e1e; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000004f8cb: xor eax, 0x14a78; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000000e58f: xor eax, 0x1a80000; jne 0xe59b; add rsp, 0x38; ret; 
0x0000000000039c0a: xor eax, 0x27f8d; movsxd rdx, dword ptr [rsi + rdx*4]; add rdx, rsi; jmp rdx; 
0x000000000005ec47: xor eax, 0x39e0; mov edx, 4; call qword ptr [rax + 0x18]; 
0x00000000000194a9: xor eax, 0x475a3; lea rax, [rip + 0x336b]; mov edi, 0x27; mov edx, 0x1b; call rax; 
0x000000000000f1a7: xor eax, 0x48000000; add esp, 0x28; ret; 
0x0000000000015d47: xor eax, 0x4800005b; add esp, 0x48; ret; 
0x0000000000016df7: xor eax, 0x5800062f; ret; 
0x000000000001bba4: xor eax, 0x5a7bf; lea rax, [rip - 0x48b0]; call rax; 
0x0000000000018fb7: xor eax, 0x5d28c; lea rax, [rip - 0xd9d3]; lea rdi, [rsp + 0x28]; call rax; 
0x00000000000162a3: xor eax, 0x5fe88; lea rax, [rip - 0xacbf]; call rax; 
0x000000000000e902: xor eax, 0x675d1; lea rax, [rip - 0x331e]; call rax; 
0x000000000005ef6d: xor eax, 0x67ae; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ecd3: xor eax, 0x683b; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000000c8e4: xor eax, 0x69307; call 0x14500; add rsp, 0x128; ret; 
0x000000000000c5a3: xor eax, 0x69588; lea rax, [rip - 0xfbf]; call rax; 
0x000000000005ecb9: xor eax, 0x6a68; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005eed1: xor eax, 0x71ef; mov edx, 9; call qword ptr [rax + 0x18]; 
0x000000000005f12d: xor eax, 0x740d; mov edx, 0xb; jmp rax; 
0x000000000005ec0d: xor eax, 0x74ae; mov edx, 5; jmp rax; 
0x000000000005df94: xor eax, 0x757a; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005df7a: xor eax, 0x77a7; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ddec: xor eax, 0x792f; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005ddec: xor eax, 0x792f; mov edx, 1; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000005ddd0: xor eax, 0x794c; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005ddd0: xor eax, 0x794c; mov edx, 2; call qword ptr [rax + 0x18]; add rsp, 0x20; pop rbx; ret; 
0x000000000005df08: xor eax, 0x81a2; mov edx, 0x11; call qword ptr [rax + 0x18]; 
0x000000000005dd66: xor eax, 0x8315; mov edx, 0xd; call qword ptr [rax + 0x18]; 
0x00000000000129fd: xor eax, 0x8d480006; add eax, 0x47a09; lea rsi, [rsp + 0x38]; call rax; 
0x000000000005b8a3: xor eax, 0x9c6b; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7c9: xor eax, 0x9d45; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b8e3: xor eax, 0x9d67; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b888: xor eax, 0x9e99; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b7af: xor eax, 0x9f72; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005b6c8: xor eax, 0xa053; mov edx, 1; call qword ptr [rax + 0x18]; 
0x0000000000059edd: xor eax, 0xb0f2; mov rax, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000005a2cb: xor eax, 0xb243; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a439: xor eax, 0xb2ea; mov edx, 1; jmp rax; 
0x000000000005a3f4: xor eax, 0xb320; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a36d: xor eax, 0xb3b5; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a33f: xor eax, 0xb3d7; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a2ab: xor eax, 0xb476; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a259: xor eax, 0xb4bb; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a1bd: xor eax, 0xb561; mov edx, 2; call qword ptr [rax + 0x18]; 
0x000000000005a10b: xor eax, 0xb610; mov edx, 1; call qword ptr [rax + 0x18]; 
0x000000000005a10b: xor eax, 0xb610; mov edx, 1; call qword ptr [rax + 0x18]; mov byte ptr [rbx + 8], al; pop rbx; ret; 
0x000000000005a0b3: xor eax, 0xb661; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000059ff1: xor eax, 0xb720; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000059fbb: xor eax, 0xb754; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000058584: xor eax, 0xd073; mov edx, 2; mov rdi, r15; call qword ptr [rbx + 0x18]; 
0x00000000000582ee: xor eax, 0xd30b; mov edx, 3; call qword ptr [rax + 0x18]; 
0x0000000000058235: xor eax, 0xd3c2; mov edx, 2; call qword ptr [rax + 0x18]; 
0x0000000000057e8a: xor eax, 0xd469; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000057e5e: xor eax, 0xd485; movsxd rcx, dword ptr [rsi + rcx*4]; add rcx, rsi; jmp rcx; 
0x0000000000057e2d: xor eax, 0xd764; mov edx, 0xe; jmp rax; 
0x0000000000036cbf: xor eax, 0xf000427; or ecx, dword ptr [rax - 0x77]; ret; 
0x00000000000443d5: xor eax, dword ptr [rax]; add byte ptr [rax - 1], cl; ret; 
0x00000000000194b2: xor eax, dword ptr [rax]; add byte ptr [rdi + 0x27], bh; mov edx, 0x1b; call rax; 
0x00000000000569e0: xor eax, dword ptr [rdx]; add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; nop dword ptr [rax]; ret; 
0x0000000000016388: xor eax, dword ptr [rsi]; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x18; ret; 
0x000000000001ee0b: xor eax, eax; add rsp, 0x10; pop rbx; pop r14; pop r15; ret; 
0x00000000000235e1: xor eax, eax; add rsp, 0x10; pop rbx; pop r14; pop rbp; ret; 
0x000000000001e7b3: xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000018302: xor eax, eax; add rsp, 0x18; ret; 
0x000000000004f840: xor eax, eax; add rsp, 0x20; pop rbx; pop r14; pop rbp; ret; 
0x000000000004f4f5: xor eax, eax; add rsp, 0x28; pop rbx; pop r14; ret; 
0x0000000000038e79: xor eax, eax; add rsp, 0x40; pop rbx; pop r14; pop r15; ret; 
0x000000000004aa65: xor eax, eax; add rsp, 8; pop rbx; pop r14; ret; 
0x0000000000010d52: xor eax, eax; and al, 1; movzx eax, al; add rsp, 0x18; ret; 
0x0000000000010d91: xor eax, eax; and al, 1; movzx eax, al; add rsp, 0x38; ret; 
0x0000000000049f5b: xor eax, eax; call qword ptr [rip + 0x2f605]; pop rbx; ret; 
0x000000000000a819: xor eax, eax; call qword ptr [rip + 0x6f147]; test rax, rax; jle 0xa7ca; pop rbx; ret; 
0x000000000005de92: xor eax, eax; mov byte ptr [r8], al; mov rax, r8; ret; 
0x000000000004ef4c: xor eax, eax; mov byte ptr [rdi], al; pop rbx; ret; 
0x00000000000137a5: xor eax, eax; mov ecx, eax; call 0x13340; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x00000000000137d5: xor eax, eax; mov ecx, eax; call 0x133a0; mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000056c4d: xor eax, eax; mov qword ptr [rbx], rax; add rsp, 8; pop rbx; pop r14; ret; 
0x00000000000409d0: xor eax, eax; mov qword ptr [rbx], rax; mov rax, rbx; pop rbx; ret; 
0x000000000003e9ad: xor eax, eax; mov qword ptr [rbx], rax; pop rbx; ret; 
0x000000000002a4d0: xor eax, eax; mov qword ptr [rdi], rax; add rsp, 0x28; ret; 
0x0000000000035e88: xor eax, eax; pop rbx; pop r14; pop r15; ret; 
0x00000000000091c3: xor eax, eax; pop rbx; ret; 
0x000000000000fa61: xor eax, eax; pop rcx; ret; 
0x000000000001c020: xor eax, eax; ret; 
0x00000000000395b6: xor ebx, ebx; lea rcx, [rip + 0x2859d]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000005bba7: xor ebx, ebx; mov r15d, r12d; jmp rax; 
0x000000000005f1cb: xor ebx, ebx; mov rax, r10; mov rdx, r11; ret; 
0x0000000000040885: xor ebx, ebx; mov rax, rbx; add rsp, 0x70; pop rbx; ret; 
0x000000000003789e: xor ebx, ebx; mov rax, rbx; pop rbx; pop r14; pop r15; ret; 
0x0000000000026630: xor ecx, dword ptr [rcx + rcx*4 - 8]; mov rdx, r14; pop rbx; pop r14; pop r15; ret; 
0x00000000000551b3: xor ecx, dword ptr [rcx - 0x7d]; ret; 
0x000000000001b992: xor ecx, ecx; call 0x1ae10; add rsp, 0x18; ret; 
0x000000000001da82: xor ecx, ecx; call 0x1d330; add rsp, 0x18; ret; 
0x000000000000e0b7: xor ecx, ecx; call 0xfb80; pop rcx; ret; 
0x000000000005ebe6: xor ecx, ecx; call qword ptr [rip + 0x1a8ea]; add rsp, 0x28; ret; 
0x000000000005eab6: xor ecx, ecx; call qword ptr [rip + 0x1aa1a]; add rsp, 0x28; ret; 
0x000000000005e988: xor ecx, ecx; call qword ptr [rip + 0x1ab48]; add rsp, 0x30; pop rbx; ret; 
0x000000000005e84f: xor ecx, ecx; call qword ptr [rip + 0x1ac81]; add rsp, 0x28; ret; 
0x000000000005e762: xor ecx, ecx; call qword ptr [rip + 0x1ad6e]; add rsp, 0x28; ret; 
0x000000000005e6b4: xor ecx, ecx; call qword ptr [rip + 0x1ae1c]; add rsp, 0x88; ret; 
0x000000000005e47f: xor ecx, ecx; call qword ptr [rip + 0x1b051]; add rsp, 0x88; ret; 
0x000000000002a2d3: xor ecx, ecx; cmp rdx, 0x100; setb al; and al, cl; ret; 
0x00000000000599fc: xor ecx, ecx; mov byte ptr [rax], cl; ret; 
0x000000000000c65e: xor ecx, ecx; mov edi, ecx; call rax; 
0x000000000005c6f6: xor ecx, ecx; mov qword ptr [rax], rcx; pop rbx; pop r14; pop rbp; ret; 
0x0000000000056d2e: xor ecx, ecx; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x0000000000056d48: xor ecx, ecx; mov rdx, rsi; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x00000000000599ce: xor ecx, ecx; mov word ptr [rax], cx; ret; 
0x000000000004f0ec: xor ecx, ecx; shl rax, 0x20; or rax, rcx; ret; 
0x0000000000035628: xor edx, edx; call rbp; cmp eax, -1; jne 0x356f8; call rbx; 
0x00000000000426e1: xor edx, edx; call rbx; 
0x000000000002fadf: xor edx, edx; jmp rax; 
0x00000000000167ca: xor esi, esi; call rax; 
0x000000000001c783: xor esi, esi; mov edx, 0x80; call 0x9070; mov rax, qword ptr [rsp]; add rsp, 0x28; ret; 
0x0000000000056d63: xor esi, esi; mov qword ptr [rax], rdx; mov qword ptr [rax + 8], rcx; mov qword ptr [rax + 0x10], rsi; ret; 
0x000000000005f2c5: xor esi, esi; mov r11, rdx; mov rax, r11; mov rdx, rsi; ret; 
0x00000000000426d0: xor esi, esi; mov rdx, qword ptr [rsp + 0x38]; call rbx; 
0x000000000005c042: xor esp, esp; mov ebp, edx; jmp rax; 
0x000000000005f1ca: xor r11d, r11d; mov rax, r10; mov rdx, r11; ret; 
0x000000000005c041: xor r12d, r12d; mov ebp, edx; jmp rax; 
0x0000000000049f5a: xor r8d, r8d; call qword ptr [rip + 0x2f605]; pop rbx; ret; 
0x000000000004cb6f: xorps xmm0, xmm0; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0xc], xmm0; ret; 
0x00000000000354e8: xorps xmm0, xmm0; movups xmmword ptr [rdi], xmm0; pop rbx; pop r14; pop rbp; ret; 

14483 gadgets found
