


Gadgets
=======


0x0000000000032b9a: adc ah, byte ptr [rbp - 0x366f0001]; ret; 
0x000000000002961a: adc ah, byte ptr [rbp - 0x76b70001]; ret 0x8d48; 
0x00000000000292b8: adc al, 0; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002fb56: adc al, 0; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000002fbd1: adc al, 0; add byte ptr [rax], bh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000321b5: adc al, 0; add cl, cl; ret; 
0x0000000000023ec3: adc al, 0x48; mov eax, dword ptr [rip + 0x37125]; test rax, rax; je 0x23ed8; jmp rax; 
0x000000000003d322: adc al, 0x5d; ret; 
0x000000000004284d: adc al, 0xff; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000042b47: adc al, 1; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f6af: adc al, byte ptr [eax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000025aa8: adc al, byte ptr [rax + rax]; add cl, cl; ret; 
0x000000000002f5bd: adc al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003144f: adc al, byte ptr [rax]; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000002f6da: adc al, byte ptr [rax]; add byte ptr [rax], bh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002f571: adc al, byte ptr [rax]; add cl, cl; ret; 
0x0000000000037393: adc al, byte ptr [rdx]; add byte ptr [rax], al; leave; ret; 
0x0000000000030592: adc bl, byte ptr [rax]; add byte ptr [rax], al; nop; leave; ret; 
0x000000000004283e: adc byte ptr [rax + 0x39], cl; ret 0x3c74; 
0x0000000000032258: adc byte ptr [rax + rax], dl; add cl, cl; ret; 
0x000000000003b2fc: adc byte ptr [rax - 0x74b70002], cl; pop rbp; clc; leave; ret; 
0x000000000003bb3d: adc byte ptr [rax - 0x75], cl; call 0xffffffffc23cbbd1; sete al; pop rbp; ret; 
0x000000000003af3e: adc byte ptr [rax - 0x75], cl; clc; mov byte ptr [rax + 8], dl; nop; leave; ret; 
0x000000000002a617: adc byte ptr [rax - 0x75], cl; clc; mov byte ptr [rax], dl; nop; pop rbp; ret; 
0x000000000002b39c: adc byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax], rdx; nop; leave; ret; 
0x000000000002c540: adc byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000037c8b: adc byte ptr [rax - 0x75], cl; clc; pop rbp; ret; 
0x00000000000420fe: adc byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x000000000003b741: adc byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000030771: adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000002572b: adc byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000002f316: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000003189d: adc byte ptr [rax], al; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000036e3d: adc byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x00000000000325f3: adc byte ptr [rax], al; add cl, cl; ret; 
0x0000000000044d27: adc byte ptr [rbp - 0x10], al; movss dword ptr [rax + 4], xmm0; nop; pop rbp; ret; 
0x0000000000033d3b: adc byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000031267: adc byte ptr [rbx - 0x74b70001], 0x13; mov qword ptr [rax], rdx; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000025e5c: adc byte ptr [rbx], al; add byte ptr [rax], al; nop; leave; ret; 
0x000000000004106d: adc byte ptr [rdi], cl; mov dh, 0x45; add ecx, 0xe08302e0; or al, 0x89; ret 0xb60f; 
0x000000000002906c: adc byte ptr [rdx - 0x76b70001], ch; ret 0x8b48; 
0x000000000002ce73: adc byte ptr [rdx], al; add byte ptr [rax], al; mov rdi, rax; call 0x2ba16; leave; ret; 
0x000000000002f315: adc byte ptr ds:[rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000038a82: adc cl, byte ptr [rax - 0x7d]; ret 0x4818; 
0x0000000000043b37: adc cl, byte ptr [rax - 0x7d]; ret 0x4820; 
0x0000000000043f07: adc cl, byte ptr [rax - 0x7d]; ret 0x4830; 
0x0000000000044662: adc cl, byte ptr [rax - 0x7d]; ret 0x4838; 
0x0000000000038ff9: adc cl, byte ptr [rax - 0x7d]; ret 0x4c10; 
0x0000000000043d34: adc cl, byte ptr [rax - 0x7d]; ret 0x4c28; 
0x00000000000283a5: adc cl, byte ptr [rdi]; mov bh, 0x45; out 0x89, al; ret 0x8b48; 
0x0000000000042a8b: adc dh, bh; dec ecx; ret; 
0x0000000000030cec: adc dl, byte ptr [rsi]; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000044d2c: adc dword ptr [rax + 4], eax; nop; pop rbp; ret; 
0x000000000002f43a: adc dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000000315c3: adc dword ptr [rax], eax; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000002f5e7: adc dword ptr [rax], eax; add byte ptr [rax], bh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003252d: adc dword ptr [rax], eax; add cl, cl; ret; 
0x0000000000039856: adc dword ptr [rax], eax; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 8], 0; nop; pop rbp; ret; 
0x000000000003c37b: adc dword ptr [rdi - 2], esi; dec ecx; ret; 
0x0000000000029b5b: adc dword ptr [rdx - 0x76b70001], esp; ret 0x8d48; 
0x000000000003a34d: adc dword ptr [rip - 0x366f0001], eax; ret; 
0x000000000003846b: adc dword ptr [rsi - 0x76b70002], esi; ret 0x8d48; 
0x000000000002f2ae: adc eax, 0x1016; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f340: adc eax, 0x1093; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f3d2: adc eax, 0x10f5; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f464: adc eax, 0x1157; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f4f6: adc eax, 0x11b9; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000003090b: adc eax, 0x48000018; mov edi, eax; call 0x32132; leave; ret; 
0x000000000002fd74: adc eax, 0x48900000; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000003c5f7: adc eax, 0x48fffe75; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000023e82: adc eax, 0x56058b48; jno 0x23e8c; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x000000000002fdc5: adc eax, 0x89480000; ret; 
0x0000000000042607: adc eax, 0x8b48fffe; pop rbp; clc; leave; ret; 
0x00000000000264a3: adc eax, 0x90000001; leave; ret; 
0x0000000000032b25: adc eax, 0x90000008; leave; ret; 
0x0000000000026cb5: adc eax, 0x9001eb01; nop; pop rbp; ret; 
0x000000000002eb44: adc eax, 0xa2d; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ebd6: adc eax, 0xa8e; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ec68: adc eax, 0xaef; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ecfa: adc eax, 0xb50; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x0000000000030dc7: adc eax, 0xb8900000; add byte ptr [rax], al; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002ed8c: adc eax, 0xbb1; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ee1e: adc eax, 0xc2e; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002fe45: adc eax, 0xc9900000; ret; 
0x000000000002eeb0: adc eax, 0xcab; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ef42: adc eax, 0xd28; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002efd4: adc eax, 0xda5; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f066: adc eax, 0xe22; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f0f8: adc eax, 0xe9f; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f18a: adc eax, 0xf1c; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f21c: adc eax, 0xf99; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x0000000000025a89: adc eax, dword ptr [rax + rax]; add cl, cl; ret; 
0x0000000000035f28: adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000002f896: adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002fa47: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000002f8c0: adc eax, dword ptr [rax]; add byte ptr [rax], bh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002f84a: adc eax, dword ptr [rax]; add cl, cl; ret; 
0x000000000003a4d9: adc eax, dword ptr [rsi]; add byte ptr [rax], al; nop; leave; ret; 
0x00000000000312da: adc eax, dword ptr ss:[rax]; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000039359: adc ebp, dword ptr [rdx - 0x76b70002]; ret 0x8d48; 
0x000000000002a169: adc ebx, dword ptr [rcx - 0x76b70001]; ret 0x8d48; 
0x0000000000029f59: adc ebx, dword ptr [rsi - 0x76b70001]; ret 0x8d48; 
0x000000000003076e: adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000043508: adc ecx, dword ptr [rcx - 0x74b76ff0]; pop rbp; clc; leave; ret; 
0x0000000000042889: adc edi, edi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000042932: adc esi, edi; dec ecx; ret; 
0x0000000000035f52: adc r8d, dword ptr [r8]; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000002bec5: add al, 0; add byte ptr [rax + 0x39], cl; fmul dword ptr [r15]; xchg eax, edi; ret; 
0x000000000003a2ea: add al, 0; add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000025371: add al, 0; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000002bb83: add al, 0; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003bd5a: add al, 0; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000026bc2: add al, 0; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000025a8a: add al, 0; add cl, cl; ret; 
0x000000000004333b: add al, 0x48; cmp dword ptr [rbp - 0x20], 0; jne 0x43314; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000439d2: add al, 0x48; mov eax, dword ptr [rbp - 8]; mov qword ptr [rax], rdx; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002afd5: add al, 0x48; mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003c228: add al, 0x48; mov edi, eax; call 0x23a90; leave; ret; 
0x0000000000041a01: add al, 0x85; ror byte ptr [rdi], 0x94; ret 0x8b48; 
0x0000000000027792: add al, 0x85; ror byte ptr [rdi], 0x95; ret 0x8b48; 
0x0000000000040f65: add al, 0x89; ret 0x458b; 
0x0000000000040bbd: add al, 0x89; ret 0x8b48; 
0x00000000000273af: add al, 0x8d; push rax; dec dword ptr [rcx + 0x1c001d0]; ret 0x6348; 
0x0000000000044d2e: add al, 0x90; pop rbp; ret; 
0x0000000000043592: add al, 0xfe; dec ecx; ret; 
0x0000000000033625: add al, 0xff; dec ecx; ret; 
0x0000000000043142: add al, 2; add byte ptr [rax], al; leave; ret; 
0x00000000000253e6: add al, 4; add byte ptr [rax], al; nop; leave; ret; 
0x000000000002b9fb: add al, 9; ret 0x8b48; 
0x000000000002c5b2: add al, byte ptr [r8]; add cl, cl; ret; 
0x0000000000036e8f: add al, byte ptr [r8]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x000000000002c577: add al, byte ptr [rax]; add bl, ch; add eax, 0xb8; add cl, cl; ret; 
0x000000000002c845: add al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; add cl, cl; ret; 
0x0000000000037372: add al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; call 0xffffffffe8cafcc5; ret 1; 
0x000000000002b2ba: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; call 0xffffffffe8483e0d; leave; ret; 
0x0000000000025189: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000025c61: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000002c61e: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003c523: add al, byte ptr [rax]; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000002b85d: add al, byte ptr [rax]; add byte ptr [rax], al; leave; ret; 
0x000000000002a562: add al, byte ptr [rax]; add byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000025f71: add al, byte ptr [rax]; add cl, cl; ret; 
0x000000000003368f: add al, byte ptr [rax]; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000037f08: add al, byte ptr [rax]; mov rdi, rax; call 0x23940; lea rax, [rip + 0x233b7]; pop rbp; ret; 
0x0000000000033531: add al, byte ptr [rax]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x0000000000037f17: add al, byte ptr [rax]; pop rbp; ret; 
0x0000000000024f6a: add al, byte ptr [rbx]; add byte ptr [rax], al; nop; leave; ret; 
0x000000000002632b: add al, byte ptr [rdx]; add byte ptr [rax], al; leave; ret; 
0x000000000004322d: add al, ch; mov eax, 0x88fffe73; sbb byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x00000000000394e7: add al, ch; ret; 
0x00000000000316bd: add al, ch; sub byte ptr [rdi - 0x366f0001], cl; ret; 
0x0000000000033a10: add bh, bh; dec ecx; ret; 
0x0000000000043845: add bh, dh; dec ecx; ret; 
0x0000000000031e54: add bl, byte ptr [rax]; add byte ptr [rax], al; leave; ret; 
0x0000000000027db3: add bl, ch; add eax, 0xb8; add cl, cl; ret; 
0x0000000000026d69: add bl, ch; add eax, 0xba; add byte ptr [rcx], cl; ret 0x8b48; 
0x00000000000380be: add bl, ch; add eax, 0xffffffb8; dec ecx; ret; 
0x00000000000439a9: add byte ptr [r8], al; add byte ptr [rax - 0x75], cl; add byte ptr [rax + 0x39], cl; ret; 
0x000000000002b690: add byte ptr [r8], r8b; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x75], 0x45; fmul dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000033e04: add byte ptr [r8], r8b; add cl, cl; ret; 
0x000000000002bec7: add byte ptr [rax + 0x39], cl; fmul dword ptr [r15]; xchg eax, edi; ret; 
0x000000000002afca: add byte ptr [rax + 0x39], cl; ret 0x673; 
0x0000000000039c9d: add byte ptr [rax + 0x39], cl; ret 0x950f; 
0x0000000000033cc7: add byte ptr [rax + 0x39], cl; ret; 
0x0000000000030879: add byte ptr [rax + 0xb8], dl; add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x000000000003fe38: add byte ptr [rax + 1], cl; ror byte ptr [rdi], 1; mov dh, 0; leave; ret; 
0x0000000000040291: add byte ptr [rax + 1], cl; ror byte ptr [rdi], 1; mov dh, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003f845: add byte ptr [rax + 1], cl; ror byte ptr [rdi], 1; mov dh, 0; pop rbp; ret; 
0x000000000002762a: add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x000000000004396e: add byte ptr [rax + rax*8 - 0x74b74d8b], al; call 0xfffffffff861c4c3; leave; ret; 
0x000000000002bc80: add byte ptr [rax + rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000042251: add byte ptr [rax - 0x75], cl; add byte ptr [rax + 0x39], cl; ret; 
0x000000000002c847: add byte ptr [rax - 0x75], cl; add cl, cl; ret; 
0x0000000000041a7e: add byte ptr [rax - 0x75], cl; call 0x1795b4d; movzx eax, byte ptr [rbp - 1]; pop rbp; ret; 
0x0000000000025345: add byte ptr [rax - 0x75], cl; call 0x31a96; add byte ptr [rax], al; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000037374: add byte ptr [rax - 0x75], cl; call 0xffffffffe8cafcc5; ret 1; 
0x000000000002cd36: add byte ptr [rax - 0x75], cl; clc; add rax, rdx; leave; ret; 
0x000000000003ede7: add byte ptr [rax - 0x75], cl; clc; add rax, rdx; pop rbp; ret; 
0x0000000000033734: add byte ptr [rax - 0x75], cl; clc; leave; ret; 
0x0000000000028edb: add byte ptr [rax - 0x75], cl; clc; mov byte ptr [rax + 0x32], 0; nop; leave; ret; 
0x0000000000033863: add byte ptr [rax - 0x75], cl; clc; mov dword ptr [rax + 4], 0; nop; pop rbp; ret; 
0x00000000000254f9: add byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax + 0x10], 0; nop; leave; ret; 
0x000000000002a884: add byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax + 0x10], 0; nop; pop rbp; ret; 
0x0000000000039857: add byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax + 8], 0; nop; pop rbp; ret; 
0x0000000000024ebe: add byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x000000000002ccc6: add byte ptr [rax - 0x75], cl; fmul dword ptr [r8 + 1]; ror cl, 1; ret; 
0x000000000002aa56: add byte ptr [rax - 0x75], cl; mov r8d, 0xe8c78948; fldcw word ptr [rcx - 0x76b70001]; ret 0x8b48; 
0x0000000000027c61: add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x000000000002a9e9: add byte ptr [rax - 0x77], cl; call 0x16eda; inc dword ptr [rax + rax*8 - 0x74b7a78c]; mov r8d, 0xe8c78948; cmp dword ptr [rdx - 0x76b70001], ebp; ret 0x8b48; 
0x000000000002b2bc: add byte ptr [rax - 0x77], cl; call 0xffffffffe8483e0d; leave; ret; 
0x000000000002ca04: add byte ptr [rax - 0x77], cl; call 0xffffffffe8485555; leave; ret; 
0x000000000003970a: add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x000000000002518b: add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000002400c: add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000025328: add byte ptr [rax - 0x77], cl; ret; 
0x000000000002b693: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x75], 0x45; fmul dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000039b85: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x75], 0x45; ror byte ptr [rax - 0x77], 1; ret 0x8948; 
0x0000000000041d3b: add byte ptr [rax - 0x77], dh; ret 0xb60f; 
0x0000000000025350: add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000023eca: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x0000000000023e89: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x000000000002300e: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000039d88: add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x48; mov edi, eax; call 0x25f76; leave; ret; 
0x000000000003ed39: add byte ptr [rax - 0x7d], cl; shl byte ptr [rax], 0xc9; ret; 
0x0000000000039830: add byte ptr [rax - 9], cl; jne 0x3981d; mov rax, rdx; pop rbp; ret; 
0x0000000000023e93: add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x00000000000394e5: add byte ptr [rax], al; add al, ch; ret; 
0x00000000000316bb: add byte ptr [rax], al; add al, ch; sub byte ptr [rdi - 0x366f0001], cl; ret; 
0x0000000000027db1: add byte ptr [rax], al; add bl, ch; add eax, 0xb8; add cl, cl; ret; 
0x0000000000026d67: add byte ptr [rax], al; add bl, ch; add eax, 0xba; add byte ptr [rcx], cl; ret 0x8b48; 
0x00000000000380bc: add byte ptr [rax], al; add bl, ch; add eax, 0xffffffb8; dec ecx; ret; 
0x0000000000033cc5: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000439aa: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add byte ptr [rax + 0x39], cl; ret; 
0x000000000002cd34: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; clc; add rax, rdx; leave; ret; 
0x000000000003ede5: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; clc; add rax, rdx; pop rbp; ret; 
0x0000000000033ad7: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; clc; leave; ret; 
0x000000000002ccc4: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; fmul dword ptr [r8 + 1]; ror cl, 1; ret; 
0x000000000002aa54: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov r8d, 0xe8c78948; fldcw word ptr [rcx - 0x76b70001]; ret 0x8b48; 
0x0000000000027c5f: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000039708: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x0000000000026973: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000002b757: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000002b682: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002b691: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x75], 0x45; fmul dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000002534e: add byte ptr [rax], al; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000003ed37: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; shl byte ptr [rax], 0xc9; ret; 
0x000000000003982e: add byte ptr [rax], al; add byte ptr [rax - 9], cl; jne 0x3981d; mov rax, rdx; pop rbp; ret; 
0x0000000000033ad5: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; clc; leave; ret; 
0x000000000002534c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000003982d: add byte ptr [rax], al; add byte ptr [rax], al; div qword ptr [rbp - 0x18]; mov rax, rdx; pop rbp; ret; 
0x0000000000027db7: add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x000000000002ccc3: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbp - 0x28]; add rax, rdx; leave; ret; 
0x000000000002cd33: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbp - 8]; add rax, rdx; leave; ret; 
0x000000000003ede4: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbp - 8]; add rax, rdx; pop rbp; ret; 
0x0000000000033ad6: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000028431: add byte ptr [rax], al; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000025502: add byte ptr [rax], al; add byte ptr [rax], al; nop; leave; ret; 
0x000000000002534d: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002a88d: add byte ptr [rax], al; add byte ptr [rax], al; nop; pop rbp; ret; 
0x000000000002bb23: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000023e94: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000044ae1: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; and eax, 0x48fffdf0; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000002a8e1: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; and eax, 0xc9ffff92; ret; 
0x000000000002c114: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; bnd jns 0x2c11c; dec ecx; ret; 
0x000000000003361e: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; call 0xffffffffca03352d; ret; 
0x000000000002c3bd: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; ja 0x2c3c5; dec ecx; ret; 
0x000000000003bbc3: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; jg 0x3bbca; dec ecx; ret; 
0x000000000003bcc3: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; jle 0x3bcca; dec ecx; ret; 
0x000000000002c0c4: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; jp 0x2c0cc; dec ecx; ret; 
0x000000000002c2a2: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; js 0x2c2aa; dec ecx; ret; 
0x000000000003b1c4: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; mov esi, edi; dec ecx; ret; 
0x000000000002af62: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; movsb byte ptr [rdi], byte ptr [rsi]; mov edi, edi; dec ecx; ret; 
0x000000000002befc: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; or bh, byte ptr [rdi + rdi*8 - 1]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002aef9: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; or eax, 0xc9ffff8c; ret; 
0x0000000000044cc0: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; out dx, al; std; dec ecx; ret; 
0x0000000000038aa7: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; pop rdi; mov al, 0xfe; dec ecx; ret; 
0x0000000000038543: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; ret; 
0x0000000000037345: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; rol edi, 0xfe; dec ecx; ret; 
0x00000000000421c6: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; sbb esi, edi; dec ecx; ret; 
0x0000000000033a09: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; std; add bh, bh; dec ecx; ret; 
0x0000000000044dd2: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; xor al, 0xed; std; jmp qword ptr [rsi + 0x48]; 
0x000000000003a781: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x0000000000041b7c: add byte ptr [rax], al; add byte ptr [rcx], al; ret 0x8b48; 
0x0000000000026d6e: add byte ptr [rax], al; add byte ptr [rcx], cl; ret 0x8b48; 
0x0000000000037d23: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0; movsx eax, al; mov edi, eax; call rbx; 
0x0000000000043bc5: add byte ptr [rax], al; add byte ptr [rsi - 0x7f], ah; jge 0x43bb2; jmp qword ptr [rbx]; 
0x0000000000043bf7: add byte ptr [rax], al; add byte ptr [rsi - 0x7f], ah; jge 0x43be4; jmp qword ptr [rdi]; 
0x0000000000043e01: add byte ptr [rax], al; add byte ptr [rsi - 0x7f], ah; jge 0x43dee; jmp qword ptr [rdi]; 
0x000000000002a3f5: add byte ptr [rax], al; add cl, ch; ret 0; 
0x0000000000027db8: add byte ptr [rax], al; add cl, cl; ret; 
0x000000000003ed38: add byte ptr [rax], al; add rax, 0x20; leave; ret; 
0x000000000003fe37: add byte ptr [rax], al; add rax, rdx; movzx eax, byte ptr [rax]; leave; ret; 
0x0000000000040290: add byte ptr [rax], al; add rax, rdx; movzx eax, byte ptr [rax]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003f844: add byte ptr [rax], al; add rax, rdx; movzx eax, byte ptr [rax]; pop rbp; ret; 
0x0000000000037e95: add byte ptr [rax], al; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x000000000002b36f: add byte ptr [rax], al; add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x0000000000024d70: add byte ptr [rax], al; call 0x24d0a; pop rbp; ret; 
0x0000000000028de8: add byte ptr [rax], al; call 0x28d82; pop rbp; ret; 
0x000000000002a5d0: add byte ptr [rax], al; call 0x2a56a; pop rbp; ret; 
0x000000000002b4d0: add byte ptr [rax], al; call 0x2a5eb; mov byte ptr [rax], 0; nop; leave; ret; 
0x000000000002cbc6: add byte ptr [rax], al; call 0x2a5eb; mov dword ptr [rax], 0; nop; leave; ret; 
0x00000000000316bc: add byte ptr [rax], al; call 0x2a5eb; nop; leave; ret; 
0x000000000003354e: add byte ptr [rax], al; call 0x334e8; pop rbp; ret; 
0x0000000000036ead: add byte ptr [rax], al; call 0x36e47; pop rbp; ret; 
0x0000000000038338: add byte ptr [rax], al; call 0x382d2; pop rbp; ret; 
0x00000000000397c9: add byte ptr [rax], al; call 0x39763; pop rbp; ret; 
0x000000000003d411: add byte ptr [rax], al; call 0x3d3ab; pop rbp; ret; 
0x000000000003d873: add byte ptr [rax], al; call 0x3d80d; pop rbp; ret; 
0x000000000003daf8: add byte ptr [rax], al; call 0x3da92; pop rbp; ret; 
0x000000000003de8b: add byte ptr [rax], al; call 0x3de25; pop rbp; ret; 
0x000000000003ec78: add byte ptr [rax], al; call 0x3ec12; pop rbp; ret; 
0x000000000003f3ed: add byte ptr [rax], al; call 0x3f387; pop rbp; ret; 
0x000000000003ffd7: add byte ptr [rax], al; call 0x3ff71; pop rbp; ret; 
0x00000000000404c1: add byte ptr [rax], al; call 0x4045b; pop rbp; ret; 
0x0000000000041df7: add byte ptr [rax], al; call 0x41d91; pop rbp; ret; 
0x00000000000446d8: add byte ptr [rax], al; call 0x44672; pop rbp; ret; 
0x000000000003982f: add byte ptr [rax], al; div qword ptr [rbp - 0x18]; mov rax, rdx; pop rbp; ret; 
0x000000000002a8e2: add byte ptr [rax], al; je 0x2a8eb; call 0x23b10; leave; ret; 
0x000000000002addc: add byte ptr [rax], al; je 0x2ade5; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002aefa: add byte ptr [rax], al; je 0x2af03; call 0x23b10; leave; ret; 
0x000000000002af63: add byte ptr [rax], al; je 0x2af6c; call 0x23b10; leave; ret; 
0x000000000002b081: add byte ptr [rax], al; je 0x2b08a; call 0x23b10; leave; ret; 
0x000000000002b48d: add byte ptr [rax], al; je 0x2b496; call 0x23b10; leave; ret; 
0x000000000002befd: add byte ptr [rax], al; je 0x2bf06; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002c0c5: add byte ptr [rax], al; je 0x2c0ce; call 0x23b10; leave; ret; 
0x000000000002c115: add byte ptr [rax], al; je 0x2c11e; call 0x23b10; leave; ret; 
0x000000000002c203: add byte ptr [rax], al; je 0x2c20c; call 0x23b10; leave; ret; 
0x000000000002c2a3: add byte ptr [rax], al; je 0x2c2ac; call 0x23b10; leave; ret; 
0x000000000002c3be: add byte ptr [rax], al; je 0x2c3c7; call 0x23b10; leave; ret; 
0x000000000002cb57: add byte ptr [rax], al; je 0x2cb60; call 0x23b10; leave; ret; 
0x000000000003361f: add byte ptr [rax], al; je 0x33628; call 0x23b10; leave; ret; 
0x0000000000033a0a: add byte ptr [rax], al; je 0x33a13; call 0x23b10; leave; ret; 
0x0000000000033bf5: add byte ptr [rax], al; je 0x33bfe; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000037346: add byte ptr [rax], al; je 0x3734f; call 0x23b10; leave; ret; 
0x000000000003748f: add byte ptr [rax], al; je 0x37498; call 0x23b10; leave; ret; 
0x000000000003758f: add byte ptr [rax], al; je 0x37598; call 0x23b10; leave; ret; 
0x0000000000037a2f: add byte ptr [rax], al; je 0x37a38; call 0x23b10; mov rax, qword ptr [rbp - 0x28]; leave; ret; 
0x0000000000037cf3: add byte ptr [rax], al; je 0x37cfc; call 0x23b10; leave; ret; 
0x0000000000037de9: add byte ptr [rax], al; je 0x37df2; call 0x23b10; leave; ret; 
0x0000000000038aa8: add byte ptr [rax], al; je 0x38ab1; call 0x23b10; leave; ret; 
0x0000000000039020: add byte ptr [rax], al; je 0x39029; call 0x23b10; leave; ret; 
0x000000000003991e: add byte ptr [rax], al; je 0x39927; call 0x23b10; leave; ret; 
0x0000000000039f5f: add byte ptr [rax], al; je 0x39f68; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003a0e8: add byte ptr [rax], al; je 0x3a0f1; call 0x23b10; leave; ret; 
0x000000000003a133: add byte ptr [rax], al; je 0x3a13c; call 0x23b10; leave; ret; 
0x000000000003a1c8: add byte ptr [rax], al; je 0x3a1d1; call 0x23b10; leave; ret; 
0x000000000003a213: add byte ptr [rax], al; je 0x3a21c; call 0x23b10; leave; ret; 
0x000000000003aa07: add byte ptr [rax], al; je 0x3aa10; call 0x23b10; leave; ret; 
0x000000000003ab75: add byte ptr [rax], al; je 0x3ab7e; call 0x23b10; leave; ret; 
0x000000000003adcf: add byte ptr [rax], al; je 0x3add8; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003aef7: add byte ptr [rax], al; je 0x3af00; call 0x23b10; leave; ret; 
0x000000000003b09d: add byte ptr [rax], al; je 0x3b0a6; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003b1c5: add byte ptr [rax], al; je 0x3b1ce; call 0x23b10; leave; ret; 
0x000000000003b2f7: add byte ptr [rax], al; je 0x3b300; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003b3d5: add byte ptr [rax], al; je 0x3b3de; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003bbc4: add byte ptr [rax], al; je 0x3bbcd; call 0x23b10; leave; ret; 
0x000000000003bcc4: add byte ptr [rax], al; je 0x3bccd; call 0x23b10; leave; ret; 
0x0000000000041bbd: add byte ptr [rax], al; je 0x41bc6; call 0x23b10; leave; ret; 
0x000000000004217a: add byte ptr [rax], al; je 0x42183; call 0x23b10; leave; ret; 
0x00000000000421c7: add byte ptr [rax], al; je 0x421d0; call 0x23b10; leave; ret; 
0x0000000000042217: add byte ptr [rax], al; je 0x42220; call 0x23b10; leave; ret; 
0x0000000000042429: add byte ptr [rax], al; je 0x42432; call 0x23b10; leave; ret; 
0x00000000000424bb: add byte ptr [rax], al; je 0x424c4; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000042601: add byte ptr [rax], al; je 0x4260a; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000004292c: add byte ptr [rax], al; je 0x42935; call 0x23b10; leave; ret; 
0x0000000000042a85: add byte ptr [rax], al; je 0x42a8e; call 0x23b10; leave; ret; 
0x0000000000042c21: add byte ptr [rax], al; je 0x42c2a; call 0x23b10; leave; ret; 
0x0000000000042cac: add byte ptr [rax], al; je 0x42cb5; call 0x23b10; leave; ret; 
0x0000000000042d37: add byte ptr [rax], al; je 0x42d40; call 0x23b10; leave; ret; 
0x000000000004378c: add byte ptr [rax], al; je 0x43795; call 0x23b10; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x00000000000437ef: add byte ptr [rax], al; je 0x437f8; call 0x23b10; leave; ret; 
0x000000000004383f: add byte ptr [rax], al; je 0x43848; call 0x23b10; leave; ret; 
0x0000000000044ae2: add byte ptr [rax], al; je 0x44aeb; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000044cc1: add byte ptr [rax], al; je 0x44cca; call 0x23b10; leave; ret; 
0x0000000000044dd3: add byte ptr [rax], al; je 0x44ddc; call 0x23b10; movq xmm0, rdx; leave; ret; 
0x00000000000256d8: add byte ptr [rax], al; leave; ret; 
0x000000000002f5e8: add byte ptr [rax], al; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000395c4: add byte ptr [rax], al; mov eax, edx; leave; ret; 
0x0000000000024d6b: add byte ptr [rax], al; mov edi, 1; call 0x24d0a; pop rbp; ret; 
0x0000000000028de3: add byte ptr [rax], al; mov edi, 1; call 0x28d82; pop rbp; ret; 
0x000000000002a5cb: add byte ptr [rax], al; mov edi, 1; call 0x2a56a; pop rbp; ret; 
0x0000000000033549: add byte ptr [rax], al; mov edi, 1; call 0x334e8; pop rbp; ret; 
0x0000000000036ea8: add byte ptr [rax], al; mov edi, 1; call 0x36e47; pop rbp; ret; 
0x0000000000038333: add byte ptr [rax], al; mov edi, 1; call 0x382d2; pop rbp; ret; 
0x00000000000397c4: add byte ptr [rax], al; mov edi, 1; call 0x39763; pop rbp; ret; 
0x000000000003d40c: add byte ptr [rax], al; mov edi, 1; call 0x3d3ab; pop rbp; ret; 
0x000000000003d86e: add byte ptr [rax], al; mov edi, 1; call 0x3d80d; pop rbp; ret; 
0x000000000003daf3: add byte ptr [rax], al; mov edi, 1; call 0x3da92; pop rbp; ret; 
0x000000000003de86: add byte ptr [rax], al; mov edi, 1; call 0x3de25; pop rbp; ret; 
0x000000000003ec73: add byte ptr [rax], al; mov edi, 1; call 0x3ec12; pop rbp; ret; 
0x000000000003f3e8: add byte ptr [rax], al; mov edi, 1; call 0x3f387; pop rbp; ret; 
0x000000000003ffd2: add byte ptr [rax], al; mov edi, 1; call 0x3ff71; pop rbp; ret; 
0x00000000000404bc: add byte ptr [rax], al; mov edi, 1; call 0x4045b; pop rbp; ret; 
0x0000000000041df2: add byte ptr [rax], al; mov edi, 1; call 0x41d91; pop rbp; ret; 
0x00000000000446d3: add byte ptr [rax], al; mov edi, 1; call 0x44672; pop rbp; ret; 
0x000000000002eb47: add byte ptr [rax], al; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002b2bb: add byte ptr [rax], al; mov qword ptr [rbp - 0x18], rax; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x000000000002c846: add byte ptr [rax], al; mov rax, qword ptr [rax]; leave; ret; 
0x000000000003774b: add byte ptr [rax], al; mov rax, qword ptr [rbp - 0x20]; leave; ret; 
0x000000000002ccc5: add byte ptr [rax], al; mov rax, qword ptr [rbp - 0x28]; add rax, rdx; leave; ret; 
0x000000000002cd35: add byte ptr [rax], al; mov rax, qword ptr [rbp - 8]; add rax, rdx; leave; ret; 
0x000000000003ede6: add byte ptr [rax], al; mov rax, qword ptr [rbp - 8]; add rax, rdx; pop rbp; ret; 
0x0000000000033733: add byte ptr [rax], al; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000033862: add byte ptr [rax], al; mov rax, qword ptr [rbp - 8]; mov dword ptr [rax + 4], 0; nop; pop rbp; ret; 
0x00000000000254f8: add byte ptr [rax], al; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x10], 0; nop; leave; ret; 
0x000000000002a883: add byte ptr [rax], al; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x10], 0; nop; pop rbp; ret; 
0x0000000000027c60: add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000024e9c: add byte ptr [rax], al; mov rdi, rax; call 0x24e1a; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000002d0cc: add byte ptr [rax], al; mov rdi, rax; call 0x26c8a; nop; leave; ret; 
0x0000000000028e40: add byte ptr [rax], al; mov rdi, rax; call 0x28df2; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000394a9: add byte ptr [rax], al; mov rdi, rax; call 0x2a6ea; mov eax, 1; leave; ret; 
0x0000000000040823: add byte ptr [rax], al; mov rdi, rax; call 0x2a6ea; nop; leave; ret; 
0x000000000002acc2: add byte ptr [rax], al; mov rdi, rax; call 0x2af05; leave; ret; 
0x000000000002b6fb: add byte ptr [rax], al; mov rdi, rax; call 0x2b7d9; leave; ret; 
0x000000000002ce75: add byte ptr [rax], al; mov rdi, rax; call 0x2ba16; leave; ret; 
0x000000000002f56a: add byte ptr [rax], al; mov rdi, rax; call 0x307a4; leave; ret; 
0x000000000002f65d: add byte ptr [rax], al; mov rdi, rax; call 0x308f7; leave; ret; 
0x000000000002f750: add byte ptr [rax], al; mov rdi, rax; call 0x30a4b; leave; ret; 
0x000000000002f843: add byte ptr [rax], al; mov rdi, rax; call 0x30b9f; leave; ret; 
0x000000000002f936: add byte ptr [rax], al; mov rdi, rax; call 0x30cf3; leave; ret; 
0x00000000000304bf: add byte ptr [rax], al; mov rdi, rax; call 0x31cc1; nop; leave; ret; 
0x00000000000305b3: add byte ptr [rax], al; mov rdi, rax; call 0x31e19; nop; leave; ret; 
0x00000000000306a7: add byte ptr [rax], al; mov rdi, rax; call 0x31f71; nop; leave; ret; 
0x00000000000307ba: add byte ptr [rax], al; mov rdi, rax; call 0x3208e; leave; ret; 
0x000000000003090d: add byte ptr [rax], al; mov rdi, rax; call 0x32132; leave; ret; 
0x0000000000030a61: add byte ptr [rax], al; mov rdi, rax; call 0x321d6; leave; ret; 
0x0000000000030bb5: add byte ptr [rax], al; mov rdi, rax; call 0x3227a; leave; ret; 
0x0000000000030d09: add byte ptr [rax], al; mov rdi, rax; call 0x3231e; leave; ret; 
0x0000000000031cdb: add byte ptr [rax], al; mov rdi, rax; call 0x32b7e; nop; leave; ret; 
0x0000000000031e33: add byte ptr [rax], al; mov rdi, rax; call 0x32c24; nop; leave; ret; 
0x0000000000031f8b: add byte ptr [rax], al; mov rdi, rax; call 0x32cca; nop; leave; ret; 
0x000000000003ad5c: add byte ptr [rax], al; mov rdi, rax; call 0x3b555; leave; ret; 
0x000000000003b02a: add byte ptr [rax], al; mov rdi, rax; call 0x3b89d; leave; ret; 
0x000000000003bb18: add byte ptr [rax], al; mov rdi, rax; call 0x3c15a; leave; ret; 
0x000000000003bc40: add byte ptr [rax], al; mov rdi, rax; call 0x3c1a8; leave; ret; 
0x000000000003ebed: add byte ptr [rax], al; mov rdi, rax; call 0x3d4bc; nop; leave; ret; 
0x000000000002ce2d: add byte ptr [rax], al; mov rdi, rax; call 0x41a38; leave; ret; 
0x000000000002ce51: add byte ptr [rax], al; mov rdi, rax; call 0x41b2e; leave; ret; 
0x000000000002cebd: add byte ptr [rax], al; mov rdi, rax; call 0x41bc8; leave; ret; 
0x000000000002de8d: add byte ptr [rax], al; mov rdi, rax; call 0x43ee4; nop; leave; ret; 
0x000000000002affb: add byte ptr [rax], al; mov rsi, rcx; mov rdi, rax; call 0x2b2c8; leave; ret; 
0x000000000002c7e8: add byte ptr [rax], al; mov rsi, rcx; mov rdi, rax; call 0x2ca10; leave; ret; 
0x000000000003bcee: add byte ptr [rax], al; mov rsi, rcx; mov rdi, rax; call 0x3c1c6; leave; ret; 
0x000000000003bf12: add byte ptr [rax], al; mov rsi, rcx; mov rdi, rax; call 0x3c314; leave; ret; 
0x000000000003c842: add byte ptr [rax], al; mov rsi, rcx; mov rdi, rax; call 0x3c922; leave; ret; 
0x00000000000432e3: add byte ptr [rax], al; mov rsi, rcx; mov rdi, rax; call 0x4345c; leave; ret; 
0x0000000000043387: add byte ptr [rax], al; mov rsi, rcx; mov rdi, rax; call 0x4352a; leave; ret; 
0x0000000000037c56: add byte ptr [rax], al; movzx eax, byte ptr [rax]; movsx eax, al; mov edi, eax; call rbx; 
0x0000000000024f4c: add byte ptr [rax], al; nop; leave; ret; 
0x0000000000030878: add byte ptr [rax], al; nop; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002534f: add byte ptr [rax], al; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002a88f: add byte ptr [rax], al; nop; pop rbp; ret; 
0x0000000000028f4b: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000036e3e: add byte ptr [rax], al; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000024d03: add byte ptr [rax], al; pop rbx; pop r12; pop rbp; ret; 
0x0000000000023e96: add byte ptr [rax], al; ret; 
0x0000000000033936: add byte ptr [rax], al; test rax, rax; setne al; leave; ret; 
0x000000000002f5e9: add byte ptr [rax], bh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000319d2: add byte ptr [rax], dl; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000023ed5: add byte ptr [rax], r8b; ret; 
0x000000000003b2f8: add byte ptr [rbp + rax - 0x18], dh; adc byte ptr [rax - 0x74b70002], cl; pop rbp; clc; leave; ret; 
0x0000000000044ae3: add byte ptr [rbp + rax - 0x18], dh; and eax, 0x48fffdf0; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000002a8e3: add byte ptr [rbp + rax - 0x18], dh; and eax, 0xc9ffff92; ret; 
0x000000000002c116: add byte ptr [rbp + rax - 0x18], dh; bnd jns 0x2c11c; dec ecx; ret; 
0x0000000000033620: add byte ptr [rbp + rax - 0x18], dh; call 0xffffffffca03352d; ret; 
0x000000000003add0: add byte ptr [rbp + rax - 0x18], dh; cmp byte ptr [rbp - 0x74b70002], cl; pop rbp; clc; leave; ret; 
0x000000000002c3bf: add byte ptr [rbp + rax - 0x18], dh; ja 0x2c3c5; dec ecx; ret; 
0x000000000003bbc5: add byte ptr [rbp + rax - 0x18], dh; jg 0x3bbca; dec ecx; ret; 
0x000000000003bcc5: add byte ptr [rbp + rax - 0x18], dh; jle 0x3bcca; dec ecx; ret; 
0x000000000002c0c6: add byte ptr [rbp + rax - 0x18], dh; jp 0x2c0cc; dec ecx; ret; 
0x000000000002c2a4: add byte ptr [rbp + rax - 0x18], dh; js 0x2c2aa; dec ecx; ret; 
0x000000000003b1c6: add byte ptr [rbp + rax - 0x18], dh; mov esi, edi; dec ecx; ret; 
0x000000000002af64: add byte ptr [rbp + rax - 0x18], dh; movsb byte ptr [rdi], byte ptr [rsi]; mov edi, edi; dec ecx; ret; 
0x000000000002befe: add byte ptr [rbp + rax - 0x18], dh; or bh, byte ptr [rdi + rdi*8 - 1]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002aefb: add byte ptr [rbp + rax - 0x18], dh; or eax, 0xc9ffff8c; ret; 
0x0000000000044cc2: add byte ptr [rbp + rax - 0x18], dh; out dx, al; std; dec ecx; ret; 
0x0000000000038aa9: add byte ptr [rbp + rax - 0x18], dh; pop rdi; mov al, 0xfe; dec ecx; ret; 
0x0000000000038545: add byte ptr [rbp + rax - 0x18], dh; ret; 
0x0000000000037347: add byte ptr [rbp + rax - 0x18], dh; rol edi, 0xfe; dec ecx; ret; 
0x00000000000421c8: add byte ptr [rbp + rax - 0x18], dh; sbb esi, edi; dec ecx; ret; 
0x0000000000033a0b: add byte ptr [rbp + rax - 0x18], dh; std; add bh, bh; dec ecx; ret; 
0x000000000002addd: add byte ptr [rbp + rax - 0x18], dh; sub ecx, dword ptr [rbp - 0x74b70001]; pop rbp; clc; leave; ret; 
0x0000000000044dd4: add byte ptr [rbp + rax - 0x18], dh; xor al, 0xed; std; jmp qword ptr [rsi + 0x48]; 
0x000000000003b3d6: add byte ptr [rbp + rax - 0x18], dh; xor al, byte ptr [rdi - 0x74b70002]; pop rbp; clc; leave; ret; 
0x0000000000043340: add byte ptr [rbp - 0x2f], dh; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000258dd: add byte ptr [rbp - 0x32], dh; nop; nop; leave; ret; 
0x0000000000026e1b: add byte ptr [rbp - 0x74b7f9b0], cl; call 0x1ed7eb0; nop; leave; ret; 
0x000000000002957c: add byte ptr [rbp - 0x76b70001], ah; ret 0x8d48; 
0x0000000000043b90: add byte ptr [rbp - 2], ch; dec dword ptr [rax + 0x39]; ret; 
0x0000000000036e3f: add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x0000000000024d04: add byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x000000000002a02c: add byte ptr [rbx - 0x76b70001], bl; ret 0x8d48; 
0x0000000000040c78: add byte ptr [rcx + rcx*4], cl; ret 0x8b48; 
0x000000000002656e: add byte ptr [rcx], al; add byte ptr [rax], al; leave; ret; 
0x0000000000037259: add byte ptr [rcx], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000023f11: add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000041b7e: add byte ptr [rcx], al; ret 0x8b48; 
0x000000000003bb43: add byte ptr [rcx], bh; ret 0x940f; 
0x0000000000026d70: add byte ptr [rcx], cl; ret 0x8b48; 
0x0000000000024d6c: add byte ptr [rdi + 1], bh; call 0x24d0a; pop rbp; ret; 
0x0000000000028de4: add byte ptr [rdi + 1], bh; call 0x28d82; pop rbp; ret; 
0x000000000002a5cc: add byte ptr [rdi + 1], bh; call 0x2a56a; pop rbp; ret; 
0x000000000003354a: add byte ptr [rdi + 1], bh; call 0x334e8; pop rbp; ret; 
0x0000000000036ea9: add byte ptr [rdi + 1], bh; call 0x36e47; pop rbp; ret; 
0x0000000000038334: add byte ptr [rdi + 1], bh; call 0x382d2; pop rbp; ret; 
0x00000000000397c5: add byte ptr [rdi + 1], bh; call 0x39763; pop rbp; ret; 
0x000000000003d40d: add byte ptr [rdi + 1], bh; call 0x3d3ab; pop rbp; ret; 
0x000000000003d86f: add byte ptr [rdi + 1], bh; call 0x3d80d; pop rbp; ret; 
0x000000000003daf4: add byte ptr [rdi + 1], bh; call 0x3da92; pop rbp; ret; 
0x000000000003de87: add byte ptr [rdi + 1], bh; call 0x3de25; pop rbp; ret; 
0x000000000003ec74: add byte ptr [rdi + 1], bh; call 0x3ec12; pop rbp; ret; 
0x000000000003f3e9: add byte ptr [rdi + 1], bh; call 0x3f387; pop rbp; ret; 
0x000000000003ffd3: add byte ptr [rdi + 1], bh; call 0x3ff71; pop rbp; ret; 
0x00000000000404bd: add byte ptr [rdi + 1], bh; call 0x4045b; pop rbp; ret; 
0x0000000000041df3: add byte ptr [rdi + 1], bh; call 0x41d91; pop rbp; ret; 
0x00000000000446d4: add byte ptr [rdi + 1], bh; call 0x44672; pop rbp; ret; 
0x000000000002a37c: add byte ptr [rdi - 0x76b70001], dl; ret 0x8d48; 
0x0000000000037c57: add byte ptr [rdi], cl; mov dh, 0; movsx eax, al; mov edi, eax; call rbx; 
0x0000000000026ed8: add byte ptr [rdi], cl; xchg eax, esp; ret 0x8b48; 
0x0000000000026256: add byte ptr [rdx], 0; add cl, cl; ret; 
0x0000000000044a08: add byte ptr [rsi + 0xf], ah; outsb dx, byte ptr [rsi]; ret 0x8948; 
0x0000000000043bc7: add byte ptr [rsi - 0x7f], ah; jge 0x43bb2; jmp qword ptr [rbx]; 
0x0000000000043bf9: add byte ptr [rsi - 0x7f], ah; jge 0x43be4; jmp qword ptr [rdi]; 
0x0000000000043dce: add byte ptr [rsi - 0x7f], ah; jge 0x43db9; jmp qword ptr [rbx]; 
0x0000000000043e03: add byte ptr [rsi - 0x7f], ah; jge 0x43dee; jmp qword ptr [rdi]; 
0x00000000000307db: add byte ptr cs:[rax], al; leave; ret; 
0x0000000000031013: add byte ptr es:[rax], al; leave; ret; 
0x0000000000033da2: add byte ptr fs:[rax], al; add cl, cl; ret; 
0x000000000003ed63: add byte ptr gs:[rax], al; add cl, cl; ret; 
0x0000000000040f62: add cl, 0xe0; add al, 0x89; ret 0x458b; 
0x000000000002bd15: add cl, byte ptr [rax + 1]; ret 0x8b48; 
0x0000000000032210: add cl, byte ptr [rax + rax]; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000024de1: add cl, byte ptr [rax - 0x75]; clc; leave; ret; 
0x0000000000025784: add cl, byte ptr [rax - 0x77]; ret 0x8b48; 
0x000000000002c8cc: add cl, byte ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000269ea: add cl, byte ptr [rax - 0x77]; ret 0xb848; 
0x0000000000026d90: add cl, byte ptr [rcx]; ret 0x8b48; 
0x000000000003f12a: add cl, byte ptr [rdx - 2]; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002a3f7: add cl, ch; ret 0; 
0x00000000000256d9: add cl, cl; ret; 
0x0000000000043afc: add dh, bh; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000032466: add dl, byte ptr [rdx]; add byte ptr [rax], al; leave; ret; 
0x000000000003eb10: add dword ptr [rax + 0x5d8b4890], edx; clc; leave; ret; 
0x00000000000447d7: add dword ptr [rax + 9], ecx; ret 0xf66; 
0x0000000000040f5a: add dword ptr [rax + rax*8 - 0x49f0d38c], eax; add r9b, 0xe0; add al, 0x89; ret 0x458b; 
0x000000000003bf7d: add dword ptr [rax + rax], eax; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000042b48: add dword ptr [rax - 0x75], ecx; clc; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x0000000000037c84: add dword ptr [rax - 0x75], ecx; clc; mov qword ptr [rax], rdx; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000275ba: add dword ptr [rax - 0x7a274b8], edx; leave; ret; 
0x000000000002ae17: add dword ptr [rax], eax; add bl, ch; add eax, 0xb8; add cl, cl; ret; 
0x0000000000033b0b: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; add cl, cl; ret; 
0x0000000000033732: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; clc; leave; ret; 
0x000000000002aea7: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x000000000002ca02: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; call 0xffffffffe8485555; leave; ret; 
0x000000000002647b: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000043661: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000002ae7f: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003c663: add dword ptr [rax], eax; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000024d6e: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x24d0a; pop rbp; ret; 
0x0000000000028de6: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x28d82; pop rbp; ret; 
0x000000000002a5ce: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x2a56a; pop rbp; ret; 
0x00000000000316ba: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x2a5eb; nop; leave; ret; 
0x000000000003354c: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x334e8; pop rbp; ret; 
0x0000000000036eab: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x36e47; pop rbp; ret; 
0x0000000000038336: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x382d2; pop rbp; ret; 
0x00000000000397c7: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x39763; pop rbp; ret; 
0x000000000003d40f: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x3d3ab; pop rbp; ret; 
0x000000000003d871: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x3d80d; pop rbp; ret; 
0x000000000003daf6: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x3da92; pop rbp; ret; 
0x000000000003de89: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x3de25; pop rbp; ret; 
0x000000000003ec76: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x3ec12; pop rbp; ret; 
0x000000000003f3eb: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x3f387; pop rbp; ret; 
0x000000000003ffd5: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x3ff71; pop rbp; ret; 
0x00000000000404bf: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x4045b; pop rbp; ret; 
0x0000000000041df5: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x41d91; pop rbp; ret; 
0x00000000000446d6: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x44672; pop rbp; ret; 
0x00000000000394b4: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x0000000000027c5e: add dword ptr [rax], eax; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000028f49: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000037c55: add dword ptr [rax], eax; add byte ptr [rdi], cl; mov dh, 0; movsx eax, al; mov edi, eax; call rbx; 
0x0000000000043dcc: add dword ptr [rax], eax; add byte ptr [rsi - 0x7f], ah; jge 0x43db9; jmp qword ptr [rbx]; 
0x00000000000263a5: add dword ptr [rax], eax; add cl, cl; ret; 
0x0000000000026ebf: add dword ptr [rax], eax; leave; ret; 
0x000000000003d465: add dword ptr [rax], eax; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x000000000003d3f4: add dword ptr [rax], eax; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x000000000002cef5: add dword ptr [rax], eax; nop; leave; ret; 
0x000000000002cec3: add dword ptr [rbp + 1], ecx; add cl, cl; ret; 
0x0000000000037bb9: add dword ptr [rbp - 0x18], 0x20; mov rax, qword ptr [rbp - 0x20]; leave; ret; 
0x000000000002ba09: add dword ptr [rbp - 4], 1; cmp dword ptr [rbp - 4], 7; jle 0x2b9ca; nop; leave; ret; 
0x000000000002ba0c: add dword ptr [rbx + 0x7e07fc7d], eax; mov bh, 0x90; leave; ret; 
0x000000000002ce33: add dword ptr [rcx + rax], ecx; leave; ret; 
0x0000000000026f67: add dword ptr [rcx], eax; ret 0x8b48; 
0x0000000000037295: add dword ptr [rdx], eax; add byte ptr [rax], al; leave; ret; 
0x0000000000037258: add eax, 0x100; pop rbp; ret; 
0x000000000002505d: add eax, 0x10; mov rdi, rax; call 0x24ff6; nop; leave; ret; 
0x0000000000033d9b: add eax, 0x10; mov rdi, rax; call 0x33e0a; leave; ret; 
0x000000000002ce2a: add eax, 0x128; mov rdi, rax; call 0x41a38; leave; ret; 
0x000000000002ce4e: add eax, 0x128; mov rdi, rax; call 0x41b2e; leave; ret; 
0x000000000002ceba: add eax, 0x128; mov rdi, rax; call 0x41bc8; leave; ret; 
0x00000000000446b8: add eax, 0x1693b; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x000000000003d301: add eax, 0x18; mov rdi, rax; call 0x3d4bc; nop; leave; ret; 
0x0000000000028f0b: add eax, 0x18; pop rbp; ret; 
0x000000000003f3cd: add eax, 0x1bc26; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x000000000003ed3b: add eax, 0x20; leave; ret; 
0x0000000000024fe7: add eax, 0x20; mov rdi, rax; call 0x25170; nop; leave; ret; 
0x000000000002ce72: add eax, 0x210; mov rdi, rax; call 0x2ba16; leave; ret; 
0x00000000000397a9: add eax, 0x2184a; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x0000000000038318: add eax, 0x22cdb; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x000000000002ce96: add eax, 0x230; mov rdi, rax; call 0x2ba16; leave; ret; 
0x0000000000037f14: add eax, 0x233b7; pop rbp; ret; 
0x0000000000036e8d: add eax, 0x24166; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x000000000003352e: add eax, 0x27ac5; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x000000000002a5b0: add eax, 0x30a43; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x0000000000024d50: add eax, 0x362a3; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x0000000000023ec6: add eax, 0x37125; test rax, rax; je 0x23ed8; jmp rax; 
0x0000000000023e85: add eax, 0x37156; test rax, rax; je 0x23e98; jmp rax; 
0x000000000002300a: add eax, 0x37fd9; test rax, rax; je 0x23016; call rax; 
0x000000000002300a: add eax, 0x37fd9; test rax, rax; je 0x23016; call rax; add rsp, 8; ret; 
0x000000000003dcd3: add eax, 0x38; mov rdi, rax; call 0x3d4bc; nop; leave; ret; 
0x0000000000030d07: add eax, 0x48000016; mov edi, eax; call 0x3231e; leave; ret; 
0x0000000000026837: add eax, 0x58; mov rdi, rax; call 0x23dd0; nop; leave; ret; 
0x000000000003a41d: add eax, 0x89480000; ret 0x8b48; 
0x000000000002bd55: add eax, 0x89480000; ret; 
0x0000000000041e51: add eax, 0x89480000; ror dword ptr [rax - 0x75], 0x45; ror byte ptr [rax - 0x77], 1; ret 0x8948; 
0x000000000004224f: add eax, 0x8b480000; add byte ptr [rax + 0x39], cl; ret; 
0x000000000002586a: add eax, 0x90000003; leave; ret; 
0x0000000000033537: add eax, 0x90ffff05; leave; ret; 
0x000000000002842f: add eax, 0xb8; add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000027db5: add eax, 0xb8; add cl, cl; ret; 
0x0000000000026d6b: add eax, 0xba; add byte ptr [rcx], cl; ret 0x8b48; 
0x0000000000033538: add eax, 0xc990ffff; ret; 
0x00000000000372be: add eax, 0xca0; pop rbp; ret; 
0x0000000000044dd6: add eax, 0xfded34e8; jmp qword ptr [rsi + 0x48]; 
0x0000000000044cc4: add eax, 0xfdee46e8; dec ecx; ret; 
0x0000000000044ae5: add eax, 0xfdf025e8; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000043842: add eax, 0xfe02c8e8; dec ecx; ret; 
0x00000000000437f2: add eax, 0xfe0318e8; dec ecx; ret; 
0x0000000000042d3a: add eax, 0xfe0dd0e8; dec ecx; ret; 
0x0000000000042caf: add eax, 0xfe0e5be8; dec ecx; ret; 
0x0000000000042c24: add eax, 0xfe0ee6e8; dec ecx; ret; 
0x0000000000042a88: add eax, 0xfe1082e8; dec ecx; ret; 
0x000000000004292f: add eax, 0xfe11dbe8; dec ecx; ret; 
0x0000000000042604: add eax, 0xfe1506e8; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x00000000000424be: add eax, 0xfe164ce8; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000004242c: add eax, 0xfe16dee8; dec ecx; ret; 
0x000000000004221a: add eax, 0xfe18f0e8; dec ecx; ret; 
0x00000000000421ca: add eax, 0xfe1940e8; dec ecx; ret; 
0x000000000004217d: add eax, 0xfe198de8; dec ecx; ret; 
0x0000000000041bc0: add eax, 0xfe1f4ae8; dec ecx; ret; 
0x00000000000417c7: add eax, 0xfe2343e8; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000003bcc7: add eax, 0xfe7e43e8; dec ecx; ret; 
0x000000000003bbc7: add eax, 0xfe7f43e8; dec ecx; ret; 
0x000000000003b3d8: add eax, 0xfe8732e8; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000003b2fa: add eax, 0xfe8810e8; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000003b1c8: add eax, 0xfe8942e8; dec ecx; ret; 
0x000000000003b0a0: add eax, 0xfe8a6ae8; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000003aefa: add eax, 0xfe8c10e8; dec ecx; ret; 
0x000000000003add2: add eax, 0xfe8d38e8; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000003ab78: add eax, 0xfe8f92e8; dec ecx; ret; 
0x000000000003aa0a: add eax, 0xfe9100e8; dec ecx; ret; 
0x000000000003a216: add eax, 0xfe98f4e8; dec ecx; ret; 
0x000000000003a1cb: add eax, 0xfe993fe8; dec ecx; ret; 
0x000000000003a136: add eax, 0xfe99d4e8; dec ecx; ret; 
0x000000000003a0eb: add eax, 0xfe9a1fe8; dec ecx; ret; 
0x0000000000039f62: add eax, 0xfe9ba8e8; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000039921: add eax, 0xfea1e9e8; dec ecx; ret; 
0x0000000000039023: add eax, 0xfeaae7e8; dec ecx; ret; 
0x0000000000038aab: add eax, 0xfeb05fe8; dec ecx; ret; 
0x0000000000037dec: add eax, 0xfebd1ee8; dec ecx; ret; 
0x0000000000037cf6: add eax, 0xfebe14e8; dec ecx; ret; 
0x0000000000037a32: add eax, 0xfec0d8e8; dec dword ptr [rax - 0x75]; fmul st(1); ret; 
0x0000000000037592: add eax, 0xfec578e8; dec ecx; ret; 
0x0000000000037492: add eax, 0xfec678e8; dec ecx; ret; 
0x0000000000037349: add eax, 0xfec7c1e8; dec ecx; ret; 
0x0000000000033bf8: add eax, 0xfeff12e8; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000033a0d: add eax, 0xff00fde8; dec ecx; ret; 
0x0000000000033622: add eax, 0xff04e8e8; dec ecx; ret; 
0x000000000002cb5a: add eax, 0xff6fb0e8; dec ecx; ret; 
0x000000000002c3c1: add eax, 0xff7749e8; dec ecx; ret; 
0x000000000002c2a6: add eax, 0xff7864e8; dec ecx; ret; 
0x000000000002c206: add eax, 0xff7904e8; dec ecx; ret; 
0x000000000002c118: add eax, 0xff79f2e8; dec ecx; ret; 
0x000000000002c0c8: add eax, 0xff7a42e8; dec ecx; ret; 
0x000000000002bf00: add eax, 0xff7c0ae8; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000002b490: add eax, 0xff867ae8; dec ecx; ret; 
0x000000000002b084: add eax, 0xff8a86e8; dec ecx; ret; 
0x000000000002af66: add eax, 0xff8ba4e8; dec ecx; ret; 
0x000000000002aefd: add eax, 0xff8c0de8; dec ecx; ret; 
0x000000000002addf: add eax, 0xff8d2be8; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000002a8e5: add eax, 0xff9225e8; dec ecx; ret; 
0x00000000000380c0: add eax, 0xffffffb8; dec ecx; ret; 
0x00000000000250b1: add eax, 8; mov rdi, rax; call 0x25358; nop; leave; ret; 
0x0000000000039d8a: add eax, 8; mov rdi, rax; call 0x25f76; leave; ret; 
0x0000000000026291: add eax, 8; mov rdi, rax; call 0x2625c; nop; leave; ret; 
0x00000000000263df: add eax, 8; mov rdi, rax; call 0x263aa; nop; leave; ret; 
0x000000000002c254: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x00000000000252c1: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000003a0c4: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000025326: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002bac9: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x75], 0x45; fmul dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000039b83: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x75], 0x45; ror byte ptr [rax - 0x77], 1; ret 0x8948; 
0x0000000000025beb: add eax, dword ptr [rax]; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000002cdd9: add eax, dword ptr [rax]; add byte ptr [rax], al; nop; leave; ret; 
0x00000000000256d7: add eax, dword ptr [rax]; add cl, cl; ret; 
0x0000000000023f00: add eax, dword ptr [rax]; call 0x23730; call 0x23e70; mov byte ptr [rip + 0x3739d], 1; pop rbp; ret; 
0x0000000000024ebd: add eax, dword ptr [rax]; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000024d53: add eax, dword ptr [rax]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x000000000002300d: add eax, dword ptr [rax]; test rax, rax; je 0x23016; call rax; 
0x000000000002300d: add eax, dword ptr [rax]; test rax, rax; je 0x23016; call rax; add rsp, 8; ret; 
0x0000000000023e88: add eax, dword ptr [rax]; test rax, rax; je 0x23e98; jmp rax; 
0x0000000000023ec9: add eax, dword ptr [rax]; test rax, rax; je 0x23ed8; jmp rax; 
0x00000000000422bb: add eax, eax; add rax, rdx; shl rax, 3; add rax, rcx; pop rbp; ret; 
0x00000000000422c5: add eax, ecx; pop rbp; ret; 
0x000000000002b59f: add eax, edx; leave; ret; 
0x000000000003fe3a: add eax, edx; movzx eax, byte ptr [rax]; leave; ret; 
0x0000000000040293: add eax, edx; movzx eax, byte ptr [rax]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003f847: add eax, edx; movzx eax, byte ptr [rax]; pop rbp; ret; 
0x000000000002a792: add eax, edx; pop rbp; ret; 
0x00000000000422be: add eax, edx; shl rax, 3; add rax, rcx; pop rbp; ret; 
0x0000000000043587: add eax, edx; shl rax, 3; mov rdi, rax; call 0x23a90; leave; ret; 
0x000000000003c223: add eax, edx; shl rax, 4; mov rdi, rax; call 0x23a90; leave; ret; 
0x0000000000029d29: add ebx, dword ptr [rsi - 0x76b70001]; ret 0x8d48; 
0x0000000000041071: add ecx, 0xe08302e0; or al, 0x89; ret 0xb60f; 
0x0000000000025644: add ecx, dword ptr [rax - 0x77]; ret 0xb848; 
0x000000000003d6ab: add ecx, dword ptr [rcx + 0x458b48c2]; clc; mov word ptr [rax + 0x16], dx; nop; pop rbp; ret; 
0x0000000000026d80: add ecx, dword ptr [rcx]; ret 0x8b48; 
0x000000000002a83e: add ecx, ecx; ret; 
0x0000000000040169: add edi, dword ptr [rsi + rdi*8]; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000437f5: add edi, esi; dec ecx; ret; 
0x000000000003b73f: add edx, 0x10; mov qword ptr [rax], rdx; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000038a84: add edx, 0x18; mov rcx, qword ptr [rdx]; movzx edx, word ptr [rbp - 0x2c]; mov esi, edx; mov rdi, rax; call rcx; 
0x0000000000043bb2: add edx, 0x20; mov rcx, qword ptr [rdx]; movzx edx, word ptr [rbp - 0x1a]; mov esi, edx; mov rdi, rax; call rcx; 
0x0000000000043b39: add edx, 0x20; mov rcx, qword ptr [rdx]; movzx edx, word ptr [rbp - 0x2c]; mov esi, edx; mov rdi, rax; call rcx; 
0x0000000000043f09: add edx, 0x30; mov rdx, qword ptr [rdx]; mov rdi, rax; call rdx; 
0x0000000000044664: add edx, 0x38; mov rdx, qword ptr [rdx]; mov rdi, rax; call rdx; 
0x000000000002572d: add edx, 8; mov rdx, qword ptr [rdx]; mov rdi, rax; call rdx; 
0x000000000003388e: add edx, dword ptr [rax - 0x7a274b8]; leave; ret; 
0x000000000002e579: add edx, dword ptr [rbp - 1]; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000026f2e: add edx, eax; mov rax, qword ptr [rbp - 8]; mov dword ptr [rax], edx; nop; pop rbp; ret; 
0x000000000002c477: add edx, eax; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x0000000000041c3c: add edx, eax; mov rax, qword ptr [rbp - 8]; mov word ptr [rax + 0x70], dx; nop; leave; ret; 
0x0000000000033d39: add esp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x00000000000435fe: add esp, 0x18; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000002b372: add esp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x000000000002a55f: add esp, 0x270; pop rbx; pop r12; pop rbp; ret; 
0x0000000000043741: add esp, 0x28; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000003b539: add esp, 0x38; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000024cff: add esp, 0xc20; pop rbx; pop r12; pop rbp; ret; 
0x0000000000023017: add esp, 8; ret; 
0x0000000000039579: add esp, dword ptr [rbp - 0x76b70002]; ret 0x8d48; 
0x000000000002cec4: add qword ptr [r8], r8; leave; ret; 
0x000000000002cf84: add qword ptr [r8], rax; nop; leave; ret; 
0x000000000002ce34: add qword ptr [rax], r8; leave; ret; 
0x000000000002cf54: add qword ptr [rax], r8; nop; leave; ret; 
0x000000000002cef4: add qword ptr [rax], rax; nop; leave; ret; 
0x0000000000037bb8: add qword ptr [rbp - 0x18], 0x20; mov rax, qword ptr [rbp - 0x20]; leave; ret; 
0x000000000002c576: add r8b, byte ptr [r8]; add bl, ch; add eax, 0xb8; add cl, cl; ret; 
0x000000000002c865: add r8b, byte ptr [r8]; add byte ptr [rax - 0x75], cl; add cl, cl; ret; 
0x0000000000040f61: add r9b, 0xe0; add al, 0x89; ret 0x458b; 
0x0000000000041070: add r9d, 0xe08302e0; or al, 0x89; ret 0xb60f; 
0x0000000000037257: add rax, 0x100; pop rbp; ret; 
0x000000000002505c: add rax, 0x10; mov rdi, rax; call 0x24ff6; nop; leave; ret; 
0x0000000000033d9a: add rax, 0x10; mov rdi, rax; call 0x33e0a; leave; ret; 
0x000000000002ce29: add rax, 0x128; mov rdi, rax; call 0x41a38; leave; ret; 
0x000000000002ce4d: add rax, 0x128; mov rdi, rax; call 0x41b2e; leave; ret; 
0x000000000002ceb9: add rax, 0x128; mov rdi, rax; call 0x41bc8; leave; ret; 
0x000000000003d300: add rax, 0x18; mov rdi, rax; call 0x3d4bc; nop; leave; ret; 
0x0000000000028f0a: add rax, 0x18; pop rbp; ret; 
0x000000000003ed3a: add rax, 0x20; leave; ret; 
0x0000000000024fe6: add rax, 0x20; mov rdi, rax; call 0x25170; nop; leave; ret; 
0x000000000002ce71: add rax, 0x210; mov rdi, rax; call 0x2ba16; leave; ret; 
0x000000000002ce95: add rax, 0x230; mov rdi, rax; call 0x2ba16; leave; ret; 
0x000000000003dcd2: add rax, 0x38; mov rdi, rax; call 0x3d4bc; nop; leave; ret; 
0x0000000000026836: add rax, 0x58; mov rdi, rax; call 0x23dd0; nop; leave; ret; 
0x00000000000372bd: add rax, 0xca0; pop rbp; ret; 
0x00000000000250b0: add rax, 8; mov rdi, rax; call 0x25358; nop; leave; ret; 
0x0000000000039d89: add rax, 8; mov rdi, rax; call 0x25f76; leave; ret; 
0x0000000000026290: add rax, 8; mov rdi, rax; call 0x2625c; nop; leave; ret; 
0x00000000000263de: add rax, 8; mov rdi, rax; call 0x263aa; nop; leave; ret; 
0x00000000000422ba: add rax, rax; add rax, rdx; shl rax, 3; add rax, rcx; pop rbp; ret; 
0x00000000000422c4: add rax, rcx; pop rbp; ret; 
0x000000000002b59e: add rax, rdx; leave; ret; 
0x000000000003fe39: add rax, rdx; movzx eax, byte ptr [rax]; leave; ret; 
0x0000000000040292: add rax, rdx; movzx eax, byte ptr [rax]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003f846: add rax, rdx; movzx eax, byte ptr [rax]; pop rbp; ret; 
0x000000000002a791: add rax, rdx; pop rbp; ret; 
0x00000000000422bd: add rax, rdx; shl rax, 3; add rax, rcx; pop rbp; ret; 
0x0000000000043586: add rax, rdx; shl rax, 3; mov rdi, rax; call 0x23a90; leave; ret; 
0x000000000003c222: add rax, rdx; shl rax, 4; mov rdi, rax; call 0x23a90; leave; ret; 
0x000000000003b73e: add rdx, 0x10; mov qword ptr [rax], rdx; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000038a83: add rdx, 0x18; mov rcx, qword ptr [rdx]; movzx edx, word ptr [rbp - 0x2c]; mov esi, edx; mov rdi, rax; call rcx; 
0x0000000000043bb1: add rdx, 0x20; mov rcx, qword ptr [rdx]; movzx edx, word ptr [rbp - 0x1a]; mov esi, edx; mov rdi, rax; call rcx; 
0x0000000000043b38: add rdx, 0x20; mov rcx, qword ptr [rdx]; movzx edx, word ptr [rbp - 0x2c]; mov esi, edx; mov rdi, rax; call rcx; 
0x0000000000043f08: add rdx, 0x30; mov rdx, qword ptr [rdx]; mov rdi, rax; call rdx; 
0x0000000000044663: add rdx, 0x38; mov rdx, qword ptr [rdx]; mov rdi, rax; call rdx; 
0x000000000002572c: add rdx, 8; mov rdx, qword ptr [rdx]; mov rdi, rax; call rdx; 
0x000000000002c476: add rdx, rax; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x0000000000033d38: add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x00000000000435fd: add rsp, 0x18; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000002b371: add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x000000000002a55e: add rsp, 0x270; pop rbx; pop r12; pop rbp; ret; 
0x0000000000043740: add rsp, 0x28; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000003b538: add rsp, 0x38; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000024cfe: add rsp, 0xc20; pop rbx; pop r12; pop rbp; ret; 
0x0000000000023016: add rsp, 8; ret; 
0x0000000000031187: and al, 0; add cl, cl; ret; 
0x0000000000032844: and al, 0xe; add byte ptr [rax], al; leave; ret; 
0x0000000000042f50: and al, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000004170a: and al, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000319f7: and al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000028db6: and al, byte ptr [rbx]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000033c1c: and al, byte ptr [rcx]; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000033a8c: and bh, bh; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000308f0: and bl, byte ptr [rax]; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000024d01: and byte ptr [rax + rax], cl; add byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000031b6b: and byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000315e3: and byte ptr [rax], al; add cl, cl; ret; 
0x000000000002be48: and byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000002b374: and byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x000000000002b7bc: and byte ptr [rcx - 0x366f0001], al; ret; 
0x0000000000032ec7: and byte ptr [rdi - 1], dh; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000028d5f: and byte ptr [rdi], cl; mov bh, 0x55; in al, 0x83; ret 0xf01; 
0x000000000002b2b9: and byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr [rbp - 0x18], rax; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x000000000003945c: and byte ptr [rsi - 0x76b70002], ah; ret 0x8d48; 
0x0000000000033036: and byte ptr [rsi], al; add byte ptr [rax], al; leave; ret; 
0x000000000002f067: and cl, byte ptr [rsi]; add byte ptr [rax], al; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000003ed3d: and cl, cl; ret; 
0x00000000000418f1: and dh, bh; call qword ptr [rax + 0x10c48348]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000043f36: and dh, byte ptr [rbx]; add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x000000000003840a: and dh, byte ptr [rdi - 0x76b70002]; ret 0x8d48; 
0x000000000003146f: and dword ptr [rax], eax; add cl, cl; ret; 
0x000000000002a8df: and eax, 0x28; je 0x2a8eb; call 0x23b10; leave; ret; 
0x000000000002aef7: and eax, 0x28; je 0x2af03; call 0x23b10; leave; ret; 
0x000000000002af60: and eax, 0x28; je 0x2af6c; call 0x23b10; leave; ret; 
0x000000000002b07e: and eax, 0x28; je 0x2b08a; call 0x23b10; leave; ret; 
0x000000000002b48a: and eax, 0x28; je 0x2b496; call 0x23b10; leave; ret; 
0x000000000002c0c2: and eax, 0x28; je 0x2c0ce; call 0x23b10; leave; ret; 
0x000000000002c112: and eax, 0x28; je 0x2c11e; call 0x23b10; leave; ret; 
0x000000000002c200: and eax, 0x28; je 0x2c20c; call 0x23b10; leave; ret; 
0x000000000002c2a0: and eax, 0x28; je 0x2c2ac; call 0x23b10; leave; ret; 
0x000000000002c3bb: and eax, 0x28; je 0x2c3c7; call 0x23b10; leave; ret; 
0x000000000002cb54: and eax, 0x28; je 0x2cb60; call 0x23b10; leave; ret; 
0x000000000003361c: and eax, 0x28; je 0x33628; call 0x23b10; leave; ret; 
0x0000000000033a07: and eax, 0x28; je 0x33a13; call 0x23b10; leave; ret; 
0x0000000000037343: and eax, 0x28; je 0x3734f; call 0x23b10; leave; ret; 
0x000000000003748c: and eax, 0x28; je 0x37498; call 0x23b10; leave; ret; 
0x000000000003758c: and eax, 0x28; je 0x37598; call 0x23b10; leave; ret; 
0x0000000000037cf0: and eax, 0x28; je 0x37cfc; call 0x23b10; leave; ret; 
0x0000000000037de6: and eax, 0x28; je 0x37df2; call 0x23b10; leave; ret; 
0x0000000000038aa5: and eax, 0x28; je 0x38ab1; call 0x23b10; leave; ret; 
0x000000000003901d: and eax, 0x28; je 0x39029; call 0x23b10; leave; ret; 
0x000000000003991b: and eax, 0x28; je 0x39927; call 0x23b10; leave; ret; 
0x000000000003a0e5: and eax, 0x28; je 0x3a0f1; call 0x23b10; leave; ret; 
0x000000000003a130: and eax, 0x28; je 0x3a13c; call 0x23b10; leave; ret; 
0x000000000003a1c5: and eax, 0x28; je 0x3a1d1; call 0x23b10; leave; ret; 
0x000000000003a210: and eax, 0x28; je 0x3a21c; call 0x23b10; leave; ret; 
0x000000000003aa04: and eax, 0x28; je 0x3aa10; call 0x23b10; leave; ret; 
0x000000000003ab72: and eax, 0x28; je 0x3ab7e; call 0x23b10; leave; ret; 
0x000000000003aef4: and eax, 0x28; je 0x3af00; call 0x23b10; leave; ret; 
0x000000000003b1c2: and eax, 0x28; je 0x3b1ce; call 0x23b10; leave; ret; 
0x000000000003bbc1: and eax, 0x28; je 0x3bbcd; call 0x23b10; leave; ret; 
0x000000000003bcc1: and eax, 0x28; je 0x3bccd; call 0x23b10; leave; ret; 
0x0000000000041bba: and eax, 0x28; je 0x41bc6; call 0x23b10; leave; ret; 
0x0000000000042177: and eax, 0x28; je 0x42183; call 0x23b10; leave; ret; 
0x00000000000421c4: and eax, 0x28; je 0x421d0; call 0x23b10; leave; ret; 
0x0000000000042214: and eax, 0x28; je 0x42220; call 0x23b10; leave; ret; 
0x0000000000042426: and eax, 0x28; je 0x42432; call 0x23b10; leave; ret; 
0x0000000000042929: and eax, 0x28; je 0x42935; call 0x23b10; leave; ret; 
0x0000000000042a82: and eax, 0x28; je 0x42a8e; call 0x23b10; leave; ret; 
0x0000000000042c1e: and eax, 0x28; je 0x42c2a; call 0x23b10; leave; ret; 
0x0000000000042ca9: and eax, 0x28; je 0x42cb5; call 0x23b10; leave; ret; 
0x0000000000042d34: and eax, 0x28; je 0x42d40; call 0x23b10; leave; ret; 
0x00000000000437ec: and eax, 0x28; je 0x437f8; call 0x23b10; leave; ret; 
0x000000000004383c: and eax, 0x28; je 0x43848; call 0x23b10; leave; ret; 
0x0000000000044cbe: and eax, 0x28; je 0x44cca; call 0x23b10; leave; ret; 
0x000000000004028d: and eax, 0x3fff; add rax, rdx; movzx eax, byte ptr [rax]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003f841: and eax, 0x3fff; add rax, rdx; movzx eax, byte ptr [rax]; pop rbp; ret; 
0x0000000000023ec7: and eax, 0x48000371; test eax, eax; je 0x23ed8; jmp rax; 
0x0000000000044ae7: and eax, 0x48fffdf0; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000002bf67: and eax, 0x48ffff7e; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000003170f: and eax, 0x89480000; ret; 
0x0000000000042e64: and eax, 0x8948fffe; ret; 
0x000000000002a8e7: and eax, 0xc9ffff92; ret; 
0x000000000003fe34: and eax, 0xfff; add rax, rdx; movzx eax, byte ptr [rax]; leave; ret; 
0x0000000000031883: and eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002699b: and eax, dword ptr [rax]; add byte ptr [rax], al; nop; leave; ret; 
0x00000000000312fb: and eax, dword ptr [rax]; add cl, cl; ret; 
0x0000000000024d8a: and eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002e059: and ebx, dword ptr [rdx - 1]; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000033913: and edi, edi; dec dword ptr [rax - 0x75]; clc; leave; ret; 
0x00000000000417ca: and edi, esi; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000004171f: and edi, esi; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000417c9: and edi, r14d; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000041709: and esp, dword ptr [rsi + rdi*8]; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000028db5: and r8b, byte ptr [r11]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000003170e: and rax, 0xffffffff89480000; ret; 
0x0000000000041733: and rdi, r14; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002e66d: andps xmm7, xmm7; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002c11a: bnd jns 0x2c11c; dec ecx; ret; 
0x000000000002925d: bts edi, edi; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003b73d: call 0x10c63a8a; mov qword ptr [rax], rdx; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003ba85: call 0x10c63dd2; mov qword ptr [rax], rdx; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002a9ed: call 0x16eda; inc dword ptr [rax + rax*8 - 0x74b7a78c]; mov r8d, 0xe8c78948; cmp dword ptr [rdx - 0x76b70001], ebp; ret 0x8b48; 
0x0000000000041a82: call 0x1795b4d; movzx eax, byte ptr [rbp - 1]; pop rbp; ret; 
0x0000000000026e22: call 0x1ed7eb0; nop; leave; ret; 
0x0000000000023f02: call 0x23730; call 0x23e70; mov byte ptr [rip + 0x3739d], 1; pop rbp; ret; 
0x000000000002a6b5: call 0x23770; nop; leave; ret; 
0x00000000000253c2: call 0x237e0; test eax, eax; sete al; leave; ret; 
0x000000000002b300: call 0x23800; mov rax, qword ptr [rbp - 0x10]; mov rdi, rax; call 0x23a90; leave; ret; 
0x0000000000039cec: call 0x23820; mov rax, qword ptr [rbp - 8]; mov rdx, qword ptr [rax + 0x18]; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call rdx; 
0x0000000000036eee: call 0x23880; nop; leave; ret; 
0x000000000002b7bb: call 0x238e0; nop; leave; ret; 
0x0000000000037f0d: call 0x23940; lea rax, [rip + 0x233b7]; pop rbp; ret; 
0x0000000000024d58: call 0x23a40; nop; leave; ret; 
0x0000000000024eed: call 0x23a60; leave; ret; 
0x0000000000025f4f: call 0x23a60; nop; leave; ret; 
0x000000000003de1d: call 0x23a80; nop; leave; ret; 
0x000000000002b30c: call 0x23a90; leave; ret; 
0x0000000000039394: call 0x23ab0; mov eax, 0; leave; ret; 
0x000000000002e5d6: call 0x23ab0; nop; leave; ret; 
0x000000000002a559: call 0x23b10; add rsp, 0x270; pop rbx; pop r12; pop rbp; ret; 
0x0000000000024cf9: call 0x23b10; add rsp, 0xc20; pop rbx; pop r12; pop rbp; ret; 
0x000000000002a8e6: call 0x23b10; leave; ret; 
0x0000000000043790: call 0x23b10; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x0000000000037a33: call 0x23b10; mov rax, qword ptr [rbp - 0x28]; leave; ret; 
0x0000000000037210: call 0x23b10; mov rax, qword ptr [rbp - 0x38]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000036fdb: call 0x23b10; mov rax, qword ptr [rbp - 0x48]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000370ef: call 0x23b10; mov rax, qword ptr [rbp - 0x58]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000025cc8: call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000044dd7: call 0x23b10; movq xmm0, rdx; leave; ret; 
0x0000000000033d33: call 0x23b90; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x000000000002d001: call 0x23c00; nop; leave; ret; 
0x0000000000044cf6: call 0x23cc0; nop; leave; ret; 
0x00000000000381b6: call 0x23d90; add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x0000000000036fd6: call 0x23d90; call 0x23b10; mov rax, qword ptr [rbp - 0x48]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000370ea: call 0x23d90; call 0x23b10; mov rax, qword ptr [rbp - 0x58]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000025cc3: call 0x23d90; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002a80a: call 0x23d90; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002abf9: call 0x23d90; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002683d: call 0x23dd0; nop; leave; ret; 
0x00000000000267a9: call 0x23e30; nop; leave; ret; 
0x0000000000023f07: call 0x23e70; mov byte ptr [rip + 0x3739d], 1; pop rbp; ret; 
0x0000000000024d72: call 0x24d0a; pop rbp; ret; 
0x0000000000024e76: call 0x24db7; mov eax, dword ptr [rbp - 4]; leave; ret; 
0x0000000000024ea1: call 0x24e1a; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000024ee1: call 0x24eac; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x23a60; leave; ret; 
0x00000000000268bf: call 0x24eac; nop; leave; ret; 
0x000000000002500d: call 0x24ef4; nop; leave; ret; 
0x0000000000025167: call 0x24f72; nop; leave; ret; 
0x0000000000025063: call 0x24ff6; nop; leave; ret; 
0x0000000000024fb9: call 0x25170; nop; leave; ret; 
0x00000000000251ef: call 0x251b8; nop; leave; ret; 
0x0000000000025227: call 0x251d8; nop; leave; ret; 
0x0000000000024f49: call 0x251f8; nop; leave; ret; 
0x0000000000025267: call 0x25230; nop; leave; ret; 
0x000000000002529f: call 0x25250; nop; leave; ret; 
0x0000000000024f69: call 0x25270; nop; leave; ret; 
0x00000000000250b7: call 0x25358; nop; leave; ret; 
0x000000000002a837: call 0x253a0; xor eax, 1; leave; ret; 
0x0000000000025433: call 0x253ce; nop; leave; ret; 
0x00000000000251b0: call 0x253ee; nop; leave; ret; 
0x00000000000251cf: call 0x2547c; nop; leave; ret; 
0x0000000000025247: call 0x2553c; nop; leave; ret; 
0x0000000000025676: call 0x255fc; nop; leave; ret; 
0x00000000000252e8: call 0x2561c; nop; leave; ret; 
0x0000000000033a9c: call 0x2570c; nop; leave; ret; 
0x00000000000257a5: call 0x2573c; nop; leave; ret; 
0x0000000000025398: call 0x2575c; nop; leave; ret; 
0x00000000000253e5: call 0x257ee; nop; leave; ret; 
0x0000000000025474: call 0x25847; nop; leave; ret; 
0x0000000000025493: call 0x25872; nop; leave; ret; 
0x0000000000025533: call 0x258e4; nop; leave; ret; 
0x0000000000025553: call 0x25930; nop; leave; ret; 
0x00000000000255f3: call 0x259a2; nop; leave; ret; 
0x0000000000025613: call 0x259ee; nop; leave; ret; 
0x00000000000256b6: call 0x25a47; nop; leave; ret; 
0x00000000000256d5: call 0x25a71; leave; ret; 
0x00000000000256f3: call 0x25a90; leave; ret; 
0x0000000000033911: call 0x25a90; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000025753: call 0x25aae; nop; leave; ret; 
0x00000000000257e6: call 0x25b07; nop; leave; ret; 
0x0000000000025805: call 0x25b32; nop; leave; ret; 
0x000000000002583f: call 0x25b41; nop; leave; ret; 
0x0000000000025869: call 0x25b73; nop; leave; ret; 
0x000000000003ad18: call 0x25b9c; nop; leave; ret; 
0x000000000003afe6: call 0x25cea; nop; leave; ret; 
0x0000000000025a05: call 0x25e22; nop; leave; ret; 
0x0000000000025a3f: call 0x25e31; nop; leave; ret; 
0x0000000000025a69: call 0x25e63; nop; leave; ret; 
0x0000000000025a88: call 0x25ea0; leave; ret; 
0x0000000000025aa7: call 0x25ebe; leave; ret; 
0x0000000000025ac5: call 0x25edc; nop; leave; ret; 
0x0000000000025aff: call 0x25eeb; nop; leave; ret; 
0x0000000000025b29: call 0x25f1d; nop; leave; ret; 
0x0000000000025b6b: call 0x25f30; nop; leave; ret; 
0x0000000000039d90: call 0x25f76; leave; ret; 
0x0000000000025be9: call 0x25fbe; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003b005: call 0x260ba; leave; ret; 
0x0000000000025d37: call 0x26102; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000025e5b: call 0x26170; nop; leave; ret; 
0x0000000000025eb7: call 0x261c8; leave; ret; 
0x0000000000025ed5: call 0x261e6; leave; ret; 
0x0000000000025f15: call 0x26204; nop; leave; ret; 
0x0000000000025f6f: call 0x2622c; leave; ret; 
0x0000000000025f8d: call 0x2623e; leave; ret; 
0x0000000000026297: call 0x2625c; nop; leave; ret; 
0x00000000000262bb: call 0x2627c; nop; leave; ret; 
0x0000000000025fb6: call 0x262a0; nop; leave; ret; 
0x0000000000026000: call 0x262e1; nop; leave; ret; 
0x000000000002601f: call 0x26313; leave; ret; 
0x0000000000026041: call 0x26332; nop; leave; ret; 
0x0000000000026061: call 0x26342; nop; leave; ret; 
0x0000000000026093: call 0x26352; nop; leave; ret; 
0x00000000000260b3: call 0x2637a; leave; ret; 
0x00000000000260d1: call 0x2638c; leave; ret; 
0x00000000000263e5: call 0x263aa; nop; leave; ret; 
0x0000000000026409: call 0x263ca; nop; leave; ret; 
0x00000000000260fa: call 0x263ee; nop; leave; ret; 
0x0000000000026144: call 0x2642f; nop; leave; ret; 
0x00000000000261c0: call 0x26462; nop; leave; ret; 
0x00000000000261df: call 0x264aa; leave; ret; 
0x00000000000261fd: call 0x264bc; leave; ret; 
0x0000000000026255: call 0x264da; leave; ret; 
0x00000000000262da: call 0x264ec; leave; ret; 
0x000000000002630b: call 0x2650a; nop; leave; ret; 
0x000000000002632a: call 0x26531; leave; ret; 
0x00000000000263a3: call 0x26544; leave; ret; 
0x0000000000026428: call 0x26556; leave; ret; 
0x0000000000026459: call 0x26574; nop; leave; ret; 
0x0000000000026605: call 0x2659c; nop; leave; ret; 
0x00000000000264a2: call 0x265bc; nop; leave; ret; 
0x00000000000264d3: call 0x2664e; leave; ret; 
0x0000000000026503: call 0x26660; leave; ret; 
0x000000000002656d: call 0x26672; leave; ret; 
0x00000000000265b3: call 0x26684; nop; leave; ret; 
0x0000000000026646: call 0x266dd; nop; leave; ret; 
0x000000000002669b: call 0x26708; nop; leave; ret; 
0x00000000000266d5: call 0x26717; nop; leave; ret; 
0x00000000000266ff: call 0x26749; nop; leave; ret; 
0x0000000000026741: call 0x2675c; nop; leave; ret; 
0x00000000000267c9: call 0x26784; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x23a60; leave; ret; 
0x0000000000026869: call 0x267dc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x23a60; leave; ret; 
0x00000000000268df: call 0x2688a; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x23a60; leave; ret; 
0x0000000000026947: call 0x268f2; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x23a60; leave; ret; 
0x0000000000026a1c: call 0x269a2; nop; leave; ret; 
0x000000000002699a: call 0x269c2; nop; leave; ret; 
0x00000000000269b9: call 0x26a64; nop; leave; ret; 
0x0000000000026a5c: call 0x26abd; nop; leave; ret; 
0x0000000000026a7b: call 0x26ae8; nop; leave; ret; 
0x0000000000026ab5: call 0x26af7; nop; leave; ret; 
0x0000000000026adf: call 0x26b29; nop; leave; ret; 
0x0000000000026b21: call 0x26b3c; nop; leave; ret; 
0x0000000000026bc1: call 0x26bca; nop; leave; ret; 
0x000000000002d0d1: call 0x26c8a; nop; leave; ret; 
0x0000000000028dea: call 0x28d82; pop rbp; ret; 
0x0000000000028e45: call 0x28df2; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000003c9b9: call 0x28f26; movzx eax, al; leave; ret; 
0x00000000000398d5: call 0x28f3c; leave; ret; 
0x000000000002a5d2: call 0x2a56a; pop rbp; ret; 
0x000000000002b4d2: call 0x2a5eb; mov byte ptr [rax], 0; nop; leave; ret; 
0x000000000004322e: call 0x2a5eb; mov byte ptr [rax], bl; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002cbc8: call 0x2a5eb; mov dword ptr [rax], 0; nop; leave; ret; 
0x00000000000316be: call 0x2a5eb; nop; leave; ret; 
0x000000000002a695: call 0x2a65e; nop; leave; ret; 
0x000000000002a675: call 0x2a6be; nop; leave; ret; 
0x00000000000394ae: call 0x2a6ea; mov eax, 1; leave; ret; 
0x0000000000040828: call 0x2a6ea; nop; leave; ret; 
0x00000000000417fb: call 0x2a776; movzx eax, byte ptr [rax]; leave; ret; 
0x000000000003d39d: call 0x2a776; movzx edx, byte ptr [rbp - 0x10]; mov byte ptr [rax], dl; nop; leave; ret; 
0x000000000002a6e1: call 0x2a862; nop; leave; ret; 
0x000000000002a76e: call 0x2ac06; nop; leave; ret; 
0x000000000002a859: call 0x2ac98; nop; leave; ret; 
0x000000000002ac90: call 0x2aeb0; nop; leave; ret; 
0x000000000002acc7: call 0x2af05; leave; ret; 
0x000000000002acbf: call 0x2af6e; mov rdi, rax; call 0x2af05; leave; ret; 
0x000000000002acf4: call 0x2af80; leave; ret; 
0x000000000002ae52: call 0x2b00a; leave; ret; 
0x000000000002aea5: call 0x2b08c; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002afa6: call 0x2b266; leave; ret; 
0x000000000002b003: call 0x2b2c8; leave; ret; 
0x000000000002b039: call 0x2b313; leave; ret; 
0x000000000002b0ba: call 0x2b3a7; leave; ret; 
0x000000000002b21e: call 0x2b498; leave; ret; 
0x000000000003b241: call 0x2b4dd; leave; ret; 
0x000000000002b2b8: call 0x2b4dd; mov qword ptr [rbp - 0x18], rax; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x000000000002b4af: call 0x2b526; leave; ret; 
0x000000000002b3d5: call 0x2b5b5; leave; ret; 
0x000000000002b420: call 0x2b5f5; leave; ret; 
0x000000000002b51e: call 0x2b60f; leave; ret; 
0x000000000002b5df: call 0x2b660; leave; ret; 
0x000000000002b6d9: call 0x2b775; nop; leave; ret; 
0x000000000002b6f8: call 0x2b7c4; mov rdi, rax; call 0x2b7d9; leave; ret; 
0x000000000002b700: call 0x2b7d9; leave; ret; 
0x000000000002b815: call 0x2b832; leave; ret; 
0x000000000002b85c: call 0x2b863; leave; ret; 
0x000000000002eab5: call 0x2b94c; nop; leave; ret; 
0x000000000002d078: call 0x2b97a; nop; leave; ret; 
0x000000000002ce7a: call 0x2ba16; leave; ret; 
0x000000000002b972: call 0x2bb38; nop; leave; ret; 
0x000000000002ba93: call 0x2be76; nop; leave; ret; 
0x000000000002c977: call 0x2c2dc; leave; ret; 
0x000000000002c001: call 0x2c4b2; nop; leave; ret; 
0x000000000002c02b: call 0x2c516; nop; leave; ret; 
0x000000000002c2d4: call 0x2c659; nop; leave; ret; 
0x000000000002c320: call 0x2c695; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002c359: call 0x2c703; leave; ret; 
0x000000000002c3ec: call 0x2c756; nop; leave; ret; 
0x000000000002c422: call 0x2c76a; nop; leave; ret; 
0x000000000002c4aa: call 0x2c79c; leave; ret; 
0x000000000002c5b1: call 0x2c7f7; leave; ret; 
0x000000000002c64b: call 0x2c89f; add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x000000000002c67b: call 0x2c8e1; nop; leave; ret; 
0x000000000002c6f5: call 0x2c937; add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x000000000002c731: call 0x2c94d; leave; ret; 
0x000000000002c74f: call 0x2c97e; leave; ret; 
0x000000000002c7c2: call 0x2c9ae; leave; ret; 
0x000000000002c7f0: call 0x2ca10; leave; ret; 
0x000000000002c825: call 0x2ca74; leave; ret; 
0x000000000002c843: call 0x2caa6; mov rax, qword ptr [rax]; leave; ret; 
0x000000000002c864: call 0x2cab8; mov rax, qword ptr [rax]; leave; ret; 
0x000000000002c898: call 0x2caca; leave; ret; 
0x000000000002c8da: call 0x2cafc; leave; ret; 
0x000000000002c930: call 0x2cb62; leave; ret; 
0x000000000002c995: call 0x2cb94; leave; ret; 
0x000000000002ca00: call 0x2cbd6; mov qword ptr [rbp - 0x18], rax; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x000000000002ca9e: call 0x2cc1e; leave; ret; 
0x000000000002caf4: call 0x2cc6d; leave; ret; 
0x000000000002cc62: call 0x2cd40; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002cdd8: call 0x2cde0; nop; leave; ret; 
0x00000000000320a9: call 0x2ce16; leave; ret; 
0x000000000003214d: call 0x2ce3a; leave; ret; 
0x00000000000321f1: call 0x2ce5e; leave; ret; 
0x0000000000032295: call 0x2ce82; leave; ret; 
0x0000000000032339: call 0x2cea6; leave; ret; 
0x00000000000323f9: call 0x2ceca; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000324bf: call 0x2cefa; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032585: call 0x2cf2a; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003264b: call 0x2cf5a; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032711: call 0x2cf8a; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000327d7: call 0x2cfba; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003289d: call 0x2cfea; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032963: call 0x2d00a; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032a29: call 0x2d034; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032aef: call 0x2d080; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032b99: call 0x2d0b0; nop; leave; ret; 
0x0000000000032c3f: call 0x2de4c; nop; leave; ret; 
0x0000000000032ce5: call 0x2de76; nop; leave; ret; 
0x000000000002d02b: call 0x2e4bc; nop; leave; ret; 
0x000000000002f548: call 0x30733; nop; leave; ret; 
0x000000000002f567: call 0x30779; mov rdi, rax; call 0x307a4; leave; ret; 
0x000000000002f56f: call 0x307a4; leave; ret; 
0x000000000002f5e5: call 0x307e0; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002f63b: call 0x30886; nop; leave; ret; 
0x000000000002f65a: call 0x308cc; mov rdi, rax; call 0x308f7; leave; ret; 
0x000000000002f662: call 0x308f7; leave; ret; 
0x000000000002f6d8: call 0x30934; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002f72e: call 0x309da; nop; leave; ret; 
0x000000000002f74d: call 0x30a20; mov rdi, rax; call 0x30a4b; leave; ret; 
0x000000000002f755: call 0x30a4b; leave; ret; 
0x000000000002f7cb: call 0x30a88; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002f821: call 0x30b2e; nop; leave; ret; 
0x000000000002f840: call 0x30b74; mov rdi, rax; call 0x30b9f; leave; ret; 
0x000000000002f848: call 0x30b9f; leave; ret; 
0x000000000002f8be: call 0x30bdc; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002f914: call 0x30c82; nop; leave; ret; 
0x000000000002f933: call 0x30cc8; mov rdi, rax; call 0x30cf3; leave; ret; 
0x000000000002f93b: call 0x30cf3; leave; ret; 
0x000000000002f9b1: call 0x30d30; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fa07: call 0x30dd6; nop; leave; ret; 
0x000000000002fa45: call 0x30e47; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fac0: call 0x30ea4; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fb16: call 0x30f4a; nop; leave; ret; 
0x000000000002fb54: call 0x30fbb; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fbcf: call 0x31018; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fc25: call 0x310be; nop; leave; ret; 
0x000000000002fc63: call 0x3112f; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fcde: call 0x3118c; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fd34: call 0x31232; nop; leave; ret; 
0x000000000002fd72: call 0x312a3; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fe43: call 0x313a6; nop; leave; ret; 
0x000000000002fe81: call 0x31417; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002ff90: call 0x3158b; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030061: call 0x3168e; nop; leave; ret; 
0x000000000003009f: call 0x316f1; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003011a: call 0x3174e; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030170: call 0x317f4; nop; leave; ret; 
0x00000000000301ae: call 0x31865; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030229: call 0x318c2; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003027f: call 0x31968; nop; leave; ret; 
0x00000000000302bd: call 0x319d9; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030338: call 0x31a36; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000025349: call 0x31a96; add byte ptr [rax], al; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000003038e: call 0x31adc; nop; leave; ret; 
0x00000000000303cc: call 0x31b4d; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030447: call 0x31baa; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003049d: call 0x31c50; nop; leave; ret; 
0x00000000000304bc: call 0x31c96; mov rdi, rax; call 0x31cc1; nop; leave; ret; 
0x00000000000304c4: call 0x31cc1; nop; leave; ret; 
0x000000000003053b: call 0x31d02; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030591: call 0x31da8; nop; leave; ret; 
0x00000000000305b8: call 0x31e19; nop; leave; ret; 
0x000000000003062f: call 0x31e5a; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030685: call 0x31f00; nop; leave; ret; 
0x00000000000306a4: call 0x31f46; mov rdi, rax; call 0x31f71; nop; leave; ret; 
0x00000000000306ac: call 0x31f71; nop; leave; ret; 
0x0000000000030723: call 0x31fb2; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003079c: call 0x32072; nop; leave; ret; 
0x00000000000320a1: call 0x32080; mov rdi, rax; call 0x2ce16; leave; ret; 
0x00000000000307b7: call 0x32080; mov rdi, rax; call 0x3208e; leave; ret; 
0x00000000000307bf: call 0x3208e; leave; ret; 
0x00000000000308ef: call 0x32116; nop; leave; ret; 
0x0000000000032145: call 0x32124; mov rdi, rax; call 0x2ce3a; leave; ret; 
0x000000000003090a: call 0x32124; mov rdi, rax; call 0x32132; leave; ret; 
0x0000000000030912: call 0x32132; leave; ret; 
0x0000000000030a43: call 0x321ba; nop; leave; ret; 
0x00000000000321e9: call 0x321c8; mov rdi, rax; call 0x2ce5e; leave; ret; 
0x0000000000030a5e: call 0x321c8; mov rdi, rax; call 0x321d6; leave; ret; 
0x0000000000030a66: call 0x321d6; leave; ret; 
0x0000000000030b1d: call 0x32229; nop; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030b97: call 0x3225e; nop; leave; ret; 
0x000000000003228d: call 0x3226c; mov rdi, rax; call 0x2ce82; leave; ret; 
0x0000000000030bb2: call 0x3226c; mov rdi, rax; call 0x3227a; leave; ret; 
0x0000000000030bba: call 0x3227a; leave; ret; 
0x0000000000030c71: call 0x322cd; nop; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030ceb: call 0x32302; nop; leave; ret; 
0x0000000000032331: call 0x32310; mov rdi, rax; call 0x2cea6; leave; ret; 
0x0000000000030d06: call 0x32310; mov rdi, rax; call 0x3231e; leave; ret; 
0x0000000000030d0e: call 0x3231e; leave; ret; 
0x0000000000030e3f: call 0x323a6; nop; leave; ret; 
0x0000000000030e7d: call 0x323c2; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030fb3: call 0x3246c; nop; leave; ret; 
0x0000000000030ff1: call 0x32488; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031127: call 0x32532; nop; leave; ret; 
0x0000000000031165: call 0x3254e; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003129b: call 0x325f8; nop; leave; ret; 
0x00000000000312d9: call 0x32614; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003140f: call 0x326be; nop; leave; ret; 
0x000000000003144d: call 0x326da; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031583: call 0x32784; nop; leave; ret; 
0x00000000000315c1: call 0x327a0; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000316e9: call 0x3284a; nop; leave; ret; 
0x0000000000031727: call 0x32866; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003185d: call 0x32910; nop; leave; ret; 
0x000000000003189b: call 0x3292c; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000319d1: call 0x329d6; nop; leave; ret; 
0x0000000000031a0f: call 0x329f2; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031b45: call 0x32a9c; nop; leave; ret; 
0x0000000000031b83: call 0x32ab8; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031c3f: call 0x32b2c; nop; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031cb9: call 0x32b62; nop; leave; ret; 
0x0000000000032b91: call 0x32b70; mov rdi, rax; call 0x2d0b0; nop; leave; ret; 
0x0000000000031cd8: call 0x32b70; mov rdi, rax; call 0x32b7e; nop; leave; ret; 
0x0000000000031ce0: call 0x32b7e; nop; leave; ret; 
0x0000000000031d97: call 0x32bd2; nop; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031e11: call 0x32c08; nop; leave; ret; 
0x0000000000032c37: call 0x32c16; mov rdi, rax; call 0x2de4c; nop; leave; ret; 
0x0000000000031e38: call 0x32c24; nop; leave; ret; 
0x0000000000031eef: call 0x32c78; nop; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031f69: call 0x32cae; nop; leave; ret; 
0x0000000000032cdd: call 0x32cbc; mov rdi, rax; call 0x2de76; nop; leave; ret; 
0x0000000000031f88: call 0x32cbc; mov rdi, rax; call 0x32cca; nop; leave; ret; 
0x0000000000031f90: call 0x32cca; nop; leave; ret; 
0x00000000000320d9: call 0x32d47; nop; leave; ret; 
0x00000000000320f4: call 0x32d8e; nop; leave; ret; 
0x000000000003217d: call 0x32db6; nop; leave; ret; 
0x0000000000032198: call 0x32dfc; nop; leave; ret; 
0x0000000000032221: call 0x32e24; nop; leave; ret; 
0x000000000003223c: call 0x32e6a; nop; leave; ret; 
0x00000000000322c5: call 0x32e92; nop; leave; ret; 
0x00000000000322e0: call 0x32ed8; nop; leave; ret; 
0x0000000000032369: call 0x32f00; nop; leave; ret; 
0x0000000000032384: call 0x32f46; nop; leave; ret; 
0x000000000003242e: call 0x32f6e; nop; leave; ret; 
0x0000000000032449: call 0x32fb4; nop; leave; ret; 
0x00000000000324f4: call 0x32fdc; nop; leave; ret; 
0x000000000003250f: call 0x33022; nop; leave; ret; 
0x00000000000325ba: call 0x3304a; nop; leave; ret; 
0x00000000000325d5: call 0x33090; nop; leave; ret; 
0x0000000000032680: call 0x330b8; nop; leave; ret; 
0x000000000003269b: call 0x330fe; nop; leave; ret; 
0x0000000000032746: call 0x33126; nop; leave; ret; 
0x0000000000032761: call 0x3316c; nop; leave; ret; 
0x000000000003280c: call 0x33194; nop; leave; ret; 
0x0000000000032827: call 0x331da; nop; leave; ret; 
0x00000000000328d2: call 0x33202; nop; leave; ret; 
0x00000000000328ed: call 0x3323a; nop; leave; ret; 
0x0000000000032998: call 0x33262; nop; leave; ret; 
0x00000000000329b3: call 0x332a8; nop; leave; ret; 
0x0000000000032a5e: call 0x332d0; nop; leave; ret; 
0x0000000000032a79: call 0x33316; nop; leave; ret; 
0x0000000000032b24: call 0x3333e; nop; leave; ret; 
0x0000000000032b3f: call 0x33384; nop; leave; ret; 
0x0000000000032bca: call 0x333ac; nop; leave; ret; 
0x0000000000032be5: call 0x333f2; nop; leave; ret; 
0x0000000000032c70: call 0x3341a; nop; leave; ret; 
0x0000000000032c8b: call 0x33460; nop; leave; ret; 
0x0000000000032d16: call 0x33488; nop; leave; ret; 
0x0000000000032d31: call 0x334ce; nop; leave; ret; 
0x0000000000033550: call 0x334e8; pop rbp; ret; 
0x0000000000033887: call 0x335d9; mov qword ptr [rbx], rax; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000307d9: call 0x3365a; leave; ret; 
0x000000000003206b: call 0x3366c; leave; ret; 
0x000000000003375e: call 0x3370e; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000337fb: call 0x337c4; nop; leave; ret; 
0x000000000003381b: call 0x337e4; nop; leave; ret; 
0x0000000000033846: call 0x33804; nop; leave; ret; 
0x0000000000033730: call 0x338c4; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000033933: call 0x33940; test rax, rax; setne al; leave; ret; 
0x00000000000339a1: call 0x3395e; nop; leave; ret; 
0x0000000000033781: call 0x3397e; nop; leave; ret; 
0x00000000000337db: call 0x33a16; nop; leave; ret; 
0x000000000003ceb8: call 0x33a42; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000033957: call 0x33af2; leave; ret; 
0x0000000000033975: call 0x33b14; nop; leave; ret; 
0x0000000000033a39: call 0x33c24; nop; leave; ret; 
0x0000000000039dd2: call 0x33c5c; mov rdx, rax; mov rax, qword ptr [rbp - 0x18]; mov rsi, rdx; mov rdi, rax; call rbx; 
0x0000000000033b09: call 0x33c6e; mov rax, qword ptr [rax]; leave; ret; 
0x0000000000033b2b: call 0x33c8c; nop; leave; ret; 
0x0000000000033b69: call 0x33cd4; nop; leave; ret; 
0x0000000000033c1b: call 0x33d42; nop; leave; ret; 
0x0000000000033c85: call 0x33d51; leave; ret; 
0x0000000000033d68: call 0x33dec; leave; ret; 
0x0000000000033da1: call 0x33e0a; leave; ret; 
0x0000000000033dd2: call 0x33e28; nop; leave; ret; 
0x0000000000033e03: call 0x33e4f; leave; ret; 
0x0000000000033e21: call 0x33e61; leave; ret; 
0x0000000000033e78: call 0x33e7f; leave; ret; 
0x0000000000036eaf: call 0x36e47; pop rbp; ret; 
0x0000000000037133: call 0x37351; leave; ret; 
0x0000000000037294: call 0x3749a; leave; ret; 
0x00000000000372f3: call 0x374e6; leave; ret; 
0x0000000000037392: call 0x375a9; leave; ret; 
0x00000000000374d0: call 0x37a5c; leave; ret; 
0x0000000000037748: call 0x37c6e; mov rax, qword ptr [rbp - 0x20]; leave; ret; 
0x0000000000037c53: call 0x37d8a; movzx eax, byte ptr [rax]; movsx eax, al; mov edi, eax; call rbx; 
0x0000000000037d21: call 0x37da0; movzx eax, byte ptr [rax]; movsx eax, al; mov edi, eax; call rbx; 
0x0000000000037d53: call 0x37df4; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000037d83: call 0x37e18; leave; ret; 
0x000000000003833a: call 0x382d2; pop rbp; ret; 
0x0000000000026ebc: call 0x38554; leave; ret; 
0x00000000000397cb: call 0x39763; pop rbp; ret; 
0x000000000003b42d: call 0x397fa; nop; leave; ret; 
0x0000000000039a0a: call 0x3983a; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x30], 0; nop; leave; ret; 
0x0000000000039e05: call 0x3989e; xor eax, 1; leave; ret; 
0x000000000003a42d: call 0x398dc; leave; ret; 
0x0000000000039a35: call 0x39996; nop; leave; ret; 
0x0000000000039b49: call 0x39aaa; nop; leave; ret; 
0x0000000000039941: call 0x39bd8; nop; leave; ret; 
0x000000000003996d: call 0x39be8; nop; leave; ret; 
0x000000000003998d: call 0x39bf8; nop; leave; ret; 
0x0000000000039aa1: call 0x39c18; nop; leave; ret; 
0x00000000000395c1: call 0x39e10; mov eax, edx; leave; ret; 
0x00000000000396d1: call 0x39e84; mov eax, edx; leave; ret; 
0x0000000000039c0f: call 0x3a01e; nop; leave; ret; 
0x0000000000039c2f: call 0x3a03e; nop; leave; ret; 
0x0000000000039c5a: call 0x3a05e; leave; ret; 
0x0000000000039c79: call 0x3a0f4; leave; ret; 
0x0000000000039d26: call 0x3a13e; leave; ret; 
0x0000000000039d45: call 0x3a1d4; leave; ret; 
0x0000000000039e53: call 0x3a242; add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x000000000003a035: call 0x3a3e0; nop; leave; ret; 
0x000000000003a055: call 0x3a3f0; nop; leave; ret; 
0x000000000003a286: call 0x3a5c0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003a316: call 0x3a958; nop; leave; ret; 
0x000000000003a3d8: call 0x3a96b; leave; ret; 
0x000000000003a45e: call 0x3a9be; leave; ret; 
0x000000000003a4d8: call 0x3aaf0; nop; leave; ret; 
0x000000000003a53e: call 0x3ab2c; leave; ret; 
0x000000000003a5b8: call 0x3ac5e; nop; leave; ret; 
0x000000000003a999: call 0x3b217; leave; ret; 
0x000000000003a9b7: call 0x3b248; leave; ret; 
0x000000000003ad59: call 0x3b543; mov rdi, rax; call 0x3b555; leave; ret; 
0x000000000003ad61: call 0x3b555; leave; ret; 
0x000000000003b027: call 0x3b88b; mov rdi, rax; call 0x3b89d; leave; ret; 
0x000000000003b02f: call 0x3b89d; leave; ret; 
0x000000000003b330: call 0x3bb4c; leave; ret; 
0x000000000003b40e: call 0x3bc4c; leave; ret; 
0x000000000003b56c: call 0x3bd64; leave; ret; 
0x000000000003b8b4: call 0x3bf88; leave; ret; 
0x000000000003bad5: call 0x3c118; leave; ret; 
0x000000000003baf3: call 0x3c12a; leave; ret; 
0x000000000003bb15: call 0x3c148; mov rdi, rax; call 0x3c15a; leave; ret; 
0x000000000003bb1d: call 0x3c15a; leave; ret; 
0x000000000003bc1b: call 0x3c178; leave; ret; 
0x000000000003bc3d: call 0x3c196; mov rdi, rax; call 0x3c1a8; leave; ret; 
0x000000000003bc45: call 0x3c1a8; leave; ret; 
0x000000000003bcf6: call 0x3c1c6; leave; ret; 
0x000000000003bd58: call 0x3c234; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003bf1a: call 0x3c314; leave; ret; 
0x000000000003bf7c: call 0x3c382; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003c141: call 0x3c462; leave; ret; 
0x000000000003c171: call 0x3c480; leave; ret; 
0x000000000003c18f: call 0x3c492; leave; ret; 
0x000000000003c1bf: call 0x3c4b0; leave; ret; 
0x000000000003c30c: call 0x3c52e; nop; leave; ret; 
0x000000000003c45a: call 0x3c66e; nop; leave; ret; 
0x000000000003c479: call 0x3c742; leave; ret; 
0x000000000003c4a9: call 0x3c754; leave; ret; 
0x000000000003c521: call 0x3c766; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003c661: call 0x3c864; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003c84a: call 0x3c922; leave; ret; 
0x000000000003d413: call 0x3d3ab; pop rbp; ret; 
0x000000000003d489: call 0x3d454; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x23a60; leave; ret; 
0x000000000003d53b: call 0x3d454; nop; leave; ret; 
0x000000000003d680: call 0x3d49c; movzx eax, byte ptr [rax]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003d307: call 0x3d4bc; nop; leave; ret; 
0x000000000003d55b: call 0x3d4f6; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x23a60; leave; ret; 
0x000000000003d875: call 0x3d80d; pop rbp; ret; 
0x000000000003d8c1: call 0x3d87c; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x23a60; leave; ret; 
0x000000000003dafa: call 0x3da92; pop rbp; ret; 
0x000000000003db57: call 0x3db02; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x23a60; leave; ret; 
0x000000000003de8d: call 0x3de25; pop rbp; ret; 
0x000000000003def9: call 0x3de94; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x23a60; leave; ret; 
0x000000000003ec7a: call 0x3ec12; pop rbp; ret; 
0x000000000003ed35: call 0x3edae; add rax, 0x20; leave; ret; 
0x000000000003ed17: call 0x3edae; leave; ret; 
0x000000000003ed62: call 0x3edcc; leave; ret; 
0x000000000003edc5: call 0x3edf1; leave; ret; 
0x000000000003ee8d: call 0x3ee04; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x23a60; leave; ret; 
0x000000000003f3ef: call 0x3f387; pop rbp; ret; 
0x000000000003f44b: call 0x3f3f6; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x23a60; leave; ret; 
0x000000000003fc7d: call 0x3fc8a; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003ffd9: call 0x3ff71; pop rbp; ret; 
0x0000000000040045: call 0x3ffe0; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x23a60; leave; ret; 
0x00000000000404c3: call 0x4045b; pop rbp; ret; 
0x000000000004051f: call 0x404ca; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x23a60; leave; ret; 
0x0000000000041bec: call 0x417d4; leave; ret; 
0x0000000000041ca2: call 0x41806; nop; leave; ret; 
0x000000000002cef2: call 0x418fe; nop; leave; ret; 
0x000000000002cf22: call 0x419c4; nop; leave; ret; 
0x000000000002ce32: call 0x41a38; leave; ret; 
0x000000000002cf82: call 0x41a8e; nop; leave; ret; 
0x000000000002ce56: call 0x41b2e; leave; ret; 
0x000000000002cec2: call 0x41bc8; leave; ret; 
0x000000000002cfe2: call 0x41bf4; nop; leave; ret; 
0x000000000002cf52: call 0x41c4a; nop; leave; ret; 
0x000000000002d0a8: call 0x41c6a; nop; leave; ret; 
0x000000000002cfb2: call 0x41caa; nop; leave; ret; 
0x0000000000041df9: call 0x41d91; pop rbp; ret; 
0x0000000000040856: call 0x42116; nop; leave; ret; 
0x0000000000041e17: call 0x42434; nop; leave; ret; 
0x0000000000041f03: call 0x4257a; nop; leave; ret; 
0x000000000004231b: call 0x4281a; nop; leave; ret; 
0x00000000000423a5: call 0x428b8; leave; ret; 
0x00000000000438a1: call 0x42938; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000427de: call 0x42cc9; nop; leave; ret; 
0x00000000000428ab: call 0x42d80; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000004295a: call 0x43078; nop; leave; ret; 
0x0000000000042990: call 0x4308c; nop; leave; ret; 
0x0000000000042a20: call 0x430f5; leave; ret; 
0x0000000000042ab2: call 0x43148; nop; leave; ret; 
0x0000000000042ae8: call 0x4315c; nop; leave; ret; 
0x0000000000042b82: call 0x431c5; leave; ret; 
0x0000000000042d77: call 0x431fa; nop; leave; ret; 
0x0000000000043071: call 0x432a6; leave; ret; 
0x0000000000043123: call 0x432f2; leave; ret; 
0x0000000000043141: call 0x4334a; leave; ret; 
0x00000000000431f3: call 0x43396; leave; ret; 
0x000000000004329d: call 0x43430; nop; leave; ret; 
0x00000000000432bd: call 0x43444; leave; ret; 
0x00000000000432eb: call 0x4345c; leave; ret; 
0x0000000000043361: call 0x43512; leave; ret; 
0x000000000004338f: call 0x4352a; leave; ret; 
0x0000000000043878: call 0x438cd; leave; ret; 
0x00000000000438fb: call 0x43902; leave; ret; 
0x0000000000041d8a: call 0x43b06; leave; ret; 
0x0000000000044633: call 0x43ee4; mov eax, 1; leave; ret; 
0x000000000002de92: call 0x43ee4; nop; leave; ret; 
0x00000000000446da: call 0x44672; pop rbp; ret; 
0x0000000000037fff: call 0x4854094c; nop; leave; ret; 
0x0000000000026ee8: call 0x48c4f7f4; mov eax, dword ptr [rbp - 8]; mov byte ptr [rax + 0x13], dl; nop; pop rbp; ret; 
0x000000000002eaae: call 0x48c973fb; mov edi, edx; call 0x2b94c; nop; leave; ret; 
0x000000000002b3ce: call 0x48d13d1b; mov edi, eax; call 0x2b5b5; leave; ret; 
0x000000000002b517: call 0x48d13e64; mov edi, eax; call 0x2b60f; leave; ret; 
0x000000000002c72a: call 0x48d15077; mov edi, eax; call 0x2c94d; leave; ret; 
0x000000000002c81e: call 0x48d1516b; mov edi, eax; call 0x2ca74; leave; ret; 
0x000000000003a992: call 0x48d232df; mov edi, eax; call 0x3b217; leave; ret; 
0x000000000004311c: call 0x48d2ba69; mov edi, eax; call 0x432f2; leave; ret; 
0x00000000000431ec: call 0x48d2bb39; mov edi, eax; call 0x43396; leave; ret; 
0x00000000000438f4: call 0x48d2c241; mov edi, eax; call 0x43902; leave; ret; 
0x000000000002af9f: call 0x48d938ec; mov edi, eax; call 0x2b266; leave; ret; 
0x000000000002c7bb: call 0x48d95108; mov edi, eax; call 0x2c9ae; leave; ret; 
0x0000000000039ddd: call 0x48da272a; mov edi, eax; call rbx; 
0x0000000000039834: call 0x5dd42181; ret; 
0x000000000003fdc1: call 0x6046870e; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000041a7a: call 0x715b45; mov rax, qword ptr [rbp - 0x18]; mov byte ptr [rax + 0x75], 1; movzx eax, byte ptr [rbp - 1]; pop rbp; ret; 
0x0000000000033886: call 0x8673; dec dword ptr [rax - 0x77]; add edx, dword ptr [rax - 0x7a274b8]; leave; ret; 
0x000000000002b9f8: call 0x906fa88; ret 0x8b48; 
0x0000000000041b77: call 0xffffffff8884d28b; add byte ptr [rax], al; add byte ptr [rcx], al; ret 0x8b48; 
0x0000000000031982: call 0xffffffff894c1986; ret; 
0x0000000000031af6: call 0xffffffff894c1afa; ret; 
0x00000000000433b6: call 0xffffffff8b4c5ca6; call 0xffffffffe8cbbd09; shr byte ptr [rip - 0x76b70002], cl; ret 0x8b48; 
0x0000000000043ec1: call 0xffffffff8b4cd70e; push rbp; fmul dword ptr [rax - 0x7d]; ret 0x4820; 
0x0000000000031c40: call 0xffffffff90031c53; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003beec: call 0xffffffff90144839; leave; ret; 
0x000000000003c110: call 0xffffffff90144a5d; leave; ret; 
0x00000000000268c0: call 0xffffffff910268aa; leave; ret; 
0x000000000003bb41: call 0xffffffffc23cbbd1; sete al; pop rbp; ret; 
0x000000000002b0bb: call 0xffffffffc902b0c2; ret; 
0x000000000003146e: call 0xffffffffc9031494; ret; 
0x000000000002d07a: call 0xffffffffc993d07e; ret; 
0x000000000003ebf4: call 0xffffffffc994ebf8; ret; 
0x000000000003214e: call 0xffffffffca0320ff; ret; 
0x0000000000032296: call 0xffffffffca032246; ret; 
0x0000000000033624: call 0xffffffffca03352d; ret; 
0x000000000002ac5a: call 0xffffffffe05837a7; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x000000000002c50a: call 0xffffffffe0585057; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x000000000002b2c0: call 0xffffffffe8483e0d; leave; ret; 
0x000000000002ca08: call 0xffffffffe8485555; leave; ret; 
0x000000000002532f: call 0xffffffffe8c9dc7c; ret 3; 
0x000000000002b68b: call 0xffffffffe8ca3fd8; add byte ptr [r8], r8b; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x75], 0x45; fmul dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000002f6aa: call 0xffffffffe8ca7ff7; adc al, byte ptr [eax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002fa92: call 0xffffffffe8ca83df; out dx, eax; adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002fba1: call 0xffffffffe8ca84ee; push rsp; adc al, 0; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000030601: call 0xffffffffe8ca8f4e; sbb byte ptr ss:[rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003727a: call 0xffffffffe8cafbc7; retf; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000037378: call 0xffffffffe8cafcc5; ret 1; 
0x000000000003ece6: call 0xffffffffe8cb7633; jmp qword ptr [rsi - 2]; 
0x0000000000042d5d: call 0xffffffffe8cbb6aa; test byte ptr [rsi], 0xff; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000433bc: call 0xffffffffe8cbbd09; shr byte ptr [rip - 0x76b70002], cl; ret 0x8b48; 
0x000000000003eb0b: call 0xffffffffeb403b98; add dword ptr [rax + 0x5d8b4890], edx; clc; leave; ret; 
0x0000000000025f47: call 0xfffffffff047ea94; mov rdi, rax; call 0x23a60; nop; leave; ret; 
0x0000000000026187: call 0xfffffffff047ecd4; mov rdi, rax; call 0x23a60; nop; leave; ret; 
0x000000000002621b: call 0xfffffffff047ed68; mov rdi, rax; call 0x23a60; nop; leave; ret; 
0x0000000000026369: call 0xfffffffff047eeb6; mov rdi, rax; call 0x23a60; nop; leave; ret; 
0x0000000000026521: call 0xfffffffff047f06e; mov rdi, rax; call 0x23a60; nop; leave; ret; 
0x000000000002658b: call 0xfffffffff047f0d8; mov rdi, rax; call 0x23a60; nop; leave; ret; 
0x0000000000026773: call 0xfffffffff047f2c0; mov rdi, rax; call 0x23a60; nop; leave; ret; 
0x0000000000026b53: call 0xfffffffff047f6a0; mov rdi, rax; call 0x23a60; nop; leave; ret; 
0x0000000000033e3f: call 0xfffffffff048c98c; mov rdi, rax; call 0x23a60; nop; leave; ret; 
0x0000000000039827: call 0xfffffffff0492374; mov edx, 0; div qword ptr [rbp - 0x18]; mov rax, rdx; pop rbp; ret; 
0x00000000000374c5: call 0xfffffffff0510012; mov rsi, rcx; mov rdi, rax; call 0x37a5c; leave; ret; 
0x000000000002ae46: call 0xfffffffff0783993; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b00a; leave; ret; 
0x000000000002b02d: call 0xfffffffff0783b7a; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b313; leave; ret; 
0x0000000000043976: call 0xfffffffff861c4c3; leave; ret; 
0x00000000000418f3: call qword ptr [rax + 0x10c48348]; pop rbx; pop r12; pop rbp; ret; 
0x000000000003aae6: call qword ptr [rax + 0xb8]; add cl, cl; ret; 
0x000000000002abfd: call qword ptr [rax - 0x7a274b8]; leave; ret; 
0x000000000004106c: call qword ptr [rax]; 
0x0000000000024f2c: call r8; nop; leave; ret; 
0x0000000000023014: call rax; 
0x0000000000023014: call rax; add rsp, 8; ret; 
0x0000000000024f2d: call rax; nop; leave; ret; 
0x0000000000037c60: call rbx; 
0x0000000000039de4: call rbx; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000037c60: call rbx; test eax, eax; sete al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000038a93: call rcx; 
0x0000000000025736: call rdx; 
0x0000000000039d00: call rdx; leave; ret; 
0x0000000000025736: call rdx; nop; leave; ret; 
0x000000000002f21d: cdq; sldt word ptr [rax]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x0000000000025783: clc; add cl, byte ptr [rax - 0x77]; ret 0x8b48; 
0x000000000002c8cb: clc; add cl, byte ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000269e9: clc; add cl, byte ptr [rax - 0x77]; ret 0xb848; 
0x0000000000025643: clc; add ecx, dword ptr [rax - 0x77]; ret 0xb848; 
0x0000000000037256: clc; add rax, 0x100; pop rbp; ret; 
0x0000000000033d99: clc; add rax, 0x10; mov rdi, rax; call 0x33e0a; leave; ret; 
0x0000000000028f09: clc; add rax, 0x18; pop rbp; ret; 
0x00000000000372bc: clc; add rax, 0xca0; pop rbp; ret; 
0x000000000002cd3a: clc; add rax, rdx; leave; ret; 
0x000000000003edeb: clc; add rax, rdx; pop rbp; ret; 
0x000000000002b3e7: clc; cmp qword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x000000000003bd34: clc; in al, 0xff; dec dword ptr [rax - 0x77]; ret; 
0x0000000000023e80: clc; je 0x23e98; mov rax, qword ptr [rip + 0x37156]; test rax, rax; je 0x23e98; jmp rax; 
0x000000000002f2ab: clc; lea rdx, [rip + 0x1016]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f33d: clc; lea rdx, [rip + 0x1093]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f3cf: clc; lea rdx, [rip + 0x10f5]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f461: clc; lea rdx, [rip + 0x1157]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f4f3: clc; lea rdx, [rip + 0x11b9]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002eb41: clc; lea rdx, [rip + 0xa2d]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ebd3: clc; lea rdx, [rip + 0xa8e]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ec65: clc; lea rdx, [rip + 0xaef]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ecf7: clc; lea rdx, [rip + 0xb50]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ed89: clc; lea rdx, [rip + 0xbb1]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ee1b: clc; lea rdx, [rip + 0xc2e]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002eead: clc; lea rdx, [rip + 0xcab]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ef3f: clc; lea rdx, [rip + 0xd28]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002efd1: clc; lea rdx, [rip + 0xda5]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f063: clc; lea rdx, [rip + 0xe22]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f0f5: clc; lea rdx, [rip + 0xe9f]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f187: clc; lea rdx, [rip + 0xf1c]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f219: clc; lea rdx, [rip + 0xf99]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x0000000000024de5: clc; leave; ret; 
0x0000000000026eef: clc; mov byte ptr [rax + 0x13], dl; nop; pop rbp; ret; 
0x0000000000028edf: clc; mov byte ptr [rax + 0x32], 0; nop; leave; ret; 
0x0000000000041b26: clc; mov byte ptr [rax + 0x75], 1; nop; pop rbp; ret; 
0x0000000000041a30: clc; mov byte ptr [rax + 0x7b], dl; nop; pop rbp; ret; 
0x0000000000026c81: clc; mov byte ptr [rax + 0xa], 0xfd; nop; pop rbp; ret; 
0x0000000000026e74: clc; mov byte ptr [rax + 0xa], dl; nop; leave; ret; 
0x000000000003af42: clc; mov byte ptr [rax + 8], dl; nop; leave; ret; 
0x000000000002a61b: clc; mov byte ptr [rax], dl; nop; pop rbp; ret; 
0x0000000000028e95: clc; mov byte ptr [rbp - 4], al; movzx eax, byte ptr [rbp - 4]; pop rbp; ret; 
0x000000000003d9fd: clc; mov dword ptr [rax + 0x1c], edx; nop; pop rbp; ret; 
0x0000000000033867: clc; mov dword ptr [rax + 4], 0; nop; pop rbp; ret; 
0x0000000000026f33: clc; mov dword ptr [rax], edx; nop; pop rbp; ret; 
0x00000000000397f1: clc; mov dword ptr [rbp - 0xc], esi; mov eax, dword ptr [rbp - 0xc]; pop rbp; ret; 
0x0000000000024ddf: clc; mov dword ptr [rdx], eax; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000028f47: clc; mov eax, 1; pop rbp; ret; 
0x000000000003d31f: clc; mov eax, dword ptr [rax + 0x14]; pop rbp; ret; 
0x000000000003dd55: clc; mov eax, dword ptr [rax + 0x18]; pop rbp; ret; 
0x000000000003f85d: clc; mov eax, dword ptr [rax + 0x38]; pop rbp; ret; 
0x000000000003ec09: clc; mov eax, dword ptr [rax + 0xb0]; pop rbp; ret; 
0x0000000000037fb5: clc; mov eax, dword ptr [rax]; pop rbp; ret; 
0x0000000000024d86: clc; mov eax, dword ptr [rbp - 4]; and eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000024d9c: clc; mov eax, dword ptr [rbp - 4]; or eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000044d50: clc; mov edx, dword ptr [rbp - 0x10]; mov dword ptr [rax + 4], edx; nop; pop rbp; ret; 
0x000000000003d44a: clc; mov edx, dword ptr [rbp - 0x14]; mov dword ptr [rax + 0x10], edx; nop; pop rbp; ret; 
0x0000000000037f9a: clc; mov edx, dword ptr [rbp - 0xc]; mov dword ptr [rax], edx; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000041be6: clc; mov esi, edx; mov rdi, rax; call 0x417d4; leave; ret; 
0x00000000000254fd: clc; mov qword ptr [rax + 0x10], 0; nop; leave; ret; 
0x000000000002a888: clc; mov qword ptr [rax + 0x10], 0; nop; pop rbp; ret; 
0x000000000002c47c: clc; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x0000000000041ee0: clc; mov qword ptr [rax + 0x18], 0; nop; leave; ret; 
0x0000000000039a12: clc; mov qword ptr [rax + 0x30], 0; nop; leave; ret; 
0x000000000003985b: clc; mov qword ptr [rax + 8], 0; nop; pop rbp; ret; 
0x0000000000033c33: clc; mov qword ptr [rax], 0; nop; pop rbp; ret; 
0x0000000000037c88: clc; mov qword ptr [rax], rdx; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002b3a0: clc; mov qword ptr [rax], rdx; nop; leave; ret; 
0x0000000000024ec2: clc; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x000000000002bfd3: clc; mov qword ptr [rbp - 0x10], rsi; mov eax, 0; pop rbp; ret; 
0x000000000003bab1: clc; mov qword ptr [rbp - 0x10], rsi; mov eax, 1; pop rbp; ret; 
0x000000000003b64f: clc; mov qword ptr [rbp - 0x10], rsi; mov qword ptr [rbp - 0x18], rdx; nop; pop rbp; ret; 
0x000000000002a5f6: clc; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x000000000002b600: clc; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000025b7e: clc; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x000000000002bfae: clc; mov qword ptr [rdx + 8], rax; nop; leave; ret; 
0x0000000000025891: clc; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x00000000000398ad: clc; mov rax, qword ptr [rax + 0x10]; test rax, rax; sete al; pop rbp; ret; 
0x00000000000398cd: clc; mov rax, qword ptr [rax + 8]; mov rdi, rax; call 0x28f3c; leave; ret; 
0x0000000000037f41: clc; mov rax, qword ptr [rax + 8]; pop rbp; ret; 
0x0000000000025b95: clc; mov rax, qword ptr [rax]; pop rbp; ret; 
0x000000000002b656: clc; mov rax, qword ptr [rbp - 0x10]; add rax, rdx; leave; ret; 
0x000000000002b599: clc; mov rax, qword ptr [rbp - 0x28]; add rax, rdx; leave; ret; 
0x0000000000037252: clc; mov rax, qword ptr [rbp - 8]; add rax, 0x100; pop rbp; ret; 
0x0000000000028f05: clc; mov rax, qword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x00000000000372b8: clc; mov rax, qword ptr [rbp - 8]; add rax, 0xca0; pop rbp; ret; 
0x000000000003d31b: clc; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x14]; pop rbp; ret; 
0x000000000003dd51: clc; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x18]; pop rbp; ret; 
0x000000000003f859: clc; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x38]; pop rbp; ret; 
0x000000000003ec05: clc; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0xb0]; pop rbp; ret; 
0x0000000000037fb1: clc; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax]; pop rbp; ret; 
0x0000000000033c2f: clc; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], 0; nop; pop rbp; ret; 
0x000000000002588d: clc; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x0000000000037f3d: clc; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 8]; pop rbp; ret; 
0x0000000000025b91: clc; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x00000000000256cd: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25a71; leave; ret; 
0x00000000000256eb: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25a90; leave; ret; 
0x0000000000025a80: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25ea0; leave; ret; 
0x0000000000025a9f: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25ebe; leave; ret; 
0x000000000003ad2f: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25f76; leave; ret; 
0x000000000003affd: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x260ba; leave; ret; 
0x0000000000025eaf: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x261c8; leave; ret; 
0x0000000000025ecd: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x261e6; leave; ret; 
0x0000000000025f67: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2622c; leave; ret; 
0x0000000000025f85: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2623e; leave; ret; 
0x0000000000026017: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26313; leave; ret; 
0x00000000000260ab: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2637a; leave; ret; 
0x00000000000260c9: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2638c; leave; ret; 
0x00000000000261d7: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264aa; leave; ret; 
0x00000000000261f5: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264bc; leave; ret; 
0x000000000002624d: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264da; leave; ret; 
0x00000000000262d2: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264ec; leave; ret; 
0x0000000000026322: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26531; leave; ret; 
0x000000000002639b: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26544; leave; ret; 
0x0000000000026420: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26556; leave; ret; 
0x00000000000264cb: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2664e; leave; ret; 
0x00000000000264fb: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26660; leave; ret; 
0x0000000000026565: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26672; leave; ret; 
0x000000000002b216: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b498; leave; ret; 
0x000000000002b4a7: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b526; leave; ret; 
0x000000000002c747: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2c97e; leave; ret; 
0x000000000002c98d: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2cb94; leave; ret; 
0x00000000000307d1: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000032063: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x000000000003394f: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33af2; leave; ret; 
0x0000000000033c7d: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33d51; leave; ret; 
0x0000000000033d60: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33dec; leave; ret; 
0x0000000000033dfb: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33e4f; leave; ret; 
0x0000000000033e19: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33e61; leave; ret; 
0x0000000000033e70: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33e7f; leave; ret; 
0x0000000000039c71: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3a0f4; leave; ret; 
0x0000000000039d3d: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3a1d4; leave; ret; 
0x000000000003a9af: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3b248; leave; ret; 
0x000000000003b564: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3bd64; leave; ret; 
0x000000000003b8ac: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3bf88; leave; ret; 
0x000000000003bacd: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c118; leave; ret; 
0x000000000003baeb: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c12a; leave; ret; 
0x000000000003bc13: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c178; leave; ret; 
0x000000000003c139: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c462; leave; ret; 
0x000000000003c169: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c480; leave; ret; 
0x000000000003c187: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c492; leave; ret; 
0x000000000003c1b7: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c4b0; leave; ret; 
0x000000000003c471: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c742; leave; ret; 
0x000000000003c4a1: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c754; leave; ret; 
0x000000000003ed0f: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3edae; leave; ret; 
0x000000000003edbd: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3edf1; leave; ret; 
0x0000000000043069: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x432a6; leave; ret; 
0x0000000000043139: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x4334a; leave; ret; 
0x00000000000432b5: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x43444; leave; ret; 
0x0000000000043359: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x43512; leave; ret; 
0x0000000000028f31: clc; mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x30]; pop rbp; ret; 
0x0000000000028f1b: clc; mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x31]; pop rbp; ret; 
0x0000000000025447: clc; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002a8ab: clc; mov rcx, qword ptr [rax]; mov rax, rdx; sub rax, rcx; pop rbp; ret; 
0x000000000002a6b1: clc; mov rdi, rax; call 0x23770; nop; leave; ret; 
0x0000000000024ee9: clc; mov rdi, rax; call 0x23a60; leave; ret; 
0x00000000000267a5: clc; mov rdi, rax; call 0x23e30; nop; leave; ret; 
0x00000000000268bb: clc; mov rdi, rax; call 0x24eac; nop; leave; ret; 
0x0000000000025009: clc; mov rdi, rax; call 0x24ef4; nop; leave; ret; 
0x0000000000025163: clc; mov rdi, rax; call 0x24f72; nop; leave; ret; 
0x0000000000024fb5: clc; mov rdi, rax; call 0x25170; nop; leave; ret; 
0x00000000000251eb: clc; mov rdi, rax; call 0x251b8; nop; leave; ret; 
0x0000000000025223: clc; mov rdi, rax; call 0x251d8; nop; leave; ret; 
0x0000000000024f45: clc; mov rdi, rax; call 0x251f8; nop; leave; ret; 
0x0000000000025263: clc; mov rdi, rax; call 0x25230; nop; leave; ret; 
0x000000000002529b: clc; mov rdi, rax; call 0x25250; nop; leave; ret; 
0x0000000000024f65: clc; mov rdi, rax; call 0x25270; nop; leave; ret; 
0x000000000002542f: clc; mov rdi, rax; call 0x253ce; nop; leave; ret; 
0x00000000000251ac: clc; mov rdi, rax; call 0x253ee; nop; leave; ret; 
0x00000000000251cb: clc; mov rdi, rax; call 0x2547c; nop; leave; ret; 
0x0000000000025243: clc; mov rdi, rax; call 0x2553c; nop; leave; ret; 
0x0000000000025672: clc; mov rdi, rax; call 0x255fc; nop; leave; ret; 
0x00000000000252e4: clc; mov rdi, rax; call 0x2561c; nop; leave; ret; 
0x00000000000257a1: clc; mov rdi, rax; call 0x2573c; nop; leave; ret; 
0x0000000000025394: clc; mov rdi, rax; call 0x2575c; nop; leave; ret; 
0x00000000000253e1: clc; mov rdi, rax; call 0x257ee; nop; leave; ret; 
0x000000000002548f: clc; mov rdi, rax; call 0x25872; nop; leave; ret; 
0x000000000002554f: clc; mov rdi, rax; call 0x25930; nop; leave; ret; 
0x000000000002560f: clc; mov rdi, rax; call 0x259ee; nop; leave; ret; 
0x00000000000256d1: clc; mov rdi, rax; call 0x25a71; leave; ret; 
0x00000000000256ef: clc; mov rdi, rax; call 0x25a90; leave; ret; 
0x000000000003390d: clc; mov rdi, rax; call 0x25a90; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000002574f: clc; mov rdi, rax; call 0x25aae; nop; leave; ret; 
0x0000000000025801: clc; mov rdi, rax; call 0x25b32; nop; leave; ret; 
0x0000000000025a01: clc; mov rdi, rax; call 0x25e22; nop; leave; ret; 
0x0000000000025a84: clc; mov rdi, rax; call 0x25ea0; leave; ret; 
0x0000000000025aa3: clc; mov rdi, rax; call 0x25ebe; leave; ret; 
0x0000000000025ac1: clc; mov rdi, rax; call 0x25edc; nop; leave; ret; 
0x000000000003ad33: clc; mov rdi, rax; call 0x25f76; leave; ret; 
0x000000000003b001: clc; mov rdi, rax; call 0x260ba; leave; ret; 
0x0000000000025eb3: clc; mov rdi, rax; call 0x261c8; leave; ret; 
0x0000000000025ed1: clc; mov rdi, rax; call 0x261e6; leave; ret; 
0x0000000000025f6b: clc; mov rdi, rax; call 0x2622c; leave; ret; 
0x0000000000025f89: clc; mov rdi, rax; call 0x2623e; leave; ret; 
0x000000000002601b: clc; mov rdi, rax; call 0x26313; leave; ret; 
0x000000000002603d: clc; mov rdi, rax; call 0x26332; nop; leave; ret; 
0x000000000002605d: clc; mov rdi, rax; call 0x26342; nop; leave; ret; 
0x00000000000260af: clc; mov rdi, rax; call 0x2637a; leave; ret; 
0x00000000000260cd: clc; mov rdi, rax; call 0x2638c; leave; ret; 
0x00000000000261bc: clc; mov rdi, rax; call 0x26462; nop; leave; ret; 
0x00000000000261db: clc; mov rdi, rax; call 0x264aa; leave; ret; 
0x00000000000261f9: clc; mov rdi, rax; call 0x264bc; leave; ret; 
0x0000000000026251: clc; mov rdi, rax; call 0x264da; leave; ret; 
0x00000000000262d6: clc; mov rdi, rax; call 0x264ec; leave; ret; 
0x0000000000026326: clc; mov rdi, rax; call 0x26531; leave; ret; 
0x000000000002639f: clc; mov rdi, rax; call 0x26544; leave; ret; 
0x0000000000026424: clc; mov rdi, rax; call 0x26556; leave; ret; 
0x0000000000026601: clc; mov rdi, rax; call 0x2659c; nop; leave; ret; 
0x000000000002649e: clc; mov rdi, rax; call 0x265bc; nop; leave; ret; 
0x00000000000264cf: clc; mov rdi, rax; call 0x2664e; leave; ret; 
0x00000000000264ff: clc; mov rdi, rax; call 0x26660; leave; ret; 
0x0000000000026569: clc; mov rdi, rax; call 0x26672; leave; ret; 
0x00000000000265af: clc; mov rdi, rax; call 0x26684; nop; leave; ret; 
0x0000000000026697: clc; mov rdi, rax; call 0x26708; nop; leave; ret; 
0x0000000000026a18: clc; mov rdi, rax; call 0x269a2; nop; leave; ret; 
0x0000000000026996: clc; mov rdi, rax; call 0x269c2; nop; leave; ret; 
0x00000000000269b5: clc; mov rdi, rax; call 0x26a64; nop; leave; ret; 
0x0000000000026a77: clc; mov rdi, rax; call 0x26ae8; nop; leave; ret; 
0x000000000002a691: clc; mov rdi, rax; call 0x2a65e; nop; leave; ret; 
0x000000000002a671: clc; mov rdi, rax; call 0x2a6be; nop; leave; ret; 
0x000000000002a6dd: clc; mov rdi, rax; call 0x2a862; nop; leave; ret; 
0x000000000002a855: clc; mov rdi, rax; call 0x2ac98; nop; leave; ret; 
0x000000000002ae4e: clc; mov rdi, rax; call 0x2b00a; leave; ret; 
0x000000000002b035: clc; mov rdi, rax; call 0x2b313; leave; ret; 
0x000000000002b21a: clc; mov rdi, rax; call 0x2b498; leave; ret; 
0x000000000002b4ab: clc; mov rdi, rax; call 0x2b526; leave; ret; 
0x000000000002ba8f: clc; mov rdi, rax; call 0x2be76; nop; leave; ret; 
0x000000000002c41e: clc; mov rdi, rax; call 0x2c76a; nop; leave; ret; 
0x000000000002c74b: clc; mov rdi, rax; call 0x2c97e; leave; ret; 
0x000000000002c83f: clc; mov rdi, rax; call 0x2caa6; mov rax, qword ptr [rax]; leave; ret; 
0x000000000002c860: clc; mov rdi, rax; call 0x2cab8; mov rax, qword ptr [rax]; leave; ret; 
0x000000000002c991: clc; mov rdi, rax; call 0x2cb94; leave; ret; 
0x0000000000030798: clc; mov rdi, rax; call 0x32072; nop; leave; ret; 
0x00000000000308eb: clc; mov rdi, rax; call 0x32116; nop; leave; ret; 
0x0000000000030a3f: clc; mov rdi, rax; call 0x321ba; nop; leave; ret; 
0x0000000000030b93: clc; mov rdi, rax; call 0x3225e; nop; leave; ret; 
0x0000000000030ce7: clc; mov rdi, rax; call 0x32302; nop; leave; ret; 
0x0000000000030e3b: clc; mov rdi, rax; call 0x323a6; nop; leave; ret; 
0x0000000000030faf: clc; mov rdi, rax; call 0x3246c; nop; leave; ret; 
0x0000000000031123: clc; mov rdi, rax; call 0x32532; nop; leave; ret; 
0x0000000000031297: clc; mov rdi, rax; call 0x325f8; nop; leave; ret; 
0x000000000003140b: clc; mov rdi, rax; call 0x326be; nop; leave; ret; 
0x000000000003157f: clc; mov rdi, rax; call 0x32784; nop; leave; ret; 
0x00000000000316e5: clc; mov rdi, rax; call 0x3284a; nop; leave; ret; 
0x0000000000031859: clc; mov rdi, rax; call 0x32910; nop; leave; ret; 
0x00000000000319cd: clc; mov rdi, rax; call 0x329d6; nop; leave; ret; 
0x0000000000031b41: clc; mov rdi, rax; call 0x32a9c; nop; leave; ret; 
0x0000000000031cb5: clc; mov rdi, rax; call 0x32b62; nop; leave; ret; 
0x0000000000031e0d: clc; mov rdi, rax; call 0x32c08; nop; leave; ret; 
0x0000000000031f65: clc; mov rdi, rax; call 0x32cae; nop; leave; ret; 
0x00000000000320f0: clc; mov rdi, rax; call 0x32d8e; nop; leave; ret; 
0x0000000000032194: clc; mov rdi, rax; call 0x32dfc; nop; leave; ret; 
0x0000000000032238: clc; mov rdi, rax; call 0x32e6a; nop; leave; ret; 
0x00000000000322dc: clc; mov rdi, rax; call 0x32ed8; nop; leave; ret; 
0x0000000000032380: clc; mov rdi, rax; call 0x32f46; nop; leave; ret; 
0x0000000000032445: clc; mov rdi, rax; call 0x32fb4; nop; leave; ret; 
0x000000000003250b: clc; mov rdi, rax; call 0x33022; nop; leave; ret; 
0x00000000000325d1: clc; mov rdi, rax; call 0x33090; nop; leave; ret; 
0x0000000000032697: clc; mov rdi, rax; call 0x330fe; nop; leave; ret; 
0x000000000003275d: clc; mov rdi, rax; call 0x3316c; nop; leave; ret; 
0x0000000000032823: clc; mov rdi, rax; call 0x331da; nop; leave; ret; 
0x00000000000328e9: clc; mov rdi, rax; call 0x3323a; nop; leave; ret; 
0x00000000000329af: clc; mov rdi, rax; call 0x332a8; nop; leave; ret; 
0x0000000000032a75: clc; mov rdi, rax; call 0x33316; nop; leave; ret; 
0x0000000000032b3b: clc; mov rdi, rax; call 0x33384; nop; leave; ret; 
0x0000000000032be1: clc; mov rdi, rax; call 0x333f2; nop; leave; ret; 
0x0000000000032c87: clc; mov rdi, rax; call 0x33460; nop; leave; ret; 
0x0000000000032d2d: clc; mov rdi, rax; call 0x334ce; nop; leave; ret; 
0x00000000000307d5: clc; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000032067: clc; mov rdi, rax; call 0x3366c; leave; ret; 
0x00000000000337f7: clc; mov rdi, rax; call 0x337c4; nop; leave; ret; 
0x0000000000033817: clc; mov rdi, rax; call 0x337e4; nop; leave; ret; 
0x0000000000033842: clc; mov rdi, rax; call 0x33804; nop; leave; ret; 
0x000000000003399d: clc; mov rdi, rax; call 0x3395e; nop; leave; ret; 
0x000000000003377d: clc; mov rdi, rax; call 0x3397e; nop; leave; ret; 
0x00000000000337d7: clc; mov rdi, rax; call 0x33a16; nop; leave; ret; 
0x0000000000033953: clc; mov rdi, rax; call 0x33af2; leave; ret; 
0x0000000000033971: clc; mov rdi, rax; call 0x33b14; nop; leave; ret; 
0x0000000000033a35: clc; mov rdi, rax; call 0x33c24; nop; leave; ret; 
0x0000000000033b05: clc; mov rdi, rax; call 0x33c6e; mov rax, qword ptr [rax]; leave; ret; 
0x0000000000033b27: clc; mov rdi, rax; call 0x33c8c; nop; leave; ret; 
0x0000000000033c17: clc; mov rdi, rax; call 0x33d42; nop; leave; ret; 
0x0000000000033c81: clc; mov rdi, rax; call 0x33d51; leave; ret; 
0x0000000000033d64: clc; mov rdi, rax; call 0x33dec; leave; ret; 
0x0000000000033dff: clc; mov rdi, rax; call 0x33e4f; leave; ret; 
0x0000000000033e1d: clc; mov rdi, rax; call 0x33e61; leave; ret; 
0x0000000000033e74: clc; mov rdi, rax; call 0x33e7f; leave; ret; 
0x0000000000037d4f: clc; mov rdi, rax; call 0x37df4; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000003b429: clc; mov rdi, rax; call 0x397fa; nop; leave; ret; 
0x0000000000039e01: clc; mov rdi, rax; call 0x3989e; xor eax, 1; leave; ret; 
0x0000000000039a31: clc; mov rdi, rax; call 0x39996; nop; leave; ret; 
0x0000000000039b45: clc; mov rdi, rax; call 0x39aaa; nop; leave; ret; 
0x000000000003993d: clc; mov rdi, rax; call 0x39bd8; nop; leave; ret; 
0x0000000000039969: clc; mov rdi, rax; call 0x39be8; nop; leave; ret; 
0x0000000000039989: clc; mov rdi, rax; call 0x39bf8; nop; leave; ret; 
0x0000000000039a9d: clc; mov rdi, rax; call 0x39c18; nop; leave; ret; 
0x0000000000039c0b: clc; mov rdi, rax; call 0x3a01e; nop; leave; ret; 
0x0000000000039c2b: clc; mov rdi, rax; call 0x3a03e; nop; leave; ret; 
0x0000000000039c75: clc; mov rdi, rax; call 0x3a0f4; leave; ret; 
0x0000000000039d41: clc; mov rdi, rax; call 0x3a1d4; leave; ret; 
0x000000000003a031: clc; mov rdi, rax; call 0x3a3e0; nop; leave; ret; 
0x000000000003a051: clc; mov rdi, rax; call 0x3a3f0; nop; leave; ret; 
0x000000000003a9b3: clc; mov rdi, rax; call 0x3b248; leave; ret; 
0x000000000003b568: clc; mov rdi, rax; call 0x3bd64; leave; ret; 
0x000000000003b8b0: clc; mov rdi, rax; call 0x3bf88; leave; ret; 
0x000000000003bad1: clc; mov rdi, rax; call 0x3c118; leave; ret; 
0x000000000003baef: clc; mov rdi, rax; call 0x3c12a; leave; ret; 
0x000000000003bc17: clc; mov rdi, rax; call 0x3c178; leave; ret; 
0x000000000003c13d: clc; mov rdi, rax; call 0x3c462; leave; ret; 
0x000000000003c16d: clc; mov rdi, rax; call 0x3c480; leave; ret; 
0x000000000003c18b: clc; mov rdi, rax; call 0x3c492; leave; ret; 
0x000000000003c1bb: clc; mov rdi, rax; call 0x3c4b0; leave; ret; 
0x000000000003c475: clc; mov rdi, rax; call 0x3c742; leave; ret; 
0x000000000003c4a5: clc; mov rdi, rax; call 0x3c754; leave; ret; 
0x000000000003d537: clc; mov rdi, rax; call 0x3d454; nop; leave; ret; 
0x000000000003ed31: clc; mov rdi, rax; call 0x3edae; add rax, 0x20; leave; ret; 
0x000000000003ed13: clc; mov rdi, rax; call 0x3edae; leave; ret; 
0x000000000003edc1: clc; mov rdi, rax; call 0x3edf1; leave; ret; 
0x0000000000041e13: clc; mov rdi, rax; call 0x42434; nop; leave; ret; 
0x0000000000041eff: clc; mov rdi, rax; call 0x4257a; nop; leave; ret; 
0x000000000004298c: clc; mov rdi, rax; call 0x4308c; nop; leave; ret; 
0x0000000000042ae4: clc; mov rdi, rax; call 0x4315c; nop; leave; ret; 
0x000000000004306d: clc; mov rdi, rax; call 0x432a6; leave; ret; 
0x000000000004313d: clc; mov rdi, rax; call 0x4334a; leave; ret; 
0x00000000000432b9: clc; mov rdi, rax; call 0x43444; leave; ret; 
0x000000000004335d: clc; mov rdi, rax; call 0x43512; leave; ret; 
0x000000000004462f: clc; mov rdi, rax; call 0x43ee4; mov eax, 1; leave; ret; 
0x0000000000039cfc: clc; mov rdi, rax; call rdx; 
0x0000000000039cfc: clc; mov rdi, rax; call rdx; leave; ret; 
0x000000000003d4ec: clc; mov rdi, rax; call rdx; nop; leave; ret; 
0x0000000000039cf4: clc; mov rdx, qword ptr [rax + 0x18]; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call rdx; 
0x000000000002a789: clc; mov rdx, qword ptr [rax]; mov rax, qword ptr [rbp - 0x10]; add rax, rdx; pop rbp; ret; 
0x0000000000037f7b: clc; mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax + 0x10], rdx; nop; pop rbp; ret; 
0x0000000000026b87: clc; mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax + 0x20], rdx; nop; pop rbp; ret; 
0x0000000000037f5b: clc; mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax + 8], rdx; nop; pop rbp; ret; 
0x0000000000037a51: clc; mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000037ffb: clc; mov rdx, qword ptr [rbp - 0x18]; mov qword ptr [rax + 0x48], rdx; nop; leave; ret; 
0x000000000002b0b3: clc; mov rsi, rcx; mov rdi, rax; call 0x2b3a7; leave; ret; 
0x000000000003b23a: clc; mov rsi, rcx; mov rdi, rax; call 0x2b4dd; leave; ret; 
0x000000000002b5d8: clc; mov rsi, rcx; mov rdi, rax; call 0x2b660; leave; ret; 
0x000000000002b80e: clc; mov rsi, rcx; mov rdi, rax; call 0x2b832; leave; ret; 
0x000000000002b855: clc; mov rsi, rcx; mov rdi, rax; call 0x2b863; leave; ret; 
0x000000000002c970: clc; mov rsi, rcx; mov rdi, rax; call 0x2c2dc; leave; ret; 
0x000000000002c352: clc; mov rsi, rcx; mov rdi, rax; call 0x2c703; leave; ret; 
0x000000000002c5aa: clc; mov rsi, rcx; mov rdi, rax; call 0x2c7f7; leave; ret; 
0x000000000002c891: clc; mov rsi, rcx; mov rdi, rax; call 0x2caca; leave; ret; 
0x000000000002c929: clc; mov rsi, rcx; mov rdi, rax; call 0x2cb62; leave; ret; 
0x000000000002ca97: clc; mov rsi, rcx; mov rdi, rax; call 0x2cc1e; leave; ret; 
0x000000000002caed: clc; mov rsi, rcx; mov rdi, rax; call 0x2cc6d; leave; ret; 
0x000000000003712c: clc; mov rsi, rcx; mov rdi, rax; call 0x37351; leave; ret; 
0x000000000003728d: clc; mov rsi, rcx; mov rdi, rax; call 0x3749a; leave; ret; 
0x000000000003738b: clc; mov rsi, rcx; mov rdi, rax; call 0x375a9; leave; ret; 
0x000000000003a3d1: clc; mov rsi, rcx; mov rdi, rax; call 0x3a96b; leave; ret; 
0x000000000003a457: clc; mov rsi, rcx; mov rdi, rax; call 0x3a9be; leave; ret; 
0x000000000003a537: clc; mov rsi, rcx; mov rdi, rax; call 0x3ab2c; leave; ret; 
0x000000000003b329: clc; mov rsi, rcx; mov rdi, rax; call 0x3bb4c; leave; ret; 
0x000000000003b407: clc; mov rsi, rcx; mov rdi, rax; call 0x3bc4c; leave; ret; 
0x0000000000042a19: clc; mov rsi, rcx; mov rdi, rax; call 0x430f5; leave; ret; 
0x0000000000042b7b: clc; mov rsi, rcx; mov rdi, rax; call 0x431c5; leave; ret; 
0x0000000000043871: clc; mov rsi, rcx; mov rdi, rax; call 0x438cd; leave; ret; 
0x000000000002aced: clc; mov rsi, rdx; mov rdi, rax; call 0x2af80; leave; ret; 
0x000000000002c4a3: clc; mov rsi, rdx; mov rdi, rax; call 0x2c79c; leave; ret; 
0x000000000002c8d3: clc; mov rsi, rdx; mov rdi, rax; call 0x2cafc; leave; ret; 
0x000000000004239e: clc; mov rsi, rdx; mov rdi, rax; call 0x428b8; leave; ret; 
0x000000000003d6b1: clc; mov word ptr [rax + 0x16], dx; nop; pop rbp; ret; 
0x00000000000402bc: clc; mov word ptr [rax + 0x20], dx; nop; pop rbp; ret; 
0x0000000000041c41: clc; mov word ptr [rax + 0x70], dx; nop; leave; ret; 
0x00000000000419bc: clc; mov word ptr [rax + 0x72], dx; nop; pop rbp; ret; 
0x000000000002cb9f: clc; movabs rax, 0x1fffffffffffffff; pop rbp; ret; 
0x000000000003c991: clc; movabs rax, 0xfffffffffffffff; pop rbp; ret; 
0x0000000000044d24: clc; movss xmm0, dword ptr [rbp - 0x10]; movss dword ptr [rax + 4], xmm0; nop; pop rbp; ret; 
0x0000000000028f35: clc; movzx eax, byte ptr [rax + 0x30]; pop rbp; ret; 
0x0000000000028f1f: clc; movzx eax, byte ptr [rax + 0x31]; pop rbp; ret; 
0x00000000000335b9: clc; movzx edx, byte ptr [rbp - 0x20]; mov byte ptr [rax + 0x18], dl; nop; pop rbp; ret; 
0x0000000000041c5e: clc; movzx edx, byte ptr [rbp - 0xc]; mov byte ptr [rax + 0x77], dl; nop; pop rbp; ret; 
0x000000000002587d: clc; nop; pop rbp; ret; 
0x0000000000024d8c: clc; pop rbp; ret; 
0x00000000000374fd: clc; sar rax, 5; pop rbp; ret; 
0x00000000000441b4: clc; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002ba0b: cld; add dword ptr [rbx + 0x7e07fc7d], eax; mov bh, 0x90; leave; ret; 
0x0000000000024d89: cld; and eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000024e7d: cld; leave; ret; 
0x0000000000038480: cld; mov ch, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000024d83: cld; mov dword ptr [rbp - 8], esi; mov eax, dword ptr [rbp - 4]; and eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000024d99: cld; mov dword ptr [rbp - 8], esi; mov eax, dword ptr [rbp - 4]; or eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000024daf: cld; mov eax, dword ptr [rbp - 4]; not eax; pop rbp; ret; 
0x0000000000028e86: cld; mov eax, dword ptr [rbp - 4]; pop rbp; ret; 
0x0000000000028e98: cld; movzx eax, byte ptr [rbp - 4]; pop rbp; ret; 
0x0000000000024db2: cld; not eax; pop rbp; ret; 
0x0000000000024d9f: cld; or eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000028e89: cld; pop rbp; ret; 
0x00000000000440ee: cld; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002c996: cli; add dword ptr [rax], eax; add cl, cl; ret; 
0x000000000002d002: cli; imul edi, edi, -1; nop; leave; ret; 
0x000000000002bb1d: cli; push rbp; mov rbp, rsp; mov eax, 0; pop rbp; ret; 
0x000000000002a8f0: cli; push rbp; mov rbp, rsp; mov eax, 1; pop rbp; ret; 
0x0000000000043fbe: cli; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000044de7: cli; sub rsp, 8; add rsp, 8; ret; 
0x0000000000023003: cli; sub rsp, 8; mov rax, qword ptr [rip + 0x37fd9]; test rax, rax; je 0x23016; call rax; 
0x000000000003bf1b: cmc; add eax, dword ptr [rax]; add cl, cl; ret; 
0x0000000000044486: cmc; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000444e7: cmc; std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000039542: cmp ah, byte ptr [rbp - 0x76b70002]; ret 0x8d48; 
0x0000000000029942: cmp ah, byte ptr [rcx - 0x76b70001]; ret 0x8d48; 
0x000000000002ff78: cmp al, 0; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003252c: cmp al, 0x11; add byte ptr [rax], al; leave; ret; 
0x000000000003eb0e: cmp al, 0xeb; add dword ptr [rax + 0x5d8b4890], edx; clc; leave; ret; 
0x000000000003febd: cmp al, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000025370: cmp al, byte ptr [rax + rax]; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000030196: cmp al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000004011e: cmp bh, dh; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000040053: cmp bh, dh; dec ecx; ret; 
0x000000000003216c: cmp byte ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000000303b4: cmp byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003add4: cmp byte ptr [rbp - 0x74b70002], cl; pop rbp; clc; leave; ret; 
0x000000000003b53b: cmp byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x0000000000040c8d: cmp byte ptr [rcx], cl; ret 0x8b48; 
0x000000000002e044: cmp byte ptr [rdx - 1], bl; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003bb1e: cmp byte ptr [rsi], al; add byte ptr [rax], al; leave; ret; 
0x0000000000029142: cmp ch, byte ptr [rcx - 0x76b70001]; ret 0x8d48; 
0x000000000002d5e9: cmp dh, 0xff; dec dword ptr [rax - 0x77]; ret 0xbe; 
0x000000000004017f: cmp dh, bh; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003ff48: cmp dh, bh; dec dword ptr [rax - 0x77]; ret 0xb70f; 
0x0000000000031728: cmp dl, byte ptr [rcx]; add byte ptr [rax], al; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000302a5: cmp dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003b40f: cmp dword ptr [rax], ecx; add byte ptr [rax], al; leave; ret; 
0x00000000000258da: cmp dword ptr [rbp - 0x20], 0; jne 0x258ae; nop; nop; leave; ret; 
0x0000000000025998: cmp dword ptr [rbp - 0x20], 0; jne 0x2596c; nop; nop; leave; ret; 
0x000000000004333d: cmp dword ptr [rbp - 0x20], 0; jne 0x43314; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000002ba0d: cmp dword ptr [rbp - 4], 7; jle 0x2b9ca; nop; leave; ret; 
0x000000000002b3e9: cmp dword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x000000000002a9ff: cmp dword ptr [rdx - 0x76b70001], ebp; ret 0x8b48; 
0x000000000002a0f3: cmp dword ptr [rdx - 0x76b70001], ebx; ret 0x8d48; 
0x0000000000039333: cmp dword ptr [rdx - 0x76b70002], ebp; ret 0x8d48; 
0x000000000002e843: cmp dword ptr [rdx - 1], edx; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000002acc8: cmp dword ptr [rdx], eax; add byte ptr [rax], al; leave; ret; 
0x00000000000251b1: cmp dword ptr [rdx], eax; add byte ptr [rax], al; nop; leave; ret; 
0x000000000002a443: cmp dword ptr [rsi - 0x76b70001], edx; ret 0x8d48; 
0x0000000000023efd: cmp eax, 0x37106; call 0x23730; call 0x23e70; mov byte ptr [rip + 0x3739d], 1; pop rbp; ret; 
0x000000000002c6f6: cmp eax, 0x48000002; add esp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x000000000002fe69: cmp eax, 0x89480000; ret; 
0x00000000000266d6: cmp eax, 0x90000000; leave; ret; 
0x000000000003a317: cmp eax, 0x90000006; leave; ret; 
0x0000000000030087: cmp eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000033e22: cmp eax, dword ptr [rax]; add byte ptr [rax], al; leave; ret; 
0x0000000000025e97: cmp eax, dword ptr [rbp - 0x10]; jne 0x25e79; nop; nop; leave; ret; 
0x000000000002ce0c: cmp eax, dword ptr [rbp - 0x10]; jne 0x2cdf6; nop; nop; pop rbp; ret; 
0x0000000000024300: cmp eax, dword ptr [rcx]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000023e7f: cmp eax, edi; je 0x23e98; mov rax, qword ptr [rip + 0x37156]; test rax, rax; je 0x23e98; jmp rax; 
0x000000000002d531: cmp ebp, dword ptr [rax - 1]; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002a041: cmp ebx, dword ptr [rdx - 0x76b70001]; ret 0x8d48; 
0x000000000003242f: cmp ecx, dword ptr [rbx]; add byte ptr [rax], al; nop; leave; ret; 
0x000000000002b943: cmp edi, 0x5d8b48ff; clc; leave; ret; 
0x0000000000025677: cmp edi, 0xc990ffff; ret; 
0x000000000004021a: cmp edi, esi; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000003fed2: cmp edi, esi; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003bb44: cmp edx, eax; sete al; pop rbp; ret; 
0x0000000000039c9f: cmp edx, eax; setne al; pop rbp; ret; 
0x0000000000040133: cmp esi, edi; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003d951: cmp esp, dword ptr [rsi + rdi*8 - 1]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000258d9: cmp qword ptr [rbp - 0x20], 0; jne 0x258ae; nop; nop; leave; ret; 
0x0000000000025997: cmp qword ptr [rbp - 0x20], 0; jne 0x2596c; nop; nop; leave; ret; 
0x000000000004333c: cmp qword ptr [rbp - 0x20], 0; jne 0x43314; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000002b3e8: cmp qword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x0000000000025e96: cmp rax, qword ptr [rbp - 0x10]; jne 0x25e79; nop; nop; leave; ret; 
0x000000000002ce0b: cmp rax, qword ptr [rbp - 0x10]; jne 0x2cdf6; nop; nop; pop rbp; ret; 
0x0000000000023e7e: cmp rax, rdi; je 0x23e98; mov rax, qword ptr [rip + 0x37156]; test rax, rax; je 0x23e98; jmp rax; 
0x000000000003ff32: cmp rdi, rsi; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000039c9e: cmp rdx, rax; setne al; pop rbp; ret; 
0x0000000000040132: cmp rsi, rdi; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003c4aa: cmpsb byte ptr [rsi], byte ptr [rdi]; add al, byte ptr [rax]; add cl, cl; ret; 
0x000000000002c22f: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000027546: cmpsb byte ptr [rsi], byte ptr [rdi]; ret 0xffff; 
0x00000000000443d5: cmpsd dword ptr [rsi], dword ptr [rdi]; idiv ch; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002bec4: cwde; add al, 0; add byte ptr [rax + 0x39], cl; fmul dword ptr [r15]; xchg eax, edi; ret; 
0x00000000000256f4: cwde; add eax, dword ptr [rax]; add cl, cl; ret; 
0x00000000000329d0: cwde; or al, 0; add cl, cl; ret; 
0x00000000000312c0: cwde; sub dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003ce6f: cwde; sub rsp, -0x80; pop rbx; pop r12; pop rbp; ret; 
0x0000000000032222: dec byte ptr [rbx]; add byte ptr [rax], al; nop; leave; ret; 
0x000000000002ad3e: dec dword ptr [rax + 0x29]; ret; 
0x0000000000039f29: dec dword ptr [rax + 0x39]; fmul dword ptr [r15]; xchg eax, edi; ret; 
0x00000000000360e9: dec dword ptr [rax + 0x39]; ret; 
0x0000000000037f11: dec dword ptr [rax - 0x73]; add eax, 0x233b7; pop rbp; ret; 
0x0000000000040594: dec dword ptr [rax - 0x73]; ror byte ptr [r8 - 0x77], 1; ret 0xbe; 
0x0000000000043232: dec dword ptr [rax - 0x74b76fe8]; pop rbp; clc; leave; ret; 
0x000000000003076b: dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000002ac56: dec dword ptr [rax - 0x75]; call 0xffffffffe05837a7; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x000000000002c506: dec dword ptr [rax - 0x75]; call 0xffffffffe0585057; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x0000000000024ea5: dec dword ptr [rax - 0x75]; clc; leave; ret; 
0x0000000000026e70: dec dword ptr [rax - 0x75]; clc; mov byte ptr [rax + 0xa], dl; nop; leave; ret; 
0x0000000000041edc: dec dword ptr [rax - 0x75]; clc; mov qword ptr [rax + 0x18], 0; nop; leave; ret; 
0x0000000000039a0e: dec dword ptr [rax - 0x75]; clc; mov qword ptr [rax + 0x30], 0; nop; leave; ret; 
0x0000000000037e0a: dec dword ptr [rax - 0x75]; clc; mov qword ptr [rax], rdx; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000024ee5: dec dword ptr [rax - 0x75]; clc; mov rdi, rax; call 0x23a60; leave; ret; 
0x0000000000039cf0: dec dword ptr [rax - 0x75]; clc; mov rdx, qword ptr [rax + 0x18]; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call rdx; 
0x0000000000037a37: dec dword ptr [rax - 0x75]; fmul st(1); ret; 
0x0000000000036fdf: dec dword ptr [rax - 0x75]; mov r8d, 0xf85d8b48; leave; ret; 
0x0000000000025ccc: dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x00000000000370f3: dec dword ptr [rax - 0x75]; test al, 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000003388b: dec dword ptr [rax - 0x77]; add edx, dword ptr [rax - 0x7a274b8]; leave; ret; 
0x000000000002d886: dec dword ptr [rax - 0x77]; ret 0x14be; 
0x000000000002d824: dec dword ptr [rax - 0x77]; ret 0x15be; 
0x000000000002d36d: dec dword ptr [rax - 0x77]; ret 0x16be; 
0x000000000002d64c: dec dword ptr [rax - 0x77]; ret 0x1be; 
0x000000000002d2ac: dec dword ptr [rax - 0x77]; ret 0x2be; 
0x000000000002d6ad: dec dword ptr [rax - 0x77]; ret 0x3be; 
0x00000000000272cf: dec dword ptr [rax - 0x77]; ret 0x458b; 
0x000000000002d76f: dec dword ptr [rax - 0x77]; ret 0x5be; 
0x000000000002d70e: dec dword ptr [rax - 0x77]; ret 0x6be; 
0x000000000002d30c: dec dword ptr [rax - 0x77]; ret 0x7be; 
0x0000000000024a82: dec dword ptr [rax - 0x77]; ret 0x858b; 
0x0000000000033bc5: dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000027112: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000024137: dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000027595: dec dword ptr [rax - 0x77]; ret 0xb60f; 
0x00000000000386ea: dec dword ptr [rax - 0x77]; ret 0xb70f; 
0x000000000002d5ec: dec dword ptr [rax - 0x77]; ret 0xbe; 
0x00000000000270cf: dec dword ptr [rax - 0x77]; ret; 
0x000000000002cc51: dec dword ptr [rax - 0x77]; ror dword ptr [rax - 0x75], 0x45; fmul dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000000273a5: dec dword ptr [rax - 0x77]; ror dword ptr [rax - 0x75], 0x45; fmul dword ptr [rbx + 0x508d0440]; dec dword ptr [rcx + 0x1c001d0]; ret 0x6348; 
0x000000000002a7c2: dec dword ptr [rax - 0x77]; ror dword ptr [rax - 0x75], 0x45; ror byte ptr [rax - 0x77], 1; ret 0x8948; 
0x000000000002448f: dec dword ptr [rax - 0x7d]; ret 0x4810; 
0x0000000000040e16: dec dword ptr [rax - 0x7d]; ret 0x4830; 
0x000000000002d15f: dec dword ptr [rax - 0x7f]; ret 0x460; 
0x00000000000411d1: dec dword ptr [rax - 0x7f]; ret 0x90; 
0x00000000000360db: dec dword ptr [rax - 0x7f]; ret; 
0x0000000000043506: dec dword ptr [rbx - 0x6fef76ed]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000273b2: dec dword ptr [rcx + 0x1c001d0]; ret 0x6348; 
0x000000000003fe35: dec dword ptr [rdi]; add byte ptr [rax], al; add rax, rdx; movzx eax, byte ptr [rax]; leave; ret; 
0x0000000000040d59: dec dword ptr [rdi]; mov bh, 0x40; jo 0x40cdf; hlt; add al, 0x89; ret 0x8b48; 
0x00000000000417ff: dec dword ptr [rdi]; mov dh, 0; leave; ret; 
0x000000000003d684: dec dword ptr [rdi]; mov dh, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003c9bd: dec dword ptr [rdi]; mov dh, 0xc0; leave; ret; 
0x000000000003c99a: dec dword ptr [rdi]; pop rbp; ret; 
0x0000000000024ef1: dec ecx; ret; 
0x0000000000038686: div byte ptr [rbx - 0x76b70002]; ret 0x8d48; 
0x0000000000039832: div dword ptr [rbp - 0x18]; mov rax, rdx; pop rbp; ret; 
0x0000000000044485: div ebp; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000039831: div qword ptr [rbp - 0x18]; mov rax, rdx; pop rbp; ret; 
0x000000000002bb1a: endbr64; push rbp; mov rbp, rsp; mov eax, 0; pop rbp; ret; 
0x000000000002a8ed: endbr64; push rbp; mov rbp, rsp; mov eax, 1; pop rbp; ret; 
0x0000000000044de4: endbr64; sub rsp, 8; add rsp, 8; ret; 
0x0000000000023000: endbr64; sub rsp, 8; mov rax, qword ptr [rip + 0x37fd9]; test rax, rax; je 0x23016; call rax; 
0x0000000000025094: fadd dword ptr [rax]; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000025554: fadd dword ptr [rbx]; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000032e7e: fadd dword ptr [rdi]; add byte ptr [rax], al; leave; ret; 
0x000000000002cb8d: fadd qword ptr [rax]; add byte ptr [rax], al; leave; ret; 
0x00000000000284a7: fadd qword ptr [rcx]; add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x000000000003d3df: fadd qword ptr [rcx]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000026001: fadd qword ptr [rdx]; add byte ptr [rax], al; nop; leave; ret; 
0x000000000003d3de: fadd qword ptr es:[rcx]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000002e6a4: fcom dword ptr [rbx - 1]; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000030e0b: fcom qword ptr [rdi - 0x74b70001]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000030a0f: fcomp dword ptr [rbx - 0x74b70001]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000035e79: fdiv st(6), st(0); dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000025e18: fdiv st(7), st(0); dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000035ec5: fdivp st(6); dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000025cca: fdivp st(7); dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000004439e: fdivrp st(6); std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000025494: fiadd dword ptr [rbx]; add byte ptr [rax], al; nop; leave; ret; 
0x000000000002ba94: fiadd word ptr [rbx]; add byte ptr [rax], al; nop; leave; ret; 
0x00000000000315c2: ficom dword ptr [rcx]; add byte ptr [rax], al; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002daa2: ficomp dword ptr [rdi - 1]; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000029e92: ficomp dword ptr [rsi - 0x76b70001]; ret 0x8d48; 
0x0000000000028656: fild dword ptr [rcx]; add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x000000000002b3d6: fild dword ptr [rcx]; add byte ptr [rax], al; leave; ret; 
0x0000000000042062: fimul dword ptr [rdi - 0x76b70002]; ret 0x8b48; 
0x000000000002c31c: fimul word ptr [rax - 0x77]; iretd; call 0x2c695; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002cc5e: fimul word ptr [rax - 0x77]; iretd; call 0x2cd40; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031a10: fimul word ptr [rdi]; add byte ptr [rax], al; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fac1: fist word ptr [rbx]; add byte ptr [rax], al; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032747: fisttp dword ptr [rcx]; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000029552: fisub dword ptr [rbp - 0x76b70001]; ret 0x8d48; 
0x00000000000327d8: fisub word ptr [rdi + 0x4890ffff]; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000002939e: fisub word ptr [rsi - 0x76b70001]; ret 0x8d48; 
0x000000000002cc63: fld dword ptr [rax]; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032bcb: fld qword ptr [rdi]; add byte ptr [rax], al; nop; leave; ret; 
0x000000000002aa5f: fldcw word ptr [rcx - 0x76b70001]; ret 0x8b48; 
0x00000000000273ab: fmul dword ptr [r11 + 0x508d0440]; dec dword ptr [rcx + 0x1c001d0]; ret 0x6348; 
0x000000000002beca: fmul dword ptr [r15]; xchg eax, edi; ret; 
0x0000000000042fe4: fmul dword ptr [r8 + 1]; ret 0x8b48; 
0x000000000002b59c: fmul dword ptr [r8 + 1]; ror cl, 1; ret; 
0x00000000000420fa: fmul dword ptr [r8 - 0x75]; adc byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x00000000000433b1: fmul dword ptr [r8 - 0x77]; call 0xffffffff8b4c5ca6; call 0xffffffffe8cbbd09; shr byte ptr [rip - 0x76b70002], cl; ret 0x8b48; 
0x0000000000042108: fmul dword ptr [r8 - 0x77]; push rax; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000002b699: fmul dword ptr [r8 - 0x77]; ret 0x8948; 
0x000000000002ae9a: fmul dword ptr [r8 - 0x77]; ror dword ptr [rax - 0x77], 1; ret 0x8948; 
0x0000000000037c26: fmul dword ptr [rax + 0x29]; ror byte ptr [rax - 0x75], 1; pop rbp; clc; leave; ret; 
0x0000000000042fe5: fmul dword ptr [rax + 1]; ret 0x8b48; 
0x000000000002b59d: fmul dword ptr [rax + 1]; ror cl, 1; ret; 
0x00000000000420fb: fmul dword ptr [rax - 0x75]; adc byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000028d7b: fmul dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000038a7b: fmul dword ptr [rax - 0x75]; push rdx; xor byte ptr [rax - 0x75], cl; adc cl, byte ptr [rax - 0x7d]; ret 0x4818; 
0x0000000000038ff2: fmul dword ptr [rax - 0x75]; push rdx; xor byte ptr [rax - 0x75], cl; adc cl, byte ptr [rax - 0x7d]; ret 0x4c10; 
0x00000000000433b2: fmul dword ptr [rax - 0x77]; call 0xffffffff8b4c5ca6; call 0xffffffffe8cbbd09; shr byte ptr [rip - 0x76b70002], cl; ret 0x8b48; 
0x0000000000042109: fmul dword ptr [rax - 0x77]; push rax; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000002b69a: fmul dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000002ae9b: fmul dword ptr [rax - 0x77]; ror dword ptr [rax - 0x77], 1; ret 0x8948; 
0x0000000000038a5b: fmul dword ptr [rax - 0x7d]; ret 0x4818; 
0x0000000000043ec7: fmul dword ptr [rax - 0x7d]; ret 0x4820; 
0x000000000003e479: fmul dword ptr [rax - 0x7d]; ret 0x4858; 
0x000000000003e415: fmul dword ptr [rax - 0x7f]; ret 0x90; 
0x00000000000273ac: fmul dword ptr [rbx + 0x508d0440]; dec dword ptr [rcx + 0x1c001d0]; ret 0x6348; 
0x000000000002becb: fmul dword ptr [rdi]; xchg eax, edi; ret; 
0x000000000003f1a0: fmul qword ptr [rax - 2]; dec dword ptr [rax - 0x77]; ret 0xb70f; 
0x0000000000037a3b: fmul st(1); ret; 
0x000000000002300b: fnstcw word ptr [rdi + 3]; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x000000000002e54f: fst qword ptr [rbp - 1]; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002e68f: fst qword ptr [rsi - 1]; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003d0a0: fsubr qword ptr [rcx - 2]; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003c520: fucomip st(0); add al, byte ptr [rax]; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x00000000000327d6: fucomip st(0); fisub word ptr [rdi + 0x4890ffff]; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000032aee: fucomip st(0); mov word ptr [rbp + 0x4890ffff], fs; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000032584: fucomip st(0); movabs al, byte ptr [0xf85d8b4890ffffa9]; leave; ret; 
0x0000000000032962: fucomip st(0); movabs byte ptr [0xf85d8b4890ffffa6], al; leave; ret; 
0x000000000003264a: fucomip st(0); or ch, byte ptr [rcx + 0x4890ffff]; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000029460: fucomip st(0); sub ch, byte ptr [rax - 0x76b70001]; ret 0x8d48; 
0x0000000000029424: fucomip st(0); test al, 0xff; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003ceb7: fucomip st(0); test dword ptr [rbx - 1], ebp; call qword ptr [rax - 0x7a274b8]; leave; ret; 
0x0000000000040d5f: hlt; add al, 0x89; ret 0x8b48; 
0x0000000000025c60: hlt; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000026ed7: hlt; add byte ptr [rdi], cl; xchg eax, esp; ret 0x8b48; 
0x000000000003f840: hlt; and eax, 0x3fff; add rax, rdx; movzx eax, byte ptr [rax]; pop rbp; ret; 
0x000000000003fe33: hlt; and eax, 0xfff; add rax, rdx; movzx eax, byte ptr [rax]; leave; ret; 
0x0000000000041c62: hlt; mov byte ptr [rax + 0x77], dl; nop; pop rbp; ret; 
0x0000000000037f9d: hlt; mov dword ptr [rax], edx; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000397f4: hlt; mov eax, dword ptr [rbp - 0xc]; pop rbp; ret; 
0x000000000003da89: hlt; mov eax, edx; mov byte ptr [rbp - 0x10], al; nop; pop rbp; ret; 
0x000000000002cffe: hlt; mov edi, eax; call 0x23c00; nop; leave; ret; 
0x0000000000041d84: hlt; mov esi, edx; mov rdi, rax; call 0x43b06; leave; ret; 
0x000000000002eb19: hlt; or dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000000397f7: hlt; pop rbp; ret; 
0x00000000000445a3: hlt; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000030e64: hlt; sub eax, 0x89480000; ret; 
0x00000000000243ab: idiv bh; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000004438a: idiv ch; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000398d7: idiv dh; dec ecx; ret; 
0x00000000000442b1: idiv ebp; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002434a: idiv edi; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000446ba: imul eax, dword ptr [rcx], 0xc7894800; call 0x23a40; nop; leave; ret; 
0x0000000000042357: imul eax, edx; pop rbp; ret; 
0x0000000000033a9d: imul ebx, dword ptr [rdi + rdi*8], -1; nop; leave; ret; 
0x000000000002d003: imul edi, edi, -1; nop; leave; ret; 
0x000000000003ceba: imul edi, edi, -1; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003bb8d: imul edi, edi, 0x8948ffff; ret 0x8b48; 
0x000000000003d23c: imul edi, esi, -1; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002f915: imul edx, dword ptr [rbx], 0xc9900000; ret; 
0x0000000000030a67: imul edx, dword ptr [rdi], 0; add cl, cl; ret; 
0x0000000000028b8d: imul edx, esi, 1; add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x0000000000042356: imul rax, rdx; pop rbp; ret; 
0x000000000003972b: in al, 0; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x0000000000031166: in al, 0x13; add byte ptr [rax], al; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030280: in al, 0x16; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000028d63: in al, 0x83; ret 0xf01; 
0x0000000000028347: in al, 0x89; ret 0x8b48; 
0x000000000003bd44: in al, 0xff; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000003bd35: in al, 0xff; dec dword ptr [rax - 0x77]; ret; 
0x00000000000253c4: in al, 0xff; inc dword ptr [rbp - 0x3f6bf040]; leave; ret; 
0x000000000003c1c0: in al, dx; add al, byte ptr [rax]; add cl, cl; ret; 
0x000000000002b51f: in al, dx; add byte ptr [rax], al; add cl, cl; ret; 
0x000000000003975d: in al, dx; mov byte ptr [rax], dl; nop; leave; ret; 
0x000000000003d44d: in al, dx; mov dword ptr [rax + 0x10], edx; nop; pop rbp; ret; 
0x0000000000023006: in al, dx; or byte ptr [rax - 0x75], cl; add eax, 0x37fd9; test rax, rax; je 0x23016; call rax; 
0x000000000003ce72: in al, dx; sbb byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x000000000002b3e3: in eax, 0x48; mov dword ptr [rbp - 8], edi; cmp qword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x00000000000397ed: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov dword ptr [rbp - 0xc], esi; mov eax, dword ptr [rbp - 0xc]; pop rbp; ret; 
0x0000000000028f43: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov eax, 1; pop rbp; ret; 
0x000000000002bfcf: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov qword ptr [rbp - 0x10], rsi; mov eax, 0; pop rbp; ret; 
0x000000000003baad: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov qword ptr [rbp - 0x10], rsi; mov eax, 1; pop rbp; ret; 
0x000000000002a5f2: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000025b7a: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x000000000003724e: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; add rax, 0x100; pop rbp; ret; 
0x0000000000028f01: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x00000000000372b4: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; add rax, 0xca0; pop rbp; ret; 
0x000000000003d317: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x14]; pop rbp; ret; 
0x000000000003dd4d: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x18]; pop rbp; ret; 
0x000000000003f855: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x38]; pop rbp; ret; 
0x000000000003ec01: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0xb0]; pop rbp; ret; 
0x0000000000037fad: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax]; pop rbp; ret; 
0x0000000000025889: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x0000000000037f39: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 8]; pop rbp; ret; 
0x0000000000025b8d: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000028f2d: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x30]; pop rbp; ret; 
0x0000000000028f17: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x31]; pop rbp; ret; 
0x0000000000025443: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002cb9b: in eax, 0x48; mov dword ptr [rbp - 8], edi; movabs rax, 0x1fffffffffffffff; pop rbp; ret; 
0x000000000003c98d: in eax, 0x48; mov dword ptr [rbp - 8], edi; movabs rax, 0xfffffffffffffff; pop rbp; ret; 
0x0000000000025879: in eax, 0x48; mov dword ptr [rbp - 8], edi; nop; pop rbp; ret; 
0x0000000000028e93: in eax, 0x89; clc; mov byte ptr [rbp - 4], al; movzx eax, byte ptr [rbp - 4]; pop rbp; ret; 
0x0000000000024dac: in eax, 0x89; jge 0x24dac; mov eax, dword ptr [rbp - 4]; not eax; pop rbp; ret; 
0x0000000000028e83: in eax, 0x89; jge 0x28e83; mov eax, dword ptr [rbp - 4]; pop rbp; ret; 
0x000000000002ce10: in eax, 0x90; nop; pop rbp; ret; 
0x000000000002bb21: in eax, 0xb8; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000002a8f4: in eax, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000025fb7: in eax, 2; add byte ptr [rax], al; nop; leave; ret; 
0x000000000003ad5a: in eax, 7; add byte ptr [rax], al; mov rdi, rax; call 0x3b555; leave; ret; 
0x000000000002c4ab: in eax, dx; add al, byte ptr [rax]; add cl, cl; ret; 
0x000000000003e485: in eax, dx; ret 0xfffe; 
0x0000000000044dd9: in eax, dx; std; jmp qword ptr [rsi + 0x48]; 
0x000000000003c662: inc byte ptr [rcx]; add byte ptr [rax], al; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003c190: inc byte ptr [rdx]; add byte ptr [rax], al; leave; ret; 
0x000000000002a9f2: inc dword ptr [rax + rax*8 - 0x74b7a78c]; mov r8d, 0xe8c78948; cmp dword ptr [rdx - 0x76b70001], ebp; ret 0x8b48; 
0x0000000000024d6a: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x24d0a; pop rbp; ret; 
0x0000000000028de2: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x28d82; pop rbp; ret; 
0x000000000002a5ca: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x2a56a; pop rbp; ret; 
0x0000000000033548: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x334e8; pop rbp; ret; 
0x0000000000036ea7: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x36e47; pop rbp; ret; 
0x0000000000038332: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x382d2; pop rbp; ret; 
0x00000000000397c3: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x39763; pop rbp; ret; 
0x000000000003d40b: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x3d3ab; pop rbp; ret; 
0x000000000003d86d: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x3d80d; pop rbp; ret; 
0x000000000003daf2: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x3da92; pop rbp; ret; 
0x000000000003de85: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x3de25; pop rbp; ret; 
0x000000000003ec72: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x3ec12; pop rbp; ret; 
0x000000000003f3e7: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x3f387; pop rbp; ret; 
0x000000000003ffd1: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x3ff71; pop rbp; ret; 
0x00000000000404bb: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x4045b; pop rbp; ret; 
0x0000000000041df1: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x41d91; pop rbp; ret; 
0x00000000000446d2: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x44672; pop rbp; ret; 
0x00000000000253c6: inc dword ptr [rbp - 0x3f6bf040]; leave; ret; 
0x0000000000039c5b: inc dword ptr [rbx]; add byte ptr [rax], al; leave; ret; 
0x000000000002b4d6: inc esi; add byte ptr [rax], al; nop; leave; ret; 
0x00000000000322fc: insb byte ptr [rdi], dx; adc eax, dword ptr [rax]; add cl, cl; ret; 
0x00000000000432ec: insb byte ptr [rdi], dx; add dword ptr [rax], eax; add cl, cl; ret; 
0x0000000000041a7d: insd dword ptr [rdi], dx; add byte ptr [rax - 0x75], cl; call 0x1795b4d; movzx eax, byte ptr [rbp - 1]; pop rbp; ret; 
0x000000000003890f: insd dword ptr [rdi], dx; mov cl, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000320c8: insd dword ptr [rdi], dx; or al, 0; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000002f756: int1; adc al, byte ptr [rax]; add cl, cl; ret; 
0x000000000002b349: int1; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000039cc5: int1; ret; 
0x0000000000025fff: iretd; call 0x262e1; nop; leave; ret; 
0x0000000000026143: iretd; call 0x2642f; nop; leave; ret; 
0x000000000002c31f: iretd; call 0x2c695; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002cc61: iretd; call 0x2cd40; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000395c0: iretd; call 0x39e10; mov eax, edx; leave; ret; 
0x00000000000396d0: iretd; call 0x39e84; mov eax, edx; leave; ret; 
0x000000000002c3c4: ja 0x2c3c5; dec ecx; ret; 
0x0000000000032dec: ja 0x32ded; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000032e5a: ja 0x32e5b; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000032ec8: ja 0x32ec9; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000003c37c: ja 0x3c37c; dec ecx; ret; 
0x0000000000041c65: ja 0x41bf7; pop rbp; ret; 
0x0000000000041d8b: ja 0x41daa; add byte ptr [rax], al; leave; ret; 
0x0000000000023f0f: jae 0x23f14; add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000033298: jae 0x33299; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000003c738: jae 0x3c738; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000043230: jae 0x43230; dec dword ptr [rax - 0x74b76fe8]; pop rbp; clc; leave; ret; 
0x0000000000043f37: jae 0x43f39; add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x0000000000044009: jae 0x44005; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002b4b0: jb 0x2b4b2; add byte ptr [rax], al; leave; ret; 
0x0000000000030a44: jb 0x30a5d; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000033306: jb 0x33307; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000033374: jb 0x33375; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x00000000000333e2: jb 0x333e3; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000039aa2: jb 0x39aa5; add byte ptr [rax], al; nop; leave; ret; 
0x00000000000419a7: jb 0x41932; ret 0xb60f; 
0x00000000000419c0: jb 0x41952; pop rbp; ret; 
0x0000000000041ac5: jb 0x41a50; ret 0xb60f; 
0x0000000000041d57: jb 0x41da1; mov eax, dword ptr [rbp - 8]; mov byte ptr [rax + 0x75], 1; nop; pop rbp; ret; 
0x0000000000041f04: jb 0x41f0c; add byte ptr [rax], al; nop; leave; ret; 
0x00000000000264d4: jbe 0x264d7; add byte ptr [rax], al; leave; ret; 
0x0000000000030686: jbe 0x306a0; add byte ptr [rax], al; nop; leave; ret; 
0x00000000000325f2: jbe 0x32604; add byte ptr [rax], al; leave; ret; 
0x0000000000032f36: jbe 0x32f37; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000032fa4: jbe 0x32fa5; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000003996e: jbe 0x39972; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000039c7a: jbe 0x39c80; add byte ptr [rax], al; leave; ret; 
0x0000000000023012: je 0x23016; call rax; 
0x0000000000023012: je 0x23016; call rax; add rsp, 8; ret; 
0x0000000000023e8d: je 0x23e98; jmp rax; 
0x0000000000023e81: je 0x23e98; mov rax, qword ptr [rip + 0x37156]; test rax, rax; je 0x23e98; jmp rax; 
0x0000000000023ece: je 0x23ed8; jmp rax; 
0x0000000000023ec2: je 0x23ed8; mov rax, qword ptr [rip + 0x37125]; test rax, rax; je 0x23ed8; jmp rax; 
0x0000000000025727: je 0x25738; mov rdx, qword ptr [rax]; add rdx, 8; mov rdx, qword ptr [rdx]; mov rdi, rax; call rdx; 
0x000000000002a8e4: je 0x2a8eb; call 0x23b10; leave; ret; 
0x000000000002adde: je 0x2ade5; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002aefc: je 0x2af03; call 0x23b10; leave; ret; 
0x000000000002af65: je 0x2af6c; call 0x23b10; leave; ret; 
0x000000000002b083: je 0x2b08a; call 0x23b10; leave; ret; 
0x000000000002b48f: je 0x2b496; call 0x23b10; leave; ret; 
0x000000000002beff: je 0x2bf06; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002c0c7: je 0x2c0ce; call 0x23b10; leave; ret; 
0x000000000002c117: je 0x2c11e; call 0x23b10; leave; ret; 
0x000000000002c205: je 0x2c20c; call 0x23b10; leave; ret; 
0x000000000002c2a5: je 0x2c2ac; call 0x23b10; leave; ret; 
0x000000000002c3c0: je 0x2c3c7; call 0x23b10; leave; ret; 
0x000000000002caf5: je 0x2caf8; add byte ptr [rax], al; leave; ret; 
0x000000000002cb59: je 0x2cb60; call 0x23b10; leave; ret; 
0x00000000000315e2: je 0x31604; add byte ptr [rax], al; leave; ret; 
0x00000000000330ee: je 0x330ef; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000003315c: je 0x3315d; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x00000000000331ca: je 0x331cb; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x00000000000334e2: je 0x334e5; add byte ptr [rax], al; leave; ret; 
0x0000000000033621: je 0x33628; call 0x23b10; leave; ret; 
0x0000000000033a0c: je 0x33a13; call 0x23b10; leave; ret; 
0x0000000000033bf7: je 0x33bfe; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003720e: je 0x37215; call 0x23b10; mov rax, qword ptr [rbp - 0x38]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000037348: je 0x3734f; call 0x23b10; leave; ret; 
0x000000000003743d: je 0x37444; call 0x23b10; mov rax, qword ptr [rbp - 0x38]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000037491: je 0x37498; call 0x23b10; leave; ret; 
0x0000000000037591: je 0x37598; call 0x23b10; leave; ret; 
0x0000000000037a31: je 0x37a38; call 0x23b10; mov rax, qword ptr [rbp - 0x28]; leave; ret; 
0x0000000000037cf5: je 0x37cfc; call 0x23b10; leave; ret; 
0x0000000000037deb: je 0x37df2; call 0x23b10; leave; ret; 
0x0000000000038aaa: je 0x38ab1; call 0x23b10; leave; ret; 
0x0000000000039022: je 0x39029; call 0x23b10; leave; ret; 
0x0000000000039920: je 0x39927; call 0x23b10; leave; ret; 
0x0000000000039f61: je 0x39f68; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003a0ea: je 0x3a0f1; call 0x23b10; leave; ret; 
0x000000000003a135: je 0x3a13c; call 0x23b10; leave; ret; 
0x000000000003a1ca: je 0x3a1d1; call 0x23b10; leave; ret; 
0x000000000003a215: je 0x3a21c; call 0x23b10; leave; ret; 
0x000000000003aa09: je 0x3aa10; call 0x23b10; leave; ret; 
0x000000000003ab77: je 0x3ab7e; call 0x23b10; leave; ret; 
0x000000000003add1: je 0x3add8; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003aef9: je 0x3af00; call 0x23b10; leave; ret; 
0x000000000003b09f: je 0x3b0a6; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003b1c7: je 0x3b1ce; call 0x23b10; leave; ret; 
0x000000000003b2f9: je 0x3b300; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003b3d7: je 0x3b3de; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003bbc6: je 0x3bbcd; call 0x23b10; leave; ret; 
0x000000000003bcc6: je 0x3bccd; call 0x23b10; leave; ret; 
0x000000000003c917: je 0x3c917; call qword ptr [rax - 0x7a274b8]; leave; ret; 
0x000000000003ed36: je 0x3ed38; add byte ptr [rax], al; add rax, 0x20; leave; ret; 
0x00000000000417c6: je 0x417cd; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000041bbf: je 0x41bc6; call 0x23b10; leave; ret; 
0x000000000004217c: je 0x42183; call 0x23b10; leave; ret; 
0x00000000000421c9: je 0x421d0; call 0x23b10; leave; ret; 
0x0000000000042219: je 0x42220; call 0x23b10; leave; ret; 
0x000000000004242b: je 0x42432; call 0x23b10; leave; ret; 
0x00000000000424bd: je 0x424c4; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000042603: je 0x4260a; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000004292e: je 0x42935; call 0x23b10; leave; ret; 
0x0000000000042a87: je 0x42a8e; call 0x23b10; leave; ret; 
0x0000000000042c23: je 0x42c2a; call 0x23b10; leave; ret; 
0x0000000000042cae: je 0x42cb5; call 0x23b10; leave; ret; 
0x0000000000042d39: je 0x42d40; call 0x23b10; leave; ret; 
0x000000000004378e: je 0x43795; call 0x23b10; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x00000000000437f1: je 0x437f8; call 0x23b10; leave; ret; 
0x0000000000043841: je 0x43848; call 0x23b10; leave; ret; 
0x0000000000044ae4: je 0x44aeb; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000044cc3: je 0x44cca; call 0x23b10; leave; ret; 
0x0000000000044dd5: je 0x44ddc; call 0x23b10; movq xmm0, rdx; leave; ret; 
0x000000000002300c: jg 0x23011; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x000000000002b53b: jg 0x2b59a; ret; 
0x0000000000030171: jg 0x30189; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000033d69: jg 0x33d6b; add byte ptr [rax], al; leave; ret; 
0x000000000003bbca: jg 0x3bbca; dec ecx; ret; 
0x00000000000440ed: jg 0x440eb; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000024d82: jge 0x24d80; mov dword ptr [rbp - 8], esi; mov eax, dword ptr [rbp - 4]; and eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000024d98: jge 0x24d96; mov dword ptr [rbp - 8], esi; mov eax, dword ptr [rbp - 4]; or eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000024dae: jge 0x24dac; mov eax, dword ptr [rbp - 4]; not eax; pop rbp; ret; 
0x0000000000025446: jge 0x25440; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000025688: jge 0x25682; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000256cc: jge 0x256c6; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25a71; leave; ret; 
0x00000000000256ea: jge 0x256e4; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25a90; leave; ret; 
0x0000000000025704: jge 0x256fe; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000257b8: jge 0x257b2; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002587c: jge 0x25876; nop; pop rbp; ret; 
0x000000000002588c: jge 0x25886; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x00000000000258db: jge 0x258bd; add byte ptr [rbp - 0x32], dh; nop; nop; leave; ret; 
0x000000000002593a: jge 0x25934; nop; pop rbp; ret; 
0x000000000002594a: jge 0x25944; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x0000000000025999: jge 0x2597b; add byte ptr [rbp - 0x32], dh; nop; nop; leave; ret; 
0x0000000000025a7f: jge 0x25a79; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25ea0; leave; ret; 
0x0000000000025a9e: jge 0x25a98; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25ebe; leave; ret; 
0x0000000000025b3c: jge 0x25b36; nop; pop rbp; ret; 
0x0000000000025b7d: jge 0x25b77; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x0000000000025b90: jge 0x25b8a; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000025cde: jge 0x25cd8; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000025e2c: jge 0x25e26; nop; pop rbp; ret; 
0x0000000000025eae: jge 0x25ea8; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x261c8; leave; ret; 
0x0000000000025ecc: jge 0x25ec6; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x261e6; leave; ret; 
0x0000000000025ee6: jge 0x25ee0; nop; pop rbp; ret; 
0x0000000000025f27: jge 0x25f21; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x0000000000025f66: jge 0x25f60; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2622c; leave; ret; 
0x0000000000025f84: jge 0x25f7e; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2623e; leave; ret; 
0x0000000000026016: jge 0x26010; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26313; leave; ret; 
0x00000000000260aa: jge 0x260a4; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2637a; leave; ret; 
0x00000000000260c8: jge 0x260c2; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2638c; leave; ret; 
0x00000000000261a1: jge 0x2619b; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000261d6: jge 0x261d0; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264aa; leave; ret; 
0x00000000000261f4: jge 0x261ee; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264bc; leave; ret; 
0x0000000000026236: jge 0x26230; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002624c: jge 0x26246; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264da; leave; ret; 
0x00000000000262d1: jge 0x262cb; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264ec; leave; ret; 
0x0000000000026321: jge 0x2631b; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26531; leave; ret; 
0x000000000002633c: jge 0x26336; nop; pop rbp; ret; 
0x000000000002634c: jge 0x26346; nop; pop rbp; ret; 
0x0000000000026384: jge 0x2637e; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002639a: jge 0x26394; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26544; leave; ret; 
0x000000000002641f: jge 0x26419; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26556; leave; ret; 
0x00000000000264b4: jge 0x264ae; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000264ca: jge 0x264c4; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2664e; leave; ret; 
0x00000000000264e4: jge 0x264de; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000264fa: jge 0x264f4; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26660; leave; ret; 
0x000000000002653b: jge 0x26535; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002654e: jge 0x26548; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000026564: jge 0x2655e; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26672; leave; ret; 
0x0000000000026618: jge 0x26612; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000026658: jge 0x26652; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002666a: jge 0x26664; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002667c: jge 0x26676; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000026712: jge 0x2670c; nop; pop rbp; ret; 
0x0000000000026753: jge 0x2674d; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x0000000000026a2e: jge 0x26a28; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000026af2: jge 0x26aec; nop; pop rbp; ret; 
0x0000000000026b33: jge 0x26b2d; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x0000000000026ed6: jge 0x26ecc; add byte ptr [rdi], cl; xchg eax, esp; ret 0x8b48; 
0x0000000000028e85: jge 0x28e83; mov eax, dword ptr [rbp - 4]; pop rbp; ret; 
0x0000000000028ef2: jge 0x28eec; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000028f04: jge 0x28efe; mov rax, qword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x0000000000028f1a: jge 0x28f14; mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x31]; pop rbp; ret; 
0x0000000000028f30: jge 0x28f2a; mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x30]; pop rbp; ret; 
0x0000000000028f46: jge 0x28f40; mov eax, 1; pop rbp; ret; 
0x000000000002a5e3: jge 0x2a5dd; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002a5f5: jge 0x2a5ef; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x000000000002a62a: jge 0x2a628; mov dword ptr [rbp - 8], esi; mov eax, dword ptr [rbp - 4]; or eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002aca2: jge 0x2ac9c; nop; pop rbp; ret; 
0x000000000002af78: jge 0x2af72; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002b215: jge 0x2b20f; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b498; leave; ret; 
0x000000000002b25e: jge 0x2b258; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002b3e6: jge 0x2b3e0; cmp qword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x000000000002b4a6: jge 0x2b4a0; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b526; leave; ret; 
0x000000000002b548: jge 0x2b542; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002b5ad: jge 0x2b5a7; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002b5f0: jge 0x2b5ea; nop; pop rbp; ret; 
0x000000000002b5ff: jge 0x2b5f9; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002b7ce: jge 0x2b7c8; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x000000000002b7e3: jge 0x2b7dd; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002b826: jge 0x2b820; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x000000000002be80: jge 0x2be7a; nop; pop rbp; ret; 
0x000000000002bfc0: jge 0x2bfba; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002bfd2: jge 0x2bfcc; mov qword ptr [rbp - 0x10], rsi; mov eax, 0; pop rbp; ret; 
0x000000000002c520: jge 0x2c51a; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x000000000002c5e3: jge 0x2c5dd; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002c68d: jge 0x2c687; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002c746: jge 0x2c740; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2c97e; leave; ret; 
0x000000000002c760: jge 0x2c75a; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x000000000002c8eb: jge 0x2c8e5; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x000000000002c8fe: jge 0x2c8f8; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002c941: jge 0x2c93b; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x000000000002c98c: jge 0x2c986; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2cb94; leave; ret; 
0x000000000002c9a6: jge 0x2c9a0; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002cab0: jge 0x2caaa; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002cac2: jge 0x2cabc; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002cb9e: jge 0x2cb98; movabs rax, 0x1fffffffffffffff; pop rbp; ret; 
0x000000000002ccda: jge 0x2ccd4; nop; pop rbp; ret; 
0x000000000002f508: jge 0x2f502; mov eax, 1; pop rbp; ret; 
0x000000000002f517: jge 0x2f511; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002f5fb: jge 0x2f5f5; mov eax, 1; pop rbp; ret; 
0x000000000002f60a: jge 0x2f604; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002f6ee: jge 0x2f6e8; mov eax, 1; pop rbp; ret; 
0x000000000002f6fd: jge 0x2f6f7; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002f7e1: jge 0x2f7db; mov eax, 1; pop rbp; ret; 
0x000000000002f7f0: jge 0x2f7ea; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002f8d4: jge 0x2f8ce; mov eax, 1; pop rbp; ret; 
0x000000000002f8e3: jge 0x2f8dd; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002f9c7: jge 0x2f9c1; mov eax, 1; pop rbp; ret; 
0x000000000002f9d6: jge 0x2f9d0; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002fad6: jge 0x2fad0; mov eax, 1; pop rbp; ret; 
0x000000000002fae5: jge 0x2fadf; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002fbe5: jge 0x2fbdf; mov eax, 1; pop rbp; ret; 
0x000000000002fbf4: jge 0x2fbee; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002fcf4: jge 0x2fcee; mov eax, 1; pop rbp; ret; 
0x000000000002fd03: jge 0x2fcfd; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002fe03: jge 0x2fdfd; mov eax, 1; pop rbp; ret; 
0x000000000002fe12: jge 0x2fe0c; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002ff12: jge 0x2ff0c; mov eax, 1; pop rbp; ret; 
0x000000000002ff21: jge 0x2ff1b; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000030021: jge 0x3001b; mov eax, 1; pop rbp; ret; 
0x0000000000030030: jge 0x3002a; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000030130: jge 0x3012a; mov eax, 1; pop rbp; ret; 
0x000000000003013f: jge 0x30139; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003023f: jge 0x30239; mov eax, 1; pop rbp; ret; 
0x000000000003024e: jge 0x30248; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003034e: jge 0x30348; mov eax, 1; pop rbp; ret; 
0x000000000003035d: jge 0x30357; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003045d: jge 0x30457; mov eax, 1; pop rbp; ret; 
0x000000000003046c: jge 0x30466; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000030551: jge 0x3054b; mov eax, 1; pop rbp; ret; 
0x0000000000030560: jge 0x3055a; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000030645: jge 0x3063f; mov eax, 1; pop rbp; ret; 
0x0000000000030654: jge 0x3064e; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000307d0: jge 0x307ca; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000030924: jge 0x3091e; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000030a78: jge 0x30a72; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000030bcc: jge 0x30bc6; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000030d20: jge 0x30d1a; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000030e94: jge 0x30e8e; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000031008: jge 0x31002; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x000000000003117c: jge 0x31176; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x00000000000312f0: jge 0x312ea; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000031464: jge 0x3145e; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x00000000000315d8: jge 0x315d2; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x000000000003173e: jge 0x31738; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x00000000000318b2: jge 0x318ac; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000031a26: jge 0x31a20; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000031b9a: jge 0x31b94; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000031cf2: jge 0x31cec; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000031e4a: jge 0x31e44; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000031fa2: jge 0x31f9c; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000032062: jge 0x3205c; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x0000000000032078: jge 0x32072; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032086: jge 0x32080; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032106: jge 0x32100; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x000000000003211c: jge 0x32116; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003212a: jge 0x32124; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000321aa: jge 0x321a4; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x00000000000321c0: jge 0x321ba; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000321ce: jge 0x321c8; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003224e: jge 0x32248; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x0000000000032264: jge 0x3225e; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032272: jge 0x3226c; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000322f2: jge 0x322ec; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x0000000000032308: jge 0x32302; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032316: jge 0x32310; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032396: jge 0x32390; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x00000000000323ac: jge 0x323a6; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000323ba: jge 0x323b4; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003245c: jge 0x32456; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x0000000000032472: jge 0x3246c; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032480: jge 0x3247a; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032522: jge 0x3251c; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x0000000000032538: jge 0x32532; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032546: jge 0x32540; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000325e8: jge 0x325e2; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x00000000000325fe: jge 0x325f8; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003260c: jge 0x32606; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000326ae: jge 0x326a8; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x00000000000326c4: jge 0x326be; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000326d2: jge 0x326cc; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032774: jge 0x3276e; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x000000000003278a: jge 0x32784; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032798: jge 0x32792; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003283a: jge 0x32834; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x0000000000032850: jge 0x3284a; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003285e: jge 0x32858; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032900: jge 0x328fa; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x0000000000032916: jge 0x32910; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032924: jge 0x3291e; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000329c6: jge 0x329c0; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x00000000000329dc: jge 0x329d6; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000329ea: jge 0x329e4; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032a8c: jge 0x32a86; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x0000000000032aa2: jge 0x32a9c; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032ab0: jge 0x32aaa; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032b52: jge 0x32b4c; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x0000000000032b68: jge 0x32b62; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032b76: jge 0x32b70; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032bf8: jge 0x32bf2; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x0000000000032c0e: jge 0x32c08; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032c1c: jge 0x32c16; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032c9e: jge 0x32c98; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x0000000000032cb4: jge 0x32cae; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032cc2: jge 0x32cbc; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032d3f: jge 0x32d39; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032d98: jge 0x32d92; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000032dae: jge 0x32da8; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032e06: jge 0x32e00; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000032e1c: jge 0x32e16; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032e74: jge 0x32e6e; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000032e8a: jge 0x32e84; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032ee2: jge 0x32edc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000032ef8: jge 0x32ef2; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032f50: jge 0x32f4a; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000032f66: jge 0x32f60; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000032fbe: jge 0x32fb8; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000032fd4: jge 0x32fce; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003302c: jge 0x33026; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000033042: jge 0x3303c; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003309a: jge 0x33094; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x00000000000330b0: jge 0x330aa; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000033108: jge 0x33102; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x000000000003311e: jge 0x33118; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000033176: jge 0x33170; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x000000000003318c: jge 0x33186; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000331e4: jge 0x331de; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x00000000000331fa: jge 0x331f4; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000033244: jge 0x3323e; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x000000000003325a: jge 0x33254; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000332b2: jge 0x332ac; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x00000000000332c8: jge 0x332c2; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000033320: jge 0x3331a; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000033336: jge 0x33330; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003338e: jge 0x33388; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x00000000000333a4: jge 0x3339e; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000333fc: jge 0x333f6; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000033412: jge 0x3340c; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003346a: jge 0x33464; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000033480: jge 0x3347a; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000334d8: jge 0x334d2; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x00000000000335ce: jge 0x335c8; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000033664: jge 0x3365e; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000033676: jge 0x33670; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000033794: jge 0x3378e; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x000000000003394e: jge 0x33948; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33af2; leave; ret; 
0x0000000000033aea: jge 0x33ae4; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000033c2e: jge 0x33c28; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], 0; nop; pop rbp; ret; 
0x0000000000033c4c: jge 0x33c46; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000033c66: jge 0x33c60; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000033c7c: jge 0x33c76; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33d51; leave; ret; 
0x0000000000033c96: jge 0x33c90; nop; pop rbp; ret; 
0x0000000000033d4c: jge 0x33d46; nop; pop rbp; ret; 
0x0000000000033d5f: jge 0x33d59; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33dec; leave; ret; 
0x0000000000033d7a: jge 0x33d74; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000033de4: jge 0x33dde; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000033dfa: jge 0x33df4; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33e4f; leave; ret; 
0x0000000000033e18: jge 0x33e12; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33e61; leave; ret; 
0x0000000000033e59: jge 0x33e53; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000033e6f: jge 0x33e69; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33e7f; leave; ret; 
0x0000000000033e89: jge 0x33e83; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003722a: jge 0x37224; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x000000000003723f: jge 0x37239; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000037251: jge 0x3724b; mov rax, qword ptr [rbp - 8]; add rax, 0x100; pop rbp; ret; 
0x00000000000372a5: jge 0x3729f; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000372b7: jge 0x372b1; mov rax, qword ptr [rbp - 8]; add rax, 0xca0; pop rbp; ret; 
0x00000000000373a4: jge 0x3739e; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000374e1: jge 0x374db; nop; pop rbp; ret; 
0x000000000003750e: jge 0x37508; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000375a4: jge 0x3759e; nop; pop rbp; ret; 
0x000000000003775d: jge 0x37757; nop; pop rbp; ret; 
0x0000000000037d94: jge 0x37d8e; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000037eaa: jge 0x37ea4; nop; pop rbp; ret; 
0x0000000000037f26: jge 0x37f20; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x0000000000037f3c: jge 0x37f36; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 8]; pop rbp; ret; 
0x0000000000037fb0: jge 0x37faa; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax]; pop rbp; ret; 
0x00000000000397dc: jge 0x397d6; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x00000000000397f0: jge 0x397ea; mov dword ptr [rbp - 0xc], esi; mov eax, dword ptr [rbp - 0xc]; pop rbp; ret; 
0x0000000000039804: jge 0x397fe; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], 0; nop; pop rbp; ret; 
0x0000000000039872: jge 0x3986c; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 8]; pop rbp; ret; 
0x0000000000039be2: jge 0x39bdc; nop; pop rbp; ret; 
0x0000000000039bf2: jge 0x39bec; nop; pop rbp; ret; 
0x0000000000039c70: jge 0x39c6a; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3a0f4; leave; ret; 
0x0000000000039d3c: jge 0x39d36; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3a1d4; leave; ret; 
0x0000000000039edf: jge 0x39ed9; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003a228: jge 0x3a222; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003a23a: jge 0x3a234; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003a29b: jge 0x3a295; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003a3ea: jge 0x3a3e4; nop; pop rbp; ret; 
0x000000000003a3fa: jge 0x3a3f4; nop; pop rbp; ret; 
0x000000000003a962: jge 0x3a95c; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x000000000003a9ae: jge 0x3a9a8; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3b248; leave; ret; 
0x000000000003ab1c: jge 0x3ab16; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3b248; leave; ret; 
0x000000000003ad2e: jge 0x3ad28; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25f76; leave; ret; 
0x000000000003affc: jge 0x3aff6; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x260ba; leave; ret; 
0x000000000003b252: jge 0x3b24c; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003b54d: jge 0x3b547; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003b563: jge 0x3b55d; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3bd64; leave; ret; 
0x000000000003b57d: jge 0x3b577; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003b64e: jge 0x3b648; mov qword ptr [rbp - 0x10], rsi; mov qword ptr [rbp - 0x18], rdx; nop; pop rbp; ret; 
0x000000000003b756: jge 0x3b750; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003b895: jge 0x3b88f; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003b8ab: jge 0x3b8a5; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3bf88; leave; ret; 
0x000000000003b8c5: jge 0x3b8bf; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003b996: jge 0x3b990; mov qword ptr [rbp - 0x10], rsi; mov qword ptr [rbp - 0x18], rdx; nop; pop rbp; ret; 
0x000000000003ba9e: jge 0x3ba98; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003bab0: jge 0x3baaa; mov qword ptr [rbp - 0x10], rsi; mov eax, 1; pop rbp; ret; 
0x000000000003bacc: jge 0x3bac6; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c118; leave; ret; 
0x000000000003baea: jge 0x3bae4; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c12a; leave; ret; 
0x000000000003bbd9: jge 0x3bbd3; mov qword ptr [rbp - 0x10], rsi; mov eax, 1; pop rbp; ret; 
0x000000000003bbf4: jge 0x3bbee; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c118; leave; ret; 
0x000000000003bc12: jge 0x3bc0c; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c178; leave; ret; 
0x000000000003bd07: jge 0x3bd01; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003bd6e: jge 0x3bd68; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003bf2b: jge 0x3bf25; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003bf92: jge 0x3bf8c; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003c122: jge 0x3c11c; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003c138: jge 0x3c132; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c462; leave; ret; 
0x000000000003c152: jge 0x3c14c; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003c168: jge 0x3c162; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c480; leave; ret; 
0x000000000003c186: jge 0x3c180; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c492; leave; ret; 
0x000000000003c1a0: jge 0x3c19a; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003c1b6: jge 0x3c1b0; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c4b0; leave; ret; 
0x000000000003c470: jge 0x3c46a; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c742; leave; ret; 
0x000000000003c48a: jge 0x3c484; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003c4a0: jge 0x3c49a; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c754; leave; ret; 
0x000000000003c4ba: jge 0x3c4b4; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003c74c: jge 0x3c746; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003c75e: jge 0x3c758; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003c85b: jge 0x3c855; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003c990: jge 0x3c98a; movabs rax, 0xfffffffffffffff; pop rbp; ret; 
0x000000000003ce84: jge 0x3ce7e; nop; pop rbp; ret; 
0x000000000003d31a: jge 0x3d314; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x14]; pop rbp; ret; 
0x000000000003da6c: jge 0x3da66; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x14]; pop rbp; ret; 
0x000000000003dd50: jge 0x3dd4a; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x18]; pop rbp; ret; 
0x000000000003ec04: jge 0x3ebfe; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0xb0]; pop rbp; ret; 
0x000000000003ed0e: jge 0x3ed08; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3edae; leave; ret; 
0x000000000003edbc: jge 0x3edb6; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3edf1; leave; ret; 
0x000000000003edfb: jge 0x3edf5; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003f858: jge 0x3f852; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x38]; pop rbp; ret; 
0x0000000000042290: jge 0x4228a; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x00000000000423b6: jge 0x423b0; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000004243e: jge 0x42438; nop; pop rbp; ret; 
0x0000000000042584: jge 0x4257e; nop; pop rbp; ret; 
0x0000000000042812: jge 0x4280c; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000428c2: jge 0x428bc; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000042b93: jge 0x42b8d; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000042c36: jge 0x42c30; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000042cc1: jge 0x42cbb; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000043068: jge 0x43062; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x432a6; leave; ret; 
0x0000000000043082: jge 0x4307c; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x0000000000043138: jge 0x43132; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x4334a; leave; ret; 
0x0000000000043152: jge 0x4314c; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x00000000000432b4: jge 0x432ae; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x43444; leave; ret; 
0x000000000004333e: jge 0x43320; add byte ptr [rbp - 0x2f], dh; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000043358: jge 0x43352; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x43512; leave; ret; 
0x000000000004343a: jge 0x43434; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x000000000004344e: jge 0x43448; movabs rax, 0x1fffffffffffffff; pop rbp; ret; 
0x00000000000434ca: jge 0x434c4; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000043612: jge 0x4360c; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000043624: jge 0x4361e; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000437a6: jge 0x437a0; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000439ea: jge 0x439e4; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000043a00: jge 0x439fa; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000043bca: jge 0x43bb2; jmp qword ptr [rbx]; 
0x0000000000043bfc: jge 0x43be4; jmp qword ptr [rdi]; 
0x0000000000043dd1: jge 0x43db9; jmp qword ptr [rbx]; 
0x0000000000043e06: jge 0x43dee; jmp qword ptr [rdi]; 
0x00000000000441ff: jge 0x441f9; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002a6e2: jl 0x2a6e5; add byte ptr [rax], al; nop; leave; ret; 
0x000000000002b5e0: jl 0x2b5e2; add byte ptr [rax], al; leave; ret; 
0x000000000002bf03: jl 0x2bf04; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x00000000000303cd: jl 0x303e6; add byte ptr [rax], al; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000307da: jl 0x3080a; add byte ptr [rax], al; leave; ret; 
0x0000000000024fee: jle 0x24ff1; add byte ptr [rax], al; nop; leave; ret; 
0x000000000002ba11: jle 0x2b9ca; nop; leave; ret; 
0x000000000002bf68: jle 0x2bf69; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000039a56: jle 0x39a59; add byte ptr [rax], al; nop; leave; ret; 
0x000000000003bcca: jle 0x3bcca; dec ecx; ret; 
0x0000000000042d78: jle 0x42d7e; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000043bcc: jmp qword ptr [rbx]; 
0x0000000000043bfe: jmp qword ptr [rdi]; 
0x0000000000044ddb: jmp qword ptr [rsi + 0x48]; 
0x0000000000024506: jmp qword ptr [rsi + 0xf]; 
0x000000000004093e: jmp qword ptr [rsi - 0x77]; 
0x000000000003eceb: jmp qword ptr [rsi - 2]; 
0x0000000000023e8f: jmp rax; 
0x0000000000024d85: jne 0x24d7f; mov eax, dword ptr [rbp - 4]; and eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000024d9b: jne 0x24d95; mov eax, dword ptr [rbp - 4]; or eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000258de: jne 0x258ae; nop; nop; leave; ret; 
0x000000000002599c: jne 0x2596c; nop; nop; leave; ret; 
0x0000000000025b81: jne 0x25b73; nop; pop rbp; ret; 
0x0000000000025e9a: jne 0x25e79; nop; nop; leave; ret; 
0x0000000000025f2b: jne 0x25f1d; nop; pop rbp; ret; 
0x0000000000026757: jne 0x26749; nop; pop rbp; ret; 
0x0000000000026b37: jne 0x26b29; nop; pop rbp; ret; 
0x000000000002a5f9: jne 0x2a5eb; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x000000000002a62d: jne 0x2a627; mov eax, dword ptr [rbp - 4]; or eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002ae49: jne 0x2ae3b; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b00a; leave; ret; 
0x000000000002b030: jne 0x2b022; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b313; leave; ret; 
0x000000000002b21f: jne 0x2b223; add byte ptr [rax], al; leave; ret; 
0x000000000002b603: jne 0x2b5f5; mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002b82a: jne 0x2b81c; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x000000000002bfd6: jne 0x2bfc8; mov eax, 0; pop rbp; ret; 
0x000000000002c524: jne 0x2c516; nop; pop rbp; ret; 
0x000000000002c764: jne 0x2c756; nop; pop rbp; ret; 
0x000000000002c8ef: jne 0x2c8e1; nop; pop rbp; ret; 
0x000000000002c945: jne 0x2c937; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x000000000002ce0f: jne 0x2cdf6; nop; nop; pop rbp; ret; 
0x0000000000033012: jne 0x33013; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000033080: jne 0x33081; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x00000000000374f4: jne 0x374e6; mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; sar rax, 5; pop rbp; ret; 
0x00000000000397e0: jne 0x397d2; nop; pop rbp; ret; 
0x00000000000397f3: jne 0x397e9; mov eax, dword ptr [rbp - 0xc]; pop rbp; ret; 
0x0000000000039833: jne 0x3981d; mov rax, rdx; pop rbp; ret; 
0x000000000003a966: jne 0x3a958; nop; pop rbp; ret; 
0x000000000003b652: jne 0x3b644; mov qword ptr [rbp - 0x18], rdx; nop; pop rbp; ret; 
0x000000000003b99a: jne 0x3b98c; mov qword ptr [rbp - 0x18], rdx; nop; pop rbp; ret; 
0x000000000003bab4: jne 0x3baa6; mov eax, 1; pop rbp; ret; 
0x000000000003bbdd: jne 0x3bbcf; mov eax, 1; pop rbp; ret; 
0x000000000003c5f8: jne 0x3c5f8; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000003c819: jne 0x3c819; call qword ptr [rax - 0x7a274b8]; leave; ret; 
0x0000000000041a85: jne 0x41a88; movzx eax, byte ptr [rbp - 1]; pop rbp; ret; 
0x0000000000041b29: jne 0x41b2c; nop; pop rbp; ret; 
0x0000000000041d5e: jne 0x41d61; nop; pop rbp; ret; 
0x00000000000428c6: jne 0x428b8; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000043086: jne 0x43078; nop; pop rbp; ret; 
0x0000000000043156: jne 0x43148; nop; pop rbp; ret; 
0x0000000000043341: jne 0x43314; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000004343e: jne 0x43430; nop; pop rbp; ret; 
0x0000000000043971: jne 0x43925; mov rax, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000023e87: jno 0x23e8c; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x0000000000023ec8: jno 0x23ecd; add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x0000000000033450: jno 0x33451; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x00000000000334be: jno 0x334bf; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000003c981: jno 0x3c981; dec ecx; ret; 
0x000000000002c1b9: jnp 0x2c1ba; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000002ca9f: jnp 0x2caa2; add byte ptr [rax], al; leave; ret; 
0x00000000000409e4: jnp 0x409ef; ret 0x8b48; 
0x0000000000041a33: jnp 0x419c5; pop rbp; ret; 
0x000000000002c11b: jns 0x2c11c; dec ecx; ret; 
0x000000000002c209: jns 0x2c20a; dec ecx; ret; 
0x000000000003a99a: jns 0x3a9a4; add byte ptr [rax], al; leave; ret; 
0x000000000002b1fd: jns 0xffffffff8b4bb202; pop rbp; clc; leave; ret; 
0x000000000002a561: jo 0x2a565; add byte ptr [rax], al; pop rbx; pop r12; pop rbp; ret; 
0x000000000002c321: jo 0x2c326; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002ca6f: jo 0x2ca70; dec ecx; ret; 
0x0000000000040d5d: jo 0x40cdf; hlt; add al, 0x89; ret 0x8b48; 
0x0000000000041b22: jo 0x41b6c; mov eax, dword ptr [rbp - 8]; mov byte ptr [rax + 0x75], 1; nop; pop rbp; ret; 
0x0000000000041c45: jo 0x41bd7; leave; ret; 
0x0000000000041d3c: jo 0x41cc7; ret 0xb60f; 
0x0000000000043504: jo 0x43504; dec dword ptr [rbx - 0x6fef76ed]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002c0cb: jp 0x2c0cc; dec ecx; ret; 
0x000000000002f9b2: jp 0x2f9c7; add byte ptr [rax], al; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003351c: jp 0x33520; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000037d22: jp 0x37d24; add byte ptr [rax], al; movzx eax, byte ptr [rax]; movsx eax, al; mov edi, eax; call rbx; 
0x0000000000044102: jp 0x440fd; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002c2a9: js 0x2c2aa; dec ecx; ret; 
0x0000000000032d7d: js 0x32d7e; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000003c22e: js 0x3c22e; dec ecx; ret; 
0x0000000000040f57: js 0x40edc; lock add dword ptr [rax + rax*8 - 0x49f0d38c], eax; add r9b, 0xe0; add al, 0x89; ret 0x458b; 
0x0000000000043ff4: js 0x43ff3; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003a0c3: lahf; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000004458d: lahf; cmc; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002cba8: lcall [rdi]; pop rbp; ret; 
0x0000000000037742: lea eax, [rbp - 0x18]; mov rdi, rax; call 0x37c6e; mov rax, qword ptr [rbp - 0x20]; leave; ret; 
0x000000000002c83d: lea eax, [rbp - 8]; mov rdi, rax; call 0x2caa6; mov rax, qword ptr [rax]; leave; ret; 
0x000000000002c85e: lea eax, [rbp - 8]; mov rdi, rax; call 0x2cab8; mov rax, qword ptr [rax]; leave; ret; 
0x000000000002c8d1: lea eax, [rbp - 8]; mov rsi, rdx; mov rdi, rax; call 0x2cafc; leave; ret; 
0x0000000000037f13: lea eax, [rip + 0x233b7]; pop rbp; ret; 
0x000000000003efef: lea ecx, [rdx - 2]; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000042b46: lea edx, [rcx + rax]; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f2ad: lea edx, [rip + 0x1016]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f33f: lea edx, [rip + 0x1093]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f3d1: lea edx, [rip + 0x10f5]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f463: lea edx, [rip + 0x1157]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f4f5: lea edx, [rip + 0x11b9]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002eb43: lea edx, [rip + 0xa2d]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ebd5: lea edx, [rip + 0xa8e]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ec67: lea edx, [rip + 0xaef]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ecf9: lea edx, [rip + 0xb50]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ed8b: lea edx, [rip + 0xbb1]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ee1d: lea edx, [rip + 0xc2e]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002eeaf: lea edx, [rip + 0xcab]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ef41: lea edx, [rip + 0xd28]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002efd3: lea edx, [rip + 0xda5]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f065: lea edx, [rip + 0xe22]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f0f7: lea edx, [rip + 0xe9f]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f189: lea edx, [rip + 0xf1c]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f21b: lea edx, [rip + 0xf99]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x0000000000037741: lea rax, [rbp - 0x18]; mov rdi, rax; call 0x37c6e; mov rax, qword ptr [rbp - 0x20]; leave; ret; 
0x000000000002c83c: lea rax, [rbp - 8]; mov rdi, rax; call 0x2caa6; mov rax, qword ptr [rax]; leave; ret; 
0x000000000002c85d: lea rax, [rbp - 8]; mov rdi, rax; call 0x2cab8; mov rax, qword ptr [rax]; leave; ret; 
0x000000000002c8d0: lea rax, [rbp - 8]; mov rsi, rdx; mov rdi, rax; call 0x2cafc; leave; ret; 
0x0000000000037f12: lea rax, [rip + 0x233b7]; pop rbp; ret; 
0x0000000000042b45: lea rdx, [rcx + rax]; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f2ac: lea rdx, [rip + 0x1016]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f33e: lea rdx, [rip + 0x1093]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f3d0: lea rdx, [rip + 0x10f5]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f462: lea rdx, [rip + 0x1157]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f4f4: lea rdx, [rip + 0x11b9]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002eb42: lea rdx, [rip + 0xa2d]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ebd4: lea rdx, [rip + 0xa8e]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ec66: lea rdx, [rip + 0xaef]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ecf8: lea rdx, [rip + 0xb50]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ed8a: lea rdx, [rip + 0xbb1]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ee1c: lea rdx, [rip + 0xc2e]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002eeae: lea rdx, [rip + 0xcab]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ef40: lea rdx, [rip + 0xd28]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002efd2: lea rdx, [rip + 0xda5]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f064: lea rdx, [rip + 0xe22]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f0f6: lea rdx, [rip + 0xe9f]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f188: lea rdx, [rip + 0xf1c]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f21a: lea rdx, [rip + 0xf99]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x00000000000441b3: leave; clc; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000032987: leave; or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000024d5e: leave; ret; 
0x0000000000038305: ljmp [rdx + rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000040f59: lock add dword ptr [rax + rax*8 - 0x49f0d38c], eax; add r9b, 0xe0; add al, 0x89; ret 0x458b; 
0x000000000002b608: lock sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000374f9: lock sub rax, qword ptr [rbp - 8]; sar rax, 5; pop rbp; ret; 
0x0000000000025f8e: lodsb al, byte ptr [rsi]; add al, byte ptr [rax]; add cl, cl; ret; 
0x00000000000431b8: lodsb al, byte ptr [rsi]; add dword ptr [rax], eax; add bl, ch; add eax, 0xb8; add cl, cl; ret; 
0x0000000000043362: lodsb al, byte ptr [rsi]; add dword ptr [rax], eax; add cl, cl; ret; 
0x000000000003de58: lodsb al, byte ptr [rsi]; rol dword ptr [rcx], 1; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000000443c0: lodsb al, byte ptr [rsi]; stc; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000293c0: lodsb al, byte ptr [rsi]; test eax, 0x8948ffff; ret 0x8d48; 
0x00000000000242ff: lodsd eax, dword ptr [rsi]; cmp eax, dword ptr [rcx]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000040591: lodsd eax, dword ptr [rsi]; movabs byte ptr [0x8948d0458d48fffe], al; ret 0xbe; 
0x0000000000028237: loope 0x2823a; ret 0x8b48; 
0x00000000000321b4: mov ah, 0x14; add byte ptr [rax], al; leave; ret; 
0x0000000000030fb4: mov ah, 0x14; add byte ptr [rax], al; nop; leave; ret; 
0x00000000000441c8: mov ah, 0xf8; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003865d: mov ah, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000032da2: mov ah, 8; add byte ptr [rax], al; leave; ret; 
0x000000000003d602: mov ah, byte ptr [rdi - 2]; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x00000000000397b2: mov ah, byte ptr [rdx - 0x366f0002]; ret; 
0x000000000003ec0c: mov al, 0; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000444bc: mov al, 0xf8; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000326b8: mov al, 0xf; add byte ptr [rax], al; leave; ret; 
0x00000000000389b8: mov al, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000038aae: mov al, 0xfe; dec ecx; ret; 
0x000000000003ffa5: mov al, 1; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000003d308: mov al, 1; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000039d46: mov al, byte ptr [rax + rax]; add cl, cl; ret; 
0x0000000000036e7a: mov al, byte ptr [rcx + 2]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000037f15: mov bh, 0x33; add al, byte ptr [rax]; pop rbp; ret; 
0x00000000000419a5: mov bh, 0x40; jb 0x41932; ret 0xb60f; 
0x0000000000041ac3: mov bh, 0x40; jb 0x41a50; ret 0xb60f; 
0x0000000000040d5b: mov bh, 0x40; jo 0x40cdf; hlt; add al, 0x89; ret 0x8b48; 
0x0000000000028381: mov bh, 0x45; out 0x31, al; ret 0xb70f; 
0x00000000000283a7: mov bh, 0x45; out 0x89, al; ret 0x8b48; 
0x0000000000028d61: mov bh, 0x55; in al, 0x83; ret 0xf01; 
0x000000000002ba12: mov bh, 0x90; leave; ret; 
0x0000000000026eb5: mov bh, 0xd2; mov esi, edx; mov rdi, rax; call 0x38554; leave; ret; 
0x00000000000442c5: mov bh, 0xf7; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003840b: mov bh, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000031b12: mov bh, bh; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000002b087: mov bh, bh; dec ecx; ret; 
0x000000000003b0a3: mov bh, dh; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000002f93c: mov bl, 0x13; add byte ptr [rax], al; leave; ret; 
0x0000000000038687: mov bl, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000038496: mov bl, 0xfe; dec dword ptr [rax - 0x77]; ret; 
0x000000000002ae53: mov bl, 1; add byte ptr [rax], al; leave; ret; 
0x0000000000030724: mov bl, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000026ef0: mov byte ptr [rax + 0x13], dl; nop; pop rbp; ret; 
0x00000000000335be: mov byte ptr [rax + 0x18], dl; nop; pop rbp; ret; 
0x0000000000028ed8: mov byte ptr [rax + 0x31], 0; mov rax, qword ptr [rbp - 8]; mov byte ptr [rax + 0x32], 0; nop; leave; ret; 
0x0000000000028ee0: mov byte ptr [rax + 0x32], 0; nop; leave; ret; 
0x0000000000041a7b: mov byte ptr [rax + 0x6d], 0; mov rax, qword ptr [rbp - 0x18]; mov byte ptr [rax + 0x75], 1; movzx eax, byte ptr [rbp - 1]; pop rbp; ret; 
0x0000000000041a83: mov byte ptr [rax + 0x75], 1; movzx eax, byte ptr [rbp - 1]; pop rbp; ret; 
0x0000000000041b27: mov byte ptr [rax + 0x75], 1; nop; pop rbp; ret; 
0x0000000000041c63: mov byte ptr [rax + 0x77], dl; nop; pop rbp; ret; 
0x0000000000041a31: mov byte ptr [rax + 0x7b], dl; nop; pop rbp; ret; 
0x0000000000026c82: mov byte ptr [rax + 0xa], 0xfd; nop; pop rbp; ret; 
0x0000000000026e75: mov byte ptr [rax + 0xa], dl; nop; leave; ret; 
0x000000000003af43: mov byte ptr [rax + 8], dl; nop; leave; ret; 
0x000000000002b4d7: mov byte ptr [rax], 0; nop; leave; ret; 
0x0000000000043233: mov byte ptr [rax], bl; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003975e: mov byte ptr [rax], dl; nop; leave; ret; 
0x0000000000043edb: mov byte ptr [rax], dl; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002a61c: mov byte ptr [rax], dl; nop; pop rbp; ret; 
0x000000000003da8c: mov byte ptr [rbp - 0x10], al; nop; pop rbp; ret; 
0x0000000000028e96: mov byte ptr [rbp - 4], al; movzx eax, byte ptr [rbp - 4]; pop rbp; ret; 
0x0000000000025d38: mov byte ptr [rbx], 0; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x00000000000261e0: mov byte ptr [rdx], 0; add cl, cl; ret; 
0x000000000003144e: mov byte ptr [rdx], dl; add byte ptr [rax], al; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000023f0c: mov byte ptr [rip + 0x3739d], 1; pop rbp; ret; 
0x0000000000038bf4: mov byte ptr [rsi - 0x76b70002], ch; ret 0x8d48; 
0x000000000003ca36: mov ch, 0; add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x0000000000030bb3: mov ch, 0x16; add byte ptr [rax], al; mov rdi, rax; call 0x3227a; leave; ret; 
0x000000000003854a: mov ch, 0xfe; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000038481: mov ch, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002ed8d: mov cl, 0xb; add byte ptr [rax], al; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x00000000000440cb: mov cl, 0xf9; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000388c4: mov cl, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000386e8: mov cl, 0xfe; dec dword ptr [rax - 0x77]; ret 0xb70f; 
0x000000000002ebd7: mov cs, word ptr [rdx]; add byte ptr [rax], al; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000003fe3d: mov dh, 0; leave; ret; 
0x000000000003d686: mov dh, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000037c59: mov dh, 0; movsx eax, al; mov edi, eax; call rbx; 
0x000000000003f84a: mov dh, 0; pop rbp; ret; 
0x000000000003af3d: mov dh, 0x10; mov rax, qword ptr [rbp - 8]; mov byte ptr [rax + 8], dl; nop; leave; ret; 
0x000000000002a616: mov dh, 0x10; mov rax, qword ptr [rbp - 8]; mov byte ptr [rax], dl; nop; pop rbp; ret; 
0x0000000000040f55: mov dh, 0x40; js 0x40edc; lock add dword ptr [rax + rax*8 - 0x49f0d38c], eax; add r9b, 0xe0; add al, 0x89; ret 0x458b; 
0x0000000000028158: mov dh, 0x40; or ecx, dword ptr [rcx]; ret 0x8b48; 
0x00000000000281e6: mov dh, 0x40; or esi, dword ptr [rcx]; ret 0x8b48; 
0x000000000002819f: mov dh, 0x40; or esp, dword ptr [rcx]; ret 0x8b48; 
0x0000000000040f60: mov dh, 0x45; add cl, 0xe0; add al, 0x89; ret 0x458b; 
0x000000000004106f: mov dh, 0x45; add ecx, 0xe08302e0; or al, 0x89; ret 0xb60f; 
0x0000000000028e9a: mov dh, 0x45; cld; pop rbp; ret; 
0x0000000000028235: mov dh, 0x45; loope 0x2823a; ret 0x8b48; 
0x0000000000041c60: mov dh, 0x55; hlt; mov byte ptr [rax + 0x77], dl; nop; pop rbp; ret; 
0x0000000000043ed8: mov dh, 0x55; ror byte ptr [rax - 0x74b76ff0], 1; pop rbp; clc; leave; ret; 
0x00000000000325d6: mov dh, 0xa; add byte ptr [rax], al; nop; leave; ret; 
0x000000000003c9bf: mov dh, 0xc0; leave; ret; 
0x0000000000025c16: mov dh, 0xc0; test rax, rax; setne al; pop rbp; ret; 
0x000000000003d9f8: mov dh, 0xd0; mov rax, qword ptr [rbp - 8]; mov dword ptr [rax + 0x1c], edx; nop; pop rbp; ret; 
0x0000000000038420: mov dh, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000260d2: mov dh, 2; add byte ptr [rax], al; leave; ret; 
0x000000000003b2fd: mov dh, bh; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x00000000000389a2: mov dh, byte ptr [rcx - 0x76b70002]; ret 0x8d48; 
0x00000000000301af: mov dl, 0x16; add byte ptr [rax], al; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031ba4: mov dl, 0x1a; add byte ptr [rax], al; leave; ret; 
0x0000000000043972: mov dl, 0x48; mov eax, dword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000387dc: mov dl, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003ad39: mov dl, 0xfe; dec ecx; ret; 
0x000000000003ecaf: mov dl, 0xff; dec dword ptr [rax - 0x77]; ror dword ptr [rax - 0x75], 0x45; fmul dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000024fba: mov dl, 1; add byte ptr [rax], al; nop; leave; ret; 
0x00000000000330a4: mov dl, 5; add byte ptr [rax], al; leave; ret; 
0x00000000000254ff: mov dword ptr [rax + 0x10], 0; nop; leave; ret; 
0x000000000002a88a: mov dword ptr [rax + 0x10], 0; nop; pop rbp; ret; 
0x000000000002c47e: mov dword ptr [rax + 0x10], edx; nop; leave; ret; 
0x000000000004210b: mov dword ptr [rax + 0x10], edx; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000037f81: mov dword ptr [rax + 0x10], edx; nop; pop rbp; ret; 
0x000000000003d6b3: mov dword ptr [rax + 0x16], edx; nop; pop rbp; ret; 
0x0000000000041ee2: mov dword ptr [rax + 0x18], 0; nop; leave; ret; 
0x000000000003d9fe: mov dword ptr [rax + 0x1c], edx; nop; pop rbp; ret; 
0x0000000000026b8d: mov dword ptr [rax + 0x20], edx; nop; pop rbp; ret; 
0x0000000000039a14: mov dword ptr [rax + 0x30], 0; nop; leave; ret; 
0x0000000000038001: mov dword ptr [rax + 0x48], edx; nop; leave; ret; 
0x0000000000041c43: mov dword ptr [rax + 0x70], edx; nop; leave; ret; 
0x00000000000419be: mov dword ptr [rax + 0x72], edx; nop; pop rbp; ret; 
0x0000000000033868: mov dword ptr [rax + 4], 0; nop; pop rbp; ret; 
0x000000000002ba70: mov dword ptr [rax + 4], edx; movzx eax, byte ptr [rbp - 1]; or eax, 0x40; leave; ret; 
0x0000000000044d54: mov dword ptr [rax + 4], edx; nop; pop rbp; ret; 
0x000000000003985d: mov dword ptr [rax + 8], 0; nop; pop rbp; ret; 
0x000000000002ac60: mov dword ptr [rax + 8], edx; nop; leave; ret; 
0x0000000000037f61: mov dword ptr [rax + 8], edx; nop; pop rbp; ret; 
0x00000000000299f3: mov dword ptr [rax - 0x76b70001], esp; ret 0x8d48; 
0x0000000000033ad4: mov dword ptr [rax], 0; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000002cbcd: mov dword ptr [rax], 0; nop; leave; ret; 
0x000000000002534b: mov dword ptr [rax], 0; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000033c35: mov dword ptr [rax], 0; nop; pop rbp; ret; 
0x0000000000037c8a: mov dword ptr [rax], edx; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002b3a2: mov dword ptr [rax], edx; nop; leave; ret; 
0x0000000000030770: mov dword ptr [rax], edx; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000024ec4: mov dword ptr [rax], edx; nop; pop rbp; ret; 
0x000000000002bfd5: mov dword ptr [rbp - 0x10], esi; mov eax, 0; pop rbp; ret; 
0x000000000003bab3: mov dword ptr [rbp - 0x10], esi; mov eax, 1; pop rbp; ret; 
0x000000000003b651: mov dword ptr [rbp - 0x10], esi; mov qword ptr [rbp - 0x18], rdx; nop; pop rbp; ret; 
0x000000000002a5f8: mov dword ptr [rbp - 0x10], esi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x000000000002b602: mov dword ptr [rbp - 0x10], esi; mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000374f3: mov dword ptr [rbp - 0x10], esi; mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; sar rax, 5; pop rbp; ret; 
0x0000000000025b80: mov dword ptr [rbp - 0x10], esi; nop; pop rbp; ret; 
0x000000000002b2be: mov dword ptr [rbp - 0x18], eax; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x000000000003b655: mov dword ptr [rbp - 0x18], edx; nop; pop rbp; ret; 
0x000000000003da87: mov dword ptr [rbp - 0xc], eax; mov eax, edx; mov byte ptr [rbp - 0x10], al; nop; pop rbp; ret; 
0x00000000000397f2: mov dword ptr [rbp - 0xc], esi; mov eax, dword ptr [rbp - 0xc]; pop rbp; ret; 
0x0000000000024d81: mov dword ptr [rbp - 4], edi; mov dword ptr [rbp - 8], esi; mov eax, dword ptr [rbp - 4]; and eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000024d97: mov dword ptr [rbp - 4], edi; mov dword ptr [rbp - 8], esi; mov eax, dword ptr [rbp - 4]; or eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000024dad: mov dword ptr [rbp - 4], edi; mov eax, dword ptr [rbp - 4]; not eax; pop rbp; ret; 
0x0000000000028e84: mov dword ptr [rbp - 4], edi; mov eax, dword ptr [rbp - 4]; pop rbp; ret; 
0x000000000002b3e5: mov dword ptr [rbp - 8], edi; cmp qword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x00000000000397ef: mov dword ptr [rbp - 8], edi; mov dword ptr [rbp - 0xc], esi; mov eax, dword ptr [rbp - 0xc]; pop rbp; ret; 
0x0000000000028f45: mov dword ptr [rbp - 8], edi; mov eax, 1; pop rbp; ret; 
0x000000000002bfd1: mov dword ptr [rbp - 8], edi; mov qword ptr [rbp - 0x10], rsi; mov eax, 0; pop rbp; ret; 
0x000000000003baaf: mov dword ptr [rbp - 8], edi; mov qword ptr [rbp - 0x10], rsi; mov eax, 1; pop rbp; ret; 
0x000000000003b64d: mov dword ptr [rbp - 8], edi; mov qword ptr [rbp - 0x10], rsi; mov qword ptr [rbp - 0x18], rdx; nop; pop rbp; ret; 
0x000000000002a5f4: mov dword ptr [rbp - 8], edi; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x000000000002b5fe: mov dword ptr [rbp - 8], edi; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000025b7c: mov dword ptr [rbp - 8], edi; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x0000000000037250: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; add rax, 0x100; pop rbp; ret; 
0x0000000000028f03: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x00000000000372b6: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; add rax, 0xca0; pop rbp; ret; 
0x000000000003d319: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x14]; pop rbp; ret; 
0x000000000003dd4f: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x18]; pop rbp; ret; 
0x000000000003f857: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x38]; pop rbp; ret; 
0x000000000003ec03: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0xb0]; pop rbp; ret; 
0x0000000000037faf: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax]; pop rbp; ret; 
0x0000000000033c2d: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], 0; nop; pop rbp; ret; 
0x000000000002588b: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x0000000000037f3b: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 8]; pop rbp; ret; 
0x0000000000025b8f: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x00000000000256cb: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25a71; leave; ret; 
0x00000000000256e9: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25a90; leave; ret; 
0x0000000000025a7e: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25ea0; leave; ret; 
0x0000000000025a9d: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25ebe; leave; ret; 
0x000000000003ad2d: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25f76; leave; ret; 
0x000000000003affb: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x260ba; leave; ret; 
0x0000000000025ead: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x261c8; leave; ret; 
0x0000000000025ecb: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x261e6; leave; ret; 
0x0000000000025f65: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2622c; leave; ret; 
0x0000000000025f83: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2623e; leave; ret; 
0x0000000000026015: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26313; leave; ret; 
0x00000000000260a9: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2637a; leave; ret; 
0x00000000000260c7: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2638c; leave; ret; 
0x00000000000261d5: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264aa; leave; ret; 
0x00000000000261f3: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264bc; leave; ret; 
0x000000000002624b: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264da; leave; ret; 
0x00000000000262d0: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264ec; leave; ret; 
0x0000000000026320: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26531; leave; ret; 
0x0000000000026399: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26544; leave; ret; 
0x000000000002641e: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26556; leave; ret; 
0x00000000000264c9: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2664e; leave; ret; 
0x00000000000264f9: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26660; leave; ret; 
0x0000000000026563: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26672; leave; ret; 
0x000000000002b214: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b498; leave; ret; 
0x000000000002b4a5: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b526; leave; ret; 
0x000000000002c745: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2c97e; leave; ret; 
0x000000000002c98b: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2cb94; leave; ret; 
0x00000000000307cf: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000032061: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x000000000003394d: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33af2; leave; ret; 
0x0000000000033c7b: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33d51; leave; ret; 
0x0000000000033d5e: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33dec; leave; ret; 
0x0000000000033df9: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33e4f; leave; ret; 
0x0000000000033e17: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33e61; leave; ret; 
0x0000000000033e6e: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33e7f; leave; ret; 
0x0000000000039c6f: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3a0f4; leave; ret; 
0x0000000000039d3b: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3a1d4; leave; ret; 
0x000000000003a9ad: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3b248; leave; ret; 
0x000000000003b562: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3bd64; leave; ret; 
0x000000000003b8aa: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3bf88; leave; ret; 
0x000000000003bacb: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c118; leave; ret; 
0x000000000003bae9: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c12a; leave; ret; 
0x000000000003bc11: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c178; leave; ret; 
0x000000000003c137: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c462; leave; ret; 
0x000000000003c167: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c480; leave; ret; 
0x000000000003c185: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c492; leave; ret; 
0x000000000003c1b5: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c4b0; leave; ret; 
0x000000000003c46f: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c742; leave; ret; 
0x000000000003c49f: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c754; leave; ret; 
0x000000000003ed0d: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3edae; leave; ret; 
0x000000000003edbb: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3edf1; leave; ret; 
0x0000000000043067: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x432a6; leave; ret; 
0x0000000000043137: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x4334a; leave; ret; 
0x00000000000432b3: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x43444; leave; ret; 
0x0000000000043357: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x43512; leave; ret; 
0x0000000000028f2f: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x30]; pop rbp; ret; 
0x0000000000028f19: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x31]; pop rbp; ret; 
0x0000000000025445: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002cb9d: mov dword ptr [rbp - 8], edi; movabs rax, 0x1fffffffffffffff; pop rbp; ret; 
0x000000000003c98f: mov dword ptr [rbp - 8], edi; movabs rax, 0xfffffffffffffff; pop rbp; ret; 
0x000000000002587b: mov dword ptr [rbp - 8], edi; nop; pop rbp; ret; 
0x0000000000024d84: mov dword ptr [rbp - 8], esi; mov eax, dword ptr [rbp - 4]; and eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000024d9a: mov dword ptr [rbp - 8], esi; mov eax, dword ptr [rbp - 4]; or eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x000000000003388d: mov dword ptr [rbx], eax; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003fdc3: mov dword ptr [rdx + 0x60], eax; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002bfb0: mov dword ptr [rdx + 8], eax; nop; leave; ret; 
0x0000000000024de0: mov dword ptr [rdx], eax; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000027db6: mov eax, 0; leave; ret; 
0x0000000000028430: mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002bb22: mov eax, 0; pop rbp; ret; 
0x000000000004322f: mov eax, 0x88fffe73; sbb byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x00000000000339a2: mov eax, 0x90ffffff; leave; ret; 
0x000000000002f7cc: mov eax, 0xb8000012; add byte ptr [rax], al; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000025f70: mov eax, 0xc9000002; ret; 
0x0000000000030e9e: mov eax, 0xc9000027; ret; 
0x000000000002a9fa: mov eax, 0xe8c78948; cmp dword ptr [rdx - 0x76b70001], ebp; ret 0x8b48; 
0x000000000002aa5a: mov eax, 0xe8c78948; fldcw word ptr [rcx - 0x76b70001]; ret 0x8b48; 
0x000000000002aba5: mov eax, 0xe8c78948; mov gs, word ptr [rax - 0x76b70001]; ret 0x8b48; 
0x0000000000036fe3: mov eax, 0xf85d8b48; leave; ret; 
0x00000000000380c1: mov eax, 0xffffffff; leave; ret; 
0x000000000003806f: mov eax, 0xffffffff; nop; leave; ret; 
0x00000000000394b3: mov eax, 1; leave; ret; 
0x0000000000027c5d: mov eax, 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000028f48: mov eax, 1; pop rbp; ret; 
0x0000000000025893: mov eax, dword ptr [rax + 0x10]; pop rbp; ret; 
0x00000000000398af: mov eax, dword ptr [rax + 0x10]; test rax, rax; sete al; pop rbp; ret; 
0x000000000003d320: mov eax, dword ptr [rax + 0x14]; pop rbp; ret; 
0x000000000003dd56: mov eax, dword ptr [rax + 0x18]; pop rbp; ret; 
0x000000000003f85e: mov eax, dword ptr [rax + 0x38]; pop rbp; ret; 
0x000000000003ec0a: mov eax, dword ptr [rax + 0xb0]; pop rbp; ret; 
0x000000000003c9b3: mov eax, dword ptr [rax + 8]; mov rdi, rax; call 0x28f26; movzx eax, al; leave; ret; 
0x00000000000398cf: mov eax, dword ptr [rax + 8]; mov rdi, rax; call 0x28f3c; leave; ret; 
0x0000000000037f43: mov eax, dword ptr [rax + 8]; pop rbp; ret; 
0x0000000000039d87: mov eax, dword ptr [rax]; add rax, 8; mov rdi, rax; call 0x25f76; leave; ret; 
0x000000000003bb42: mov eax, dword ptr [rax]; cmp edx, eax; sete al; pop rbp; ret; 
0x0000000000039c9c: mov eax, dword ptr [rax]; cmp rdx, rax; setne al; pop rbp; ret; 
0x000000000002c849: mov eax, dword ptr [rax]; leave; ret; 
0x0000000000025b97: mov eax, dword ptr [rax]; pop rbp; ret; 
0x000000000002b658: mov eax, dword ptr [rbp - 0x10]; add rax, rdx; leave; ret; 
0x000000000002a78e: mov eax, dword ptr [rbp - 0x10]; add rax, rdx; pop rbp; ret; 
0x0000000000039829: mov eax, dword ptr [rbp - 0x10]; mov edx, 0; div qword ptr [rbp - 0x18]; mov rax, rdx; pop rbp; ret; 
0x0000000000039c98: mov eax, dword ptr [rbp - 0x10]; mov rax, qword ptr [rax]; cmp rdx, rax; setne al; pop rbp; ret; 
0x0000000000025f49: mov eax, dword ptr [rbp - 0x10]; mov rdi, rax; call 0x23a60; nop; leave; ret; 
0x000000000002b306: mov eax, dword ptr [rbp - 0x10]; mov rdi, rax; call 0x23a90; leave; ret; 
0x00000000000262b5: mov eax, dword ptr [rbp - 0x10]; mov rdi, rax; call 0x2627c; nop; leave; ret; 
0x0000000000026403: mov eax, dword ptr [rbp - 0x10]; mov rdi, rax; call 0x263ca; nop; leave; ret; 
0x000000000003a424: mov eax, dword ptr [rbp - 0x10]; mov rsi, rax; mov rdi, rdx; call 0x398dc; leave; ret; 
0x0000000000037d7a: mov eax, dword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x37e18; leave; ret; 
0x000000000002a5fc: mov eax, dword ptr [rbp - 0x10]; pop rbp; ret; 
0x000000000002be6a: mov eax, dword ptr [rbp - 0x10]; shl rax, 2; add rax, rdx; pop rbp; ret; 
0x000000000002ca63: mov eax, dword ptr [rbp - 0x10]; shl rax, 2; mov rdi, rax; call 0x23a90; leave; ret; 
0x000000000003c975: mov eax, dword ptr [rbp - 0x10]; shl rax, 3; mov rdi, rax; call 0x23a90; leave; ret; 
0x000000000002b606: mov eax, dword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000374f7: mov eax, dword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; sar rax, 5; pop rbp; ret; 
0x000000000002b2c2: mov eax, dword ptr [rbp - 0x18]; leave; ret; 
0x0000000000041a80: mov eax, dword ptr [rbp - 0x18]; mov byte ptr [rax + 0x75], 1; movzx eax, byte ptr [rbp - 1]; pop rbp; ret; 
0x000000000002ba6d: mov eax, dword ptr [rbp - 0x18]; mov dword ptr [rax + 4], edx; movzx eax, byte ptr [rbp - 1]; or eax, 0x40; leave; ret; 
0x000000000003bb3f: mov eax, dword ptr [rbp - 0x18]; mov eax, dword ptr [rax]; cmp edx, eax; sete al; pop rbp; ret; 
0x0000000000025347: mov eax, dword ptr [rbp - 0x18]; mov qword ptr [rax], 0; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000043974: mov eax, dword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002ac58: mov eax, dword ptr [rbp - 0x18]; mov rdx, qword ptr [rbp - 0x20]; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x000000000002b3cc: mov eax, dword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x2b5b5; leave; ret; 
0x000000000002c728: mov eax, dword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x2c94d; leave; ret; 
0x000000000002c81c: mov eax, dword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x2ca74; leave; ret; 
0x000000000003a990: mov eax, dword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x3b217; leave; ret; 
0x000000000004311a: mov eax, dword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x432f2; leave; ret; 
0x00000000000431ea: mov eax, dword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x43396; leave; ret; 
0x00000000000438f2: mov eax, dword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x43902; leave; ret; 
0x000000000002af9d: mov eax, dword ptr [rbp - 0x18]; mov rsi, rdx; mov rdi, rax; call 0x2b266; leave; ret; 
0x000000000002c7b9: mov eax, dword ptr [rbp - 0x18]; mov rsi, rdx; mov rdi, rax; call 0x2c9ae; leave; ret; 
0x0000000000039ddb: mov eax, dword ptr [rbp - 0x18]; mov rsi, rdx; mov rdi, rax; call rbx; 
0x000000000003774e: mov eax, dword ptr [rbp - 0x20]; leave; ret; 
0x000000000002b59b: mov eax, dword ptr [rbp - 0x28]; add rax, rdx; leave; ret; 
0x0000000000037a39: mov eax, dword ptr [rbp - 0x28]; leave; ret; 
0x0000000000042107: mov eax, dword ptr [rbp - 0x28]; mov qword ptr [rax + 0x10], rdx; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000037216: mov eax, dword ptr [rbp - 0x38]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003bee6: mov eax, dword ptr [rbp - 0x38]; mov rdx, qword ptr [rbp - 0x18]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x0000000000036fe1: mov eax, dword ptr [rbp - 0x48]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000370f5: mov eax, dword ptr [rbp - 0x58]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003ce6d: mov eax, dword ptr [rbp - 0x68]; sub rsp, -0x80; pop rbx; pop r12; pop rbp; ret; 
0x00000000000397f5: mov eax, dword ptr [rbp - 0xc]; pop rbp; ret; 
0x0000000000024d87: mov eax, dword ptr [rbp - 4]; and eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000024e7b: mov eax, dword ptr [rbp - 4]; leave; ret; 
0x0000000000024db0: mov eax, dword ptr [rbp - 4]; not eax; pop rbp; ret; 
0x0000000000024d9d: mov eax, dword ptr [rbp - 4]; or eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000028e87: mov eax, dword ptr [rbp - 4]; pop rbp; ret; 
0x0000000000037254: mov eax, dword ptr [rbp - 8]; add rax, 0x100; pop rbp; ret; 
0x0000000000033d97: mov eax, dword ptr [rbp - 8]; add rax, 0x10; mov rdi, rax; call 0x33e0a; leave; ret; 
0x0000000000028f07: mov eax, dword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x00000000000372ba: mov eax, dword ptr [rbp - 8]; add rax, 0xca0; pop rbp; ret; 
0x000000000002cd38: mov eax, dword ptr [rbp - 8]; add rax, rdx; leave; ret; 
0x000000000003ede9: mov eax, dword ptr [rbp - 8]; add rax, rdx; pop rbp; ret; 
0x000000000002f2a9: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0x1016]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f33b: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0x1093]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f3cd: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0x10f5]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f45f: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0x1157]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f4f1: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0x11b9]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002eb3f: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0xa2d]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ebd1: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0xa8e]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ec63: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0xaef]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ecf5: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0xb50]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ed87: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0xbb1]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ee19: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0xc2e]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002eeab: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0xcab]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ef3d: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0xd28]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002efcf: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0xda5]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f061: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0xe22]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f0f3: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0xe9f]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f185: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0xf1c]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f217: mov eax, dword ptr [rbp - 8]; lea rdx, [rip + 0xf99]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x0000000000024de3: mov eax, dword ptr [rbp - 8]; leave; ret; 
0x0000000000026eed: mov eax, dword ptr [rbp - 8]; mov byte ptr [rax + 0x13], dl; nop; pop rbp; ret; 
0x0000000000028edd: mov eax, dword ptr [rbp - 8]; mov byte ptr [rax + 0x32], 0; nop; leave; ret; 
0x0000000000041b24: mov eax, dword ptr [rbp - 8]; mov byte ptr [rax + 0x75], 1; nop; pop rbp; ret; 
0x0000000000041a2e: mov eax, dword ptr [rbp - 8]; mov byte ptr [rax + 0x7b], dl; nop; pop rbp; ret; 
0x0000000000026c7f: mov eax, dword ptr [rbp - 8]; mov byte ptr [rax + 0xa], 0xfd; nop; pop rbp; ret; 
0x0000000000026e72: mov eax, dword ptr [rbp - 8]; mov byte ptr [rax + 0xa], dl; nop; leave; ret; 
0x000000000003af40: mov eax, dword ptr [rbp - 8]; mov byte ptr [rax + 8], dl; nop; leave; ret; 
0x000000000002a619: mov eax, dword ptr [rbp - 8]; mov byte ptr [rax], dl; nop; pop rbp; ret; 
0x000000000003d9fb: mov eax, dword ptr [rbp - 8]; mov dword ptr [rax + 0x1c], edx; nop; pop rbp; ret; 
0x0000000000033865: mov eax, dword ptr [rbp - 8]; mov dword ptr [rax + 4], 0; nop; pop rbp; ret; 
0x0000000000026f31: mov eax, dword ptr [rbp - 8]; mov dword ptr [rax], edx; nop; pop rbp; ret; 
0x000000000003d31d: mov eax, dword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x14]; pop rbp; ret; 
0x000000000003dd53: mov eax, dword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x18]; pop rbp; ret; 
0x000000000003f85b: mov eax, dword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x38]; pop rbp; ret; 
0x000000000003ec07: mov eax, dword ptr [rbp - 8]; mov eax, dword ptr [rax + 0xb0]; pop rbp; ret; 
0x0000000000037fb3: mov eax, dword ptr [rbp - 8]; mov eax, dword ptr [rax]; pop rbp; ret; 
0x0000000000044d4e: mov eax, dword ptr [rbp - 8]; mov edx, dword ptr [rbp - 0x10]; mov dword ptr [rax + 4], edx; nop; pop rbp; ret; 
0x000000000003d448: mov eax, dword ptr [rbp - 8]; mov edx, dword ptr [rbp - 0x14]; mov dword ptr [rax + 0x10], edx; nop; pop rbp; ret; 
0x0000000000037f98: mov eax, dword ptr [rbp - 8]; mov edx, dword ptr [rbp - 0xc]; mov dword ptr [rax], edx; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000041be4: mov eax, dword ptr [rbp - 8]; mov esi, edx; mov rdi, rax; call 0x417d4; leave; ret; 
0x00000000000254fb: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 0x10], 0; nop; leave; ret; 
0x000000000002a886: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 0x10], 0; nop; pop rbp; ret; 
0x000000000002c47a: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x0000000000041ede: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 0x18], 0; nop; leave; ret; 
0x0000000000039a10: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 0x30], 0; nop; leave; ret; 
0x0000000000039859: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 8], 0; nop; pop rbp; ret; 
0x0000000000033c31: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax], 0; nop; pop rbp; ret; 
0x0000000000037c86: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax], rdx; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002b39e: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x0000000000024ec0: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x000000000002588f: mov eax, dword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x00000000000398ab: mov eax, dword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; test rax, rax; sete al; pop rbp; ret; 
0x00000000000398cb: mov eax, dword ptr [rbp - 8]; mov rax, qword ptr [rax + 8]; mov rdi, rax; call 0x28f3c; leave; ret; 
0x0000000000037f3f: mov eax, dword ptr [rbp - 8]; mov rax, qword ptr [rax + 8]; pop rbp; ret; 
0x0000000000025b93: mov eax, dword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x000000000002a8a9: mov eax, dword ptr [rbp - 8]; mov rcx, qword ptr [rax]; mov rax, rdx; sub rax, rcx; pop rbp; ret; 
0x000000000002a6af: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x23770; nop; leave; ret; 
0x0000000000024ee7: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x23a60; leave; ret; 
0x00000000000267a3: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x23e30; nop; leave; ret; 
0x00000000000268b9: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x24eac; nop; leave; ret; 
0x0000000000025007: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x24ef4; nop; leave; ret; 
0x0000000000025161: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x24f72; nop; leave; ret; 
0x0000000000024fb3: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x25170; nop; leave; ret; 
0x00000000000251e9: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x251b8; nop; leave; ret; 
0x0000000000025221: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x251d8; nop; leave; ret; 
0x0000000000024f43: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x251f8; nop; leave; ret; 
0x0000000000025261: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x25230; nop; leave; ret; 
0x0000000000025299: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x25250; nop; leave; ret; 
0x0000000000024f63: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x25270; nop; leave; ret; 
0x000000000002542d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x253ce; nop; leave; ret; 
0x00000000000251aa: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x253ee; nop; leave; ret; 
0x00000000000251c9: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2547c; nop; leave; ret; 
0x0000000000025241: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2553c; nop; leave; ret; 
0x0000000000025670: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x255fc; nop; leave; ret; 
0x00000000000252e2: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2561c; nop; leave; ret; 
0x000000000002579f: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2573c; nop; leave; ret; 
0x0000000000025392: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2575c; nop; leave; ret; 
0x00000000000253df: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x257ee; nop; leave; ret; 
0x000000000002548d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x25872; nop; leave; ret; 
0x000000000002554d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x25930; nop; leave; ret; 
0x000000000002560d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x259ee; nop; leave; ret; 
0x00000000000256cf: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x25a71; leave; ret; 
0x00000000000256ed: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x25a90; leave; ret; 
0x000000000003390b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x25a90; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000002574d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x25aae; nop; leave; ret; 
0x00000000000257ff: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x25b32; nop; leave; ret; 
0x00000000000259ff: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x25e22; nop; leave; ret; 
0x0000000000025a82: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x25ea0; leave; ret; 
0x0000000000025aa1: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x25ebe; leave; ret; 
0x0000000000025abf: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x25edc; nop; leave; ret; 
0x000000000003ad31: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x25f76; leave; ret; 
0x000000000003afff: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x260ba; leave; ret; 
0x0000000000025eb1: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x261c8; leave; ret; 
0x0000000000025ecf: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x261e6; leave; ret; 
0x0000000000025f69: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2622c; leave; ret; 
0x0000000000025f87: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2623e; leave; ret; 
0x0000000000026019: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x26313; leave; ret; 
0x000000000002603b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x26332; nop; leave; ret; 
0x000000000002605b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x26342; nop; leave; ret; 
0x00000000000260ad: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2637a; leave; ret; 
0x00000000000260cb: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2638c; leave; ret; 
0x00000000000261ba: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x26462; nop; leave; ret; 
0x00000000000261d9: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x264aa; leave; ret; 
0x00000000000261f7: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x264bc; leave; ret; 
0x000000000002624f: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x264da; leave; ret; 
0x00000000000262d4: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x264ec; leave; ret; 
0x0000000000026324: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x26531; leave; ret; 
0x000000000002639d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x26544; leave; ret; 
0x0000000000026422: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x26556; leave; ret; 
0x00000000000265ff: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2659c; nop; leave; ret; 
0x000000000002649c: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x265bc; nop; leave; ret; 
0x00000000000264cd: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2664e; leave; ret; 
0x00000000000264fd: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x26660; leave; ret; 
0x0000000000026567: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x26672; leave; ret; 
0x00000000000265ad: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x26684; nop; leave; ret; 
0x0000000000026695: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x26708; nop; leave; ret; 
0x0000000000026a16: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x269a2; nop; leave; ret; 
0x0000000000026994: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x269c2; nop; leave; ret; 
0x00000000000269b3: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x26a64; nop; leave; ret; 
0x0000000000026a75: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x26ae8; nop; leave; ret; 
0x000000000002a68f: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2a65e; nop; leave; ret; 
0x000000000002a66f: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2a6be; nop; leave; ret; 
0x000000000002a6db: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2a862; nop; leave; ret; 
0x000000000002a853: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2ac98; nop; leave; ret; 
0x000000000002ae4c: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2b00a; leave; ret; 
0x000000000002b033: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2b313; leave; ret; 
0x000000000002b218: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2b498; leave; ret; 
0x000000000002b4a9: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2b526; leave; ret; 
0x000000000002ba8d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2be76; nop; leave; ret; 
0x000000000002c41c: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2c76a; nop; leave; ret; 
0x000000000002c749: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2c97e; leave; ret; 
0x000000000002c98f: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2cb94; leave; ret; 
0x0000000000030796: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x32072; nop; leave; ret; 
0x00000000000308e9: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x32116; nop; leave; ret; 
0x0000000000030a3d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x321ba; nop; leave; ret; 
0x0000000000030b91: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3225e; nop; leave; ret; 
0x0000000000030ce5: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x32302; nop; leave; ret; 
0x0000000000030e39: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x323a6; nop; leave; ret; 
0x0000000000030fad: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3246c; nop; leave; ret; 
0x0000000000031121: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x32532; nop; leave; ret; 
0x0000000000031295: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x325f8; nop; leave; ret; 
0x0000000000031409: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x326be; nop; leave; ret; 
0x000000000003157d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x32784; nop; leave; ret; 
0x00000000000316e3: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3284a; nop; leave; ret; 
0x0000000000031857: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x32910; nop; leave; ret; 
0x00000000000319cb: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x329d6; nop; leave; ret; 
0x0000000000031b3f: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x32a9c; nop; leave; ret; 
0x0000000000031cb3: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x32b62; nop; leave; ret; 
0x0000000000031e0b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x32c08; nop; leave; ret; 
0x0000000000031f63: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x32cae; nop; leave; ret; 
0x00000000000320ee: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x32d8e; nop; leave; ret; 
0x0000000000032192: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x32dfc; nop; leave; ret; 
0x0000000000032236: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x32e6a; nop; leave; ret; 
0x00000000000322da: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x32ed8; nop; leave; ret; 
0x000000000003237e: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x32f46; nop; leave; ret; 
0x0000000000032443: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x32fb4; nop; leave; ret; 
0x0000000000032509: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33022; nop; leave; ret; 
0x00000000000325cf: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33090; nop; leave; ret; 
0x0000000000032695: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x330fe; nop; leave; ret; 
0x000000000003275b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3316c; nop; leave; ret; 
0x0000000000032821: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x331da; nop; leave; ret; 
0x00000000000328e7: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3323a; nop; leave; ret; 
0x00000000000329ad: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x332a8; nop; leave; ret; 
0x0000000000032a73: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33316; nop; leave; ret; 
0x0000000000032b39: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33384; nop; leave; ret; 
0x0000000000032bdf: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x333f2; nop; leave; ret; 
0x0000000000032c85: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33460; nop; leave; ret; 
0x0000000000032d2b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x334ce; nop; leave; ret; 
0x00000000000307d3: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000032065: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x00000000000337f5: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x337c4; nop; leave; ret; 
0x0000000000033815: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x337e4; nop; leave; ret; 
0x0000000000033840: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33804; nop; leave; ret; 
0x000000000003399b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3395e; nop; leave; ret; 
0x000000000003377b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3397e; nop; leave; ret; 
0x00000000000337d5: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33a16; nop; leave; ret; 
0x0000000000033951: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33af2; leave; ret; 
0x000000000003396f: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33b14; nop; leave; ret; 
0x0000000000033a33: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33c24; nop; leave; ret; 
0x0000000000033b03: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33c6e; mov rax, qword ptr [rax]; leave; ret; 
0x0000000000033b25: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33c8c; nop; leave; ret; 
0x0000000000033c15: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33d42; nop; leave; ret; 
0x0000000000033c7f: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33d51; leave; ret; 
0x0000000000033d62: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33dec; leave; ret; 
0x0000000000033dfd: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33e4f; leave; ret; 
0x0000000000033e1b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33e61; leave; ret; 
0x0000000000033e72: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x33e7f; leave; ret; 
0x0000000000037d4d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x37df4; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000003b427: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x397fa; nop; leave; ret; 
0x0000000000039dff: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3989e; xor eax, 1; leave; ret; 
0x0000000000039a2f: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x39996; nop; leave; ret; 
0x0000000000039b43: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x39aaa; nop; leave; ret; 
0x000000000003993b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x39bd8; nop; leave; ret; 
0x0000000000039967: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x39be8; nop; leave; ret; 
0x0000000000039987: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x39bf8; nop; leave; ret; 
0x0000000000039a9b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x39c18; nop; leave; ret; 
0x0000000000039c09: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3a01e; nop; leave; ret; 
0x0000000000039c29: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3a03e; nop; leave; ret; 
0x0000000000039c73: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3a0f4; leave; ret; 
0x0000000000039d3f: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3a1d4; leave; ret; 
0x000000000003a02f: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3a3e0; nop; leave; ret; 
0x000000000003a04f: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3a3f0; nop; leave; ret; 
0x000000000003a9b1: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3b248; leave; ret; 
0x000000000003b566: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3bd64; leave; ret; 
0x000000000003b8ae: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3bf88; leave; ret; 
0x000000000003bacf: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3c118; leave; ret; 
0x000000000003baed: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3c12a; leave; ret; 
0x000000000003bc15: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3c178; leave; ret; 
0x000000000003c13b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3c462; leave; ret; 
0x000000000003c16b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3c480; leave; ret; 
0x000000000003c189: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3c492; leave; ret; 
0x000000000003c1b9: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3c4b0; leave; ret; 
0x000000000003c473: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3c742; leave; ret; 
0x000000000003c4a3: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3c754; leave; ret; 
0x000000000003d535: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3d454; nop; leave; ret; 
0x000000000003ed2f: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3edae; add rax, 0x20; leave; ret; 
0x000000000003ed11: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3edae; leave; ret; 
0x000000000003edbf: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x3edf1; leave; ret; 
0x0000000000041e11: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x42434; nop; leave; ret; 
0x0000000000041efd: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x4257a; nop; leave; ret; 
0x000000000004298a: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x4308c; nop; leave; ret; 
0x0000000000042ae2: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x4315c; nop; leave; ret; 
0x000000000004306b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x432a6; leave; ret; 
0x000000000004313b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x4334a; leave; ret; 
0x00000000000432b7: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x43444; leave; ret; 
0x000000000004335b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x43512; leave; ret; 
0x000000000004462d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x43ee4; mov eax, 1; leave; ret; 
0x0000000000039cfa: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call rdx; 
0x0000000000039cfa: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call rdx; leave; ret; 
0x000000000003d4ea: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call rdx; nop; leave; ret; 
0x0000000000039cf2: mov eax, dword ptr [rbp - 8]; mov rdx, qword ptr [rax + 0x18]; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call rdx; 
0x000000000002a787: mov eax, dword ptr [rbp - 8]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rbp - 0x10]; add rax, rdx; pop rbp; ret; 
0x0000000000037f79: mov eax, dword ptr [rbp - 8]; mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax + 0x10], rdx; nop; pop rbp; ret; 
0x0000000000026b85: mov eax, dword ptr [rbp - 8]; mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax + 0x20], rdx; nop; pop rbp; ret; 
0x0000000000037f59: mov eax, dword ptr [rbp - 8]; mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax + 8], rdx; nop; pop rbp; ret; 
0x0000000000037a4f: mov eax, dword ptr [rbp - 8]; mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000037ff9: mov eax, dword ptr [rbp - 8]; mov rdx, qword ptr [rbp - 0x18]; mov qword ptr [rax + 0x48], rdx; nop; leave; ret; 
0x000000000002b0b1: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2b3a7; leave; ret; 
0x000000000003b238: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2b4dd; leave; ret; 
0x000000000002b5d6: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2b660; leave; ret; 
0x000000000002b80c: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2b832; leave; ret; 
0x000000000002b853: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2b863; leave; ret; 
0x000000000002c96e: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2c2dc; leave; ret; 
0x000000000002c350: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2c703; leave; ret; 
0x000000000002c5a8: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2c7f7; leave; ret; 
0x000000000002c88f: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2caca; leave; ret; 
0x000000000002c927: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2cb62; leave; ret; 
0x000000000002ca95: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2cc1e; leave; ret; 
0x000000000002caeb: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2cc6d; leave; ret; 
0x000000000003712a: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x37351; leave; ret; 
0x000000000003728b: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x3749a; leave; ret; 
0x0000000000037389: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x375a9; leave; ret; 
0x000000000003a3cf: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x3a96b; leave; ret; 
0x000000000003a455: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x3a9be; leave; ret; 
0x000000000003a535: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x3ab2c; leave; ret; 
0x000000000003b327: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x3bb4c; leave; ret; 
0x000000000003b405: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x3bc4c; leave; ret; 
0x0000000000042a17: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x430f5; leave; ret; 
0x0000000000042b79: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x431c5; leave; ret; 
0x000000000004386f: mov eax, dword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x438cd; leave; ret; 
0x000000000002aceb: mov eax, dword ptr [rbp - 8]; mov rsi, rdx; mov rdi, rax; call 0x2af80; leave; ret; 
0x000000000002c4a1: mov eax, dword ptr [rbp - 8]; mov rsi, rdx; mov rdi, rax; call 0x2c79c; leave; ret; 
0x000000000004239c: mov eax, dword ptr [rbp - 8]; mov rsi, rdx; mov rdi, rax; call 0x428b8; leave; ret; 
0x000000000003d6af: mov eax, dword ptr [rbp - 8]; mov word ptr [rax + 0x16], dx; nop; pop rbp; ret; 
0x00000000000402ba: mov eax, dword ptr [rbp - 8]; mov word ptr [rax + 0x20], dx; nop; pop rbp; ret; 
0x0000000000041c3f: mov eax, dword ptr [rbp - 8]; mov word ptr [rax + 0x70], dx; nop; leave; ret; 
0x00000000000419ba: mov eax, dword ptr [rbp - 8]; mov word ptr [rax + 0x72], dx; nop; pop rbp; ret; 
0x0000000000044d22: mov eax, dword ptr [rbp - 8]; movss xmm0, dword ptr [rbp - 0x10]; movss dword ptr [rax + 4], xmm0; nop; pop rbp; ret; 
0x0000000000028f33: mov eax, dword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x30]; pop rbp; ret; 
0x0000000000028f1d: mov eax, dword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x31]; pop rbp; ret; 
0x00000000000335b7: mov eax, dword ptr [rbp - 8]; movzx edx, byte ptr [rbp - 0x20]; mov byte ptr [rax + 0x18], dl; nop; pop rbp; ret; 
0x0000000000041c5c: mov eax, dword ptr [rbp - 8]; movzx edx, byte ptr [rbp - 0xc]; mov byte ptr [rax + 0x77], dl; nop; pop rbp; ret; 
0x0000000000025449: mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000446b7: mov eax, dword ptr [rip + 0x1693b]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x000000000003f3cc: mov eax, dword ptr [rip + 0x1bc26]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x00000000000397a8: mov eax, dword ptr [rip + 0x2184a]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x0000000000038317: mov eax, dword ptr [rip + 0x22cdb]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x0000000000036e8c: mov eax, dword ptr [rip + 0x24166]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x000000000003352d: mov eax, dword ptr [rip + 0x27ac5]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x000000000002a5af: mov eax, dword ptr [rip + 0x30a43]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x0000000000024d4f: mov eax, dword ptr [rip + 0x362a3]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x0000000000023ec5: mov eax, dword ptr [rip + 0x37125]; test rax, rax; je 0x23ed8; jmp rax; 
0x0000000000023e84: mov eax, dword ptr [rip + 0x37156]; test rax, rax; je 0x23e98; jmp rax; 
0x0000000000023009: mov eax, dword ptr [rip + 0x37fd9]; test rax, rax; je 0x23016; call rax; 
0x0000000000023009: mov eax, dword ptr [rip + 0x37fd9]; test rax, rax; je 0x23016; call rax; add rsp, 8; ret; 
0x000000000002a805: mov eax, ebx; mov rdi, rax; call 0x23d90; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000037c25: mov eax, ebx; sub rax, rdx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000028e94: mov eax, edi; mov byte ptr [rbp - 4], al; movzx eax, byte ptr [rbp - 4]; pop rbp; ret; 
0x00000000000395c6: mov eax, edx; leave; ret; 
0x000000000003da8a: mov eax, edx; mov byte ptr [rbp - 0x10], al; nop; pop rbp; ret; 
0x0000000000039836: mov eax, edx; pop rbp; ret; 
0x000000000002a8b0: mov eax, edx; sub rax, rcx; pop rbp; ret; 
0x000000000002c050: mov eax, edx; sub rax, rcx; sar rax, 2; pop rbp; ret; 
0x0000000000037e67: mov ebp, 0x8948fffe; ret; 
0x0000000000032385: mov ebp, 0x9000000b; leave; ret; 
0x000000000002d0a9: mov ebp, 0x9000014b; leave; ret; 
0x0000000000040829: mov ebp, 0x90fffe9e; leave; ret; 
0x0000000000024dab: mov ebp, esp; mov dword ptr [rbp - 4], edi; mov eax, dword ptr [rbp - 4]; not eax; pop rbp; ret; 
0x0000000000028e82: mov ebp, esp; mov dword ptr [rbp - 4], edi; mov eax, dword ptr [rbp - 4]; pop rbp; ret; 
0x000000000002bb20: mov ebp, esp; mov eax, 0; pop rbp; ret; 
0x000000000002a8f3: mov ebp, esp; mov eax, 1; pop rbp; ret; 
0x0000000000028e92: mov ebp, esp; mov eax, edi; mov byte ptr [rbp - 4], al; movzx eax, byte ptr [rbp - 4]; pop rbp; ret; 
0x0000000000024d66: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x24d0a; pop rbp; ret; 
0x0000000000028dde: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x28d82; pop rbp; ret; 
0x000000000002a5c6: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x2a56a; pop rbp; ret; 
0x0000000000033544: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x334e8; pop rbp; ret; 
0x0000000000036ea3: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x36e47; pop rbp; ret; 
0x000000000003832e: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x382d2; pop rbp; ret; 
0x00000000000397bf: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x39763; pop rbp; ret; 
0x000000000003d407: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x3d3ab; pop rbp; ret; 
0x000000000003d869: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x3d80d; pop rbp; ret; 
0x000000000003daee: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x3da92; pop rbp; ret; 
0x000000000003de81: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x3de25; pop rbp; ret; 
0x000000000003ec6e: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x3ec12; pop rbp; ret; 
0x000000000003f3e3: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x3f387; pop rbp; ret; 
0x000000000003ffcd: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x3ff71; pop rbp; ret; 
0x00000000000404b7: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x4045b; pop rbp; ret; 
0x0000000000041ded: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x41d91; pop rbp; ret; 
0x00000000000446ce: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x44672; pop rbp; ret; 
0x000000000002b3e2: mov ebp, esp; mov qword ptr [rbp - 8], rdi; cmp qword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x00000000000397ec: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov dword ptr [rbp - 0xc], esi; mov eax, dword ptr [rbp - 0xc]; pop rbp; ret; 
0x0000000000028f42: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov eax, 1; pop rbp; ret; 
0x000000000002bfce: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; mov eax, 0; pop rbp; ret; 
0x000000000003baac: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; mov eax, 1; pop rbp; ret; 
0x000000000002a5f1: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000025b79: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x000000000003724d: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0x100; pop rbp; ret; 
0x0000000000028f00: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x00000000000372b3: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0xca0; pop rbp; ret; 
0x000000000003d316: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x14]; pop rbp; ret; 
0x000000000003dd4c: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x18]; pop rbp; ret; 
0x000000000003f854: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x38]; pop rbp; ret; 
0x000000000003ec00: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0xb0]; pop rbp; ret; 
0x0000000000037fac: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax]; pop rbp; ret; 
0x0000000000025888: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x0000000000037f38: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 8]; pop rbp; ret; 
0x0000000000025b8c: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000028f2c: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x30]; pop rbp; ret; 
0x0000000000028f16: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x31]; pop rbp; ret; 
0x0000000000025442: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002cb9a: mov ebp, esp; mov qword ptr [rbp - 8], rdi; movabs rax, 0x1fffffffffffffff; pop rbp; ret; 
0x000000000003c98c: mov ebp, esp; mov qword ptr [rbp - 8], rdi; movabs rax, 0xfffffffffffffff; pop rbp; ret; 
0x0000000000025878: mov ebp, esp; mov qword ptr [rbp - 8], rdi; nop; pop rbp; ret; 
0x0000000000037e47: mov ebx, 0x3948fffe; ret; 
0x0000000000037e38: mov ebx, 0x8948fffe; ret; 
0x0000000000040857: mov ebx, 0x90000018; leave; ret; 
0x000000000002afa7: mov ebx, 0xc9000002; ret; 
0x0000000000030bbb: mov ebx, 0xc9000016; ret; 
0x0000000000025353: mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000002f4f7: mov ecx, 0x48000011; mov dword ptr [rax + 0x10], edx; nop; leave; ret; 
0x0000000000038457: mov ecx, 0x8948fffe; ret 0x8d48; 
0x0000000000033847: mov ecx, 0x90ffffff; leave; ret; 
0x000000000002a8ad: mov ecx, dword ptr [rax]; mov rax, rdx; sub rax, rcx; pop rbp; ret; 
0x000000000002c04d: mov ecx, dword ptr [rax]; mov rax, rdx; sub rax, rcx; sar rax, 2; pop rbp; ret; 
0x00000000000374c7: mov ecx, dword ptr [rbp - 0x10]; mov rsi, rcx; mov rdi, rax; call 0x37a5c; leave; ret; 
0x00000000000325bb: mov ecx, dword ptr [rdx]; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000043bb6: mov ecx, dword ptr [rdx]; movzx edx, word ptr [rbp - 0x1a]; mov esi, edx; mov rdi, rax; call rcx; 
0x0000000000038a88: mov ecx, dword ptr [rdx]; movzx edx, word ptr [rbp - 0x2c]; mov esi, edx; mov rdi, rax; call rcx; 
0x0000000000028e21: mov edi, 0x458bffff; cld; leave; ret; 
0x00000000000272b5: mov edi, 0x8948ffff; ret; 
0x0000000000028e73: mov edi, 0x8b48ffff; clc; leave; ret; 
0x0000000000025399: mov edi, 0x90000003; leave; ret; 
0x0000000000024d6d: mov edi, 1; call 0x24d0a; pop rbp; ret; 
0x0000000000028de5: mov edi, 1; call 0x28d82; pop rbp; ret; 
0x000000000002a5cd: mov edi, 1; call 0x2a56a; pop rbp; ret; 
0x00000000000316b9: mov edi, 1; call 0x2a5eb; nop; leave; ret; 
0x000000000003354b: mov edi, 1; call 0x334e8; pop rbp; ret; 
0x0000000000036eaa: mov edi, 1; call 0x36e47; pop rbp; ret; 
0x0000000000038335: mov edi, 1; call 0x382d2; pop rbp; ret; 
0x00000000000397c6: mov edi, 1; call 0x39763; pop rbp; ret; 
0x000000000003d40e: mov edi, 1; call 0x3d3ab; pop rbp; ret; 
0x000000000003d870: mov edi, 1; call 0x3d80d; pop rbp; ret; 
0x000000000003daf5: mov edi, 1; call 0x3da92; pop rbp; ret; 
0x000000000003de88: mov edi, 1; call 0x3de25; pop rbp; ret; 
0x000000000003ec75: mov edi, 1; call 0x3ec12; pop rbp; ret; 
0x000000000003f3ea: mov edi, 1; call 0x3f387; pop rbp; ret; 
0x000000000003ffd4: mov edi, 1; call 0x3ff71; pop rbp; ret; 
0x00000000000404be: mov edi, 1; call 0x4045b; pop rbp; ret; 
0x0000000000041df4: mov edi, 1; call 0x41d91; pop rbp; ret; 
0x00000000000446d5: mov edi, 1; call 0x44672; pop rbp; ret; 
0x0000000000023efc: mov edi, dword ptr [rip + 0x37106]; call 0x23730; call 0x23e70; mov byte ptr [rip + 0x3739d], 1; pop rbp; ret; 
0x000000000002a6b3: mov edi, eax; call 0x23770; nop; leave; ret; 
0x00000000000253c0: mov edi, eax; call 0x237e0; test eax, eax; sete al; leave; ret; 
0x0000000000036eec: mov edi, eax; call 0x23880; nop; leave; ret; 
0x000000000002b7b9: mov edi, eax; call 0x238e0; nop; leave; ret; 
0x0000000000037f0b: mov edi, eax; call 0x23940; lea rax, [rip + 0x233b7]; pop rbp; ret; 
0x0000000000024d56: mov edi, eax; call 0x23a40; nop; leave; ret; 
0x0000000000024eeb: mov edi, eax; call 0x23a60; leave; ret; 
0x0000000000025f4d: mov edi, eax; call 0x23a60; nop; leave; ret; 
0x000000000002b30a: mov edi, eax; call 0x23a90; leave; ret; 
0x0000000000039392: mov edi, eax; call 0x23ab0; mov eax, 0; leave; ret; 
0x000000000002e5d4: mov edi, eax; call 0x23ab0; nop; leave; ret; 
0x000000000002cfff: mov edi, eax; call 0x23c00; nop; leave; ret; 
0x0000000000044cf4: mov edi, eax; call 0x23cc0; nop; leave; ret; 
0x0000000000025cc1: mov edi, eax; call 0x23d90; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002a808: mov edi, eax; call 0x23d90; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002abf7: mov edi, eax; call 0x23d90; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002683b: mov edi, eax; call 0x23dd0; nop; leave; ret; 
0x00000000000267a7: mov edi, eax; call 0x23e30; nop; leave; ret; 
0x0000000000024e74: mov edi, eax; call 0x24db7; mov eax, dword ptr [rbp - 4]; leave; ret; 
0x0000000000024e9f: mov edi, eax; call 0x24e1a; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000268bd: mov edi, eax; call 0x24eac; nop; leave; ret; 
0x000000000002500b: mov edi, eax; call 0x24ef4; nop; leave; ret; 
0x0000000000025165: mov edi, eax; call 0x24f72; nop; leave; ret; 
0x0000000000025061: mov edi, eax; call 0x24ff6; nop; leave; ret; 
0x0000000000024fb7: mov edi, eax; call 0x25170; nop; leave; ret; 
0x00000000000251ed: mov edi, eax; call 0x251b8; nop; leave; ret; 
0x0000000000025225: mov edi, eax; call 0x251d8; nop; leave; ret; 
0x0000000000024f47: mov edi, eax; call 0x251f8; nop; leave; ret; 
0x0000000000025265: mov edi, eax; call 0x25230; nop; leave; ret; 
0x000000000002529d: mov edi, eax; call 0x25250; nop; leave; ret; 
0x0000000000024f67: mov edi, eax; call 0x25270; nop; leave; ret; 
0x00000000000250b5: mov edi, eax; call 0x25358; nop; leave; ret; 
0x000000000002a835: mov edi, eax; call 0x253a0; xor eax, 1; leave; ret; 
0x0000000000025431: mov edi, eax; call 0x253ce; nop; leave; ret; 
0x00000000000251ae: mov edi, eax; call 0x253ee; nop; leave; ret; 
0x00000000000251cd: mov edi, eax; call 0x2547c; nop; leave; ret; 
0x0000000000025245: mov edi, eax; call 0x2553c; nop; leave; ret; 
0x0000000000025674: mov edi, eax; call 0x255fc; nop; leave; ret; 
0x00000000000252e6: mov edi, eax; call 0x2561c; nop; leave; ret; 
0x00000000000257a3: mov edi, eax; call 0x2573c; nop; leave; ret; 
0x0000000000025396: mov edi, eax; call 0x2575c; nop; leave; ret; 
0x00000000000253e3: mov edi, eax; call 0x257ee; nop; leave; ret; 
0x0000000000025472: mov edi, eax; call 0x25847; nop; leave; ret; 
0x0000000000025491: mov edi, eax; call 0x25872; nop; leave; ret; 
0x0000000000025531: mov edi, eax; call 0x258e4; nop; leave; ret; 
0x0000000000025551: mov edi, eax; call 0x25930; nop; leave; ret; 
0x00000000000255f1: mov edi, eax; call 0x259a2; nop; leave; ret; 
0x0000000000025611: mov edi, eax; call 0x259ee; nop; leave; ret; 
0x00000000000256b4: mov edi, eax; call 0x25a47; nop; leave; ret; 
0x00000000000256d3: mov edi, eax; call 0x25a71; leave; ret; 
0x00000000000256f1: mov edi, eax; call 0x25a90; leave; ret; 
0x000000000003390f: mov edi, eax; call 0x25a90; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000025751: mov edi, eax; call 0x25aae; nop; leave; ret; 
0x00000000000257e4: mov edi, eax; call 0x25b07; nop; leave; ret; 
0x0000000000025803: mov edi, eax; call 0x25b32; nop; leave; ret; 
0x000000000002583d: mov edi, eax; call 0x25b41; nop; leave; ret; 
0x0000000000025867: mov edi, eax; call 0x25b73; nop; leave; ret; 
0x000000000003ad16: mov edi, eax; call 0x25b9c; nop; leave; ret; 
0x000000000003afe4: mov edi, eax; call 0x25cea; nop; leave; ret; 
0x0000000000025a03: mov edi, eax; call 0x25e22; nop; leave; ret; 
0x0000000000025a3d: mov edi, eax; call 0x25e31; nop; leave; ret; 
0x0000000000025a67: mov edi, eax; call 0x25e63; nop; leave; ret; 
0x0000000000025a86: mov edi, eax; call 0x25ea0; leave; ret; 
0x0000000000025aa5: mov edi, eax; call 0x25ebe; leave; ret; 
0x0000000000025ac3: mov edi, eax; call 0x25edc; nop; leave; ret; 
0x0000000000025afd: mov edi, eax; call 0x25eeb; nop; leave; ret; 
0x0000000000025b27: mov edi, eax; call 0x25f1d; nop; leave; ret; 
0x0000000000025b69: mov edi, eax; call 0x25f30; nop; leave; ret; 
0x0000000000039d8e: mov edi, eax; call 0x25f76; leave; ret; 
0x0000000000025be7: mov edi, eax; call 0x25fbe; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003b003: mov edi, eax; call 0x260ba; leave; ret; 
0x0000000000025d35: mov edi, eax; call 0x26102; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000025e59: mov edi, eax; call 0x26170; nop; leave; ret; 
0x0000000000025eb5: mov edi, eax; call 0x261c8; leave; ret; 
0x0000000000025ed3: mov edi, eax; call 0x261e6; leave; ret; 
0x0000000000025f13: mov edi, eax; call 0x26204; nop; leave; ret; 
0x0000000000025f6d: mov edi, eax; call 0x2622c; leave; ret; 
0x0000000000025f8b: mov edi, eax; call 0x2623e; leave; ret; 
0x0000000000026295: mov edi, eax; call 0x2625c; nop; leave; ret; 
0x00000000000262b9: mov edi, eax; call 0x2627c; nop; leave; ret; 
0x0000000000025fb4: mov edi, eax; call 0x262a0; nop; leave; ret; 
0x000000000002601d: mov edi, eax; call 0x26313; leave; ret; 
0x000000000002603f: mov edi, eax; call 0x26332; nop; leave; ret; 
0x000000000002605f: mov edi, eax; call 0x26342; nop; leave; ret; 
0x0000000000026091: mov edi, eax; call 0x26352; nop; leave; ret; 
0x00000000000260b1: mov edi, eax; call 0x2637a; leave; ret; 
0x00000000000260cf: mov edi, eax; call 0x2638c; leave; ret; 
0x00000000000263e3: mov edi, eax; call 0x263aa; nop; leave; ret; 
0x0000000000026407: mov edi, eax; call 0x263ca; nop; leave; ret; 
0x00000000000260f8: mov edi, eax; call 0x263ee; nop; leave; ret; 
0x00000000000261be: mov edi, eax; call 0x26462; nop; leave; ret; 
0x00000000000261dd: mov edi, eax; call 0x264aa; leave; ret; 
0x00000000000261fb: mov edi, eax; call 0x264bc; leave; ret; 
0x0000000000026253: mov edi, eax; call 0x264da; leave; ret; 
0x00000000000262d8: mov edi, eax; call 0x264ec; leave; ret; 
0x0000000000026309: mov edi, eax; call 0x2650a; nop; leave; ret; 
0x0000000000026328: mov edi, eax; call 0x26531; leave; ret; 
0x00000000000263a1: mov edi, eax; call 0x26544; leave; ret; 
0x0000000000026426: mov edi, eax; call 0x26556; leave; ret; 
0x0000000000026457: mov edi, eax; call 0x26574; nop; leave; ret; 
0x0000000000026603: mov edi, eax; call 0x2659c; nop; leave; ret; 
0x00000000000264a0: mov edi, eax; call 0x265bc; nop; leave; ret; 
0x00000000000264d1: mov edi, eax; call 0x2664e; leave; ret; 
0x0000000000026501: mov edi, eax; call 0x26660; leave; ret; 
0x000000000002656b: mov edi, eax; call 0x26672; leave; ret; 
0x00000000000265b1: mov edi, eax; call 0x26684; nop; leave; ret; 
0x0000000000026644: mov edi, eax; call 0x266dd; nop; leave; ret; 
0x0000000000026699: mov edi, eax; call 0x26708; nop; leave; ret; 
0x00000000000266d3: mov edi, eax; call 0x26717; nop; leave; ret; 
0x00000000000266fd: mov edi, eax; call 0x26749; nop; leave; ret; 
0x000000000002673f: mov edi, eax; call 0x2675c; nop; leave; ret; 
0x0000000000026a1a: mov edi, eax; call 0x269a2; nop; leave; ret; 
0x0000000000026998: mov edi, eax; call 0x269c2; nop; leave; ret; 
0x00000000000269b7: mov edi, eax; call 0x26a64; nop; leave; ret; 
0x0000000000026a5a: mov edi, eax; call 0x26abd; nop; leave; ret; 
0x0000000000026a79: mov edi, eax; call 0x26ae8; nop; leave; ret; 
0x0000000000026ab3: mov edi, eax; call 0x26af7; nop; leave; ret; 
0x0000000000026add: mov edi, eax; call 0x26b29; nop; leave; ret; 
0x0000000000026b1f: mov edi, eax; call 0x26b3c; nop; leave; ret; 
0x0000000000026bbf: mov edi, eax; call 0x26bca; nop; leave; ret; 
0x000000000002d0cf: mov edi, eax; call 0x26c8a; nop; leave; ret; 
0x0000000000028e43: mov edi, eax; call 0x28df2; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000003c9b7: mov edi, eax; call 0x28f26; movzx eax, al; leave; ret; 
0x00000000000398d3: mov edi, eax; call 0x28f3c; leave; ret; 
0x000000000002a693: mov edi, eax; call 0x2a65e; nop; leave; ret; 
0x000000000002a673: mov edi, eax; call 0x2a6be; nop; leave; ret; 
0x00000000000394ac: mov edi, eax; call 0x2a6ea; mov eax, 1; leave; ret; 
0x0000000000040826: mov edi, eax; call 0x2a6ea; nop; leave; ret; 
0x000000000002a6df: mov edi, eax; call 0x2a862; nop; leave; ret; 
0x000000000002a76c: mov edi, eax; call 0x2ac06; nop; leave; ret; 
0x000000000002a857: mov edi, eax; call 0x2ac98; nop; leave; ret; 
0x000000000002ac8e: mov edi, eax; call 0x2aeb0; nop; leave; ret; 
0x000000000002acc5: mov edi, eax; call 0x2af05; leave; ret; 
0x000000000002acbd: mov edi, eax; call 0x2af6e; mov rdi, rax; call 0x2af05; leave; ret; 
0x000000000002acf2: mov edi, eax; call 0x2af80; leave; ret; 
0x000000000002ae50: mov edi, eax; call 0x2b00a; leave; ret; 
0x000000000002afa4: mov edi, eax; call 0x2b266; leave; ret; 
0x000000000002b001: mov edi, eax; call 0x2b2c8; leave; ret; 
0x000000000002b037: mov edi, eax; call 0x2b313; leave; ret; 
0x000000000002b0b8: mov edi, eax; call 0x2b3a7; leave; ret; 
0x000000000002b21c: mov edi, eax; call 0x2b498; leave; ret; 
0x000000000003b23f: mov edi, eax; call 0x2b4dd; leave; ret; 
0x000000000002b2b6: mov edi, eax; call 0x2b4dd; mov qword ptr [rbp - 0x18], rax; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x000000000002b4ad: mov edi, eax; call 0x2b526; leave; ret; 
0x000000000002b3d3: mov edi, eax; call 0x2b5b5; leave; ret; 
0x000000000002b41e: mov edi, eax; call 0x2b5f5; leave; ret; 
0x000000000002b51c: mov edi, eax; call 0x2b60f; leave; ret; 
0x000000000002b5dd: mov edi, eax; call 0x2b660; leave; ret; 
0x000000000002b6d7: mov edi, eax; call 0x2b775; nop; leave; ret; 
0x000000000002b6f6: mov edi, eax; call 0x2b7c4; mov rdi, rax; call 0x2b7d9; leave; ret; 
0x000000000002b6fe: mov edi, eax; call 0x2b7d9; leave; ret; 
0x000000000002b813: mov edi, eax; call 0x2b832; leave; ret; 
0x000000000002b85a: mov edi, eax; call 0x2b863; leave; ret; 
0x000000000002ce78: mov edi, eax; call 0x2ba16; leave; ret; 
0x000000000002ba91: mov edi, eax; call 0x2be76; nop; leave; ret; 
0x000000000002c975: mov edi, eax; call 0x2c2dc; leave; ret; 
0x000000000002bfff: mov edi, eax; call 0x2c4b2; nop; leave; ret; 
0x000000000002c029: mov edi, eax; call 0x2c516; nop; leave; ret; 
0x000000000002c2d2: mov edi, eax; call 0x2c659; nop; leave; ret; 
0x000000000002c357: mov edi, eax; call 0x2c703; leave; ret; 
0x000000000002c3ea: mov edi, eax; call 0x2c756; nop; leave; ret; 
0x000000000002c420: mov edi, eax; call 0x2c76a; nop; leave; ret; 
0x000000000002c4a8: mov edi, eax; call 0x2c79c; leave; ret; 
0x000000000002c5af: mov edi, eax; call 0x2c7f7; leave; ret; 
0x000000000002c679: mov edi, eax; call 0x2c8e1; nop; leave; ret; 
0x000000000002c72f: mov edi, eax; call 0x2c94d; leave; ret; 
0x000000000002c74d: mov edi, eax; call 0x2c97e; leave; ret; 
0x000000000002c7c0: mov edi, eax; call 0x2c9ae; leave; ret; 
0x000000000002c7ee: mov edi, eax; call 0x2ca10; leave; ret; 
0x000000000002c823: mov edi, eax; call 0x2ca74; leave; ret; 
0x000000000002c841: mov edi, eax; call 0x2caa6; mov rax, qword ptr [rax]; leave; ret; 
0x000000000002c862: mov edi, eax; call 0x2cab8; mov rax, qword ptr [rax]; leave; ret; 
0x000000000002c896: mov edi, eax; call 0x2caca; leave; ret; 
0x000000000002c8d8: mov edi, eax; call 0x2cafc; leave; ret; 
0x000000000002c92e: mov edi, eax; call 0x2cb62; leave; ret; 
0x000000000002c993: mov edi, eax; call 0x2cb94; leave; ret; 
0x000000000002c9fe: mov edi, eax; call 0x2cbd6; mov qword ptr [rbp - 0x18], rax; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x000000000002ca9c: mov edi, eax; call 0x2cc1e; leave; ret; 
0x000000000002caf2: mov edi, eax; call 0x2cc6d; leave; ret; 
0x000000000002cdd6: mov edi, eax; call 0x2cde0; nop; leave; ret; 
0x00000000000320a7: mov edi, eax; call 0x2ce16; leave; ret; 
0x000000000003214b: mov edi, eax; call 0x2ce3a; leave; ret; 
0x00000000000321ef: mov edi, eax; call 0x2ce5e; leave; ret; 
0x0000000000032293: mov edi, eax; call 0x2ce82; leave; ret; 
0x0000000000032337: mov edi, eax; call 0x2cea6; leave; ret; 
0x0000000000032b97: mov edi, eax; call 0x2d0b0; nop; leave; ret; 
0x0000000000032c3d: mov edi, eax; call 0x2de4c; nop; leave; ret; 
0x0000000000032ce3: mov edi, eax; call 0x2de76; nop; leave; ret; 
0x000000000002d029: mov edi, eax; call 0x2e4bc; nop; leave; ret; 
0x000000000002f546: mov edi, eax; call 0x30733; nop; leave; ret; 
0x000000000002f565: mov edi, eax; call 0x30779; mov rdi, rax; call 0x307a4; leave; ret; 
0x000000000002f56d: mov edi, eax; call 0x307a4; leave; ret; 
0x000000000002f5e3: mov edi, eax; call 0x307e0; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002f639: mov edi, eax; call 0x30886; nop; leave; ret; 
0x000000000002f658: mov edi, eax; call 0x308cc; mov rdi, rax; call 0x308f7; leave; ret; 
0x000000000002f660: mov edi, eax; call 0x308f7; leave; ret; 
0x000000000002f6d6: mov edi, eax; call 0x30934; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002f72c: mov edi, eax; call 0x309da; nop; leave; ret; 
0x000000000002f74b: mov edi, eax; call 0x30a20; mov rdi, rax; call 0x30a4b; leave; ret; 
0x000000000002f753: mov edi, eax; call 0x30a4b; leave; ret; 
0x000000000002f7c9: mov edi, eax; call 0x30a88; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002f81f: mov edi, eax; call 0x30b2e; nop; leave; ret; 
0x000000000002f83e: mov edi, eax; call 0x30b74; mov rdi, rax; call 0x30b9f; leave; ret; 
0x000000000002f846: mov edi, eax; call 0x30b9f; leave; ret; 
0x000000000002f8bc: mov edi, eax; call 0x30bdc; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002f912: mov edi, eax; call 0x30c82; nop; leave; ret; 
0x000000000002f931: mov edi, eax; call 0x30cc8; mov rdi, rax; call 0x30cf3; leave; ret; 
0x000000000002f939: mov edi, eax; call 0x30cf3; leave; ret; 
0x000000000002f9af: mov edi, eax; call 0x30d30; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fa05: mov edi, eax; call 0x30dd6; nop; leave; ret; 
0x000000000002fa43: mov edi, eax; call 0x30e47; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fabe: mov edi, eax; call 0x30ea4; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fb14: mov edi, eax; call 0x30f4a; nop; leave; ret; 
0x000000000002fb52: mov edi, eax; call 0x30fbb; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fbcd: mov edi, eax; call 0x31018; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fc23: mov edi, eax; call 0x310be; nop; leave; ret; 
0x000000000002fc61: mov edi, eax; call 0x3112f; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fcdc: mov edi, eax; call 0x3118c; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fd32: mov edi, eax; call 0x31232; nop; leave; ret; 
0x000000000002fd70: mov edi, eax; call 0x312a3; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fe41: mov edi, eax; call 0x313a6; nop; leave; ret; 
0x000000000002fe7f: mov edi, eax; call 0x31417; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002ff8e: mov edi, eax; call 0x3158b; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003005f: mov edi, eax; call 0x3168e; nop; leave; ret; 
0x000000000003009d: mov edi, eax; call 0x316f1; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030118: mov edi, eax; call 0x3174e; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003016e: mov edi, eax; call 0x317f4; nop; leave; ret; 
0x00000000000301ac: mov edi, eax; call 0x31865; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030227: mov edi, eax; call 0x318c2; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003027d: mov edi, eax; call 0x31968; nop; leave; ret; 
0x00000000000302bb: mov edi, eax; call 0x319d9; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030336: mov edi, eax; call 0x31a36; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003038c: mov edi, eax; call 0x31adc; nop; leave; ret; 
0x00000000000303ca: mov edi, eax; call 0x31b4d; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030445: mov edi, eax; call 0x31baa; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003049b: mov edi, eax; call 0x31c50; nop; leave; ret; 
0x00000000000304c2: mov edi, eax; call 0x31cc1; nop; leave; ret; 
0x0000000000030539: mov edi, eax; call 0x31d02; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003058f: mov edi, eax; call 0x31da8; nop; leave; ret; 
0x00000000000305b6: mov edi, eax; call 0x31e19; nop; leave; ret; 
0x000000000003062d: mov edi, eax; call 0x31e5a; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030683: mov edi, eax; call 0x31f00; nop; leave; ret; 
0x00000000000306aa: mov edi, eax; call 0x31f71; nop; leave; ret; 
0x0000000000030721: mov edi, eax; call 0x31fb2; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003079a: mov edi, eax; call 0x32072; nop; leave; ret; 
0x000000000003209f: mov edi, eax; call 0x32080; mov rdi, rax; call 0x2ce16; leave; ret; 
0x00000000000307b5: mov edi, eax; call 0x32080; mov rdi, rax; call 0x3208e; leave; ret; 
0x00000000000307bd: mov edi, eax; call 0x3208e; leave; ret; 
0x00000000000308ed: mov edi, eax; call 0x32116; nop; leave; ret; 
0x0000000000032143: mov edi, eax; call 0x32124; mov rdi, rax; call 0x2ce3a; leave; ret; 
0x0000000000030908: mov edi, eax; call 0x32124; mov rdi, rax; call 0x32132; leave; ret; 
0x0000000000030910: mov edi, eax; call 0x32132; leave; ret; 
0x0000000000030a41: mov edi, eax; call 0x321ba; nop; leave; ret; 
0x00000000000321e7: mov edi, eax; call 0x321c8; mov rdi, rax; call 0x2ce5e; leave; ret; 
0x0000000000030a5c: mov edi, eax; call 0x321c8; mov rdi, rax; call 0x321d6; leave; ret; 
0x0000000000030a64: mov edi, eax; call 0x321d6; leave; ret; 
0x0000000000030b95: mov edi, eax; call 0x3225e; nop; leave; ret; 
0x000000000003228b: mov edi, eax; call 0x3226c; mov rdi, rax; call 0x2ce82; leave; ret; 
0x0000000000030bb0: mov edi, eax; call 0x3226c; mov rdi, rax; call 0x3227a; leave; ret; 
0x0000000000030bb8: mov edi, eax; call 0x3227a; leave; ret; 
0x0000000000030ce9: mov edi, eax; call 0x32302; nop; leave; ret; 
0x000000000003232f: mov edi, eax; call 0x32310; mov rdi, rax; call 0x2cea6; leave; ret; 
0x0000000000030d04: mov edi, eax; call 0x32310; mov rdi, rax; call 0x3231e; leave; ret; 
0x0000000000030d0c: mov edi, eax; call 0x3231e; leave; ret; 
0x0000000000030e3d: mov edi, eax; call 0x323a6; nop; leave; ret; 
0x0000000000030e7b: mov edi, eax; call 0x323c2; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030fb1: mov edi, eax; call 0x3246c; nop; leave; ret; 
0x0000000000030fef: mov edi, eax; call 0x32488; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031125: mov edi, eax; call 0x32532; nop; leave; ret; 
0x0000000000031163: mov edi, eax; call 0x3254e; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031299: mov edi, eax; call 0x325f8; nop; leave; ret; 
0x00000000000312d7: mov edi, eax; call 0x32614; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003140d: mov edi, eax; call 0x326be; nop; leave; ret; 
0x000000000003144b: mov edi, eax; call 0x326da; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031581: mov edi, eax; call 0x32784; nop; leave; ret; 
0x00000000000315bf: mov edi, eax; call 0x327a0; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000316e7: mov edi, eax; call 0x3284a; nop; leave; ret; 
0x0000000000031725: mov edi, eax; call 0x32866; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003185b: mov edi, eax; call 0x32910; nop; leave; ret; 
0x0000000000031899: mov edi, eax; call 0x3292c; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000319cf: mov edi, eax; call 0x329d6; nop; leave; ret; 
0x0000000000031a0d: mov edi, eax; call 0x329f2; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031b43: mov edi, eax; call 0x32a9c; nop; leave; ret; 
0x0000000000031b81: mov edi, eax; call 0x32ab8; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031cb7: mov edi, eax; call 0x32b62; nop; leave; ret; 
0x0000000000031cde: mov edi, eax; call 0x32b7e; nop; leave; ret; 
0x0000000000031e0f: mov edi, eax; call 0x32c08; nop; leave; ret; 
0x0000000000031e36: mov edi, eax; call 0x32c24; nop; leave; ret; 
0x0000000000031f67: mov edi, eax; call 0x32cae; nop; leave; ret; 
0x0000000000031f8e: mov edi, eax; call 0x32cca; nop; leave; ret; 
0x00000000000320d7: mov edi, eax; call 0x32d47; nop; leave; ret; 
0x00000000000320f2: mov edi, eax; call 0x32d8e; nop; leave; ret; 
0x000000000003217b: mov edi, eax; call 0x32db6; nop; leave; ret; 
0x0000000000032196: mov edi, eax; call 0x32dfc; nop; leave; ret; 
0x000000000003221f: mov edi, eax; call 0x32e24; nop; leave; ret; 
0x000000000003223a: mov edi, eax; call 0x32e6a; nop; leave; ret; 
0x00000000000322c3: mov edi, eax; call 0x32e92; nop; leave; ret; 
0x00000000000322de: mov edi, eax; call 0x32ed8; nop; leave; ret; 
0x0000000000032367: mov edi, eax; call 0x32f00; nop; leave; ret; 
0x0000000000032382: mov edi, eax; call 0x32f46; nop; leave; ret; 
0x000000000003242c: mov edi, eax; call 0x32f6e; nop; leave; ret; 
0x0000000000032447: mov edi, eax; call 0x32fb4; nop; leave; ret; 
0x00000000000324f2: mov edi, eax; call 0x32fdc; nop; leave; ret; 
0x000000000003250d: mov edi, eax; call 0x33022; nop; leave; ret; 
0x00000000000325b8: mov edi, eax; call 0x3304a; nop; leave; ret; 
0x00000000000325d3: mov edi, eax; call 0x33090; nop; leave; ret; 
0x000000000003267e: mov edi, eax; call 0x330b8; nop; leave; ret; 
0x0000000000032699: mov edi, eax; call 0x330fe; nop; leave; ret; 
0x0000000000032744: mov edi, eax; call 0x33126; nop; leave; ret; 
0x000000000003275f: mov edi, eax; call 0x3316c; nop; leave; ret; 
0x000000000003280a: mov edi, eax; call 0x33194; nop; leave; ret; 
0x0000000000032825: mov edi, eax; call 0x331da; nop; leave; ret; 
0x00000000000328d0: mov edi, eax; call 0x33202; nop; leave; ret; 
0x00000000000328eb: mov edi, eax; call 0x3323a; nop; leave; ret; 
0x0000000000032996: mov edi, eax; call 0x33262; nop; leave; ret; 
0x00000000000329b1: mov edi, eax; call 0x332a8; nop; leave; ret; 
0x0000000000032a5c: mov edi, eax; call 0x332d0; nop; leave; ret; 
0x0000000000032a77: mov edi, eax; call 0x33316; nop; leave; ret; 
0x0000000000032b22: mov edi, eax; call 0x3333e; nop; leave; ret; 
0x0000000000032b3d: mov edi, eax; call 0x33384; nop; leave; ret; 
0x0000000000032bc8: mov edi, eax; call 0x333ac; nop; leave; ret; 
0x0000000000032be3: mov edi, eax; call 0x333f2; nop; leave; ret; 
0x0000000000032c6e: mov edi, eax; call 0x3341a; nop; leave; ret; 
0x0000000000032c89: mov edi, eax; call 0x33460; nop; leave; ret; 
0x0000000000032d14: mov edi, eax; call 0x33488; nop; leave; ret; 
0x0000000000032d2f: mov edi, eax; call 0x334ce; nop; leave; ret; 
0x00000000000307d7: mov edi, eax; call 0x3365a; leave; ret; 
0x0000000000032069: mov edi, eax; call 0x3366c; leave; ret; 
0x000000000003375c: mov edi, eax; call 0x3370e; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000337f9: mov edi, eax; call 0x337c4; nop; leave; ret; 
0x0000000000033819: mov edi, eax; call 0x337e4; nop; leave; ret; 
0x0000000000033844: mov edi, eax; call 0x33804; nop; leave; ret; 
0x000000000003372e: mov edi, eax; call 0x338c4; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000033931: mov edi, eax; call 0x33940; test rax, rax; setne al; leave; ret; 
0x000000000003399f: mov edi, eax; call 0x3395e; nop; leave; ret; 
0x000000000003377f: mov edi, eax; call 0x3397e; nop; leave; ret; 
0x00000000000337d9: mov edi, eax; call 0x33a16; nop; leave; ret; 
0x0000000000033955: mov edi, eax; call 0x33af2; leave; ret; 
0x0000000000033973: mov edi, eax; call 0x33b14; nop; leave; ret; 
0x0000000000033a37: mov edi, eax; call 0x33c24; nop; leave; ret; 
0x0000000000033b07: mov edi, eax; call 0x33c6e; mov rax, qword ptr [rax]; leave; ret; 
0x0000000000033b29: mov edi, eax; call 0x33c8c; nop; leave; ret; 
0x0000000000033b67: mov edi, eax; call 0x33cd4; nop; leave; ret; 
0x0000000000033c19: mov edi, eax; call 0x33d42; nop; leave; ret; 
0x0000000000033c83: mov edi, eax; call 0x33d51; leave; ret; 
0x0000000000033d66: mov edi, eax; call 0x33dec; leave; ret; 
0x0000000000033d9f: mov edi, eax; call 0x33e0a; leave; ret; 
0x0000000000033dd0: mov edi, eax; call 0x33e28; nop; leave; ret; 
0x0000000000033e01: mov edi, eax; call 0x33e4f; leave; ret; 
0x0000000000033e1f: mov edi, eax; call 0x33e61; leave; ret; 
0x0000000000033e76: mov edi, eax; call 0x33e7f; leave; ret; 
0x0000000000037131: mov edi, eax; call 0x37351; leave; ret; 
0x0000000000037292: mov edi, eax; call 0x3749a; leave; ret; 
0x00000000000372f1: mov edi, eax; call 0x374e6; leave; ret; 
0x0000000000037390: mov edi, eax; call 0x375a9; leave; ret; 
0x00000000000374ce: mov edi, eax; call 0x37a5c; leave; ret; 
0x0000000000037746: mov edi, eax; call 0x37c6e; mov rax, qword ptr [rbp - 0x20]; leave; ret; 
0x0000000000037c51: mov edi, eax; call 0x37d8a; movzx eax, byte ptr [rax]; movsx eax, al; mov edi, eax; call rbx; 
0x0000000000037d1f: mov edi, eax; call 0x37da0; movzx eax, byte ptr [rax]; movsx eax, al; mov edi, eax; call rbx; 
0x0000000000037d51: mov edi, eax; call 0x37df4; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000037d81: mov edi, eax; call 0x37e18; leave; ret; 
0x0000000000026eba: mov edi, eax; call 0x38554; leave; ret; 
0x000000000003b42b: mov edi, eax; call 0x397fa; nop; leave; ret; 
0x0000000000039e03: mov edi, eax; call 0x3989e; xor eax, 1; leave; ret; 
0x0000000000039a33: mov edi, eax; call 0x39996; nop; leave; ret; 
0x0000000000039b47: mov edi, eax; call 0x39aaa; nop; leave; ret; 
0x000000000003993f: mov edi, eax; call 0x39bd8; nop; leave; ret; 
0x000000000003996b: mov edi, eax; call 0x39be8; nop; leave; ret; 
0x000000000003998b: mov edi, eax; call 0x39bf8; nop; leave; ret; 
0x0000000000039a9f: mov edi, eax; call 0x39c18; nop; leave; ret; 
0x0000000000039c0d: mov edi, eax; call 0x3a01e; nop; leave; ret; 
0x0000000000039c2d: mov edi, eax; call 0x3a03e; nop; leave; ret; 
0x0000000000039c58: mov edi, eax; call 0x3a05e; leave; ret; 
0x0000000000039c77: mov edi, eax; call 0x3a0f4; leave; ret; 
0x0000000000039d24: mov edi, eax; call 0x3a13e; leave; ret; 
0x0000000000039d43: mov edi, eax; call 0x3a1d4; leave; ret; 
0x000000000003a033: mov edi, eax; call 0x3a3e0; nop; leave; ret; 
0x000000000003a053: mov edi, eax; call 0x3a3f0; nop; leave; ret; 
0x000000000003a284: mov edi, eax; call 0x3a5c0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003a314: mov edi, eax; call 0x3a958; nop; leave; ret; 
0x000000000003a3d6: mov edi, eax; call 0x3a96b; leave; ret; 
0x000000000003a45c: mov edi, eax; call 0x3a9be; leave; ret; 
0x000000000003a4d6: mov edi, eax; call 0x3aaf0; nop; leave; ret; 
0x000000000003a53c: mov edi, eax; call 0x3ab2c; leave; ret; 
0x000000000003a5b6: mov edi, eax; call 0x3ac5e; nop; leave; ret; 
0x000000000003a997: mov edi, eax; call 0x3b217; leave; ret; 
0x000000000003a9b5: mov edi, eax; call 0x3b248; leave; ret; 
0x000000000003ad57: mov edi, eax; call 0x3b543; mov rdi, rax; call 0x3b555; leave; ret; 
0x000000000003ad5f: mov edi, eax; call 0x3b555; leave; ret; 
0x000000000003b025: mov edi, eax; call 0x3b88b; mov rdi, rax; call 0x3b89d; leave; ret; 
0x000000000003b02d: mov edi, eax; call 0x3b89d; leave; ret; 
0x000000000003b32e: mov edi, eax; call 0x3bb4c; leave; ret; 
0x000000000003b40c: mov edi, eax; call 0x3bc4c; leave; ret; 
0x000000000003b56a: mov edi, eax; call 0x3bd64; leave; ret; 
0x000000000003b8b2: mov edi, eax; call 0x3bf88; leave; ret; 
0x000000000003bad3: mov edi, eax; call 0x3c118; leave; ret; 
0x000000000003baf1: mov edi, eax; call 0x3c12a; leave; ret; 
0x000000000003bb13: mov edi, eax; call 0x3c148; mov rdi, rax; call 0x3c15a; leave; ret; 
0x000000000003bb1b: mov edi, eax; call 0x3c15a; leave; ret; 
0x000000000003bc19: mov edi, eax; call 0x3c178; leave; ret; 
0x000000000003bc3b: mov edi, eax; call 0x3c196; mov rdi, rax; call 0x3c1a8; leave; ret; 
0x000000000003bc43: mov edi, eax; call 0x3c1a8; leave; ret; 
0x000000000003bcf4: mov edi, eax; call 0x3c1c6; leave; ret; 
0x000000000003bd56: mov edi, eax; call 0x3c234; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003bf18: mov edi, eax; call 0x3c314; leave; ret; 
0x000000000003bf7a: mov edi, eax; call 0x3c382; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003c13f: mov edi, eax; call 0x3c462; leave; ret; 
0x000000000003c16f: mov edi, eax; call 0x3c480; leave; ret; 
0x000000000003c18d: mov edi, eax; call 0x3c492; leave; ret; 
0x000000000003c1bd: mov edi, eax; call 0x3c4b0; leave; ret; 
0x000000000003c30a: mov edi, eax; call 0x3c52e; nop; leave; ret; 
0x000000000003c458: mov edi, eax; call 0x3c66e; nop; leave; ret; 
0x000000000003c477: mov edi, eax; call 0x3c742; leave; ret; 
0x000000000003c4a7: mov edi, eax; call 0x3c754; leave; ret; 
0x000000000003c848: mov edi, eax; call 0x3c922; leave; ret; 
0x000000000003d539: mov edi, eax; call 0x3d454; nop; leave; ret; 
0x000000000003d67e: mov edi, eax; call 0x3d49c; movzx eax, byte ptr [rax]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003d305: mov edi, eax; call 0x3d4bc; nop; leave; ret; 
0x000000000003ed33: mov edi, eax; call 0x3edae; add rax, 0x20; leave; ret; 
0x000000000003ed15: mov edi, eax; call 0x3edae; leave; ret; 
0x000000000003ed60: mov edi, eax; call 0x3edcc; leave; ret; 
0x000000000003edc3: mov edi, eax; call 0x3edf1; leave; ret; 
0x000000000003fc7b: mov edi, eax; call 0x3fc8a; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000041bea: mov edi, eax; call 0x417d4; leave; ret; 
0x0000000000041ca0: mov edi, eax; call 0x41806; nop; leave; ret; 
0x000000000002ce30: mov edi, eax; call 0x41a38; leave; ret; 
0x000000000002ce54: mov edi, eax; call 0x41b2e; leave; ret; 
0x000000000002cec0: mov edi, eax; call 0x41bc8; leave; ret; 
0x0000000000041e15: mov edi, eax; call 0x42434; nop; leave; ret; 
0x0000000000041f01: mov edi, eax; call 0x4257a; nop; leave; ret; 
0x0000000000042319: mov edi, eax; call 0x4281a; nop; leave; ret; 
0x00000000000423a3: mov edi, eax; call 0x428b8; leave; ret; 
0x000000000004389f: mov edi, eax; call 0x42938; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000427dc: mov edi, eax; call 0x42cc9; nop; leave; ret; 
0x00000000000428a9: mov edi, eax; call 0x42d80; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000042958: mov edi, eax; call 0x43078; nop; leave; ret; 
0x000000000004298e: mov edi, eax; call 0x4308c; nop; leave; ret; 
0x0000000000042a1e: mov edi, eax; call 0x430f5; leave; ret; 
0x0000000000042ab0: mov edi, eax; call 0x43148; nop; leave; ret; 
0x0000000000042ae6: mov edi, eax; call 0x4315c; nop; leave; ret; 
0x0000000000042b80: mov edi, eax; call 0x431c5; leave; ret; 
0x0000000000042d75: mov edi, eax; call 0x431fa; nop; leave; ret; 
0x000000000004306f: mov edi, eax; call 0x432a6; leave; ret; 
0x0000000000043121: mov edi, eax; call 0x432f2; leave; ret; 
0x000000000004313f: mov edi, eax; call 0x4334a; leave; ret; 
0x00000000000431f1: mov edi, eax; call 0x43396; leave; ret; 
0x000000000004329b: mov edi, eax; call 0x43430; nop; leave; ret; 
0x00000000000432bb: mov edi, eax; call 0x43444; leave; ret; 
0x00000000000432e9: mov edi, eax; call 0x4345c; leave; ret; 
0x000000000004335f: mov edi, eax; call 0x43512; leave; ret; 
0x000000000004338d: mov edi, eax; call 0x4352a; leave; ret; 
0x0000000000043876: mov edi, eax; call 0x438cd; leave; ret; 
0x00000000000438f9: mov edi, eax; call 0x43902; leave; ret; 
0x0000000000041d88: mov edi, eax; call 0x43b06; leave; ret; 
0x0000000000044631: mov edi, eax; call 0x43ee4; mov eax, 1; leave; ret; 
0x000000000002de90: mov edi, eax; call 0x43ee4; nop; leave; ret; 
0x0000000000024f2a: mov edi, eax; call r8; nop; leave; ret; 
0x0000000000037c5e: mov edi, eax; call rbx; 
0x0000000000039de2: mov edi, eax; call rbx; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000038a91: mov edi, eax; call rcx; 
0x0000000000025734: mov edi, eax; call rdx; 
0x0000000000039cfe: mov edi, eax; call rdx; leave; ret; 
0x0000000000025734: mov edi, eax; call rdx; nop; leave; ret; 
0x00000000000323f7: mov edi, ebx; call 0x2ceca; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000324bd: mov edi, ebx; call 0x2cefa; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032583: mov edi, ebx; call 0x2cf2a; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032649: mov edi, ebx; call 0x2cf5a; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003270f: mov edi, ebx; call 0x2cf8a; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000327d5: mov edi, ebx; call 0x2cfba; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003289b: mov edi, ebx; call 0x2cfea; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032961: mov edi, ebx; call 0x2d00a; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032a27: mov edi, ebx; call 0x2d034; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032aed: mov edi, ebx; call 0x2d080; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003ceb6: mov edi, ebx; call 0x33a42; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003c51f: mov edi, ebx; call 0x3c766; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000025ffe: mov edi, ecx; call 0x262e1; nop; leave; ret; 
0x0000000000026142: mov edi, ecx; call 0x2642f; nop; leave; ret; 
0x000000000002c31e: mov edi, ecx; call 0x2c695; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002cc60: mov edi, ecx; call 0x2cd40; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000395bf: mov edi, ecx; call 0x39e10; mov eax, edx; leave; ret; 
0x00000000000396cf: mov edi, ecx; call 0x39e84; mov eax, edx; leave; ret; 
0x0000000000031c86: mov edi, edi; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000002b1fe: mov edi, edi; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000002af69: mov edi, edi; dec ecx; ret; 
0x000000000003de1b: mov edi, edx; call 0x23a80; nop; leave; ret; 
0x0000000000028e1d: mov edi, edx; call 0x24db7; mov eax, dword ptr [rbp - 4]; leave; ret; 
0x0000000000033a9a: mov edi, edx; call 0x2570c; nop; leave; ret; 
0x00000000000417f9: mov edi, edx; call 0x2a776; movzx eax, byte ptr [rax]; leave; ret; 
0x000000000002eab3: mov edi, edx; call 0x2b94c; nop; leave; ret; 
0x000000000002d076: mov edi, edx; call 0x2b97a; nop; leave; ret; 
0x000000000002b970: mov edi, edx; call 0x2bb38; nop; leave; ret; 
0x000000000003a42b: mov edi, edx; call 0x398dc; leave; ret; 
0x000000000002cef0: mov edi, edx; call 0x418fe; nop; leave; ret; 
0x000000000002cf20: mov edi, edx; call 0x419c4; nop; leave; ret; 
0x000000000002cf80: mov edi, edx; call 0x41a8e; nop; leave; ret; 
0x000000000002cfe0: mov edi, edx; call 0x41bf4; nop; leave; ret; 
0x000000000002cf50: mov edi, edx; call 0x41c4a; nop; leave; ret; 
0x000000000002d0a6: mov edi, edx; call 0x41c6a; nop; leave; ret; 
0x000000000002cfb0: mov edi, edx; call 0x41caa; nop; leave; ret; 
0x0000000000040854: mov edi, edx; call 0x42116; nop; leave; ret; 
0x00000000000440a1: mov edi, edx; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003982c: mov edx, 0; div qword ptr [rbp - 0x18]; mov rax, rdx; pop rbp; ret; 
0x0000000000037f0f: mov edx, 0x8d48fffe; add eax, 0x233b7; pop rbp; ret; 
0x0000000000026094: mov edx, 0x90000002; leave; ret; 
0x00000000000261fe: mov edx, 0xc9000002; ret; 
0x0000000000039cf6: mov edx, dword ptr [rax + 0x18]; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call rdx; 
0x000000000002572a: mov edx, dword ptr [rax]; add rdx, 8; mov rdx, qword ptr [rdx]; mov rdi, rax; call rdx; 
0x000000000002a78b: mov edx, dword ptr [rax]; mov rax, qword ptr [rbp - 0x10]; add rax, rdx; pop rbp; ret; 
0x000000000002be67: mov edx, dword ptr [rax]; mov rax, qword ptr [rbp - 0x10]; shl rax, 2; add rax, rdx; pop rbp; ret; 
0x000000000002b39b: mov edx, dword ptr [rax]; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x000000000002c53f: mov edx, dword ptr [rax]; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000044d51: mov edx, dword ptr [rbp - 0x10]; mov dword ptr [rax + 4], edx; nop; pop rbp; ret; 
0x0000000000037f7d: mov edx, dword ptr [rbp - 0x10]; mov qword ptr [rax + 0x10], rdx; nop; pop rbp; ret; 
0x0000000000026b89: mov edx, dword ptr [rbp - 0x10]; mov qword ptr [rax + 0x20], rdx; nop; pop rbp; ret; 
0x0000000000037f5d: mov edx, dword ptr [rbp - 0x10]; mov qword ptr [rax + 8], rdx; nop; pop rbp; ret; 
0x0000000000037a53: mov edx, dword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x000000000003717d: mov edx, dword ptr [rbp - 0x10]; mov rdx, qword ptr [rdx]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x000000000002b417: mov edx, dword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x2b5f5; leave; ret; 
0x00000000000372ea: mov edx, dword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x374e6; leave; ret; 
0x0000000000039c51: mov edx, dword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x3a05e; leave; ret; 
0x0000000000039d1d: mov edx, dword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x3a13e; leave; ret; 
0x000000000003ed59: mov edx, dword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x3edcc; leave; ret; 
0x000000000003d44b: mov edx, dword ptr [rbp - 0x14]; mov dword ptr [rax + 0x10], edx; nop; pop rbp; ret; 
0x0000000000037ffd: mov edx, dword ptr [rbp - 0x18]; mov qword ptr [rax + 0x48], rdx; nop; leave; ret; 
0x000000000003beea: mov edx, dword ptr [rbp - 0x18]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x000000000003fdbf: mov edx, dword ptr [rbp - 0x18]; mov qword ptr [rdx + 0x60], rax; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002b515: mov edx, dword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x2b60f; leave; ret; 
0x000000000002ac5c: mov edx, dword ptr [rbp - 0x20]; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x0000000000037f9b: mov edx, dword ptr [rbp - 0xc]; mov dword ptr [rax], edx; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000024ddd: mov edx, dword ptr [rbp - 8]; mov dword ptr [rdx], eax; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000002bfac: mov edx, dword ptr [rbp - 8]; mov qword ptr [rdx + 8], rax; nop; leave; ret; 
0x000000000002b654: mov edx, dword ptr [rbp - 8]; mov rax, qword ptr [rbp - 0x10]; add rax, rdx; leave; ret; 
0x000000000002b597: mov edx, dword ptr [rbp - 8]; mov rax, qword ptr [rbp - 0x28]; add rax, rdx; leave; ret; 
0x0000000000043507: mov edx, dword ptr [rbx]; mov dword ptr [rax], edx; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003076d: mov edx, dword ptr [rbx]; mov qword ptr [rax], rdx; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000043f06: mov edx, dword ptr [rdx]; add rdx, 0x30; mov rdx, qword ptr [rdx]; mov rdi, rax; call rdx; 
0x0000000000044661: mov edx, dword ptr [rdx]; add rdx, 0x38; mov rdx, qword ptr [rdx]; mov rdi, rax; call rdx; 
0x0000000000037181: mov edx, dword ptr [rdx]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000025731: mov edx, dword ptr [rdx]; mov rdi, rax; call rdx; 
0x0000000000025731: mov edx, dword ptr [rdx]; mov rdi, rax; call rdx; nop; leave; ret; 
0x0000000000039dd8: mov edx, eax; mov rax, qword ptr [rbp - 0x18]; mov rsi, rdx; mov rdi, rax; call rbx; 
0x0000000000026eea: mov edx, eax; mov rax, qword ptr [rbp - 8]; mov byte ptr [rax + 0x13], dl; nop; pop rbp; ret; 
0x000000000003d6ac: mov edx, eax; mov rax, qword ptr [rbp - 8]; mov word ptr [rax + 0x16], dx; nop; pop rbp; ret; 
0x00000000000419b7: mov edx, eax; mov rax, qword ptr [rbp - 8]; mov word ptr [rax + 0x72], dx; nop; pop rbp; ret; 
0x000000000002aea0: mov edx, eax; mov rsi, rbx; call 0x2b08c; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000004329e: mov es, word ptr [rcx]; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000032fc8: mov es, word ptr [rsi]; add byte ptr [rax], al; leave; ret; 
0x0000000000028e3d: mov esi, 0x4000; mov rdi, rax; call 0x28df2; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000039bce: mov esi, 0x48fffea1; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000033398: mov esi, 0xc9000002; ret; 
0x0000000000024d68: mov esi, 0xffff; mov edi, 1; call 0x24d0a; pop rbp; ret; 
0x0000000000028de0: mov esi, 0xffff; mov edi, 1; call 0x28d82; pop rbp; ret; 
0x000000000002a5c8: mov esi, 0xffff; mov edi, 1; call 0x2a56a; pop rbp; ret; 
0x0000000000033546: mov esi, 0xffff; mov edi, 1; call 0x334e8; pop rbp; ret; 
0x0000000000036ea5: mov esi, 0xffff; mov edi, 1; call 0x36e47; pop rbp; ret; 
0x0000000000038330: mov esi, 0xffff; mov edi, 1; call 0x382d2; pop rbp; ret; 
0x00000000000397c1: mov esi, 0xffff; mov edi, 1; call 0x39763; pop rbp; ret; 
0x000000000003d409: mov esi, 0xffff; mov edi, 1; call 0x3d3ab; pop rbp; ret; 
0x000000000003d86b: mov esi, 0xffff; mov edi, 1; call 0x3d80d; pop rbp; ret; 
0x000000000003daf0: mov esi, 0xffff; mov edi, 1; call 0x3da92; pop rbp; ret; 
0x000000000003de83: mov esi, 0xffff; mov edi, 1; call 0x3de25; pop rbp; ret; 
0x000000000003ec70: mov esi, 0xffff; mov edi, 1; call 0x3ec12; pop rbp; ret; 
0x000000000003f3e5: mov esi, 0xffff; mov edi, 1; call 0x3f387; pop rbp; ret; 
0x000000000003ffcf: mov esi, 0xffff; mov edi, 1; call 0x3ff71; pop rbp; ret; 
0x00000000000404b9: mov esi, 0xffff; mov edi, 1; call 0x4045b; pop rbp; ret; 
0x0000000000041def: mov esi, 0xffff; mov edi, 1; call 0x41d91; pop rbp; ret; 
0x00000000000446d0: mov esi, 0xffff; mov edi, 1; call 0x44672; pop rbp; ret; 
0x000000000002ae48: mov esi, dword ptr [rbp - 0x10]; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b00a; leave; ret; 
0x000000000002b02f: mov esi, dword ptr [rbp - 0x10]; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b313; leave; ret; 
0x00000000000316b7: mov esi, eax; mov edi, 1; call 0x2a5eb; nop; leave; ret; 
0x0000000000025ffb: mov esi, eax; mov rdi, rcx; call 0x262e1; nop; leave; ret; 
0x000000000002613f: mov esi, eax; mov rdi, rcx; call 0x2642f; nop; leave; ret; 
0x00000000000395bc: mov esi, eax; mov rdi, rcx; call 0x39e10; mov eax, edx; leave; ret; 
0x00000000000396cc: mov esi, eax; mov rdi, rcx; call 0x39e84; mov eax, edx; leave; ret; 
0x000000000003de18: mov esi, eax; mov rdi, rdx; call 0x23a80; nop; leave; ret; 
0x0000000000028e1a: mov esi, eax; mov rdi, rdx; call 0x24db7; mov eax, dword ptr [rbp - 4]; leave; ret; 
0x0000000000033a97: mov esi, eax; mov rdi, rdx; call 0x2570c; nop; leave; ret; 
0x00000000000417f6: mov esi, eax; mov rdi, rdx; call 0x2a776; movzx eax, byte ptr [rax]; leave; ret; 
0x000000000002eab0: mov esi, eax; mov rdi, rdx; call 0x2b94c; nop; leave; ret; 
0x000000000002d073: mov esi, eax; mov rdi, rdx; call 0x2b97a; nop; leave; ret; 
0x000000000002b96d: mov esi, eax; mov rdi, rdx; call 0x2bb38; nop; leave; ret; 
0x000000000003a428: mov esi, eax; mov rdi, rdx; call 0x398dc; leave; ret; 
0x000000000002ceed: mov esi, eax; mov rdi, rdx; call 0x418fe; nop; leave; ret; 
0x000000000002cf1d: mov esi, eax; mov rdi, rdx; call 0x419c4; nop; leave; ret; 
0x000000000002cf7d: mov esi, eax; mov rdi, rdx; call 0x41a8e; nop; leave; ret; 
0x000000000002cfdd: mov esi, eax; mov rdi, rdx; call 0x41bf4; nop; leave; ret; 
0x000000000002cf4d: mov esi, eax; mov rdi, rdx; call 0x41c4a; nop; leave; ret; 
0x000000000002d0a3: mov esi, eax; mov rdi, rdx; call 0x41c6a; nop; leave; ret; 
0x000000000002cfad: mov esi, eax; mov rdi, rdx; call 0x41caa; nop; leave; ret; 
0x0000000000040851: mov esi, eax; mov rdi, rdx; call 0x42116; nop; leave; ret; 
0x000000000002aea3: mov esi, ebx; call 0x2b08c; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002c31b: mov esi, ebx; mov rdi, rcx; call 0x2c695; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002cc5d: mov esi, ebx; mov rdi, rcx; call 0x2cd40; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000036ee9: mov esi, ecx; mov rdi, rax; call 0x23880; nop; leave; ret; 
0x000000000002b7b6: mov esi, ecx; mov rdi, rax; call 0x238e0; nop; leave; ret; 
0x0000000000044cf1: mov esi, ecx; mov rdi, rax; call 0x23cc0; nop; leave; ret; 
0x000000000002552e: mov esi, ecx; mov rdi, rax; call 0x258e4; nop; leave; ret; 
0x00000000000255ee: mov esi, ecx; mov rdi, rax; call 0x259a2; nop; leave; ret; 
0x000000000002583a: mov esi, ecx; mov rdi, rax; call 0x25b41; nop; leave; ret; 
0x0000000000025a3a: mov esi, ecx; mov rdi, rax; call 0x25e31; nop; leave; ret; 
0x0000000000025afa: mov esi, ecx; mov rdi, rax; call 0x25eeb; nop; leave; ret; 
0x0000000000025b66: mov esi, ecx; mov rdi, rax; call 0x25f30; nop; leave; ret; 
0x0000000000025e56: mov esi, ecx; mov rdi, rax; call 0x26170; nop; leave; ret; 
0x0000000000025f10: mov esi, ecx; mov rdi, rax; call 0x26204; nop; leave; ret; 
0x000000000002608e: mov esi, ecx; mov rdi, rax; call 0x26352; nop; leave; ret; 
0x0000000000026306: mov esi, ecx; mov rdi, rax; call 0x2650a; nop; leave; ret; 
0x0000000000026454: mov esi, ecx; mov rdi, rax; call 0x26574; nop; leave; ret; 
0x00000000000266d0: mov esi, ecx; mov rdi, rax; call 0x26717; nop; leave; ret; 
0x000000000002673c: mov esi, ecx; mov rdi, rax; call 0x2675c; nop; leave; ret; 
0x0000000000026ab0: mov esi, ecx; mov rdi, rax; call 0x26af7; nop; leave; ret; 
0x0000000000026b1c: mov esi, ecx; mov rdi, rax; call 0x26b3c; nop; leave; ret; 
0x000000000002ac8b: mov esi, ecx; mov rdi, rax; call 0x2aeb0; nop; leave; ret; 
0x000000000002affe: mov esi, ecx; mov rdi, rax; call 0x2b2c8; leave; ret; 
0x000000000002b0b5: mov esi, ecx; mov rdi, rax; call 0x2b3a7; leave; ret; 
0x000000000003b23c: mov esi, ecx; mov rdi, rax; call 0x2b4dd; leave; ret; 
0x000000000002b3d0: mov esi, ecx; mov rdi, rax; call 0x2b5b5; leave; ret; 
0x000000000002b519: mov esi, ecx; mov rdi, rax; call 0x2b60f; leave; ret; 
0x000000000002b5da: mov esi, ecx; mov rdi, rax; call 0x2b660; leave; ret; 
0x000000000002b6d4: mov esi, ecx; mov rdi, rax; call 0x2b775; nop; leave; ret; 
0x000000000002b810: mov esi, ecx; mov rdi, rax; call 0x2b832; leave; ret; 
0x000000000002b857: mov esi, ecx; mov rdi, rax; call 0x2b863; leave; ret; 
0x000000000002c972: mov esi, ecx; mov rdi, rax; call 0x2c2dc; leave; ret; 
0x000000000002c354: mov esi, ecx; mov rdi, rax; call 0x2c703; leave; ret; 
0x000000000002c5ac: mov esi, ecx; mov rdi, rax; call 0x2c7f7; leave; ret; 
0x000000000002c72c: mov esi, ecx; mov rdi, rax; call 0x2c94d; leave; ret; 
0x000000000002c7eb: mov esi, ecx; mov rdi, rax; call 0x2ca10; leave; ret; 
0x000000000002c820: mov esi, ecx; mov rdi, rax; call 0x2ca74; leave; ret; 
0x000000000002c893: mov esi, ecx; mov rdi, rax; call 0x2caca; leave; ret; 
0x000000000002c92b: mov esi, ecx; mov rdi, rax; call 0x2cb62; leave; ret; 
0x000000000002ca99: mov esi, ecx; mov rdi, rax; call 0x2cc1e; leave; ret; 
0x000000000002caef: mov esi, ecx; mov rdi, rax; call 0x2cc6d; leave; ret; 
0x000000000002cdd3: mov esi, ecx; mov rdi, rax; call 0x2cde0; nop; leave; ret; 
0x0000000000033dcd: mov esi, ecx; mov rdi, rax; call 0x33e28; nop; leave; ret; 
0x000000000003712e: mov esi, ecx; mov rdi, rax; call 0x37351; leave; ret; 
0x000000000003728f: mov esi, ecx; mov rdi, rax; call 0x3749a; leave; ret; 
0x000000000003738d: mov esi, ecx; mov rdi, rax; call 0x375a9; leave; ret; 
0x00000000000374cb: mov esi, ecx; mov rdi, rax; call 0x37a5c; leave; ret; 
0x000000000003a281: mov esi, ecx; mov rdi, rax; call 0x3a5c0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003a3d3: mov esi, ecx; mov rdi, rax; call 0x3a96b; leave; ret; 
0x000000000003a459: mov esi, ecx; mov rdi, rax; call 0x3a9be; leave; ret; 
0x000000000003a539: mov esi, ecx; mov rdi, rax; call 0x3ab2c; leave; ret; 
0x000000000003a994: mov esi, ecx; mov rdi, rax; call 0x3b217; leave; ret; 
0x000000000003b32b: mov esi, ecx; mov rdi, rax; call 0x3bb4c; leave; ret; 
0x000000000003b409: mov esi, ecx; mov rdi, rax; call 0x3bc4c; leave; ret; 
0x000000000003bcf1: mov esi, ecx; mov rdi, rax; call 0x3c1c6; leave; ret; 
0x000000000003bf15: mov esi, ecx; mov rdi, rax; call 0x3c314; leave; ret; 
0x000000000003c845: mov esi, ecx; mov rdi, rax; call 0x3c922; leave; ret; 
0x0000000000041c9d: mov esi, ecx; mov rdi, rax; call 0x41806; nop; leave; ret; 
0x0000000000042a1b: mov esi, ecx; mov rdi, rax; call 0x430f5; leave; ret; 
0x0000000000042b7d: mov esi, ecx; mov rdi, rax; call 0x431c5; leave; ret; 
0x0000000000042d72: mov esi, ecx; mov rdi, rax; call 0x431fa; nop; leave; ret; 
0x000000000004311e: mov esi, ecx; mov rdi, rax; call 0x432f2; leave; ret; 
0x00000000000431ee: mov esi, ecx; mov rdi, rax; call 0x43396; leave; ret; 
0x00000000000432e6: mov esi, ecx; mov rdi, rax; call 0x4345c; leave; ret; 
0x000000000004338a: mov esi, ecx; mov rdi, rax; call 0x4352a; leave; ret; 
0x0000000000043873: mov esi, ecx; mov rdi, rax; call 0x438cd; leave; ret; 
0x00000000000438f6: mov esi, ecx; mov rdi, rax; call 0x43902; leave; ret; 
0x0000000000024f27: mov esi, ecx; mov rdi, rax; call r8; nop; leave; ret; 
0x000000000003b1cb: mov esi, edi; dec ecx; ret; 
0x000000000003938f: mov esi, edx; mov rdi, rax; call 0x23ab0; mov eax, 0; leave; ret; 
0x000000000002e5d1: mov esi, edx; mov rdi, rax; call 0x23ab0; nop; leave; ret; 
0x0000000000024e71: mov esi, edx; mov rdi, rax; call 0x24db7; mov eax, dword ptr [rbp - 4]; leave; ret; 
0x000000000002a832: mov esi, edx; mov rdi, rax; call 0x253a0; xor eax, 1; leave; ret; 
0x000000000002546f: mov esi, edx; mov rdi, rax; call 0x25847; nop; leave; ret; 
0x00000000000256b1: mov esi, edx; mov rdi, rax; call 0x25a47; nop; leave; ret; 
0x00000000000257e1: mov esi, edx; mov rdi, rax; call 0x25b07; nop; leave; ret; 
0x0000000000025864: mov esi, edx; mov rdi, rax; call 0x25b73; nop; leave; ret; 
0x000000000003ad13: mov esi, edx; mov rdi, rax; call 0x25b9c; nop; leave; ret; 
0x000000000003afe1: mov esi, edx; mov rdi, rax; call 0x25cea; nop; leave; ret; 
0x0000000000025a64: mov esi, edx; mov rdi, rax; call 0x25e63; nop; leave; ret; 
0x0000000000025b24: mov esi, edx; mov rdi, rax; call 0x25f1d; nop; leave; ret; 
0x0000000000025fb1: mov esi, edx; mov rdi, rax; call 0x262a0; nop; leave; ret; 
0x00000000000260f5: mov esi, edx; mov rdi, rax; call 0x263ee; nop; leave; ret; 
0x0000000000026641: mov esi, edx; mov rdi, rax; call 0x266dd; nop; leave; ret; 
0x00000000000266fa: mov esi, edx; mov rdi, rax; call 0x26749; nop; leave; ret; 
0x0000000000026a57: mov esi, edx; mov rdi, rax; call 0x26abd; nop; leave; ret; 
0x0000000000026ada: mov esi, edx; mov rdi, rax; call 0x26b29; nop; leave; ret; 
0x0000000000026bbc: mov esi, edx; mov rdi, rax; call 0x26bca; nop; leave; ret; 
0x000000000002a769: mov esi, edx; mov rdi, rax; call 0x2ac06; nop; leave; ret; 
0x000000000002acef: mov esi, edx; mov rdi, rax; call 0x2af80; leave; ret; 
0x000000000002afa1: mov esi, edx; mov rdi, rax; call 0x2b266; leave; ret; 
0x000000000002b41b: mov esi, edx; mov rdi, rax; call 0x2b5f5; leave; ret; 
0x000000000002bffc: mov esi, edx; mov rdi, rax; call 0x2c4b2; nop; leave; ret; 
0x000000000002c026: mov esi, edx; mov rdi, rax; call 0x2c516; nop; leave; ret; 
0x000000000002c2cf: mov esi, edx; mov rdi, rax; call 0x2c659; nop; leave; ret; 
0x000000000002c3e7: mov esi, edx; mov rdi, rax; call 0x2c756; nop; leave; ret; 
0x000000000002c4a5: mov esi, edx; mov rdi, rax; call 0x2c79c; leave; ret; 
0x000000000002c676: mov esi, edx; mov rdi, rax; call 0x2c8e1; nop; leave; ret; 
0x000000000002c7bd: mov esi, edx; mov rdi, rax; call 0x2c9ae; leave; ret; 
0x000000000002c8d5: mov esi, edx; mov rdi, rax; call 0x2cafc; leave; ret; 
0x000000000002d026: mov esi, edx; mov rdi, rax; call 0x2e4bc; nop; leave; ret; 
0x000000000002f543: mov esi, edx; mov rdi, rax; call 0x30733; nop; leave; ret; 
0x000000000002f636: mov esi, edx; mov rdi, rax; call 0x30886; nop; leave; ret; 
0x000000000002f729: mov esi, edx; mov rdi, rax; call 0x309da; nop; leave; ret; 
0x000000000002f81c: mov esi, edx; mov rdi, rax; call 0x30b2e; nop; leave; ret; 
0x000000000002f90f: mov esi, edx; mov rdi, rax; call 0x30c82; nop; leave; ret; 
0x000000000002fa02: mov esi, edx; mov rdi, rax; call 0x30dd6; nop; leave; ret; 
0x000000000002fb11: mov esi, edx; mov rdi, rax; call 0x30f4a; nop; leave; ret; 
0x000000000002fc20: mov esi, edx; mov rdi, rax; call 0x310be; nop; leave; ret; 
0x000000000002fd2f: mov esi, edx; mov rdi, rax; call 0x31232; nop; leave; ret; 
0x000000000002fe3e: mov esi, edx; mov rdi, rax; call 0x313a6; nop; leave; ret; 
0x000000000003005c: mov esi, edx; mov rdi, rax; call 0x3168e; nop; leave; ret; 
0x000000000003016b: mov esi, edx; mov rdi, rax; call 0x317f4; nop; leave; ret; 
0x000000000003027a: mov esi, edx; mov rdi, rax; call 0x31968; nop; leave; ret; 
0x0000000000030389: mov esi, edx; mov rdi, rax; call 0x31adc; nop; leave; ret; 
0x0000000000030498: mov esi, edx; mov rdi, rax; call 0x31c50; nop; leave; ret; 
0x000000000003058c: mov esi, edx; mov rdi, rax; call 0x31da8; nop; leave; ret; 
0x0000000000030680: mov esi, edx; mov rdi, rax; call 0x31f00; nop; leave; ret; 
0x00000000000320d4: mov esi, edx; mov rdi, rax; call 0x32d47; nop; leave; ret; 
0x0000000000032178: mov esi, edx; mov rdi, rax; call 0x32db6; nop; leave; ret; 
0x000000000003221c: mov esi, edx; mov rdi, rax; call 0x32e24; nop; leave; ret; 
0x00000000000322c0: mov esi, edx; mov rdi, rax; call 0x32e92; nop; leave; ret; 
0x0000000000032364: mov esi, edx; mov rdi, rax; call 0x32f00; nop; leave; ret; 
0x0000000000032429: mov esi, edx; mov rdi, rax; call 0x32f6e; nop; leave; ret; 
0x00000000000324ef: mov esi, edx; mov rdi, rax; call 0x32fdc; nop; leave; ret; 
0x00000000000325b5: mov esi, edx; mov rdi, rax; call 0x3304a; nop; leave; ret; 
0x000000000003267b: mov esi, edx; mov rdi, rax; call 0x330b8; nop; leave; ret; 
0x0000000000032741: mov esi, edx; mov rdi, rax; call 0x33126; nop; leave; ret; 
0x0000000000032807: mov esi, edx; mov rdi, rax; call 0x33194; nop; leave; ret; 
0x00000000000328cd: mov esi, edx; mov rdi, rax; call 0x33202; nop; leave; ret; 
0x0000000000032993: mov esi, edx; mov rdi, rax; call 0x33262; nop; leave; ret; 
0x0000000000032a59: mov esi, edx; mov rdi, rax; call 0x332d0; nop; leave; ret; 
0x0000000000032b1f: mov esi, edx; mov rdi, rax; call 0x3333e; nop; leave; ret; 
0x0000000000032bc5: mov esi, edx; mov rdi, rax; call 0x333ac; nop; leave; ret; 
0x0000000000032c6b: mov esi, edx; mov rdi, rax; call 0x3341a; nop; leave; ret; 
0x0000000000032d11: mov esi, edx; mov rdi, rax; call 0x33488; nop; leave; ret; 
0x0000000000033759: mov esi, edx; mov rdi, rax; call 0x3370e; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000003372b: mov esi, edx; mov rdi, rax; call 0x338c4; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000033b64: mov esi, edx; mov rdi, rax; call 0x33cd4; nop; leave; ret; 
0x00000000000372ee: mov esi, edx; mov rdi, rax; call 0x374e6; leave; ret; 
0x0000000000037d7e: mov esi, edx; mov rdi, rax; call 0x37e18; leave; ret; 
0x0000000000026eb7: mov esi, edx; mov rdi, rax; call 0x38554; leave; ret; 
0x0000000000039c55: mov esi, edx; mov rdi, rax; call 0x3a05e; leave; ret; 
0x0000000000039d21: mov esi, edx; mov rdi, rax; call 0x3a13e; leave; ret; 
0x000000000003a311: mov esi, edx; mov rdi, rax; call 0x3a958; nop; leave; ret; 
0x000000000003a4d3: mov esi, edx; mov rdi, rax; call 0x3aaf0; nop; leave; ret; 
0x000000000003a5b3: mov esi, edx; mov rdi, rax; call 0x3ac5e; nop; leave; ret; 
0x000000000003c307: mov esi, edx; mov rdi, rax; call 0x3c52e; nop; leave; ret; 
0x000000000003c455: mov esi, edx; mov rdi, rax; call 0x3c66e; nop; leave; ret; 
0x000000000003ed5d: mov esi, edx; mov rdi, rax; call 0x3edcc; leave; ret; 
0x0000000000041be7: mov esi, edx; mov rdi, rax; call 0x417d4; leave; ret; 
0x0000000000042316: mov esi, edx; mov rdi, rax; call 0x4281a; nop; leave; ret; 
0x00000000000423a0: mov esi, edx; mov rdi, rax; call 0x428b8; leave; ret; 
0x000000000004389c: mov esi, edx; mov rdi, rax; call 0x42938; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000427d9: mov esi, edx; mov rdi, rax; call 0x42cc9; nop; leave; ret; 
0x0000000000042955: mov esi, edx; mov rdi, rax; call 0x43078; nop; leave; ret; 
0x0000000000042aad: mov esi, edx; mov rdi, rax; call 0x43148; nop; leave; ret; 
0x0000000000043298: mov esi, edx; mov rdi, rax; call 0x43430; nop; leave; ret; 
0x0000000000041d85: mov esi, edx; mov rdi, rax; call 0x43b06; leave; ret; 
0x0000000000039ddf: mov esi, edx; mov rdi, rax; call rbx; 
0x0000000000038a8e: mov esi, edx; mov rdi, rax; call rcx; 
0x0000000000043050: mov esp, 0x48fffe0a; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000028194: mov esp, 0x89000103; ret 0x8b48; 
0x000000000003f3bb: mov esp, 0x89480001; ret 0x8d48; 
0x00000000000262bc: mov esp, 0x90ffffff; leave; ret; 
0x000000000003d8ce: mov fs, word ptr [rcx - 2]; dec ecx; ret; 
0x000000000002abaa: mov gs, word ptr [rax - 0x76b70001]; ret 0x8b48; 
0x00000000000254fe: mov qword ptr [rax + 0x10], 0; nop; leave; ret; 
0x000000000002a889: mov qword ptr [rax + 0x10], 0; nop; pop rbp; ret; 
0x000000000002c47d: mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000004210a: mov qword ptr [rax + 0x10], rdx; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000037f80: mov qword ptr [rax + 0x10], rdx; nop; pop rbp; ret; 
0x0000000000041ee1: mov qword ptr [rax + 0x18], 0; nop; leave; ret; 
0x0000000000026b8c: mov qword ptr [rax + 0x20], rdx; nop; pop rbp; ret; 
0x0000000000039a13: mov qword ptr [rax + 0x30], 0; nop; leave; ret; 
0x0000000000038000: mov qword ptr [rax + 0x48], rdx; nop; leave; ret; 
0x000000000003985c: mov qword ptr [rax + 8], 0; nop; pop rbp; ret; 
0x000000000002ac5f: mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x0000000000037f60: mov qword ptr [rax + 8], rdx; nop; pop rbp; ret; 
0x0000000000033ad3: mov qword ptr [rax], 0; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000002534a: mov qword ptr [rax], 0; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000033c34: mov qword ptr [rax], 0; nop; pop rbp; ret; 
0x0000000000037c89: mov qword ptr [rax], rdx; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002b3a1: mov qword ptr [rax], rdx; nop; leave; ret; 
0x000000000003076f: mov qword ptr [rax], rdx; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000024ec3: mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x000000000002bfd4: mov qword ptr [rbp - 0x10], rsi; mov eax, 0; pop rbp; ret; 
0x000000000003bab2: mov qword ptr [rbp - 0x10], rsi; mov eax, 1; pop rbp; ret; 
0x000000000003b650: mov qword ptr [rbp - 0x10], rsi; mov qword ptr [rbp - 0x18], rdx; nop; pop rbp; ret; 
0x000000000002a5f7: mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x000000000002b601: mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000374f2: mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; sar rax, 5; pop rbp; ret; 
0x0000000000025b7f: mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x000000000002b2bd: mov qword ptr [rbp - 0x18], rax; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x000000000003b654: mov qword ptr [rbp - 0x18], rdx; nop; pop rbp; ret; 
0x000000000002b3e4: mov qword ptr [rbp - 8], rdi; cmp qword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x00000000000397ee: mov qword ptr [rbp - 8], rdi; mov dword ptr [rbp - 0xc], esi; mov eax, dword ptr [rbp - 0xc]; pop rbp; ret; 
0x0000000000028f44: mov qword ptr [rbp - 8], rdi; mov eax, 1; pop rbp; ret; 
0x000000000002bfd0: mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; mov eax, 0; pop rbp; ret; 
0x000000000003baae: mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; mov eax, 1; pop rbp; ret; 
0x000000000003b64c: mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; mov qword ptr [rbp - 0x18], rdx; nop; pop rbp; ret; 
0x000000000002a5f3: mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x000000000002b5fd: mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000025b7b: mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x000000000003724f: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0x100; pop rbp; ret; 
0x0000000000028f02: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x00000000000372b5: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0xca0; pop rbp; ret; 
0x000000000003d318: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x14]; pop rbp; ret; 
0x000000000003dd4e: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x18]; pop rbp; ret; 
0x000000000003f856: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x38]; pop rbp; ret; 
0x000000000003ec02: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0xb0]; pop rbp; ret; 
0x0000000000037fae: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax]; pop rbp; ret; 
0x0000000000033c2c: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], 0; nop; pop rbp; ret; 
0x000000000002588a: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x0000000000037f3a: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 8]; pop rbp; ret; 
0x0000000000025b8e: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x00000000000256ca: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25a71; leave; ret; 
0x00000000000256e8: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25a90; leave; ret; 
0x0000000000025a7d: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25ea0; leave; ret; 
0x0000000000025a9c: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25ebe; leave; ret; 
0x000000000003ad2c: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25f76; leave; ret; 
0x000000000003affa: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x260ba; leave; ret; 
0x0000000000025eac: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x261c8; leave; ret; 
0x0000000000025eca: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x261e6; leave; ret; 
0x0000000000025f64: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2622c; leave; ret; 
0x0000000000025f82: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2623e; leave; ret; 
0x0000000000026014: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26313; leave; ret; 
0x00000000000260a8: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2637a; leave; ret; 
0x00000000000260c6: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2638c; leave; ret; 
0x00000000000261d4: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264aa; leave; ret; 
0x00000000000261f2: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264bc; leave; ret; 
0x000000000002624a: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264da; leave; ret; 
0x00000000000262cf: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264ec; leave; ret; 
0x000000000002631f: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26531; leave; ret; 
0x0000000000026398: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26544; leave; ret; 
0x000000000002641d: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26556; leave; ret; 
0x00000000000264c8: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2664e; leave; ret; 
0x00000000000264f8: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26660; leave; ret; 
0x0000000000026562: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26672; leave; ret; 
0x000000000002b213: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b498; leave; ret; 
0x000000000002b4a4: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b526; leave; ret; 
0x000000000002c744: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2c97e; leave; ret; 
0x000000000002c98a: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2cb94; leave; ret; 
0x00000000000307ce: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000032060: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x000000000003394c: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33af2; leave; ret; 
0x0000000000033c7a: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33d51; leave; ret; 
0x0000000000033d5d: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33dec; leave; ret; 
0x0000000000033df8: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33e4f; leave; ret; 
0x0000000000033e16: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33e61; leave; ret; 
0x0000000000033e6d: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33e7f; leave; ret; 
0x0000000000039c6e: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3a0f4; leave; ret; 
0x0000000000039d3a: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3a1d4; leave; ret; 
0x000000000003a9ac: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3b248; leave; ret; 
0x000000000003b561: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3bd64; leave; ret; 
0x000000000003b8a9: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3bf88; leave; ret; 
0x000000000003baca: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c118; leave; ret; 
0x000000000003bae8: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c12a; leave; ret; 
0x000000000003bc10: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c178; leave; ret; 
0x000000000003c136: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c462; leave; ret; 
0x000000000003c166: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c480; leave; ret; 
0x000000000003c184: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c492; leave; ret; 
0x000000000003c1b4: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c4b0; leave; ret; 
0x000000000003c46e: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c742; leave; ret; 
0x000000000003c49e: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c754; leave; ret; 
0x000000000003ed0c: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3edae; leave; ret; 
0x000000000003edba: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3edf1; leave; ret; 
0x0000000000043066: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x432a6; leave; ret; 
0x0000000000043136: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x4334a; leave; ret; 
0x00000000000432b2: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x43444; leave; ret; 
0x0000000000043356: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x43512; leave; ret; 
0x0000000000028f2e: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x30]; pop rbp; ret; 
0x0000000000028f18: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x31]; pop rbp; ret; 
0x0000000000025444: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002cb9c: mov qword ptr [rbp - 8], rdi; movabs rax, 0x1fffffffffffffff; pop rbp; ret; 
0x000000000003c98e: mov qword ptr [rbp - 8], rdi; movabs rax, 0xfffffffffffffff; pop rbp; ret; 
0x000000000002587a: mov qword ptr [rbp - 8], rdi; nop; pop rbp; ret; 
0x000000000003388c: mov qword ptr [rbx], rax; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003fdc2: mov qword ptr [rdx + 0x60], rax; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002bfaf: mov qword ptr [rdx + 8], rax; nop; leave; ret; 
0x000000000002a9f9: mov r8d, 0xe8c78948; cmp dword ptr [rdx - 0x76b70001], ebp; ret 0x8b48; 
0x000000000002aa59: mov r8d, 0xe8c78948; fldcw word ptr [rcx - 0x76b70001]; ret 0x8b48; 
0x000000000002aba4: mov r8d, 0xe8c78948; mov gs, word ptr [rax - 0x76b70001]; ret 0x8b48; 
0x0000000000036fe2: mov r8d, 0xf85d8b48; leave; ret; 
0x0000000000025892: mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x00000000000398ae: mov rax, qword ptr [rax + 0x10]; test rax, rax; sete al; pop rbp; ret; 
0x000000000003c9b2: mov rax, qword ptr [rax + 8]; mov rdi, rax; call 0x28f26; movzx eax, al; leave; ret; 
0x00000000000398ce: mov rax, qword ptr [rax + 8]; mov rdi, rax; call 0x28f3c; leave; ret; 
0x0000000000037f42: mov rax, qword ptr [rax + 8]; pop rbp; ret; 
0x0000000000039d86: mov rax, qword ptr [rax]; add rax, 8; mov rdi, rax; call 0x25f76; leave; ret; 
0x0000000000039c9b: mov rax, qword ptr [rax]; cmp rdx, rax; setne al; pop rbp; ret; 
0x000000000002c848: mov rax, qword ptr [rax]; leave; ret; 
0x0000000000025b96: mov rax, qword ptr [rax]; pop rbp; ret; 
0x000000000002b657: mov rax, qword ptr [rbp - 0x10]; add rax, rdx; leave; ret; 
0x000000000002a78d: mov rax, qword ptr [rbp - 0x10]; add rax, rdx; pop rbp; ret; 
0x0000000000039828: mov rax, qword ptr [rbp - 0x10]; mov edx, 0; div qword ptr [rbp - 0x18]; mov rax, rdx; pop rbp; ret; 
0x0000000000039c97: mov rax, qword ptr [rbp - 0x10]; mov rax, qword ptr [rax]; cmp rdx, rax; setne al; pop rbp; ret; 
0x0000000000025f48: mov rax, qword ptr [rbp - 0x10]; mov rdi, rax; call 0x23a60; nop; leave; ret; 
0x000000000002b305: mov rax, qword ptr [rbp - 0x10]; mov rdi, rax; call 0x23a90; leave; ret; 
0x00000000000262b4: mov rax, qword ptr [rbp - 0x10]; mov rdi, rax; call 0x2627c; nop; leave; ret; 
0x0000000000026402: mov rax, qword ptr [rbp - 0x10]; mov rdi, rax; call 0x263ca; nop; leave; ret; 
0x000000000003a423: mov rax, qword ptr [rbp - 0x10]; mov rsi, rax; mov rdi, rdx; call 0x398dc; leave; ret; 
0x0000000000037d79: mov rax, qword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x37e18; leave; ret; 
0x000000000002a5fb: mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x000000000002be69: mov rax, qword ptr [rbp - 0x10]; shl rax, 2; add rax, rdx; pop rbp; ret; 
0x000000000002ca62: mov rax, qword ptr [rbp - 0x10]; shl rax, 2; mov rdi, rax; call 0x23a90; leave; ret; 
0x000000000003c974: mov rax, qword ptr [rbp - 0x10]; shl rax, 3; mov rdi, rax; call 0x23a90; leave; ret; 
0x000000000002b605: mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000374f6: mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; sar rax, 5; pop rbp; ret; 
0x000000000002b2c1: mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x0000000000041a7f: mov rax, qword ptr [rbp - 0x18]; mov byte ptr [rax + 0x75], 1; movzx eax, byte ptr [rbp - 1]; pop rbp; ret; 
0x000000000002ba6c: mov rax, qword ptr [rbp - 0x18]; mov dword ptr [rax + 4], edx; movzx eax, byte ptr [rbp - 1]; or eax, 0x40; leave; ret; 
0x000000000003bb3e: mov rax, qword ptr [rbp - 0x18]; mov eax, dword ptr [rax]; cmp edx, eax; sete al; pop rbp; ret; 
0x0000000000025346: mov rax, qword ptr [rbp - 0x18]; mov qword ptr [rax], 0; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000043973: mov rax, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002ac57: mov rax, qword ptr [rbp - 0x18]; mov rdx, qword ptr [rbp - 0x20]; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x000000000002b3cb: mov rax, qword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x2b5b5; leave; ret; 
0x000000000002c727: mov rax, qword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x2c94d; leave; ret; 
0x000000000002c81b: mov rax, qword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x2ca74; leave; ret; 
0x000000000003a98f: mov rax, qword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x3b217; leave; ret; 
0x0000000000043119: mov rax, qword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x432f2; leave; ret; 
0x00000000000431e9: mov rax, qword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x43396; leave; ret; 
0x00000000000438f1: mov rax, qword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x43902; leave; ret; 
0x000000000002af9c: mov rax, qword ptr [rbp - 0x18]; mov rsi, rdx; mov rdi, rax; call 0x2b266; leave; ret; 
0x000000000002c7b8: mov rax, qword ptr [rbp - 0x18]; mov rsi, rdx; mov rdi, rax; call 0x2c9ae; leave; ret; 
0x0000000000039dda: mov rax, qword ptr [rbp - 0x18]; mov rsi, rdx; mov rdi, rax; call rbx; 
0x000000000003774d: mov rax, qword ptr [rbp - 0x20]; leave; ret; 
0x000000000002b59a: mov rax, qword ptr [rbp - 0x28]; add rax, rdx; leave; ret; 
0x0000000000037a38: mov rax, qword ptr [rbp - 0x28]; leave; ret; 
0x0000000000042106: mov rax, qword ptr [rbp - 0x28]; mov qword ptr [rax + 0x10], rdx; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000037215: mov rax, qword ptr [rbp - 0x38]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003bee5: mov rax, qword ptr [rbp - 0x38]; mov rdx, qword ptr [rbp - 0x18]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x0000000000036fe0: mov rax, qword ptr [rbp - 0x48]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000370f4: mov rax, qword ptr [rbp - 0x58]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003ce6c: mov rax, qword ptr [rbp - 0x68]; sub rsp, -0x80; pop rbx; pop r12; pop rbp; ret; 
0x0000000000037253: mov rax, qword ptr [rbp - 8]; add rax, 0x100; pop rbp; ret; 
0x0000000000033d96: mov rax, qword ptr [rbp - 8]; add rax, 0x10; mov rdi, rax; call 0x33e0a; leave; ret; 
0x0000000000028f06: mov rax, qword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x00000000000372b9: mov rax, qword ptr [rbp - 8]; add rax, 0xca0; pop rbp; ret; 
0x000000000002cd37: mov rax, qword ptr [rbp - 8]; add rax, rdx; leave; ret; 
0x000000000003ede8: mov rax, qword ptr [rbp - 8]; add rax, rdx; pop rbp; ret; 
0x000000000002f2a8: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0x1016]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f33a: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0x1093]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f3cc: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0x10f5]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f45e: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0x1157]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f4f0: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0x11b9]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002eb3e: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0xa2d]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ebd0: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0xa8e]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ec62: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0xaef]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ecf4: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0xb50]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ed86: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0xbb1]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ee18: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0xc2e]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002eeaa: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0xcab]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002ef3c: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0xd28]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002efce: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0xda5]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f060: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0xe22]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f0f2: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0xe9f]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f184: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0xf1c]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000002f216: mov rax, qword ptr [rbp - 8]; lea rdx, [rip + 0xf99]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x0000000000024de2: mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000026eec: mov rax, qword ptr [rbp - 8]; mov byte ptr [rax + 0x13], dl; nop; pop rbp; ret; 
0x0000000000028edc: mov rax, qword ptr [rbp - 8]; mov byte ptr [rax + 0x32], 0; nop; leave; ret; 
0x0000000000041b23: mov rax, qword ptr [rbp - 8]; mov byte ptr [rax + 0x75], 1; nop; pop rbp; ret; 
0x0000000000041a2d: mov rax, qword ptr [rbp - 8]; mov byte ptr [rax + 0x7b], dl; nop; pop rbp; ret; 
0x0000000000026c7e: mov rax, qword ptr [rbp - 8]; mov byte ptr [rax + 0xa], 0xfd; nop; pop rbp; ret; 
0x0000000000026e71: mov rax, qword ptr [rbp - 8]; mov byte ptr [rax + 0xa], dl; nop; leave; ret; 
0x000000000003af3f: mov rax, qword ptr [rbp - 8]; mov byte ptr [rax + 8], dl; nop; leave; ret; 
0x000000000002a618: mov rax, qword ptr [rbp - 8]; mov byte ptr [rax], dl; nop; pop rbp; ret; 
0x000000000003d9fa: mov rax, qword ptr [rbp - 8]; mov dword ptr [rax + 0x1c], edx; nop; pop rbp; ret; 
0x0000000000033864: mov rax, qword ptr [rbp - 8]; mov dword ptr [rax + 4], 0; nop; pop rbp; ret; 
0x0000000000026f30: mov rax, qword ptr [rbp - 8]; mov dword ptr [rax], edx; nop; pop rbp; ret; 
0x000000000003d31c: mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x14]; pop rbp; ret; 
0x000000000003dd52: mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x18]; pop rbp; ret; 
0x000000000003f85a: mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x38]; pop rbp; ret; 
0x000000000003ec06: mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0xb0]; pop rbp; ret; 
0x0000000000037fb2: mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax]; pop rbp; ret; 
0x0000000000044d4d: mov rax, qword ptr [rbp - 8]; mov edx, dword ptr [rbp - 0x10]; mov dword ptr [rax + 4], edx; nop; pop rbp; ret; 
0x000000000003d447: mov rax, qword ptr [rbp - 8]; mov edx, dword ptr [rbp - 0x14]; mov dword ptr [rax + 0x10], edx; nop; pop rbp; ret; 
0x0000000000037f97: mov rax, qword ptr [rbp - 8]; mov edx, dword ptr [rbp - 0xc]; mov dword ptr [rax], edx; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000041be3: mov rax, qword ptr [rbp - 8]; mov esi, edx; mov rdi, rax; call 0x417d4; leave; ret; 
0x00000000000254fa: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x10], 0; nop; leave; ret; 
0x000000000002a885: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x10], 0; nop; pop rbp; ret; 
0x000000000002c479: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x0000000000041edd: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x18], 0; nop; leave; ret; 
0x0000000000039a0f: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x30], 0; nop; leave; ret; 
0x0000000000039858: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 8], 0; nop; pop rbp; ret; 
0x0000000000033c30: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], 0; nop; pop rbp; ret; 
0x0000000000037c85: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002b39d: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x0000000000024ebf: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x000000000002588e: mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x00000000000398aa: mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; test rax, rax; sete al; pop rbp; ret; 
0x00000000000398ca: mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 8]; mov rdi, rax; call 0x28f3c; leave; ret; 
0x0000000000037f3e: mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 8]; pop rbp; ret; 
0x0000000000025b92: mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x000000000002a8a8: mov rax, qword ptr [rbp - 8]; mov rcx, qword ptr [rax]; mov rax, rdx; sub rax, rcx; pop rbp; ret; 
0x000000000002a6ae: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x23770; nop; leave; ret; 
0x0000000000024ee6: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x23a60; leave; ret; 
0x00000000000267a2: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x23e30; nop; leave; ret; 
0x00000000000268b8: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x24eac; nop; leave; ret; 
0x0000000000025006: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x24ef4; nop; leave; ret; 
0x0000000000025160: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x24f72; nop; leave; ret; 
0x0000000000024fb2: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25170; nop; leave; ret; 
0x00000000000251e8: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x251b8; nop; leave; ret; 
0x0000000000025220: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x251d8; nop; leave; ret; 
0x0000000000024f42: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x251f8; nop; leave; ret; 
0x0000000000025260: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25230; nop; leave; ret; 
0x0000000000025298: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25250; nop; leave; ret; 
0x0000000000024f62: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25270; nop; leave; ret; 
0x000000000002542c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x253ce; nop; leave; ret; 
0x00000000000251a9: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x253ee; nop; leave; ret; 
0x00000000000251c8: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2547c; nop; leave; ret; 
0x0000000000025240: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2553c; nop; leave; ret; 
0x000000000002566f: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x255fc; nop; leave; ret; 
0x00000000000252e1: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2561c; nop; leave; ret; 
0x000000000002579e: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2573c; nop; leave; ret; 
0x0000000000025391: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2575c; nop; leave; ret; 
0x00000000000253de: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x257ee; nop; leave; ret; 
0x000000000002548c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25872; nop; leave; ret; 
0x000000000002554c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25930; nop; leave; ret; 
0x000000000002560c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x259ee; nop; leave; ret; 
0x00000000000256ce: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25a71; leave; ret; 
0x00000000000256ec: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25a90; leave; ret; 
0x000000000003390a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25a90; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000002574c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25aae; nop; leave; ret; 
0x00000000000257fe: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25b32; nop; leave; ret; 
0x00000000000259fe: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25e22; nop; leave; ret; 
0x0000000000025a81: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25ea0; leave; ret; 
0x0000000000025aa0: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25ebe; leave; ret; 
0x0000000000025abe: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25edc; nop; leave; ret; 
0x000000000003ad30: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x25f76; leave; ret; 
0x000000000003affe: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x260ba; leave; ret; 
0x0000000000025eb0: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x261c8; leave; ret; 
0x0000000000025ece: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x261e6; leave; ret; 
0x0000000000025f68: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2622c; leave; ret; 
0x0000000000025f86: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2623e; leave; ret; 
0x0000000000026018: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26313; leave; ret; 
0x000000000002603a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26332; nop; leave; ret; 
0x000000000002605a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26342; nop; leave; ret; 
0x00000000000260ac: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2637a; leave; ret; 
0x00000000000260ca: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2638c; leave; ret; 
0x00000000000261b9: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26462; nop; leave; ret; 
0x00000000000261d8: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264aa; leave; ret; 
0x00000000000261f6: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264bc; leave; ret; 
0x000000000002624e: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264da; leave; ret; 
0x00000000000262d3: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x264ec; leave; ret; 
0x0000000000026323: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26531; leave; ret; 
0x000000000002639c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26544; leave; ret; 
0x0000000000026421: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26556; leave; ret; 
0x00000000000265fe: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2659c; nop; leave; ret; 
0x000000000002649b: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x265bc; nop; leave; ret; 
0x00000000000264cc: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2664e; leave; ret; 
0x00000000000264fc: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26660; leave; ret; 
0x0000000000026566: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26672; leave; ret; 
0x00000000000265ac: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26684; nop; leave; ret; 
0x0000000000026694: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26708; nop; leave; ret; 
0x0000000000026a15: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x269a2; nop; leave; ret; 
0x0000000000026993: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x269c2; nop; leave; ret; 
0x00000000000269b2: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26a64; nop; leave; ret; 
0x0000000000026a74: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x26ae8; nop; leave; ret; 
0x000000000002a68e: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2a65e; nop; leave; ret; 
0x000000000002a66e: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2a6be; nop; leave; ret; 
0x000000000002a6da: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2a862; nop; leave; ret; 
0x000000000002a852: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2ac98; nop; leave; ret; 
0x000000000002ae4b: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b00a; leave; ret; 
0x000000000002b032: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b313; leave; ret; 
0x000000000002b217: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b498; leave; ret; 
0x000000000002b4a8: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b526; leave; ret; 
0x000000000002ba8c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2be76; nop; leave; ret; 
0x000000000002c41b: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2c76a; nop; leave; ret; 
0x000000000002c748: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2c97e; leave; ret; 
0x000000000002c98e: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2cb94; leave; ret; 
0x0000000000030795: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x32072; nop; leave; ret; 
0x00000000000308e8: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x32116; nop; leave; ret; 
0x0000000000030a3c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x321ba; nop; leave; ret; 
0x0000000000030b90: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3225e; nop; leave; ret; 
0x0000000000030ce4: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x32302; nop; leave; ret; 
0x0000000000030e38: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x323a6; nop; leave; ret; 
0x0000000000030fac: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3246c; nop; leave; ret; 
0x0000000000031120: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x32532; nop; leave; ret; 
0x0000000000031294: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x325f8; nop; leave; ret; 
0x0000000000031408: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x326be; nop; leave; ret; 
0x000000000003157c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x32784; nop; leave; ret; 
0x00000000000316e2: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3284a; nop; leave; ret; 
0x0000000000031856: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x32910; nop; leave; ret; 
0x00000000000319ca: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x329d6; nop; leave; ret; 
0x0000000000031b3e: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x32a9c; nop; leave; ret; 
0x0000000000031cb2: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x32b62; nop; leave; ret; 
0x0000000000031e0a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x32c08; nop; leave; ret; 
0x0000000000031f62: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x32cae; nop; leave; ret; 
0x00000000000320ed: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x32d8e; nop; leave; ret; 
0x0000000000032191: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x32dfc; nop; leave; ret; 
0x0000000000032235: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x32e6a; nop; leave; ret; 
0x00000000000322d9: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x32ed8; nop; leave; ret; 
0x000000000003237d: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x32f46; nop; leave; ret; 
0x0000000000032442: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x32fb4; nop; leave; ret; 
0x0000000000032508: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33022; nop; leave; ret; 
0x00000000000325ce: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33090; nop; leave; ret; 
0x0000000000032694: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x330fe; nop; leave; ret; 
0x000000000003275a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3316c; nop; leave; ret; 
0x0000000000032820: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x331da; nop; leave; ret; 
0x00000000000328e6: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3323a; nop; leave; ret; 
0x00000000000329ac: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x332a8; nop; leave; ret; 
0x0000000000032a72: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33316; nop; leave; ret; 
0x0000000000032b38: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33384; nop; leave; ret; 
0x0000000000032bde: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x333f2; nop; leave; ret; 
0x0000000000032c84: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33460; nop; leave; ret; 
0x0000000000032d2a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x334ce; nop; leave; ret; 
0x00000000000307d2: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000032064: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3366c; leave; ret; 
0x00000000000337f4: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x337c4; nop; leave; ret; 
0x0000000000033814: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x337e4; nop; leave; ret; 
0x000000000003383f: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33804; nop; leave; ret; 
0x000000000003399a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3395e; nop; leave; ret; 
0x000000000003377a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3397e; nop; leave; ret; 
0x00000000000337d4: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33a16; nop; leave; ret; 
0x0000000000033950: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33af2; leave; ret; 
0x000000000003396e: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33b14; nop; leave; ret; 
0x0000000000033a32: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33c24; nop; leave; ret; 
0x0000000000033b02: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33c6e; mov rax, qword ptr [rax]; leave; ret; 
0x0000000000033b24: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33c8c; nop; leave; ret; 
0x0000000000033c14: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33d42; nop; leave; ret; 
0x0000000000033c7e: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33d51; leave; ret; 
0x0000000000033d61: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33dec; leave; ret; 
0x0000000000033dfc: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33e4f; leave; ret; 
0x0000000000033e1a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33e61; leave; ret; 
0x0000000000033e71: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x33e7f; leave; ret; 
0x0000000000037d4c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x37df4; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000003b426: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x397fa; nop; leave; ret; 
0x0000000000039dfe: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3989e; xor eax, 1; leave; ret; 
0x0000000000039a2e: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x39996; nop; leave; ret; 
0x0000000000039b42: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x39aaa; nop; leave; ret; 
0x000000000003993a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x39bd8; nop; leave; ret; 
0x0000000000039966: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x39be8; nop; leave; ret; 
0x0000000000039986: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x39bf8; nop; leave; ret; 
0x0000000000039a9a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x39c18; nop; leave; ret; 
0x0000000000039c08: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3a01e; nop; leave; ret; 
0x0000000000039c28: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3a03e; nop; leave; ret; 
0x0000000000039c72: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3a0f4; leave; ret; 
0x0000000000039d3e: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3a1d4; leave; ret; 
0x000000000003a02e: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3a3e0; nop; leave; ret; 
0x000000000003a04e: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3a3f0; nop; leave; ret; 
0x000000000003a9b0: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3b248; leave; ret; 
0x000000000003b565: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3bd64; leave; ret; 
0x000000000003b8ad: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3bf88; leave; ret; 
0x000000000003bace: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c118; leave; ret; 
0x000000000003baec: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c12a; leave; ret; 
0x000000000003bc14: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c178; leave; ret; 
0x000000000003c13a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c462; leave; ret; 
0x000000000003c16a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c480; leave; ret; 
0x000000000003c188: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c492; leave; ret; 
0x000000000003c1b8: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c4b0; leave; ret; 
0x000000000003c472: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c742; leave; ret; 
0x000000000003c4a2: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3c754; leave; ret; 
0x000000000003d534: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3d454; nop; leave; ret; 
0x000000000003ed2e: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3edae; add rax, 0x20; leave; ret; 
0x000000000003ed10: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3edae; leave; ret; 
0x000000000003edbe: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x3edf1; leave; ret; 
0x0000000000041e10: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x42434; nop; leave; ret; 
0x0000000000041efc: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x4257a; nop; leave; ret; 
0x0000000000042989: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x4308c; nop; leave; ret; 
0x0000000000042ae1: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x4315c; nop; leave; ret; 
0x000000000004306a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x432a6; leave; ret; 
0x000000000004313a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x4334a; leave; ret; 
0x00000000000432b6: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x43444; leave; ret; 
0x000000000004335a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x43512; leave; ret; 
0x000000000004462c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x43ee4; mov eax, 1; leave; ret; 
0x0000000000039cf9: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call rdx; 
0x0000000000039cf9: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call rdx; leave; ret; 
0x000000000003d4e9: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call rdx; nop; leave; ret; 
0x0000000000039cf1: mov rax, qword ptr [rbp - 8]; mov rdx, qword ptr [rax + 0x18]; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call rdx; 
0x000000000002a786: mov rax, qword ptr [rbp - 8]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rbp - 0x10]; add rax, rdx; pop rbp; ret; 
0x0000000000037f78: mov rax, qword ptr [rbp - 8]; mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax + 0x10], rdx; nop; pop rbp; ret; 
0x0000000000026b84: mov rax, qword ptr [rbp - 8]; mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax + 0x20], rdx; nop; pop rbp; ret; 
0x0000000000037f58: mov rax, qword ptr [rbp - 8]; mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax + 8], rdx; nop; pop rbp; ret; 
0x0000000000037a4e: mov rax, qword ptr [rbp - 8]; mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000037ff8: mov rax, qword ptr [rbp - 8]; mov rdx, qword ptr [rbp - 0x18]; mov qword ptr [rax + 0x48], rdx; nop; leave; ret; 
0x000000000002b0b0: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2b3a7; leave; ret; 
0x000000000003b237: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2b4dd; leave; ret; 
0x000000000002b5d5: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2b660; leave; ret; 
0x000000000002b80b: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2b832; leave; ret; 
0x000000000002b852: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2b863; leave; ret; 
0x000000000002c96d: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2c2dc; leave; ret; 
0x000000000002c34f: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2c703; leave; ret; 
0x000000000002c5a7: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2c7f7; leave; ret; 
0x000000000002c88e: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2caca; leave; ret; 
0x000000000002c926: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2cb62; leave; ret; 
0x000000000002ca94: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2cc1e; leave; ret; 
0x000000000002caea: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x2cc6d; leave; ret; 
0x0000000000037129: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x37351; leave; ret; 
0x000000000003728a: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x3749a; leave; ret; 
0x0000000000037388: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x375a9; leave; ret; 
0x000000000003a3ce: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x3a96b; leave; ret; 
0x000000000003a454: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x3a9be; leave; ret; 
0x000000000003a534: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x3ab2c; leave; ret; 
0x000000000003b326: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x3bb4c; leave; ret; 
0x000000000003b404: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x3bc4c; leave; ret; 
0x0000000000042a16: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x430f5; leave; ret; 
0x0000000000042b78: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x431c5; leave; ret; 
0x000000000004386e: mov rax, qword ptr [rbp - 8]; mov rsi, rcx; mov rdi, rax; call 0x438cd; leave; ret; 
0x000000000002acea: mov rax, qword ptr [rbp - 8]; mov rsi, rdx; mov rdi, rax; call 0x2af80; leave; ret; 
0x000000000002c4a0: mov rax, qword ptr [rbp - 8]; mov rsi, rdx; mov rdi, rax; call 0x2c79c; leave; ret; 
0x000000000004239b: mov rax, qword ptr [rbp - 8]; mov rsi, rdx; mov rdi, rax; call 0x428b8; leave; ret; 
0x000000000003d6ae: mov rax, qword ptr [rbp - 8]; mov word ptr [rax + 0x16], dx; nop; pop rbp; ret; 
0x00000000000402b9: mov rax, qword ptr [rbp - 8]; mov word ptr [rax + 0x20], dx; nop; pop rbp; ret; 
0x0000000000041c3e: mov rax, qword ptr [rbp - 8]; mov word ptr [rax + 0x70], dx; nop; leave; ret; 
0x00000000000419b9: mov rax, qword ptr [rbp - 8]; mov word ptr [rax + 0x72], dx; nop; pop rbp; ret; 
0x0000000000044d21: mov rax, qword ptr [rbp - 8]; movss xmm0, dword ptr [rbp - 0x10]; movss dword ptr [rax + 4], xmm0; nop; pop rbp; ret; 
0x0000000000028f32: mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x30]; pop rbp; ret; 
0x0000000000028f1c: mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x31]; pop rbp; ret; 
0x00000000000335b6: mov rax, qword ptr [rbp - 8]; movzx edx, byte ptr [rbp - 0x20]; mov byte ptr [rax + 0x18], dl; nop; pop rbp; ret; 
0x0000000000041c5b: mov rax, qword ptr [rbp - 8]; movzx edx, byte ptr [rbp - 0xc]; mov byte ptr [rax + 0x77], dl; nop; pop rbp; ret; 
0x0000000000025448: mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000446b6: mov rax, qword ptr [rip + 0x1693b]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x000000000003f3cb: mov rax, qword ptr [rip + 0x1bc26]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x00000000000397a7: mov rax, qword ptr [rip + 0x2184a]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x0000000000038316: mov rax, qword ptr [rip + 0x22cdb]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x0000000000036e8b: mov rax, qword ptr [rip + 0x24166]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x000000000003352c: mov rax, qword ptr [rip + 0x27ac5]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x000000000002a5ae: mov rax, qword ptr [rip + 0x30a43]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x0000000000024d4e: mov rax, qword ptr [rip + 0x362a3]; mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x0000000000023ec4: mov rax, qword ptr [rip + 0x37125]; test rax, rax; je 0x23ed8; jmp rax; 
0x0000000000023e83: mov rax, qword ptr [rip + 0x37156]; test rax, rax; je 0x23e98; jmp rax; 
0x0000000000023008: mov rax, qword ptr [rip + 0x37fd9]; test rax, rax; je 0x23016; call rax; 
0x0000000000023008: mov rax, qword ptr [rip + 0x37fd9]; test rax, rax; je 0x23016; call rax; add rsp, 8; ret; 
0x000000000002a804: mov rax, rbx; mov rdi, rax; call 0x23d90; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000037c24: mov rax, rbx; sub rax, rdx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000039835: mov rax, rdx; pop rbp; ret; 
0x000000000002a8af: mov rax, rdx; sub rax, rcx; pop rbp; ret; 
0x000000000002c04f: mov rax, rdx; sub rax, rcx; sar rax, 2; pop rbp; ret; 
0x0000000000024daa: mov rbp, rsp; mov dword ptr [rbp - 4], edi; mov eax, dword ptr [rbp - 4]; not eax; pop rbp; ret; 
0x0000000000028e81: mov rbp, rsp; mov dword ptr [rbp - 4], edi; mov eax, dword ptr [rbp - 4]; pop rbp; ret; 
0x000000000002bb1f: mov rbp, rsp; mov eax, 0; pop rbp; ret; 
0x000000000002a8f2: mov rbp, rsp; mov eax, 1; pop rbp; ret; 
0x0000000000028e91: mov rbp, rsp; mov eax, edi; mov byte ptr [rbp - 4], al; movzx eax, byte ptr [rbp - 4]; pop rbp; ret; 
0x0000000000024d65: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x24d0a; pop rbp; ret; 
0x0000000000028ddd: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x28d82; pop rbp; ret; 
0x000000000002a5c5: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x2a56a; pop rbp; ret; 
0x0000000000033543: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x334e8; pop rbp; ret; 
0x0000000000036ea2: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x36e47; pop rbp; ret; 
0x000000000003832d: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x382d2; pop rbp; ret; 
0x00000000000397be: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x39763; pop rbp; ret; 
0x000000000003d406: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x3d3ab; pop rbp; ret; 
0x000000000003d868: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x3d80d; pop rbp; ret; 
0x000000000003daed: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x3da92; pop rbp; ret; 
0x000000000003de80: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x3de25; pop rbp; ret; 
0x000000000003ec6d: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x3ec12; pop rbp; ret; 
0x000000000003f3e2: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x3f387; pop rbp; ret; 
0x000000000003ffcc: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x3ff71; pop rbp; ret; 
0x00000000000404b6: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x4045b; pop rbp; ret; 
0x0000000000041dec: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x41d91; pop rbp; ret; 
0x00000000000446cd: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x44672; pop rbp; ret; 
0x000000000002b3e1: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; cmp qword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x00000000000397eb: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov dword ptr [rbp - 0xc], esi; mov eax, dword ptr [rbp - 0xc]; pop rbp; ret; 
0x0000000000028f41: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov eax, 1; pop rbp; ret; 
0x000000000002bfcd: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; mov eax, 0; pop rbp; ret; 
0x000000000003baab: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; mov eax, 1; pop rbp; ret; 
0x000000000002a5f0: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000025b78: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x000000000003724c: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0x100; pop rbp; ret; 
0x0000000000028eff: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x00000000000372b2: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0xca0; pop rbp; ret; 
0x000000000003d315: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x14]; pop rbp; ret; 
0x000000000003dd4b: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x18]; pop rbp; ret; 
0x000000000003f853: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0x38]; pop rbp; ret; 
0x000000000003ebff: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax + 0xb0]; pop rbp; ret; 
0x0000000000037fab: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov eax, dword ptr [rax]; pop rbp; ret; 
0x0000000000025887: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x0000000000037f37: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 8]; pop rbp; ret; 
0x0000000000025b8b: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000028f2b: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x30]; pop rbp; ret; 
0x0000000000028f15: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax + 0x31]; pop rbp; ret; 
0x0000000000025441: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002cb99: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; movabs rax, 0x1fffffffffffffff; pop rbp; ret; 
0x000000000003c98b: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; movabs rax, 0xfffffffffffffff; pop rbp; ret; 
0x0000000000025877: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; nop; pop rbp; ret; 
0x0000000000025352: mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002a8ac: mov rcx, qword ptr [rax]; mov rax, rdx; sub rax, rcx; pop rbp; ret; 
0x000000000002c04c: mov rcx, qword ptr [rax]; mov rax, rdx; sub rax, rcx; sar rax, 2; pop rbp; ret; 
0x00000000000374c6: mov rcx, qword ptr [rbp - 0x10]; mov rsi, rcx; mov rdi, rax; call 0x37a5c; leave; ret; 
0x0000000000043bb5: mov rcx, qword ptr [rdx]; movzx edx, word ptr [rbp - 0x1a]; mov esi, edx; mov rdi, rax; call rcx; 
0x0000000000038a87: mov rcx, qword ptr [rdx]; movzx edx, word ptr [rbp - 0x2c]; mov esi, edx; mov rdi, rax; call rcx; 
0x0000000000023efb: mov rdi, qword ptr [rip + 0x37106]; call 0x23730; call 0x23e70; mov byte ptr [rip + 0x3739d], 1; pop rbp; ret; 
0x000000000002a6b2: mov rdi, rax; call 0x23770; nop; leave; ret; 
0x00000000000253bf: mov rdi, rax; call 0x237e0; test eax, eax; sete al; leave; ret; 
0x0000000000036eeb: mov rdi, rax; call 0x23880; nop; leave; ret; 
0x000000000002b7b8: mov rdi, rax; call 0x238e0; nop; leave; ret; 
0x0000000000037f0a: mov rdi, rax; call 0x23940; lea rax, [rip + 0x233b7]; pop rbp; ret; 
0x0000000000024d55: mov rdi, rax; call 0x23a40; nop; leave; ret; 
0x0000000000024eea: mov rdi, rax; call 0x23a60; leave; ret; 
0x0000000000025f4c: mov rdi, rax; call 0x23a60; nop; leave; ret; 
0x000000000002b309: mov rdi, rax; call 0x23a90; leave; ret; 
0x0000000000039391: mov rdi, rax; call 0x23ab0; mov eax, 0; leave; ret; 
0x000000000002e5d3: mov rdi, rax; call 0x23ab0; nop; leave; ret; 
0x0000000000044cf3: mov rdi, rax; call 0x23cc0; nop; leave; ret; 
0x0000000000025cc0: mov rdi, rax; call 0x23d90; call 0x23b10; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002a807: mov rdi, rax; call 0x23d90; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002abf6: mov rdi, rax; call 0x23d90; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002683a: mov rdi, rax; call 0x23dd0; nop; leave; ret; 
0x00000000000267a6: mov rdi, rax; call 0x23e30; nop; leave; ret; 
0x0000000000024e73: mov rdi, rax; call 0x24db7; mov eax, dword ptr [rbp - 4]; leave; ret; 
0x0000000000024e9e: mov rdi, rax; call 0x24e1a; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000268bc: mov rdi, rax; call 0x24eac; nop; leave; ret; 
0x000000000002500a: mov rdi, rax; call 0x24ef4; nop; leave; ret; 
0x0000000000025164: mov rdi, rax; call 0x24f72; nop; leave; ret; 
0x0000000000025060: mov rdi, rax; call 0x24ff6; nop; leave; ret; 
0x0000000000024fb6: mov rdi, rax; call 0x25170; nop; leave; ret; 
0x00000000000251ec: mov rdi, rax; call 0x251b8; nop; leave; ret; 
0x0000000000025224: mov rdi, rax; call 0x251d8; nop; leave; ret; 
0x0000000000024f46: mov rdi, rax; call 0x251f8; nop; leave; ret; 
0x0000000000025264: mov rdi, rax; call 0x25230; nop; leave; ret; 
0x000000000002529c: mov rdi, rax; call 0x25250; nop; leave; ret; 
0x0000000000024f66: mov rdi, rax; call 0x25270; nop; leave; ret; 
0x00000000000250b4: mov rdi, rax; call 0x25358; nop; leave; ret; 
0x000000000002a834: mov rdi, rax; call 0x253a0; xor eax, 1; leave; ret; 
0x0000000000025430: mov rdi, rax; call 0x253ce; nop; leave; ret; 
0x00000000000251ad: mov rdi, rax; call 0x253ee; nop; leave; ret; 
0x00000000000251cc: mov rdi, rax; call 0x2547c; nop; leave; ret; 
0x0000000000025244: mov rdi, rax; call 0x2553c; nop; leave; ret; 
0x0000000000025673: mov rdi, rax; call 0x255fc; nop; leave; ret; 
0x00000000000252e5: mov rdi, rax; call 0x2561c; nop; leave; ret; 
0x00000000000257a2: mov rdi, rax; call 0x2573c; nop; leave; ret; 
0x0000000000025395: mov rdi, rax; call 0x2575c; nop; leave; ret; 
0x00000000000253e2: mov rdi, rax; call 0x257ee; nop; leave; ret; 
0x0000000000025471: mov rdi, rax; call 0x25847; nop; leave; ret; 
0x0000000000025490: mov rdi, rax; call 0x25872; nop; leave; ret; 
0x0000000000025530: mov rdi, rax; call 0x258e4; nop; leave; ret; 
0x0000000000025550: mov rdi, rax; call 0x25930; nop; leave; ret; 
0x00000000000255f0: mov rdi, rax; call 0x259a2; nop; leave; ret; 
0x0000000000025610: mov rdi, rax; call 0x259ee; nop; leave; ret; 
0x00000000000256b3: mov rdi, rax; call 0x25a47; nop; leave; ret; 
0x00000000000256d2: mov rdi, rax; call 0x25a71; leave; ret; 
0x00000000000256f0: mov rdi, rax; call 0x25a90; leave; ret; 
0x000000000003390e: mov rdi, rax; call 0x25a90; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000025750: mov rdi, rax; call 0x25aae; nop; leave; ret; 
0x00000000000257e3: mov rdi, rax; call 0x25b07; nop; leave; ret; 
0x0000000000025802: mov rdi, rax; call 0x25b32; nop; leave; ret; 
0x000000000002583c: mov rdi, rax; call 0x25b41; nop; leave; ret; 
0x0000000000025866: mov rdi, rax; call 0x25b73; nop; leave; ret; 
0x000000000003ad15: mov rdi, rax; call 0x25b9c; nop; leave; ret; 
0x000000000003afe3: mov rdi, rax; call 0x25cea; nop; leave; ret; 
0x0000000000025a02: mov rdi, rax; call 0x25e22; nop; leave; ret; 
0x0000000000025a3c: mov rdi, rax; call 0x25e31; nop; leave; ret; 
0x0000000000025a66: mov rdi, rax; call 0x25e63; nop; leave; ret; 
0x0000000000025a85: mov rdi, rax; call 0x25ea0; leave; ret; 
0x0000000000025aa4: mov rdi, rax; call 0x25ebe; leave; ret; 
0x0000000000025ac2: mov rdi, rax; call 0x25edc; nop; leave; ret; 
0x0000000000025afc: mov rdi, rax; call 0x25eeb; nop; leave; ret; 
0x0000000000025b26: mov rdi, rax; call 0x25f1d; nop; leave; ret; 
0x0000000000025b68: mov rdi, rax; call 0x25f30; nop; leave; ret; 
0x0000000000039d8d: mov rdi, rax; call 0x25f76; leave; ret; 
0x0000000000025be6: mov rdi, rax; call 0x25fbe; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003b002: mov rdi, rax; call 0x260ba; leave; ret; 
0x0000000000025d34: mov rdi, rax; call 0x26102; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000025e58: mov rdi, rax; call 0x26170; nop; leave; ret; 
0x0000000000025eb4: mov rdi, rax; call 0x261c8; leave; ret; 
0x0000000000025ed2: mov rdi, rax; call 0x261e6; leave; ret; 
0x0000000000025f12: mov rdi, rax; call 0x26204; nop; leave; ret; 
0x0000000000025f6c: mov rdi, rax; call 0x2622c; leave; ret; 
0x0000000000025f8a: mov rdi, rax; call 0x2623e; leave; ret; 
0x0000000000026294: mov rdi, rax; call 0x2625c; nop; leave; ret; 
0x00000000000262b8: mov rdi, rax; call 0x2627c; nop; leave; ret; 
0x0000000000025fb3: mov rdi, rax; call 0x262a0; nop; leave; ret; 
0x000000000002601c: mov rdi, rax; call 0x26313; leave; ret; 
0x000000000002603e: mov rdi, rax; call 0x26332; nop; leave; ret; 
0x000000000002605e: mov rdi, rax; call 0x26342; nop; leave; ret; 
0x0000000000026090: mov rdi, rax; call 0x26352; nop; leave; ret; 
0x00000000000260b0: mov rdi, rax; call 0x2637a; leave; ret; 
0x00000000000260ce: mov rdi, rax; call 0x2638c; leave; ret; 
0x00000000000263e2: mov rdi, rax; call 0x263aa; nop; leave; ret; 
0x0000000000026406: mov rdi, rax; call 0x263ca; nop; leave; ret; 
0x00000000000260f7: mov rdi, rax; call 0x263ee; nop; leave; ret; 
0x00000000000261bd: mov rdi, rax; call 0x26462; nop; leave; ret; 
0x00000000000261dc: mov rdi, rax; call 0x264aa; leave; ret; 
0x00000000000261fa: mov rdi, rax; call 0x264bc; leave; ret; 
0x0000000000026252: mov rdi, rax; call 0x264da; leave; ret; 
0x00000000000262d7: mov rdi, rax; call 0x264ec; leave; ret; 
0x0000000000026308: mov rdi, rax; call 0x2650a; nop; leave; ret; 
0x0000000000026327: mov rdi, rax; call 0x26531; leave; ret; 
0x00000000000263a0: mov rdi, rax; call 0x26544; leave; ret; 
0x0000000000026425: mov rdi, rax; call 0x26556; leave; ret; 
0x0000000000026456: mov rdi, rax; call 0x26574; nop; leave; ret; 
0x0000000000026602: mov rdi, rax; call 0x2659c; nop; leave; ret; 
0x000000000002649f: mov rdi, rax; call 0x265bc; nop; leave; ret; 
0x00000000000264d0: mov rdi, rax; call 0x2664e; leave; ret; 
0x0000000000026500: mov rdi, rax; call 0x26660; leave; ret; 
0x000000000002656a: mov rdi, rax; call 0x26672; leave; ret; 
0x00000000000265b0: mov rdi, rax; call 0x26684; nop; leave; ret; 
0x0000000000026643: mov rdi, rax; call 0x266dd; nop; leave; ret; 
0x0000000000026698: mov rdi, rax; call 0x26708; nop; leave; ret; 
0x00000000000266d2: mov rdi, rax; call 0x26717; nop; leave; ret; 
0x00000000000266fc: mov rdi, rax; call 0x26749; nop; leave; ret; 
0x000000000002673e: mov rdi, rax; call 0x2675c; nop; leave; ret; 
0x0000000000026a19: mov rdi, rax; call 0x269a2; nop; leave; ret; 
0x0000000000026997: mov rdi, rax; call 0x269c2; nop; leave; ret; 
0x00000000000269b6: mov rdi, rax; call 0x26a64; nop; leave; ret; 
0x0000000000026a59: mov rdi, rax; call 0x26abd; nop; leave; ret; 
0x0000000000026a78: mov rdi, rax; call 0x26ae8; nop; leave; ret; 
0x0000000000026ab2: mov rdi, rax; call 0x26af7; nop; leave; ret; 
0x0000000000026adc: mov rdi, rax; call 0x26b29; nop; leave; ret; 
0x0000000000026b1e: mov rdi, rax; call 0x26b3c; nop; leave; ret; 
0x0000000000026bbe: mov rdi, rax; call 0x26bca; nop; leave; ret; 
0x000000000002d0ce: mov rdi, rax; call 0x26c8a; nop; leave; ret; 
0x0000000000028e42: mov rdi, rax; call 0x28df2; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000003c9b6: mov rdi, rax; call 0x28f26; movzx eax, al; leave; ret; 
0x00000000000398d2: mov rdi, rax; call 0x28f3c; leave; ret; 
0x000000000002a692: mov rdi, rax; call 0x2a65e; nop; leave; ret; 
0x000000000002a672: mov rdi, rax; call 0x2a6be; nop; leave; ret; 
0x00000000000394ab: mov rdi, rax; call 0x2a6ea; mov eax, 1; leave; ret; 
0x0000000000040825: mov rdi, rax; call 0x2a6ea; nop; leave; ret; 
0x000000000002a6de: mov rdi, rax; call 0x2a862; nop; leave; ret; 
0x000000000002a76b: mov rdi, rax; call 0x2ac06; nop; leave; ret; 
0x000000000002a856: mov rdi, rax; call 0x2ac98; nop; leave; ret; 
0x000000000002ac8d: mov rdi, rax; call 0x2aeb0; nop; leave; ret; 
0x000000000002acc4: mov rdi, rax; call 0x2af05; leave; ret; 
0x000000000002acbc: mov rdi, rax; call 0x2af6e; mov rdi, rax; call 0x2af05; leave; ret; 
0x000000000002acf1: mov rdi, rax; call 0x2af80; leave; ret; 
0x000000000002ae4f: mov rdi, rax; call 0x2b00a; leave; ret; 
0x000000000002afa3: mov rdi, rax; call 0x2b266; leave; ret; 
0x000000000002b000: mov rdi, rax; call 0x2b2c8; leave; ret; 
0x000000000002b036: mov rdi, rax; call 0x2b313; leave; ret; 
0x000000000002b0b7: mov rdi, rax; call 0x2b3a7; leave; ret; 
0x000000000002b21b: mov rdi, rax; call 0x2b498; leave; ret; 
0x000000000003b23e: mov rdi, rax; call 0x2b4dd; leave; ret; 
0x000000000002b2b5: mov rdi, rax; call 0x2b4dd; mov qword ptr [rbp - 0x18], rax; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x000000000002b4ac: mov rdi, rax; call 0x2b526; leave; ret; 
0x000000000002b3d2: mov rdi, rax; call 0x2b5b5; leave; ret; 
0x000000000002b41d: mov rdi, rax; call 0x2b5f5; leave; ret; 
0x000000000002b51b: mov rdi, rax; call 0x2b60f; leave; ret; 
0x000000000002b5dc: mov rdi, rax; call 0x2b660; leave; ret; 
0x000000000002b6d6: mov rdi, rax; call 0x2b775; nop; leave; ret; 
0x000000000002b6f5: mov rdi, rax; call 0x2b7c4; mov rdi, rax; call 0x2b7d9; leave; ret; 
0x000000000002b6fd: mov rdi, rax; call 0x2b7d9; leave; ret; 
0x000000000002b812: mov rdi, rax; call 0x2b832; leave; ret; 
0x000000000002b859: mov rdi, rax; call 0x2b863; leave; ret; 
0x000000000002ce77: mov rdi, rax; call 0x2ba16; leave; ret; 
0x000000000002ba90: mov rdi, rax; call 0x2be76; nop; leave; ret; 
0x000000000002c974: mov rdi, rax; call 0x2c2dc; leave; ret; 
0x000000000002bffe: mov rdi, rax; call 0x2c4b2; nop; leave; ret; 
0x000000000002c028: mov rdi, rax; call 0x2c516; nop; leave; ret; 
0x000000000002c2d1: mov rdi, rax; call 0x2c659; nop; leave; ret; 
0x000000000002c356: mov rdi, rax; call 0x2c703; leave; ret; 
0x000000000002c3e9: mov rdi, rax; call 0x2c756; nop; leave; ret; 
0x000000000002c41f: mov rdi, rax; call 0x2c76a; nop; leave; ret; 
0x000000000002c4a7: mov rdi, rax; call 0x2c79c; leave; ret; 
0x000000000002c5ae: mov rdi, rax; call 0x2c7f7; leave; ret; 
0x000000000002c678: mov rdi, rax; call 0x2c8e1; nop; leave; ret; 
0x000000000002c72e: mov rdi, rax; call 0x2c94d; leave; ret; 
0x000000000002c74c: mov rdi, rax; call 0x2c97e; leave; ret; 
0x000000000002c7bf: mov rdi, rax; call 0x2c9ae; leave; ret; 
0x000000000002c7ed: mov rdi, rax; call 0x2ca10; leave; ret; 
0x000000000002c822: mov rdi, rax; call 0x2ca74; leave; ret; 
0x000000000002c840: mov rdi, rax; call 0x2caa6; mov rax, qword ptr [rax]; leave; ret; 
0x000000000002c861: mov rdi, rax; call 0x2cab8; mov rax, qword ptr [rax]; leave; ret; 
0x000000000002c895: mov rdi, rax; call 0x2caca; leave; ret; 
0x000000000002c8d7: mov rdi, rax; call 0x2cafc; leave; ret; 
0x000000000002c92d: mov rdi, rax; call 0x2cb62; leave; ret; 
0x000000000002c992: mov rdi, rax; call 0x2cb94; leave; ret; 
0x000000000002c9fd: mov rdi, rax; call 0x2cbd6; mov qword ptr [rbp - 0x18], rax; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x000000000002ca9b: mov rdi, rax; call 0x2cc1e; leave; ret; 
0x000000000002caf1: mov rdi, rax; call 0x2cc6d; leave; ret; 
0x000000000002cdd5: mov rdi, rax; call 0x2cde0; nop; leave; ret; 
0x00000000000320a6: mov rdi, rax; call 0x2ce16; leave; ret; 
0x000000000003214a: mov rdi, rax; call 0x2ce3a; leave; ret; 
0x00000000000321ee: mov rdi, rax; call 0x2ce5e; leave; ret; 
0x0000000000032292: mov rdi, rax; call 0x2ce82; leave; ret; 
0x0000000000032336: mov rdi, rax; call 0x2cea6; leave; ret; 
0x0000000000032b96: mov rdi, rax; call 0x2d0b0; nop; leave; ret; 
0x0000000000032c3c: mov rdi, rax; call 0x2de4c; nop; leave; ret; 
0x0000000000032ce2: mov rdi, rax; call 0x2de76; nop; leave; ret; 
0x000000000002d028: mov rdi, rax; call 0x2e4bc; nop; leave; ret; 
0x000000000002f545: mov rdi, rax; call 0x30733; nop; leave; ret; 
0x000000000002f564: mov rdi, rax; call 0x30779; mov rdi, rax; call 0x307a4; leave; ret; 
0x000000000002f56c: mov rdi, rax; call 0x307a4; leave; ret; 
0x000000000002f5e2: mov rdi, rax; call 0x307e0; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002f638: mov rdi, rax; call 0x30886; nop; leave; ret; 
0x000000000002f657: mov rdi, rax; call 0x308cc; mov rdi, rax; call 0x308f7; leave; ret; 
0x000000000002f65f: mov rdi, rax; call 0x308f7; leave; ret; 
0x000000000002f6d5: mov rdi, rax; call 0x30934; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002f72b: mov rdi, rax; call 0x309da; nop; leave; ret; 
0x000000000002f74a: mov rdi, rax; call 0x30a20; mov rdi, rax; call 0x30a4b; leave; ret; 
0x000000000002f752: mov rdi, rax; call 0x30a4b; leave; ret; 
0x000000000002f7c8: mov rdi, rax; call 0x30a88; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002f81e: mov rdi, rax; call 0x30b2e; nop; leave; ret; 
0x000000000002f83d: mov rdi, rax; call 0x30b74; mov rdi, rax; call 0x30b9f; leave; ret; 
0x000000000002f845: mov rdi, rax; call 0x30b9f; leave; ret; 
0x000000000002f8bb: mov rdi, rax; call 0x30bdc; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002f911: mov rdi, rax; call 0x30c82; nop; leave; ret; 
0x000000000002f930: mov rdi, rax; call 0x30cc8; mov rdi, rax; call 0x30cf3; leave; ret; 
0x000000000002f938: mov rdi, rax; call 0x30cf3; leave; ret; 
0x000000000002f9ae: mov rdi, rax; call 0x30d30; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fa04: mov rdi, rax; call 0x30dd6; nop; leave; ret; 
0x000000000002fa42: mov rdi, rax; call 0x30e47; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fabd: mov rdi, rax; call 0x30ea4; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fb13: mov rdi, rax; call 0x30f4a; nop; leave; ret; 
0x000000000002fb51: mov rdi, rax; call 0x30fbb; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fbcc: mov rdi, rax; call 0x31018; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fc22: mov rdi, rax; call 0x310be; nop; leave; ret; 
0x000000000002fc60: mov rdi, rax; call 0x3112f; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fcdb: mov rdi, rax; call 0x3118c; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fd31: mov rdi, rax; call 0x31232; nop; leave; ret; 
0x000000000002fd6f: mov rdi, rax; call 0x312a3; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002fe40: mov rdi, rax; call 0x313a6; nop; leave; ret; 
0x000000000002fe7e: mov rdi, rax; call 0x31417; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002ff8d: mov rdi, rax; call 0x3158b; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003005e: mov rdi, rax; call 0x3168e; nop; leave; ret; 
0x000000000003009c: mov rdi, rax; call 0x316f1; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030117: mov rdi, rax; call 0x3174e; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003016d: mov rdi, rax; call 0x317f4; nop; leave; ret; 
0x00000000000301ab: mov rdi, rax; call 0x31865; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030226: mov rdi, rax; call 0x318c2; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003027c: mov rdi, rax; call 0x31968; nop; leave; ret; 
0x00000000000302ba: mov rdi, rax; call 0x319d9; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030335: mov rdi, rax; call 0x31a36; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003038b: mov rdi, rax; call 0x31adc; nop; leave; ret; 
0x00000000000303c9: mov rdi, rax; call 0x31b4d; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030444: mov rdi, rax; call 0x31baa; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003049a: mov rdi, rax; call 0x31c50; nop; leave; ret; 
0x00000000000304c1: mov rdi, rax; call 0x31cc1; nop; leave; ret; 
0x0000000000030538: mov rdi, rax; call 0x31d02; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003058e: mov rdi, rax; call 0x31da8; nop; leave; ret; 
0x00000000000305b5: mov rdi, rax; call 0x31e19; nop; leave; ret; 
0x000000000003062c: mov rdi, rax; call 0x31e5a; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030682: mov rdi, rax; call 0x31f00; nop; leave; ret; 
0x00000000000306a9: mov rdi, rax; call 0x31f71; nop; leave; ret; 
0x0000000000030720: mov rdi, rax; call 0x31fb2; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030799: mov rdi, rax; call 0x32072; nop; leave; ret; 
0x000000000003209e: mov rdi, rax; call 0x32080; mov rdi, rax; call 0x2ce16; leave; ret; 
0x00000000000307b4: mov rdi, rax; call 0x32080; mov rdi, rax; call 0x3208e; leave; ret; 
0x00000000000307bc: mov rdi, rax; call 0x3208e; leave; ret; 
0x00000000000308ec: mov rdi, rax; call 0x32116; nop; leave; ret; 
0x0000000000032142: mov rdi, rax; call 0x32124; mov rdi, rax; call 0x2ce3a; leave; ret; 
0x0000000000030907: mov rdi, rax; call 0x32124; mov rdi, rax; call 0x32132; leave; ret; 
0x000000000003090f: mov rdi, rax; call 0x32132; leave; ret; 
0x0000000000030a40: mov rdi, rax; call 0x321ba; nop; leave; ret; 
0x00000000000321e6: mov rdi, rax; call 0x321c8; mov rdi, rax; call 0x2ce5e; leave; ret; 
0x0000000000030a5b: mov rdi, rax; call 0x321c8; mov rdi, rax; call 0x321d6; leave; ret; 
0x0000000000030a63: mov rdi, rax; call 0x321d6; leave; ret; 
0x0000000000030b94: mov rdi, rax; call 0x3225e; nop; leave; ret; 
0x000000000003228a: mov rdi, rax; call 0x3226c; mov rdi, rax; call 0x2ce82; leave; ret; 
0x0000000000030baf: mov rdi, rax; call 0x3226c; mov rdi, rax; call 0x3227a; leave; ret; 
0x0000000000030bb7: mov rdi, rax; call 0x3227a; leave; ret; 
0x0000000000030ce8: mov rdi, rax; call 0x32302; nop; leave; ret; 
0x000000000003232e: mov rdi, rax; call 0x32310; mov rdi, rax; call 0x2cea6; leave; ret; 
0x0000000000030d03: mov rdi, rax; call 0x32310; mov rdi, rax; call 0x3231e; leave; ret; 
0x0000000000030d0b: mov rdi, rax; call 0x3231e; leave; ret; 
0x0000000000030e3c: mov rdi, rax; call 0x323a6; nop; leave; ret; 
0x0000000000030e7a: mov rdi, rax; call 0x323c2; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030fb0: mov rdi, rax; call 0x3246c; nop; leave; ret; 
0x0000000000030fee: mov rdi, rax; call 0x32488; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031124: mov rdi, rax; call 0x32532; nop; leave; ret; 
0x0000000000031162: mov rdi, rax; call 0x3254e; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031298: mov rdi, rax; call 0x325f8; nop; leave; ret; 
0x00000000000312d6: mov rdi, rax; call 0x32614; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003140c: mov rdi, rax; call 0x326be; nop; leave; ret; 
0x000000000003144a: mov rdi, rax; call 0x326da; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031580: mov rdi, rax; call 0x32784; nop; leave; ret; 
0x00000000000315be: mov rdi, rax; call 0x327a0; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000316e6: mov rdi, rax; call 0x3284a; nop; leave; ret; 
0x0000000000031724: mov rdi, rax; call 0x32866; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003185a: mov rdi, rax; call 0x32910; nop; leave; ret; 
0x0000000000031898: mov rdi, rax; call 0x3292c; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000319ce: mov rdi, rax; call 0x329d6; nop; leave; ret; 
0x0000000000031a0c: mov rdi, rax; call 0x329f2; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031b42: mov rdi, rax; call 0x32a9c; nop; leave; ret; 
0x0000000000031b80: mov rdi, rax; call 0x32ab8; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031cb6: mov rdi, rax; call 0x32b62; nop; leave; ret; 
0x0000000000031cdd: mov rdi, rax; call 0x32b7e; nop; leave; ret; 
0x0000000000031e0e: mov rdi, rax; call 0x32c08; nop; leave; ret; 
0x0000000000031e35: mov rdi, rax; call 0x32c24; nop; leave; ret; 
0x0000000000031f66: mov rdi, rax; call 0x32cae; nop; leave; ret; 
0x0000000000031f8d: mov rdi, rax; call 0x32cca; nop; leave; ret; 
0x00000000000320d6: mov rdi, rax; call 0x32d47; nop; leave; ret; 
0x00000000000320f1: mov rdi, rax; call 0x32d8e; nop; leave; ret; 
0x000000000003217a: mov rdi, rax; call 0x32db6; nop; leave; ret; 
0x0000000000032195: mov rdi, rax; call 0x32dfc; nop; leave; ret; 
0x000000000003221e: mov rdi, rax; call 0x32e24; nop; leave; ret; 
0x0000000000032239: mov rdi, rax; call 0x32e6a; nop; leave; ret; 
0x00000000000322c2: mov rdi, rax; call 0x32e92; nop; leave; ret; 
0x00000000000322dd: mov rdi, rax; call 0x32ed8; nop; leave; ret; 
0x0000000000032366: mov rdi, rax; call 0x32f00; nop; leave; ret; 
0x0000000000032381: mov rdi, rax; call 0x32f46; nop; leave; ret; 
0x000000000003242b: mov rdi, rax; call 0x32f6e; nop; leave; ret; 
0x0000000000032446: mov rdi, rax; call 0x32fb4; nop; leave; ret; 
0x00000000000324f1: mov rdi, rax; call 0x32fdc; nop; leave; ret; 
0x000000000003250c: mov rdi, rax; call 0x33022; nop; leave; ret; 
0x00000000000325b7: mov rdi, rax; call 0x3304a; nop; leave; ret; 
0x00000000000325d2: mov rdi, rax; call 0x33090; nop; leave; ret; 
0x000000000003267d: mov rdi, rax; call 0x330b8; nop; leave; ret; 
0x0000000000032698: mov rdi, rax; call 0x330fe; nop; leave; ret; 
0x0000000000032743: mov rdi, rax; call 0x33126; nop; leave; ret; 
0x000000000003275e: mov rdi, rax; call 0x3316c; nop; leave; ret; 
0x0000000000032809: mov rdi, rax; call 0x33194; nop; leave; ret; 
0x0000000000032824: mov rdi, rax; call 0x331da; nop; leave; ret; 
0x00000000000328cf: mov rdi, rax; call 0x33202; nop; leave; ret; 
0x00000000000328ea: mov rdi, rax; call 0x3323a; nop; leave; ret; 
0x0000000000032995: mov rdi, rax; call 0x33262; nop; leave; ret; 
0x00000000000329b0: mov rdi, rax; call 0x332a8; nop; leave; ret; 
0x0000000000032a5b: mov rdi, rax; call 0x332d0; nop; leave; ret; 
0x0000000000032a76: mov rdi, rax; call 0x33316; nop; leave; ret; 
0x0000000000032b21: mov rdi, rax; call 0x3333e; nop; leave; ret; 
0x0000000000032b3c: mov rdi, rax; call 0x33384; nop; leave; ret; 
0x0000000000032bc7: mov rdi, rax; call 0x333ac; nop; leave; ret; 
0x0000000000032be2: mov rdi, rax; call 0x333f2; nop; leave; ret; 
0x0000000000032c6d: mov rdi, rax; call 0x3341a; nop; leave; ret; 
0x0000000000032c88: mov rdi, rax; call 0x33460; nop; leave; ret; 
0x0000000000032d13: mov rdi, rax; call 0x33488; nop; leave; ret; 
0x0000000000032d2e: mov rdi, rax; call 0x334ce; nop; leave; ret; 
0x00000000000307d6: mov rdi, rax; call 0x3365a; leave; ret; 
0x0000000000032068: mov rdi, rax; call 0x3366c; leave; ret; 
0x000000000003375b: mov rdi, rax; call 0x3370e; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000337f8: mov rdi, rax; call 0x337c4; nop; leave; ret; 
0x0000000000033818: mov rdi, rax; call 0x337e4; nop; leave; ret; 
0x0000000000033843: mov rdi, rax; call 0x33804; nop; leave; ret; 
0x000000000003372d: mov rdi, rax; call 0x338c4; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000033930: mov rdi, rax; call 0x33940; test rax, rax; setne al; leave; ret; 
0x000000000003399e: mov rdi, rax; call 0x3395e; nop; leave; ret; 
0x000000000003377e: mov rdi, rax; call 0x3397e; nop; leave; ret; 
0x00000000000337d8: mov rdi, rax; call 0x33a16; nop; leave; ret; 
0x0000000000033954: mov rdi, rax; call 0x33af2; leave; ret; 
0x0000000000033972: mov rdi, rax; call 0x33b14; nop; leave; ret; 
0x0000000000033a36: mov rdi, rax; call 0x33c24; nop; leave; ret; 
0x0000000000033b06: mov rdi, rax; call 0x33c6e; mov rax, qword ptr [rax]; leave; ret; 
0x0000000000033b28: mov rdi, rax; call 0x33c8c; nop; leave; ret; 
0x0000000000033b66: mov rdi, rax; call 0x33cd4; nop; leave; ret; 
0x0000000000033c18: mov rdi, rax; call 0x33d42; nop; leave; ret; 
0x0000000000033c82: mov rdi, rax; call 0x33d51; leave; ret; 
0x0000000000033d65: mov rdi, rax; call 0x33dec; leave; ret; 
0x0000000000033d9e: mov rdi, rax; call 0x33e0a; leave; ret; 
0x0000000000033dcf: mov rdi, rax; call 0x33e28; nop; leave; ret; 
0x0000000000033e00: mov rdi, rax; call 0x33e4f; leave; ret; 
0x0000000000033e1e: mov rdi, rax; call 0x33e61; leave; ret; 
0x0000000000033e75: mov rdi, rax; call 0x33e7f; leave; ret; 
0x0000000000037130: mov rdi, rax; call 0x37351; leave; ret; 
0x0000000000037291: mov rdi, rax; call 0x3749a; leave; ret; 
0x00000000000372f0: mov rdi, rax; call 0x374e6; leave; ret; 
0x000000000003738f: mov rdi, rax; call 0x375a9; leave; ret; 
0x00000000000374cd: mov rdi, rax; call 0x37a5c; leave; ret; 
0x0000000000037745: mov rdi, rax; call 0x37c6e; mov rax, qword ptr [rbp - 0x20]; leave; ret; 
0x0000000000037c50: mov rdi, rax; call 0x37d8a; movzx eax, byte ptr [rax]; movsx eax, al; mov edi, eax; call rbx; 
0x0000000000037d1e: mov rdi, rax; call 0x37da0; movzx eax, byte ptr [rax]; movsx eax, al; mov edi, eax; call rbx; 
0x0000000000037d50: mov rdi, rax; call 0x37df4; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000037d80: mov rdi, rax; call 0x37e18; leave; ret; 
0x0000000000026eb9: mov rdi, rax; call 0x38554; leave; ret; 
0x000000000003b42a: mov rdi, rax; call 0x397fa; nop; leave; ret; 
0x0000000000039e02: mov rdi, rax; call 0x3989e; xor eax, 1; leave; ret; 
0x0000000000039a32: mov rdi, rax; call 0x39996; nop; leave; ret; 
0x0000000000039b46: mov rdi, rax; call 0x39aaa; nop; leave; ret; 
0x000000000003993e: mov rdi, rax; call 0x39bd8; nop; leave; ret; 
0x000000000003996a: mov rdi, rax; call 0x39be8; nop; leave; ret; 
0x000000000003998a: mov rdi, rax; call 0x39bf8; nop; leave; ret; 
0x0000000000039a9e: mov rdi, rax; call 0x39c18; nop; leave; ret; 
0x0000000000039c0c: mov rdi, rax; call 0x3a01e; nop; leave; ret; 
0x0000000000039c2c: mov rdi, rax; call 0x3a03e; nop; leave; ret; 
0x0000000000039c57: mov rdi, rax; call 0x3a05e; leave; ret; 
0x0000000000039c76: mov rdi, rax; call 0x3a0f4; leave; ret; 
0x0000000000039d23: mov rdi, rax; call 0x3a13e; leave; ret; 
0x0000000000039d42: mov rdi, rax; call 0x3a1d4; leave; ret; 
0x000000000003a032: mov rdi, rax; call 0x3a3e0; nop; leave; ret; 
0x000000000003a052: mov rdi, rax; call 0x3a3f0; nop; leave; ret; 
0x000000000003a283: mov rdi, rax; call 0x3a5c0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003a313: mov rdi, rax; call 0x3a958; nop; leave; ret; 
0x000000000003a3d5: mov rdi, rax; call 0x3a96b; leave; ret; 
0x000000000003a45b: mov rdi, rax; call 0x3a9be; leave; ret; 
0x000000000003a4d5: mov rdi, rax; call 0x3aaf0; nop; leave; ret; 
0x000000000003a53b: mov rdi, rax; call 0x3ab2c; leave; ret; 
0x000000000003a5b5: mov rdi, rax; call 0x3ac5e; nop; leave; ret; 
0x000000000003a996: mov rdi, rax; call 0x3b217; leave; ret; 
0x000000000003a9b4: mov rdi, rax; call 0x3b248; leave; ret; 
0x000000000003ad56: mov rdi, rax; call 0x3b543; mov rdi, rax; call 0x3b555; leave; ret; 
0x000000000003ad5e: mov rdi, rax; call 0x3b555; leave; ret; 
0x000000000003b024: mov rdi, rax; call 0x3b88b; mov rdi, rax; call 0x3b89d; leave; ret; 
0x000000000003b02c: mov rdi, rax; call 0x3b89d; leave; ret; 
0x000000000003b32d: mov rdi, rax; call 0x3bb4c; leave; ret; 
0x000000000003b40b: mov rdi, rax; call 0x3bc4c; leave; ret; 
0x000000000003b569: mov rdi, rax; call 0x3bd64; leave; ret; 
0x000000000003b8b1: mov rdi, rax; call 0x3bf88; leave; ret; 
0x000000000003bad2: mov rdi, rax; call 0x3c118; leave; ret; 
0x000000000003baf0: mov rdi, rax; call 0x3c12a; leave; ret; 
0x000000000003bb12: mov rdi, rax; call 0x3c148; mov rdi, rax; call 0x3c15a; leave; ret; 
0x000000000003bb1a: mov rdi, rax; call 0x3c15a; leave; ret; 
0x000000000003bc18: mov rdi, rax; call 0x3c178; leave; ret; 
0x000000000003bc3a: mov rdi, rax; call 0x3c196; mov rdi, rax; call 0x3c1a8; leave; ret; 
0x000000000003bc42: mov rdi, rax; call 0x3c1a8; leave; ret; 
0x000000000003bcf3: mov rdi, rax; call 0x3c1c6; leave; ret; 
0x000000000003bd55: mov rdi, rax; call 0x3c234; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003bf17: mov rdi, rax; call 0x3c314; leave; ret; 
0x000000000003bf79: mov rdi, rax; call 0x3c382; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003c13e: mov rdi, rax; call 0x3c462; leave; ret; 
0x000000000003c16e: mov rdi, rax; call 0x3c480; leave; ret; 
0x000000000003c18c: mov rdi, rax; call 0x3c492; leave; ret; 
0x000000000003c1bc: mov rdi, rax; call 0x3c4b0; leave; ret; 
0x000000000003c309: mov rdi, rax; call 0x3c52e; nop; leave; ret; 
0x000000000003c457: mov rdi, rax; call 0x3c66e; nop; leave; ret; 
0x000000000003c476: mov rdi, rax; call 0x3c742; leave; ret; 
0x000000000003c4a6: mov rdi, rax; call 0x3c754; leave; ret; 
0x000000000003c847: mov rdi, rax; call 0x3c922; leave; ret; 
0x000000000003d538: mov rdi, rax; call 0x3d454; nop; leave; ret; 
0x000000000003d67d: mov rdi, rax; call 0x3d49c; movzx eax, byte ptr [rax]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003d304: mov rdi, rax; call 0x3d4bc; nop; leave; ret; 
0x000000000003ed32: mov rdi, rax; call 0x3edae; add rax, 0x20; leave; ret; 
0x000000000003ed14: mov rdi, rax; call 0x3edae; leave; ret; 
0x000000000003ed5f: mov rdi, rax; call 0x3edcc; leave; ret; 
0x000000000003edc2: mov rdi, rax; call 0x3edf1; leave; ret; 
0x000000000003fc7a: mov rdi, rax; call 0x3fc8a; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000041be9: mov rdi, rax; call 0x417d4; leave; ret; 
0x0000000000041c9f: mov rdi, rax; call 0x41806; nop; leave; ret; 
0x000000000002ce2f: mov rdi, rax; call 0x41a38; leave; ret; 
0x000000000002ce53: mov rdi, rax; call 0x41b2e; leave; ret; 
0x000000000002cebf: mov rdi, rax; call 0x41bc8; leave; ret; 
0x0000000000041e14: mov rdi, rax; call 0x42434; nop; leave; ret; 
0x0000000000041f00: mov rdi, rax; call 0x4257a; nop; leave; ret; 
0x0000000000042318: mov rdi, rax; call 0x4281a; nop; leave; ret; 
0x00000000000423a2: mov rdi, rax; call 0x428b8; leave; ret; 
0x000000000004389e: mov rdi, rax; call 0x42938; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000427db: mov rdi, rax; call 0x42cc9; nop; leave; ret; 
0x00000000000428a8: mov rdi, rax; call 0x42d80; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000042957: mov rdi, rax; call 0x43078; nop; leave; ret; 
0x000000000004298d: mov rdi, rax; call 0x4308c; nop; leave; ret; 
0x0000000000042a1d: mov rdi, rax; call 0x430f5; leave; ret; 
0x0000000000042aaf: mov rdi, rax; call 0x43148; nop; leave; ret; 
0x0000000000042ae5: mov rdi, rax; call 0x4315c; nop; leave; ret; 
0x0000000000042b7f: mov rdi, rax; call 0x431c5; leave; ret; 
0x0000000000042d74: mov rdi, rax; call 0x431fa; nop; leave; ret; 
0x000000000004306e: mov rdi, rax; call 0x432a6; leave; ret; 
0x0000000000043120: mov rdi, rax; call 0x432f2; leave; ret; 
0x000000000004313e: mov rdi, rax; call 0x4334a; leave; ret; 
0x00000000000431f0: mov rdi, rax; call 0x43396; leave; ret; 
0x000000000004329a: mov rdi, rax; call 0x43430; nop; leave; ret; 
0x00000000000432ba: mov rdi, rax; call 0x43444; leave; ret; 
0x00000000000432e8: mov rdi, rax; call 0x4345c; leave; ret; 
0x000000000004335e: mov rdi, rax; call 0x43512; leave; ret; 
0x000000000004338c: mov rdi, rax; call 0x4352a; leave; ret; 
0x0000000000043875: mov rdi, rax; call 0x438cd; leave; ret; 
0x00000000000438f8: mov rdi, rax; call 0x43902; leave; ret; 
0x0000000000041d87: mov rdi, rax; call 0x43b06; leave; ret; 
0x0000000000044630: mov rdi, rax; call 0x43ee4; mov eax, 1; leave; ret; 
0x000000000002de8f: mov rdi, rax; call 0x43ee4; nop; leave; ret; 
0x0000000000024f29: mov rdi, rax; call r8; nop; leave; ret; 
0x0000000000039de1: mov rdi, rax; call rbx; 
0x0000000000039de1: mov rdi, rax; call rbx; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000038a90: mov rdi, rax; call rcx; 
0x0000000000025733: mov rdi, rax; call rdx; 
0x0000000000039cfd: mov rdi, rax; call rdx; leave; ret; 
0x0000000000025733: mov rdi, rax; call rdx; nop; leave; ret; 
0x00000000000323f6: mov rdi, rbx; call 0x2ceca; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000324bc: mov rdi, rbx; call 0x2cefa; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032582: mov rdi, rbx; call 0x2cf2a; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032648: mov rdi, rbx; call 0x2cf5a; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003270e: mov rdi, rbx; call 0x2cf8a; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000327d4: mov rdi, rbx; call 0x2cfba; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003289a: mov rdi, rbx; call 0x2cfea; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032960: mov rdi, rbx; call 0x2d00a; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032a26: mov rdi, rbx; call 0x2d034; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032aec: mov rdi, rbx; call 0x2d080; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003ceb5: mov rdi, rbx; call 0x33a42; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003c51e: mov rdi, rbx; call 0x3c766; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000025ffd: mov rdi, rcx; call 0x262e1; nop; leave; ret; 
0x0000000000026141: mov rdi, rcx; call 0x2642f; nop; leave; ret; 
0x000000000002c31d: mov rdi, rcx; call 0x2c695; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002cc5f: mov rdi, rcx; call 0x2cd40; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000395be: mov rdi, rcx; call 0x39e10; mov eax, edx; leave; ret; 
0x00000000000396ce: mov rdi, rcx; call 0x39e84; mov eax, edx; leave; ret; 
0x000000000003de1a: mov rdi, rdx; call 0x23a80; nop; leave; ret; 
0x0000000000028e1c: mov rdi, rdx; call 0x24db7; mov eax, dword ptr [rbp - 4]; leave; ret; 
0x0000000000033a99: mov rdi, rdx; call 0x2570c; nop; leave; ret; 
0x00000000000417f8: mov rdi, rdx; call 0x2a776; movzx eax, byte ptr [rax]; leave; ret; 
0x000000000002eab2: mov rdi, rdx; call 0x2b94c; nop; leave; ret; 
0x000000000002d075: mov rdi, rdx; call 0x2b97a; nop; leave; ret; 
0x000000000002b96f: mov rdi, rdx; call 0x2bb38; nop; leave; ret; 
0x000000000003a42a: mov rdi, rdx; call 0x398dc; leave; ret; 
0x000000000002ceef: mov rdi, rdx; call 0x418fe; nop; leave; ret; 
0x000000000002cf1f: mov rdi, rdx; call 0x419c4; nop; leave; ret; 
0x000000000002cf7f: mov rdi, rdx; call 0x41a8e; nop; leave; ret; 
0x000000000002cfdf: mov rdi, rdx; call 0x41bf4; nop; leave; ret; 
0x000000000002cf4f: mov rdi, rdx; call 0x41c4a; nop; leave; ret; 
0x000000000002d0a5: mov rdi, rdx; call 0x41c6a; nop; leave; ret; 
0x000000000002cfaf: mov rdi, rdx; call 0x41caa; nop; leave; ret; 
0x0000000000040853: mov rdi, rdx; call 0x42116; nop; leave; ret; 
0x0000000000039cf5: mov rdx, qword ptr [rax + 0x18]; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call rdx; 
0x0000000000025729: mov rdx, qword ptr [rax]; add rdx, 8; mov rdx, qword ptr [rdx]; mov rdi, rax; call rdx; 
0x000000000002a78a: mov rdx, qword ptr [rax]; mov rax, qword ptr [rbp - 0x10]; add rax, rdx; pop rbp; ret; 
0x000000000002be66: mov rdx, qword ptr [rax]; mov rax, qword ptr [rbp - 0x10]; shl rax, 2; add rax, rdx; pop rbp; ret; 
0x000000000002b39a: mov rdx, qword ptr [rax]; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x000000000002c53e: mov rdx, qword ptr [rax]; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000037f7c: mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax + 0x10], rdx; nop; pop rbp; ret; 
0x0000000000026b88: mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax + 0x20], rdx; nop; pop rbp; ret; 
0x0000000000037f5c: mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax + 8], rdx; nop; pop rbp; ret; 
0x0000000000037a52: mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x000000000003717c: mov rdx, qword ptr [rbp - 0x10]; mov rdx, qword ptr [rdx]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x000000000002b416: mov rdx, qword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x2b5f5; leave; ret; 
0x00000000000372e9: mov rdx, qword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x374e6; leave; ret; 
0x0000000000039c50: mov rdx, qword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x3a05e; leave; ret; 
0x0000000000039d1c: mov rdx, qword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x3a13e; leave; ret; 
0x000000000003ed58: mov rdx, qword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x3edcc; leave; ret; 
0x0000000000037ffc: mov rdx, qword ptr [rbp - 0x18]; mov qword ptr [rax + 0x48], rdx; nop; leave; ret; 
0x000000000003bee9: mov rdx, qword ptr [rbp - 0x18]; mov qword ptr [rax], rdx; nop; leave; ret; 
0x000000000003fdbe: mov rdx, qword ptr [rbp - 0x18]; mov qword ptr [rdx + 0x60], rax; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002b514: mov rdx, qword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x2b60f; leave; ret; 
0x000000000002ac5b: mov rdx, qword ptr [rbp - 0x20]; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x0000000000024ddc: mov rdx, qword ptr [rbp - 8]; mov dword ptr [rdx], eax; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000002bfab: mov rdx, qword ptr [rbp - 8]; mov qword ptr [rdx + 8], rax; nop; leave; ret; 
0x000000000002b653: mov rdx, qword ptr [rbp - 8]; mov rax, qword ptr [rbp - 0x10]; add rax, rdx; leave; ret; 
0x000000000002b596: mov rdx, qword ptr [rbp - 8]; mov rax, qword ptr [rbp - 0x28]; add rax, rdx; leave; ret; 
0x000000000003076c: mov rdx, qword ptr [rbx]; mov qword ptr [rax], rdx; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000043f05: mov rdx, qword ptr [rdx]; add rdx, 0x30; mov rdx, qword ptr [rdx]; mov rdi, rax; call rdx; 
0x0000000000044660: mov rdx, qword ptr [rdx]; add rdx, 0x38; mov rdx, qword ptr [rdx]; mov rdi, rax; call rdx; 
0x0000000000037180: mov rdx, qword ptr [rdx]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000025730: mov rdx, qword ptr [rdx]; mov rdi, rax; call rdx; 
0x0000000000025730: mov rdx, qword ptr [rdx]; mov rdi, rax; call rdx; nop; leave; ret; 
0x0000000000039dd7: mov rdx, rax; mov rax, qword ptr [rbp - 0x18]; mov rsi, rdx; mov rdi, rax; call rbx; 
0x000000000002ae9f: mov rdx, rax; mov rsi, rbx; call 0x2b08c; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002ae47: mov rsi, qword ptr [rbp - 0x10]; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b00a; leave; ret; 
0x000000000002b02e: mov rsi, qword ptr [rbp - 0x10]; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2b313; leave; ret; 
0x00000000000316b6: mov rsi, rax; mov edi, 1; call 0x2a5eb; nop; leave; ret; 
0x0000000000025ffa: mov rsi, rax; mov rdi, rcx; call 0x262e1; nop; leave; ret; 
0x000000000002613e: mov rsi, rax; mov rdi, rcx; call 0x2642f; nop; leave; ret; 
0x00000000000395bb: mov rsi, rax; mov rdi, rcx; call 0x39e10; mov eax, edx; leave; ret; 
0x00000000000396cb: mov rsi, rax; mov rdi, rcx; call 0x39e84; mov eax, edx; leave; ret; 
0x000000000003de17: mov rsi, rax; mov rdi, rdx; call 0x23a80; nop; leave; ret; 
0x0000000000033a96: mov rsi, rax; mov rdi, rdx; call 0x2570c; nop; leave; ret; 
0x00000000000417f5: mov rsi, rax; mov rdi, rdx; call 0x2a776; movzx eax, byte ptr [rax]; leave; ret; 
0x000000000002eaaf: mov rsi, rax; mov rdi, rdx; call 0x2b94c; nop; leave; ret; 
0x000000000002b96c: mov rsi, rax; mov rdi, rdx; call 0x2bb38; nop; leave; ret; 
0x000000000003a427: mov rsi, rax; mov rdi, rdx; call 0x398dc; leave; ret; 
0x0000000000040850: mov rsi, rax; mov rdi, rdx; call 0x42116; nop; leave; ret; 
0x000000000002aea2: mov rsi, rbx; call 0x2b08c; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002c31a: mov rsi, rbx; mov rdi, rcx; call 0x2c695; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002cc5c: mov rsi, rbx; mov rdi, rcx; call 0x2cd40; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000036ee8: mov rsi, rcx; mov rdi, rax; call 0x23880; nop; leave; ret; 
0x0000000000044cf0: mov rsi, rcx; mov rdi, rax; call 0x23cc0; nop; leave; ret; 
0x000000000002552d: mov rsi, rcx; mov rdi, rax; call 0x258e4; nop; leave; ret; 
0x00000000000255ed: mov rsi, rcx; mov rdi, rax; call 0x259a2; nop; leave; ret; 
0x0000000000025839: mov rsi, rcx; mov rdi, rax; call 0x25b41; nop; leave; ret; 
0x0000000000025a39: mov rsi, rcx; mov rdi, rax; call 0x25e31; nop; leave; ret; 
0x0000000000025af9: mov rsi, rcx; mov rdi, rax; call 0x25eeb; nop; leave; ret; 
0x0000000000025b65: mov rsi, rcx; mov rdi, rax; call 0x25f30; nop; leave; ret; 
0x0000000000025e55: mov rsi, rcx; mov rdi, rax; call 0x26170; nop; leave; ret; 
0x0000000000025f0f: mov rsi, rcx; mov rdi, rax; call 0x26204; nop; leave; ret; 
0x000000000002608d: mov rsi, rcx; mov rdi, rax; call 0x26352; nop; leave; ret; 
0x0000000000026305: mov rsi, rcx; mov rdi, rax; call 0x2650a; nop; leave; ret; 
0x0000000000026453: mov rsi, rcx; mov rdi, rax; call 0x26574; nop; leave; ret; 
0x00000000000266cf: mov rsi, rcx; mov rdi, rax; call 0x26717; nop; leave; ret; 
0x000000000002673b: mov rsi, rcx; mov rdi, rax; call 0x2675c; nop; leave; ret; 
0x0000000000026aaf: mov rsi, rcx; mov rdi, rax; call 0x26af7; nop; leave; ret; 
0x0000000000026b1b: mov rsi, rcx; mov rdi, rax; call 0x26b3c; nop; leave; ret; 
0x000000000002ac8a: mov rsi, rcx; mov rdi, rax; call 0x2aeb0; nop; leave; ret; 
0x000000000002affd: mov rsi, rcx; mov rdi, rax; call 0x2b2c8; leave; ret; 
0x000000000002b0b4: mov rsi, rcx; mov rdi, rax; call 0x2b3a7; leave; ret; 
0x000000000003b23b: mov rsi, rcx; mov rdi, rax; call 0x2b4dd; leave; ret; 
0x000000000002b3cf: mov rsi, rcx; mov rdi, rax; call 0x2b5b5; leave; ret; 
0x000000000002b518: mov rsi, rcx; mov rdi, rax; call 0x2b60f; leave; ret; 
0x000000000002b5d9: mov rsi, rcx; mov rdi, rax; call 0x2b660; leave; ret; 
0x000000000002b6d3: mov rsi, rcx; mov rdi, rax; call 0x2b775; nop; leave; ret; 
0x000000000002b80f: mov rsi, rcx; mov rdi, rax; call 0x2b832; leave; ret; 
0x000000000002b856: mov rsi, rcx; mov rdi, rax; call 0x2b863; leave; ret; 
0x000000000002c971: mov rsi, rcx; mov rdi, rax; call 0x2c2dc; leave; ret; 
0x000000000002c353: mov rsi, rcx; mov rdi, rax; call 0x2c703; leave; ret; 
0x000000000002c5ab: mov rsi, rcx; mov rdi, rax; call 0x2c7f7; leave; ret; 
0x000000000002c72b: mov rsi, rcx; mov rdi, rax; call 0x2c94d; leave; ret; 
0x000000000002c7ea: mov rsi, rcx; mov rdi, rax; call 0x2ca10; leave; ret; 
0x000000000002c81f: mov rsi, rcx; mov rdi, rax; call 0x2ca74; leave; ret; 
0x000000000002c892: mov rsi, rcx; mov rdi, rax; call 0x2caca; leave; ret; 
0x000000000002c92a: mov rsi, rcx; mov rdi, rax; call 0x2cb62; leave; ret; 
0x000000000002ca98: mov rsi, rcx; mov rdi, rax; call 0x2cc1e; leave; ret; 
0x000000000002caee: mov rsi, rcx; mov rdi, rax; call 0x2cc6d; leave; ret; 
0x000000000002cdd2: mov rsi, rcx; mov rdi, rax; call 0x2cde0; nop; leave; ret; 
0x0000000000033dcc: mov rsi, rcx; mov rdi, rax; call 0x33e28; nop; leave; ret; 
0x000000000003712d: mov rsi, rcx; mov rdi, rax; call 0x37351; leave; ret; 
0x000000000003728e: mov rsi, rcx; mov rdi, rax; call 0x3749a; leave; ret; 
0x000000000003738c: mov rsi, rcx; mov rdi, rax; call 0x375a9; leave; ret; 
0x00000000000374ca: mov rsi, rcx; mov rdi, rax; call 0x37a5c; leave; ret; 
0x000000000003a280: mov rsi, rcx; mov rdi, rax; call 0x3a5c0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003a3d2: mov rsi, rcx; mov rdi, rax; call 0x3a96b; leave; ret; 
0x000000000003a458: mov rsi, rcx; mov rdi, rax; call 0x3a9be; leave; ret; 
0x000000000003a538: mov rsi, rcx; mov rdi, rax; call 0x3ab2c; leave; ret; 
0x000000000003a993: mov rsi, rcx; mov rdi, rax; call 0x3b217; leave; ret; 
0x000000000003b32a: mov rsi, rcx; mov rdi, rax; call 0x3bb4c; leave; ret; 
0x000000000003b408: mov rsi, rcx; mov rdi, rax; call 0x3bc4c; leave; ret; 
0x000000000003bcf0: mov rsi, rcx; mov rdi, rax; call 0x3c1c6; leave; ret; 
0x000000000003bf14: mov rsi, rcx; mov rdi, rax; call 0x3c314; leave; ret; 
0x000000000003c844: mov rsi, rcx; mov rdi, rax; call 0x3c922; leave; ret; 
0x0000000000042a1a: mov rsi, rcx; mov rdi, rax; call 0x430f5; leave; ret; 
0x0000000000042b7c: mov rsi, rcx; mov rdi, rax; call 0x431c5; leave; ret; 
0x0000000000042d71: mov rsi, rcx; mov rdi, rax; call 0x431fa; nop; leave; ret; 
0x000000000004311d: mov rsi, rcx; mov rdi, rax; call 0x432f2; leave; ret; 
0x00000000000431ed: mov rsi, rcx; mov rdi, rax; call 0x43396; leave; ret; 
0x00000000000432e5: mov rsi, rcx; mov rdi, rax; call 0x4345c; leave; ret; 
0x0000000000043389: mov rsi, rcx; mov rdi, rax; call 0x4352a; leave; ret; 
0x0000000000043872: mov rsi, rcx; mov rdi, rax; call 0x438cd; leave; ret; 
0x00000000000438f5: mov rsi, rcx; mov rdi, rax; call 0x43902; leave; ret; 
0x0000000000024f26: mov rsi, rcx; mov rdi, rax; call r8; nop; leave; ret; 
0x000000000003938e: mov rsi, rdx; mov rdi, rax; call 0x23ab0; mov eax, 0; leave; ret; 
0x000000000002e5d0: mov rsi, rdx; mov rdi, rax; call 0x23ab0; nop; leave; ret; 
0x000000000002a831: mov rsi, rdx; mov rdi, rax; call 0x253a0; xor eax, 1; leave; ret; 
0x000000000002546e: mov rsi, rdx; mov rdi, rax; call 0x25847; nop; leave; ret; 
0x00000000000256b0: mov rsi, rdx; mov rdi, rax; call 0x25a47; nop; leave; ret; 
0x00000000000257e0: mov rsi, rdx; mov rdi, rax; call 0x25b07; nop; leave; ret; 
0x0000000000025863: mov rsi, rdx; mov rdi, rax; call 0x25b73; nop; leave; ret; 
0x000000000003ad12: mov rsi, rdx; mov rdi, rax; call 0x25b9c; nop; leave; ret; 
0x000000000003afe0: mov rsi, rdx; mov rdi, rax; call 0x25cea; nop; leave; ret; 
0x0000000000025a63: mov rsi, rdx; mov rdi, rax; call 0x25e63; nop; leave; ret; 
0x0000000000025b23: mov rsi, rdx; mov rdi, rax; call 0x25f1d; nop; leave; ret; 
0x0000000000025fb0: mov rsi, rdx; mov rdi, rax; call 0x262a0; nop; leave; ret; 
0x00000000000260f4: mov rsi, rdx; mov rdi, rax; call 0x263ee; nop; leave; ret; 
0x0000000000026640: mov rsi, rdx; mov rdi, rax; call 0x266dd; nop; leave; ret; 
0x00000000000266f9: mov rsi, rdx; mov rdi, rax; call 0x26749; nop; leave; ret; 
0x0000000000026a56: mov rsi, rdx; mov rdi, rax; call 0x26abd; nop; leave; ret; 
0x0000000000026ad9: mov rsi, rdx; mov rdi, rax; call 0x26b29; nop; leave; ret; 
0x000000000002a768: mov rsi, rdx; mov rdi, rax; call 0x2ac06; nop; leave; ret; 
0x000000000002acee: mov rsi, rdx; mov rdi, rax; call 0x2af80; leave; ret; 
0x000000000002afa0: mov rsi, rdx; mov rdi, rax; call 0x2b266; leave; ret; 
0x000000000002b41a: mov rsi, rdx; mov rdi, rax; call 0x2b5f5; leave; ret; 
0x000000000002bffb: mov rsi, rdx; mov rdi, rax; call 0x2c4b2; nop; leave; ret; 
0x000000000002c025: mov rsi, rdx; mov rdi, rax; call 0x2c516; nop; leave; ret; 
0x000000000002c2ce: mov rsi, rdx; mov rdi, rax; call 0x2c659; nop; leave; ret; 
0x000000000002c3e6: mov rsi, rdx; mov rdi, rax; call 0x2c756; nop; leave; ret; 
0x000000000002c4a4: mov rsi, rdx; mov rdi, rax; call 0x2c79c; leave; ret; 
0x000000000002c675: mov rsi, rdx; mov rdi, rax; call 0x2c8e1; nop; leave; ret; 
0x000000000002c7bc: mov rsi, rdx; mov rdi, rax; call 0x2c9ae; leave; ret; 
0x000000000002c8d4: mov rsi, rdx; mov rdi, rax; call 0x2cafc; leave; ret; 
0x000000000002f542: mov rsi, rdx; mov rdi, rax; call 0x30733; nop; leave; ret; 
0x000000000002f635: mov rsi, rdx; mov rdi, rax; call 0x30886; nop; leave; ret; 
0x000000000002f728: mov rsi, rdx; mov rdi, rax; call 0x309da; nop; leave; ret; 
0x000000000002f81b: mov rsi, rdx; mov rdi, rax; call 0x30b2e; nop; leave; ret; 
0x000000000002f90e: mov rsi, rdx; mov rdi, rax; call 0x30c82; nop; leave; ret; 
0x000000000002fa01: mov rsi, rdx; mov rdi, rax; call 0x30dd6; nop; leave; ret; 
0x000000000002fb10: mov rsi, rdx; mov rdi, rax; call 0x30f4a; nop; leave; ret; 
0x000000000002fc1f: mov rsi, rdx; mov rdi, rax; call 0x310be; nop; leave; ret; 
0x000000000002fd2e: mov rsi, rdx; mov rdi, rax; call 0x31232; nop; leave; ret; 
0x000000000002fe3d: mov rsi, rdx; mov rdi, rax; call 0x313a6; nop; leave; ret; 
0x000000000003005b: mov rsi, rdx; mov rdi, rax; call 0x3168e; nop; leave; ret; 
0x000000000003016a: mov rsi, rdx; mov rdi, rax; call 0x317f4; nop; leave; ret; 
0x0000000000030279: mov rsi, rdx; mov rdi, rax; call 0x31968; nop; leave; ret; 
0x0000000000030388: mov rsi, rdx; mov rdi, rax; call 0x31adc; nop; leave; ret; 
0x0000000000030497: mov rsi, rdx; mov rdi, rax; call 0x31c50; nop; leave; ret; 
0x000000000003058b: mov rsi, rdx; mov rdi, rax; call 0x31da8; nop; leave; ret; 
0x000000000003067f: mov rsi, rdx; mov rdi, rax; call 0x31f00; nop; leave; ret; 
0x00000000000320d3: mov rsi, rdx; mov rdi, rax; call 0x32d47; nop; leave; ret; 
0x0000000000032177: mov rsi, rdx; mov rdi, rax; call 0x32db6; nop; leave; ret; 
0x000000000003221b: mov rsi, rdx; mov rdi, rax; call 0x32e24; nop; leave; ret; 
0x00000000000322bf: mov rsi, rdx; mov rdi, rax; call 0x32e92; nop; leave; ret; 
0x0000000000032363: mov rsi, rdx; mov rdi, rax; call 0x32f00; nop; leave; ret; 
0x0000000000032428: mov rsi, rdx; mov rdi, rax; call 0x32f6e; nop; leave; ret; 
0x00000000000324ee: mov rsi, rdx; mov rdi, rax; call 0x32fdc; nop; leave; ret; 
0x00000000000325b4: mov rsi, rdx; mov rdi, rax; call 0x3304a; nop; leave; ret; 
0x000000000003267a: mov rsi, rdx; mov rdi, rax; call 0x330b8; nop; leave; ret; 
0x0000000000032740: mov rsi, rdx; mov rdi, rax; call 0x33126; nop; leave; ret; 
0x0000000000032806: mov rsi, rdx; mov rdi, rax; call 0x33194; nop; leave; ret; 
0x00000000000328cc: mov rsi, rdx; mov rdi, rax; call 0x33202; nop; leave; ret; 
0x0000000000032992: mov rsi, rdx; mov rdi, rax; call 0x33262; nop; leave; ret; 
0x0000000000032a58: mov rsi, rdx; mov rdi, rax; call 0x332d0; nop; leave; ret; 
0x0000000000032b1e: mov rsi, rdx; mov rdi, rax; call 0x3333e; nop; leave; ret; 
0x0000000000032bc4: mov rsi, rdx; mov rdi, rax; call 0x333ac; nop; leave; ret; 
0x0000000000032c6a: mov rsi, rdx; mov rdi, rax; call 0x3341a; nop; leave; ret; 
0x0000000000032d10: mov rsi, rdx; mov rdi, rax; call 0x33488; nop; leave; ret; 
0x0000000000033758: mov rsi, rdx; mov rdi, rax; call 0x3370e; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000003372a: mov rsi, rdx; mov rdi, rax; call 0x338c4; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000033b63: mov rsi, rdx; mov rdi, rax; call 0x33cd4; nop; leave; ret; 
0x00000000000372ed: mov rsi, rdx; mov rdi, rax; call 0x374e6; leave; ret; 
0x0000000000037d7d: mov rsi, rdx; mov rdi, rax; call 0x37e18; leave; ret; 
0x0000000000039c54: mov rsi, rdx; mov rdi, rax; call 0x3a05e; leave; ret; 
0x0000000000039d20: mov rsi, rdx; mov rdi, rax; call 0x3a13e; leave; ret; 
0x000000000003a310: mov rsi, rdx; mov rdi, rax; call 0x3a958; nop; leave; ret; 
0x000000000003a4d2: mov rsi, rdx; mov rdi, rax; call 0x3aaf0; nop; leave; ret; 
0x000000000003a5b2: mov rsi, rdx; mov rdi, rax; call 0x3ac5e; nop; leave; ret; 
0x000000000003c306: mov rsi, rdx; mov rdi, rax; call 0x3c52e; nop; leave; ret; 
0x000000000003c454: mov rsi, rdx; mov rdi, rax; call 0x3c66e; nop; leave; ret; 
0x000000000003ed5c: mov rsi, rdx; mov rdi, rax; call 0x3edcc; leave; ret; 
0x0000000000042315: mov rsi, rdx; mov rdi, rax; call 0x4281a; nop; leave; ret; 
0x000000000004239f: mov rsi, rdx; mov rdi, rax; call 0x428b8; leave; ret; 
0x000000000004389b: mov rsi, rdx; mov rdi, rax; call 0x42938; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000427d8: mov rsi, rdx; mov rdi, rax; call 0x42cc9; nop; leave; ret; 
0x0000000000042954: mov rsi, rdx; mov rdi, rax; call 0x43078; nop; leave; ret; 
0x0000000000042aac: mov rsi, rdx; mov rdi, rax; call 0x43148; nop; leave; ret; 
0x0000000000043297: mov rsi, rdx; mov rdi, rax; call 0x43430; nop; leave; ret; 
0x0000000000039dde: mov rsi, rdx; mov rdi, rax; call rbx; 
0x0000000000038434: mov sil, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003d6b2: mov word ptr [rax + 0x16], dx; nop; pop rbp; ret; 
0x00000000000402bd: mov word ptr [rax + 0x20], dx; nop; pop rbp; ret; 
0x0000000000041c42: mov word ptr [rax + 0x70], dx; nop; leave; ret; 
0x00000000000419bd: mov word ptr [rax + 0x72], dx; nop; pop rbp; ret; 
0x000000000003a9b8: mov word ptr [rax], cs; add byte ptr [rax], al; leave; ret; 
0x000000000003189c: mov word ptr [rax], ss; add byte ptr [rax], al; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000032af0: mov word ptr [rbp + 0x4890ffff], fs; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000003da86: mov word ptr [rbp - 0xc], ax; mov eax, edx; mov byte ptr [rbp - 0x10], al; nop; pop rbp; ret; 
0x00000000000256b7: mov word ptr [rbx], es; add byte ptr [rax], al; nop; leave; ret; 
0x00000000000297f0: mov word ptr [rdx - 0x76b70001], fs; ret 0x8d48; 
0x0000000000032586: movabs al, byte ptr [0xf85d8b4890ffffa9]; leave; ret; 
0x0000000000040592: movabs byte ptr [0x8948d0458d48fffe], al; ret 0xbe; 
0x0000000000032964: movabs byte ptr [0xf85d8b4890ffffa6], al; leave; ret; 
0x00000000000370eb: movabs eax, dword ptr [0xfffeca1ce8fffecc]; mov rax, qword ptr [rbp - 0x58]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002cba0: movabs rax, 0x1fffffffffffffff; pop rbp; ret; 
0x000000000003c992: movabs rax, 0xfffffffffffffff; pop rbp; ret; 
0x0000000000044dde: movd mm0, edx; leave; ret; 
0x0000000000044ddd: movd mm0, rdx; leave; ret; 
0x0000000000044ddc: movq xmm0, rdx; leave; ret; 
0x00000000000388d8: movsb byte ptr [rdi], byte ptr [rsi]; mov cl, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000028e72: movsb byte ptr [rdi], byte ptr [rsi]; mov edi, 0x8b48ffff; clc; leave; ret; 
0x000000000002af68: movsb byte ptr [rdi], byte ptr [rsi]; mov edi, edi; dec ecx; ret; 
0x000000000002c35a: movsd dword ptr [rdi], dword ptr [rsi]; add eax, dword ptr [rax]; add cl, cl; ret; 
0x00000000000303b3: movsd dword ptr [rdi], dword ptr [rsi]; cmp byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003ff47: movsd dword ptr [rdi], dword ptr [rsi]; cmp dh, bh; dec dword ptr [rax - 0x77]; ret 0xb70f; 
0x0000000000044d2a: movss dword ptr [rax + 4], xmm0; nop; pop rbp; ret; 
0x0000000000039854: movss dword ptr [rax], xmm0; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 8], 0; nop; pop rbp; ret; 
0x0000000000044d25: movss xmm0, dword ptr [rbp - 0x10]; movss dword ptr [rax + 4], xmm0; nop; pop rbp; ret; 
0x0000000000037c5b: movsx eax, al; mov edi, eax; call rbx; 
0x000000000003d759: movsxd rdi, esi; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000337b7: movsxd rdx, eax; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000044d26: movups xmm0, xmmword ptr [rbp - 0x10]; movss dword ptr [rax + 4], xmm0; nop; pop rbp; ret; 
0x0000000000044d2b: movups xmmword ptr [rax + 4], xmm0; nop; pop rbp; ret; 
0x0000000000039855: movups xmmword ptr [rax], xmm0; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 8], 0; nop; pop rbp; ret; 
0x000000000003c9be: movzx eax, al; leave; ret; 
0x0000000000025c15: movzx eax, al; test rax, rax; setne al; pop rbp; ret; 
0x0000000000028f36: movzx eax, byte ptr [rax + 0x30]; pop rbp; ret; 
0x0000000000028f20: movzx eax, byte ptr [rax + 0x31]; pop rbp; ret; 
0x000000000003fe3c: movzx eax, byte ptr [rax]; leave; ret; 
0x000000000003d685: movzx eax, byte ptr [rax]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000037c58: movzx eax, byte ptr [rax]; movsx eax, al; mov edi, eax; call rbx; 
0x000000000003f849: movzx eax, byte ptr [rax]; pop rbp; ret; 
0x000000000002ba73: movzx eax, byte ptr [rbp - 1]; or eax, 0x40; leave; ret; 
0x0000000000041a87: movzx eax, byte ptr [rbp - 1]; pop rbp; ret; 
0x0000000000028e99: movzx eax, byte ptr [rbp - 4]; pop rbp; ret; 
0x000000000003d9f7: movzx edx, al; mov rax, qword ptr [rbp - 8]; mov dword ptr [rax + 0x1c], edx; nop; pop rbp; ret; 
0x000000000003af3c: movzx edx, byte ptr [rax]; mov rax, qword ptr [rbp - 8]; mov byte ptr [rax + 8], dl; nop; leave; ret; 
0x000000000002a615: movzx edx, byte ptr [rax]; mov rax, qword ptr [rbp - 8]; mov byte ptr [rax], dl; nop; pop rbp; ret; 
0x000000000003d3a2: movzx edx, byte ptr [rbp - 0x10]; mov byte ptr [rax], dl; nop; leave; ret; 
0x00000000000402b5: movzx edx, byte ptr [rbp - 0x10]; mov rax, qword ptr [rbp - 8]; mov word ptr [rax + 0x20], dx; nop; pop rbp; ret; 
0x00000000000335ba: movzx edx, byte ptr [rbp - 0x20]; mov byte ptr [rax + 0x18], dl; nop; pop rbp; ret; 
0x0000000000043ed7: movzx edx, byte ptr [rbp - 0x30]; mov byte ptr [rax], dl; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000041c5f: movzx edx, byte ptr [rbp - 0xc]; mov byte ptr [rax + 0x77], dl; nop; pop rbp; ret; 
0x0000000000026eb4: movzx edx, dx; mov esi, edx; mov rdi, rax; call 0x38554; leave; ret; 
0x0000000000043bb8: movzx edx, word ptr [rbp - 0x1a]; mov esi, edx; mov rdi, rax; call rcx; 
0x0000000000038a8a: movzx edx, word ptr [rbp - 0x2c]; mov esi, edx; mov rdi, rax; call rcx; 
0x000000000002ac53: mul dword ptr [rdi - 0x74b70001]; call 0xffffffffe05837a7; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x0000000000029d75: neg dword ptr [rdi - 0x76b70001]; ret 0x8d48; 
0x0000000000029b85: neg dword ptr [rsi - 0x76b70001]; ret 0x8b48; 
0x0000000000023ed3: nop dword ptr [rax + rax]; ret; 
0x0000000000023e91: nop dword ptr [rax]; ret; 
0x0000000000023ed2: nop word ptr [rax + rax]; ret; 
0x000000000002f663: nop; adc al, byte ptr [rax]; add cl, cl; ret; 
0x0000000000037d84: nop; add byte ptr [rax], al; add cl, cl; ret; 
0x000000000002647a: nop; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000000418f4: nop; add rsp, 0x10; pop rbx; pop r12; pop rbp; ret; 
0x000000000003acdb: nop; add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x0000000000024d5d: nop; leave; ret; 
0x000000000003aae7: nop; mov eax, 0; leave; ret; 
0x000000000003087a: nop; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000027c5c: nop; mov eax, 1; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000025351: nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000258e0: nop; nop; leave; ret; 
0x000000000003eb11: nop; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000026cb9: nop; nop; pop rbp; ret; 
0x0000000000024ec6: nop; pop rbp; ret; 
0x000000000003e4e2: nop; ret 0xfffe; 
0x000000000002f5e6: not byte ptr [rcx]; add byte ptr [rax], al; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002ff91: not byte ptr [rip + 0x48900000]; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000024db3: not eax; pop rbp; ret; 
0x000000000002ee86: or al, 0; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000024d02: or al, 0; add byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x00000000000329d1: or al, 0; add cl, cl; ret; 
0x0000000000040c79: or al, 0x89; ret 0x8b48; 
0x0000000000040d0a: or al, 0x89; ret 0xb60f; 
0x0000000000044b22: or al, 0x89; ror byte ptr [rax + 0xf], 0xaf; ror byte ptr [r8 - 0x77], 1; ret 0x8b48; 
0x0000000000032b5c: or al, 0xb; add byte ptr [rax], al; leave; ret; 
0x0000000000025eb8: or al, 3; add byte ptr [rax], al; leave; ret; 
0x000000000002a59d: or al, byte ptr [ebx]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000002ebac: or al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000032c03: or al, byte ptr [rax]; add cl, cl; ret; 
0x000000000002a59e: or al, byte ptr [rbx]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000003c172: or al, byte ptr [rbx]; add byte ptr [rax], al; leave; ret; 
0x000000000003b982: or al, byte ptr [rsi + rdi*8 + 0x5d8b48ff]; clc; leave; ret; 
0x000000000002bf02: or bh, byte ptr [rdi + rdi*8 - 1]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000026c84: or bh, ch; nop; pop rbp; ret; 
0x0000000000043051: or bh, dh; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000002a262: or bl, byte ptr [rbx - 0x76b70001]; ret 0x8d48; 
0x000000000003acda: or byte ptr [rax + 0x20c48348], dl; pop rbx; pop r12; pop rbp; ret; 
0x000000000003324e: or byte ptr [rax + rax], al; add cl, cl; ret; 
0x0000000000023007: or byte ptr [rax - 0x75], cl; add eax, 0x37fd9; test rax, rax; je 0x23016; call rax; 
0x0000000000026c7d: or byte ptr [rax - 0x75], cl; clc; mov byte ptr [rax + 0xa], 0xfd; nop; pop rbp; ret; 
0x00000000000420f7: or byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x75]; adc byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x0000000000039564: or byte ptr [rax - 0x76b70002], ch; ret 0x8d48; 
0x0000000000027c11: or byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000032988: or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000003b2b5: or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000003b2a6: or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003fc7e: or byte ptr [rax], al; add byte ptr [rax], al; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000033934: or byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; setne al; leave; ret; 
0x0000000000032da3: or byte ptr [rax], al; add cl, cl; ret; 
0x0000000000032be6: or byte ptr [rax], cl; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000032e10: or byte ptr [rax], r8b; add cl, cl; ret; 
0x000000000002f822: or byte ptr [rbx], dl; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000028d79: or byte ptr [rcx], cl; fmul dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000032c40: or byte ptr [rdx - 0x366f0001], dh; ret; 
0x0000000000029c74: or byte ptr [rsi - 0x76b70001], bl; ret 0x8d48; 
0x0000000000029272: or ch, byte ptr [rax - 0x76b70001]; ret 0x8d48; 
0x0000000000038e22: or ch, byte ptr [rbp - 0x76b70002]; ret 0x8d48; 
0x000000000003264c: or ch, byte ptr [rcx + 0x4890ffff]; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000038f62: or ch, byte ptr [rsi - 0x76b70002]; ret 0x8d48; 
0x0000000000031ddd: or cl, byte ptr [rax - 0x74b70001]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000026c83: or dil, bpl; nop; pop rbp; ret; 
0x000000000003d7e3: or dword ptr [rax - 2], esp; dec dword ptr [rax - 0x77]; ret 0xb70f; 
0x000000000002eb1a: or dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000032ca9: or dword ptr [rax], eax; add cl, cl; ret; 
0x000000000002e973: or dword ptr [rcx - 1], edx; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002ba77: or eax, 0x40; leave; ret; 
0x000000000002f568: or eax, 0x48000012; mov edi, eax; call 0x307a4; leave; ret; 
0x000000000002efaa: or eax, 0x89480000; ret 0x8b48; 
0x000000000002cfe3: or eax, 0x9000014c; leave; ret; 
0x0000000000031ef1: or eax, 0xb8900000; add byte ptr [rax], al; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000262db: or eax, 0xc9000002; ret; 
0x0000000000031e13: or eax, 0xc9900000; ret; 
0x000000000002aeff: or eax, 0xc9ffff8c; ret; 
0x000000000002ecd0: or eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000032a97: or eax, dword ptr [rax]; add cl, cl; ret; 
0x0000000000024da0: or eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000028d7a: or eax, ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002815a: or ecx, dword ptr [rcx]; ret 0x8b48; 
0x000000000002e871: or edx, dword ptr [rdx - 1]; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000030d0f: or edx, dword ptr [rsi]; add byte ptr [rax], al; leave; ret; 
0x00000000000281e8: or esi, dword ptr [rcx]; ret 0x8b48; 
0x0000000000043426: or esi, edi; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x00000000000281a1: or esp, dword ptr [rcx]; ret 0x8b48; 
0x000000000002f549: out 0x11, al; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000028383: out 0x31, al; ret 0xb70f; 
0x00000000000283a9: out 0x89, al; ret 0x8b48; 
0x0000000000031e39: out 0xd, eax; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000034817: out 0xe8, eax; ret; 
0x000000000002a655: out 0xff, eax; dec dword ptr [rax - 0x75]; clc; leave; ret; 
0x0000000000031c6a: out 0xff, eax; dec dword ptr [rax - 0x77]; ret; 
0x0000000000033a3a: out 1, al; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000027628: out 1, eax; add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x000000000002c7c3: out 1, eax; add byte ptr [rax], al; leave; ret; 
0x0000000000026145: out 2, al; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000025b00: out 3, eax; add byte ptr [rax], al; nop; leave; ret; 
0x000000000002c02c: out 4, al; add byte ptr [rax], al; nop; leave; ret; 
0x00000000000372f4: out dx, al; add dword ptr [rax], eax; add cl, cl; ret; 
0x0000000000031b6a: out dx, al; and byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000044cc7: out dx, al; std; dec ecx; ret; 
0x000000000002fa97: out dx, eax; adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000026020: out dx, eax; add al, byte ptr [rax]; add cl, cl; ret; 
0x0000000000041e50: out dx, eax; add eax, 0x89480000; ror dword ptr [rax - 0x75], 0x45; ror byte ptr [rax - 0x77], 1; ret 0x8948; 
0x000000000003ca35: out dx, eax; mov ch, 0; add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x000000000003b392: outsb dx, byte ptr [rsi]; or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000024509: outsb dx, byte ptr [rsi]; ret 0x8948; 
0x0000000000044ddf: outsb dx, byte ptr [rsi]; ret 0xc3c9; 
0x0000000000039796: outsb dx, byte ptr [rsi]; sbb byte ptr [rdx], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000003d76d: packsswb mm7, mm6; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000033731: pop qword ptr [rcx]; add byte ptr [rax], al; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000002de42: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000002be4a: pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000036e41: pop r12; pop r13; pop rbp; ret; 
0x0000000000024d06: pop r12; pop rbp; ret; 
0x000000000002de44: pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000002be4c: pop r13; pop r14; pop rbp; ret; 
0x0000000000036e43: pop r13; pop rbp; ret; 
0x000000000002de46: pop r14; pop r15; pop rbp; ret; 
0x000000000002be4e: pop r14; pop rbp; ret; 
0x000000000002de48: pop r15; pop rbp; ret; 
0x0000000000026504: pop rax; add dword ptr [rax], eax; add cl, cl; ret; 
0x0000000000038924: pop rax; mov cl, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000026839: pop rax; mov rdi, rax; call 0x23dd0; nop; leave; ret; 
0x0000000000033885: pop rbp; call 0x8673; dec dword ptr [rax - 0x77]; add edx, dword ptr [rax - 0x7a274b8]; leave; ret; 
0x0000000000025354: pop rbp; clc; leave; ret; 
0x000000000003841f: pop rbp; mov dh, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002de45: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x000000000002be4d: pop rbp; pop r14; pop rbp; ret; 
0x0000000000036e44: pop rbp; pop rbp; ret; 
0x0000000000023f13: pop rbp; ret; 
0x00000000000425c8: pop rbx; add al, 0; add byte ptr [rax + 0x39], cl; fmul dword ptr [r15]; xchg eax, edi; ret; 
0x000000000002bc71: pop rbx; add al, 0; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002be49: pop rbx; pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000036e40: pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000024d05: pop rbx; pop r12; pop rbp; ret; 
0x0000000000044830: pop rcx; shl dword ptr [rsi + 0xf], 0x7e; ret 0x8d48; 
0x000000000003ff1d: pop rdi; cmp edi, esi; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003c22d: pop rdi; js 0x3c22e; dec ecx; ret; 
0x0000000000038aad: pop rdi; mov al, 0xfe; dec ecx; ret; 
0x000000000003b383: pop rdi; or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002de49: pop rdi; pop rbp; ret; 
0x0000000000038812: pop rdx; mov ch, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000027592: pop rdx; ret 0xffff; 
0x0000000000031cfc: pop rdx; sbb dword ptr [rax], eax; add cl, cl; ret; 
0x000000000002fe44: pop rsi; adc eax, 0xc9900000; ret; 
0x000000000002c844: pop rsi; add al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; add cl, cl; ret; 
0x000000000004171e: pop rsi; and edi, esi; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000031af5: pop rsi; call 0xffffffff894c1afa; ret; 
0x000000000002de47: pop rsi; pop r15; pop rbp; ret; 
0x000000000002be4f: pop rsi; pop rbp; ret; 
0x000000000002b681: pop rsp; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000312fa: pop rsp; and eax, dword ptr [rax]; add cl, cl; ret; 
0x000000000002de43: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000002be4b: pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000036e42: pop rsp; pop r13; pop rbp; ret; 
0x0000000000024d07: pop rsp; pop rbp; ret; 
0x000000000002cf23: popfq; add qword ptr [rax], rax; nop; leave; ret; 
0x0000000000023f0e: popfq; jae 0x23f14; add byte ptr [rcx], al; pop rbp; ret; 
0x00000000000320aa: push -0x36000053; ret; 
0x00000000000321f2: push -0x36000054; ret; 
0x000000000003233a: push -0x36000055; ret; 
0x00000000000331ee: push -0x36fffffc; ret; 
0x000000000002669c: push -0x70000000; leave; ret; 
0x000000000002d532: push -0x76b70001; ret 0x8d48; 
0x000000000003d180: push -0x76b70002; ret 0x8d48; 
0x0000000000043d93: push -2; dec dword ptr [rax + 0x39]; ret; 
0x000000000003d077: push -2; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000043cf6: push -2; dec dword ptr [rdi]; mov dh, 0; leave; ret; 
0x0000000000044a06: push 0xf660000; outsb dx, byte ptr [rsi]; ret 0x8948; 
0x000000000003c9ba: push 0xffffec5; mov dh, 0xc0; leave; ret; 
0x0000000000040d56: push 0xfffffff; mov bh, 0x40; jo 0x40cdf; hlt; add al, 0x89; ret 0x8b48; 
0x0000000000032eec: push 7; add byte ptr [rax], al; leave; ret; 
0x000000000004210c: push rax; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x00000000000283a4: push rax; adc cl, byte ptr [rdi]; mov bh, 0x45; out 0x89, al; ret 0x8b48; 
0x0000000000044d55: push rax; add al, 0x90; pop rbp; ret; 
0x0000000000033406: push rax; add al, byte ptr [rax]; add cl, cl; ret; 
0x0000000000043879: push rax; add byte ptr [rax], al; add cl, cl; ret; 
0x000000000003eb0d: push rax; cmp al, 0xeb; add dword ptr [rax + 0x5d8b4890], edx; clc; leave; ret; 
0x00000000000273b1: push rax; dec dword ptr [rcx + 0x1c001d0]; ret 0x6348; 
0x0000000000041c64: push rax; ja 0x41bf7; pop rbp; ret; 
0x00000000000419bf: push rax; jb 0x41952; pop rbp; ret; 
0x0000000000041a32: push rax; jnp 0x419c5; pop rbp; ret; 
0x0000000000041c44: push rax; jo 0x41bd7; leave; ret; 
0x0000000000043f04: push rax; mov rdx, qword ptr [rdx]; add rdx, 0x30; mov rdx, qword ptr [rdx]; mov rdi, rax; call rdx; 
0x000000000004465f: push rax; mov rdx, qword ptr [rdx]; add rdx, 0x38; mov rdx, qword ptr [rdx]; mov rdi, rax; call rdx; 
0x0000000000038002: push rax; nop; leave; ret; 
0x00000000000420f6: push rax; or byte ptr [rax - 0x75], cl; fmul dword ptr [r8 - 0x75]; adc byte ptr [rax - 0x75], cl; ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x000000000002efa9: push rax; or eax, 0x89480000; ret 0x8b48; 
0x000000000003d9ff: push rax; sbb al, 0x90; pop rbp; ret; 
0x0000000000039cf7: push rax; sbb byte ptr [rax - 0x75], cl; clc; mov rdi, rax; call rdx; 
0x0000000000044a2c: push rax; std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000037ffe: push rbp; call 0x4854094c; nop; leave; ret; 
0x000000000002b516: push rbp; call 0x48d13e64; mov edi, eax; call 0x2b60f; leave; ret; 
0x000000000003fdc0: push rbp; call 0x6046870e; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003beeb: push rbp; call 0xffffffff90144839; leave; ret; 
0x000000000003c10f: push rbp; call 0xffffffff90144a5d; leave; ret; 
0x0000000000024dde: push rbp; clc; mov dword ptr [rdx], eax; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000002bfad: push rbp; clc; mov qword ptr [rdx + 8], rax; nop; leave; ret; 
0x000000000002b655: push rbp; clc; mov rax, qword ptr [rbp - 0x10]; add rax, rdx; leave; ret; 
0x000000000002b598: push rbp; clc; mov rax, qword ptr [rbp - 0x28]; add rax, rdx; leave; ret; 
0x0000000000038a7a: push rbp; fmul dword ptr [rax - 0x75]; push rdx; xor byte ptr [rax - 0x75], cl; adc cl, byte ptr [rax - 0x7d]; ret 0x4818; 
0x0000000000038ff1: push rbp; fmul dword ptr [rax - 0x75]; push rdx; xor byte ptr [rax - 0x75], cl; adc cl, byte ptr [rax - 0x7d]; ret 0x4c10; 
0x0000000000038a5a: push rbp; fmul dword ptr [rax - 0x7d]; ret 0x4818; 
0x0000000000043ec6: push rbp; fmul dword ptr [rax - 0x7d]; ret 0x4820; 
0x000000000003e478: push rbp; fmul dword ptr [rax - 0x7d]; ret 0x4858; 
0x000000000003e414: push rbp; fmul dword ptr [rax - 0x7f]; ret 0x90; 
0x0000000000041c61: push rbp; hlt; mov byte ptr [rax + 0x77], dl; nop; pop rbp; ret; 
0x0000000000037f9c: push rbp; hlt; mov dword ptr [rax], edx; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000028d62: push rbp; in al, 0x83; ret 0xf01; 
0x000000000003975c: push rbp; in al, dx; mov byte ptr [rax], dl; nop; leave; ret; 
0x000000000003d44c: push rbp; in al, dx; mov dword ptr [rax + 0x10], edx; nop; pop rbp; ret; 
0x0000000000038827: push rbp; mov dl, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000028e80: push rbp; mov rbp, rsp; mov dword ptr [rbp - 4], edi; mov eax, dword ptr [rbp - 4]; pop rbp; ret; 
0x000000000002bb1e: push rbp; mov rbp, rsp; mov eax, 0; pop rbp; ret; 
0x000000000002a8f1: push rbp; mov rbp, rsp; mov eax, 1; pop rbp; ret; 
0x0000000000028f40: push rbp; mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov eax, 1; pop rbp; ret; 
0x0000000000025440: push rbp; mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000002cb98: push rbp; mov rbp, rsp; mov qword ptr [rbp - 8], rdi; movabs rax, 0x1fffffffffffffff; pop rbp; ret; 
0x000000000003c98a: push rbp; mov rbp, rsp; mov qword ptr [rbp - 8], rdi; movabs rax, 0xfffffffffffffff; pop rbp; ret; 
0x0000000000025876: push rbp; mov rbp, rsp; mov qword ptr [rbp - 8], rdi; nop; pop rbp; ret; 
0x000000000002ebab: push rbp; or al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000043ed9: push rbp; ror byte ptr [rax - 0x74b76ff0], 1; pop rbp; clc; leave; ret; 
0x000000000002ae96: push rbp; ror byte ptr [rax - 0x75], 1; fmul dword ptr [r8 - 0x77]; ror dword ptr [rax - 0x77], 1; ret 0x8948; 
0x00000000000373ec: push rbx; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000003d23b: push rcx; imul edi, esi, -1; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002f6d9: push rdi; adc al, byte ptr [rax]; add byte ptr [rax], bh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003972a: push rdi; in al, 0; add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x0000000000038495: push rdi; mov bl, 0xfe; dec dword ptr [rax - 0x77]; ret; 
0x000000000002f849: push rdx; adc eax, dword ptr [rax]; add cl, cl; ret; 
0x0000000000031b46: push rdx; sldt word ptr [rax]; nop; leave; ret; 
0x0000000000038a7e: push rdx; xor byte ptr [rax - 0x75], cl; adc cl, byte ptr [rax - 0x7d]; ret 0x4818; 
0x0000000000038ff5: push rdx; xor byte ptr [rax - 0x75], cl; adc cl, byte ptr [rax - 0x7d]; ret 0x4c10; 
0x0000000000023e86: push rsi; jno 0x23e8c; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x0000000000038c16: push rsi; mov cl, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002ee85: push rsi; or al, 0; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000029226: push rsi; test al, 0xff; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002fba6: push rsp; adc al, 0; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000037d54: pushfq; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; clc; leave; ret; 
0x00000000000263a4: pushfq; add dword ptr [rax], eax; add cl, cl; ret; 
0x000000000002e9aa: rcl byte ptr [rax - 1], cl; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002505e: rcl byte ptr [rax], 0x48; mov edi, eax; call 0x24ff6; nop; leave; ret; 
0x0000000000033d9c: rcl byte ptr [rax], 0x48; mov edi, eax; call 0x33e0a; leave; ret; 
0x0000000000039de5: rcl dword ptr [rax - 0x7a274b8], cl; leave; ret; 
0x000000000002e59b: rcl dword ptr [rdi - 1], 1; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003d302: rcr byte ptr [rax], 0x48; mov edi, eax; call 0x3d4bc; nop; leave; ret; 
0x0000000000028f0c: rcr byte ptr [rax], 0x5d; ret; 
0x000000000003079d: rcr dword ptr [rax], 1; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000027b97: ret 0; 
0x00000000000274e0: ret 0x10a; 
0x000000000002d889: ret 0x14be; 
0x0000000000030100: ret 0x15; 
0x000000000002d827: ret 0x15be; 
0x000000000004460a: ret 0x169; 
0x0000000000030b98: ret 0x16; 
0x000000000002d370: ret 0x16be; 
0x0000000000028eb8: ret 0x17; 
0x000000000002d3cb: ret 0x17be; 
0x000000000002e6dc: ret 0x188; 
0x000000000002e5ba: ret 0x189; 
0x000000000002d64f: ret 0x1be; 
0x0000000000043a42: ret 0x20be; 
0x0000000000024192: ret 0x214; 
0x000000000002fec2: ret 0x2a7; 
0x000000000002d2af: ret 0x2be; 
0x0000000000040a43: ret 0x307c; 
0x000000000002d6b0: ret 0x3be; 
0x0000000000042841: ret 0x3c74; 
0x00000000000272d2: ret 0x458b; 
0x000000000002d162: ret 0x460; 
0x000000000002572e: ret 0x4808; 
0x0000000000024492: ret 0x4810; 
0x0000000000038a5e: ret 0x4818; 
0x0000000000043b3a: ret 0x4820; 
0x00000000000402f1: ret 0x4828; 
0x0000000000040e19: ret 0x4830; 
0x0000000000044665: ret 0x4838; 
0x000000000003d34e: ret 0x4840; 
0x000000000003e47c: ret 0x4858; 
0x000000000003fdfa: ret 0x4878; 
0x000000000002d422: ret 0x4be; 
0x0000000000038ffc: ret 0x4c10; 
0x0000000000043d37: ret 0x4c28; 
0x000000000002d772: ret 0x5be; 
0x00000000000273b8: ret 0x6348; 
0x000000000002afcd: ret 0x673; 
0x00000000000273bb: ret 0x6948; 
0x000000000002d711: ret 0x6be; 
0x000000000002d30f: ret 0x7be; 
0x0000000000028721: ret 0x7d80; 
0x0000000000024a85: ret 0x858b; 
0x000000000002450a: ret 0x8948; 
0x0000000000024e45: ret 0x8b48; 
0x000000000002b8f7: ret 0x8be; 
0x000000000002400f: ret 0x8d48; 
0x000000000003e418: ret 0x90; 
0x000000000002ad4b: ret 0x920f; 
0x000000000003bb45: ret 0x940f; 
0x0000000000039ca0: ret 0x950f; 
0x0000000000027598: ret 0xb60f; 
0x0000000000028385: ret 0xb70f; 
0x0000000000025647: ret 0xb848; 
0x000000000002d5ef: ret 0xbe; 
0x0000000000042359: ret 0xc35d; 
0x0000000000044de0: ret 0xc3c9; 
0x00000000000447d1: ret 0xd148; 
0x00000000000295ea: ret 0xe8; 
0x0000000000027880: ret 0xf01; 
0x00000000000447da: ret 0xf66; 
0x000000000002f273: ret 0xf; 
0x000000000003ee9a: ret 0xfe4b; 
0x000000000003ee30: ret 0xfe61; 
0x000000000003d16a: ret 0xfe69; 
0x000000000003d530: ret 0xfe7a; 
0x0000000000036b0a: ret 0xfecf; 
0x000000000003848a: ret 0xff09; 
0x00000000000447e3: ret 0xff3; 
0x000000000002e8ea: ret 0xff51; 
0x0000000000038bff: ret 0xfffe; 
0x0000000000027547: ret 0xffff; 
0x000000000002a372: ret 1; 
0x00000000000260b4: ret 2; 
0x0000000000025334: ret 3; 
0x000000000003ac1e: ret 7; 
0x000000000002301a: ret; 
0x00000000000307c0: retf 0x18; add cl, cl; ret; 
0x000000000004483c: retf 0xf66; outsb dx, byte ptr [rsi]; ret 0x8948; 
0x000000000003fbb2: retf 0xfe3e; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002b942: retf 0xff81; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000003a50e: retf 0xfff3; dec ecx; ret; 
0x00000000000241b2: retf 0xfff8; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000370f1: retf 0xfffe; mov rax, qword ptr [rbp - 0x58]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000043124: retf 1; add cl, cl; ret; 
0x00000000000254b4: retf 3; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000003bcf7: retf; add al, 0; add cl, cl; ret; 
0x000000000003727f: retf; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000000428ac: rol byte ptr [rax + rax], 1; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000029bcf: rol byte ptr [rbx - 0x3f7afd20], 0xf; xchg eax, ebp; ret 0x8b48; 
0x0000000000028799: rol byte ptr [rbx - 0x3f7afe20], 0xf; xchg eax, ebp; ret 0x8b48; 
0x0000000000025bea: rol byte ptr [rbx], 1; add byte ptr [rax], al; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000338e0: rol byte ptr [rcx], 0; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000002b421: rol byte ptr [rcx], 1; add byte ptr [rax], al; leave; ret; 
0x0000000000032c8c: rol byte ptr [rdi], 1; add byte ptr [rax], al; nop; leave; ret; 
0x000000000002b004: rol byte ptr [rdx], 0; add cl, cl; ret; 
0x0000000000042a21: rol byte ptr [rsi], 1; add byte ptr [rax], al; leave; ret; 
0x0000000000026d8d: rol cl, 0xe0; add cl, byte ptr [rcx]; ret 0x8b48; 
0x0000000000026d7d: rol cl, 0xe0; add ecx, dword ptr [rcx]; ret 0x8b48; 
0x000000000003c84b: rol dword ptr [rax], cl; add byte ptr [rax], al; leave; ret; 
0x0000000000037c61: rol dword ptr [rbp - 0x3f6bf040], cl; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003de59: rol dword ptr [rcx], 1; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000002ca01: rol dword ptr [rcx], 1; add byte ptr [rax], al; mov qword ptr [rbp - 0x18], rax; mov rax, qword ptr [rbp - 0x18]; leave; ret; 
0x000000000003734b: rol edi, 0xfe; dec ecx; ret; 
0x0000000000042101: ror byte ptr [r8 + 1], 1; ret 0x8b48; 
0x000000000002a7c8: ror byte ptr [r8 - 0x77], 1; ret 0x8948; 
0x0000000000044b28: ror byte ptr [r8 - 0x77], 1; ret 0x8b48; 
0x0000000000040597: ror byte ptr [r8 - 0x77], 1; ret 0xbe; 
0x000000000004060d: ror byte ptr [r8 - 0x77], 1; ror dword ptr [rax - 0x77], 1; ret 0xbe; 
0x000000000003da8b: ror byte ptr [rax + 0x5d90f045], 1; ret; 
0x0000000000044b24: ror byte ptr [rax + 0xf], 0xaf; ror byte ptr [r8 - 0x77], 1; ret 0x8b48; 
0x00000000000422bc: ror byte ptr [rax + 1], 0xd0; shl rax, 3; add rax, rcx; pop rbp; ret; 
0x0000000000043585: ror byte ptr [rax + 1], 0xd0; shl rax, 3; mov rdi, rax; call 0x23a90; leave; ret; 
0x000000000003c221: ror byte ptr [rax + 1], 0xd0; shl rax, 4; mov rdi, rax; call 0x23a90; leave; ret; 
0x0000000000042102: ror byte ptr [rax + 1], 1; ret 0x8b48; 
0x00000000000422b9: ror byte ptr [rax + 1], 1; ror byte ptr [rax + 1], 0xd0; shl rax, 3; add rax, rcx; pop rbp; ret; 
0x000000000002c8c8: ror byte ptr [rax - 0x3f], 1; clc; add cl, byte ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000043eda: ror byte ptr [rax - 0x74b76ff0], 1; pop rbp; clc; leave; ret; 
0x0000000000033ccd: ror byte ptr [rax - 0x75], 0x5d; clc; leave; ret; 
0x000000000003d9f9: ror byte ptr [rax - 0x75], 1; clc; mov dword ptr [rax + 0x1c], edx; nop; pop rbp; ret; 
0x00000000000337b8: ror byte ptr [rax - 0x75], 1; clc; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x000000000002ae97: ror byte ptr [rax - 0x75], 1; fmul dword ptr [r8 - 0x77]; ror dword ptr [rax - 0x77], 1; ret 0x8948; 
0x0000000000037c29: ror byte ptr [rax - 0x75], 1; pop rbp; clc; leave; ret; 
0x000000000002a7c9: ror byte ptr [rax - 0x77], 1; ret 0x8948; 
0x0000000000044b29: ror byte ptr [rax - 0x77], 1; ret 0x8b48; 
0x0000000000040598: ror byte ptr [rax - 0x77], 1; ret 0xbe; 
0x000000000004060e: ror byte ptr [rax - 0x77], 1; ror dword ptr [rax - 0x77], 1; ret 0xbe; 
0x0000000000025c17: ror byte ptr [rax - 0x7b], 0xc0; setne al; pop rbp; ret; 
0x00000000000250b2: ror byte ptr [rax], 0x48; mov edi, eax; call 0x25358; nop; leave; ret; 
0x0000000000039d8b: ror byte ptr [rax], 0x48; mov edi, eax; call 0x25f76; leave; ret; 
0x0000000000026292: ror byte ptr [rax], 0x48; mov edi, eax; call 0x2625c; nop; leave; ret; 
0x00000000000263e0: ror byte ptr [rax], 0x48; mov edi, eax; call 0x263aa; nop; leave; ret; 
0x0000000000032a96: ror byte ptr [rbx], cl; add byte ptr [rax], al; leave; ret; 
0x00000000000419b6: ror byte ptr [rcx + 0x458b48c2], 1; clc; mov word ptr [rax + 0x72], dx; nop; pop rbp; ret; 
0x000000000002945b: ror byte ptr [rcx - 0x2076b73a], 0xe8; sub ch, byte ptr [rax - 0x76b70001]; ret 0x8d48; 
0x000000000002941f: ror byte ptr [rcx - 0x2076b73a], 0xe8; test al, 0xff; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000026eb6: ror byte ptr [rcx - 0x3876b72a], cl; call 0x38554; leave; ret; 
0x0000000000032ca8: ror byte ptr [rcx], 0; add cl, cl; ret; 
0x00000000000394e1: ror byte ptr [rdi], 0x84; ret; 
0x000000000002836a: ror byte ptr [rdi], 0x94; ret 0x8b48; 
0x0000000000037c63: ror byte ptr [rdi], 0x94; ror byte ptr [rax - 0x75], 0x5d; clc; leave; ret; 
0x000000000002776e: ror byte ptr [rdi], 0x95; ret 0x8b48; 
0x0000000000025c14: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7b], 0xc0; setne al; pop rbp; ret; 
0x000000000002837f: ror byte ptr [rdi], 1; mov bh, 0x45; out 0x31, al; ret 0xb70f; 
0x000000000003fe3b: ror byte ptr [rdi], 1; mov dh, 0; leave; ret; 
0x0000000000040294: ror byte ptr [rdi], 1; mov dh, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003f848: ror byte ptr [rdi], 1; mov dh, 0; pop rbp; ret; 
0x0000000000028233: ror byte ptr [rdi], 1; mov dh, 0x45; loope 0x2823a; ret 0x8b48; 
0x000000000002b5a0: ror cl, 1; ret; 
0x0000000000039d01: ror cl, cl; ret; 
0x000000000002ef17: ror dword ptr [rax + rax], cl; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000002b696: ror dword ptr [rax - 0x75], 0x45; fmul dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000000273a8: ror dword ptr [rax - 0x75], 0x45; fmul dword ptr [rbx + 0x508d0440]; dec dword ptr [rcx + 0x1c001d0]; ret 0x6348; 
0x000000000002a7c5: ror dword ptr [rax - 0x75], 0x45; ror byte ptr [rax - 0x77], 1; ret 0x8948; 
0x0000000000043342: ror dword ptr [rax - 0x75], 1; clc; leave; ret; 
0x000000000002ae9e: ror dword ptr [rax - 0x77], 1; ret 0x8948; 
0x0000000000038380: ror dword ptr [rax - 0x77], 1; ret 0xbe; 
0x000000000002ce57: ror dword ptr [rcx + rax], cl; leave; ret; 
0x000000000002f283: ror dword ptr [rdi], 0; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000004230a: sahf; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000000431f4: sahf; add dword ptr [rax], eax; add cl, cl; ret; 
0x00000000000391de: sahf; test al, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002a9f4: sal byte ptr [rax + rbx*2 + 0x48], 0x8b; mov r8d, 0xe8c78948; cmp dword ptr [rdx - 0x76b70001], ebp; ret 0x8b48; 
0x0000000000023ecd: sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x0000000000043970: sal byte ptr [rbp - 0x4e], 0x48; mov eax, dword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000023e8c: sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x0000000000025726: sal byte ptr [rdi + rcx + 0x48], 0x8b; adc byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x0000000000023011: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000040f5c: sal byte ptr [rsp + rbp + 0xf], 0xb6; add r9b, 0xe0; add al, 0x89; ret 0x458b; 
0x00000000000247bc: sal dl, 0xff; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000403bb: sal dword ptr [rsi], 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000267d7: sar bh, cl; dec ecx; ret; 
0x000000000003dcd4: sar byte ptr [rax], 0x48; mov edi, eax; call 0x3d4bc; nop; leave; ret; 
0x000000000002762d: sar byte ptr [rsi], 1; jmp rax; 
0x000000000002d6aa: sar dh, 0xff; dec dword ptr [rax - 0x77]; ret 0x3be; 
0x0000000000037a35: sar dh, 0xff; mov rax, qword ptr [rbp - 0x28]; leave; ret; 
0x000000000002c056: sar eax, 2; pop rbp; ret; 
0x00000000000374ff: sar eax, 5; pop rbp; ret; 
0x000000000004031f: sar edi, 1; dec dword ptr [rdi]; mov dh, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000026877: sar edi, 1; dec ecx; ret; 
0x0000000000039d92: sar esi, 0xff; leave; ret; 
0x0000000000023ec0: sar esi, 1; je 0x23ed8; mov rax, qword ptr [rip + 0x37125]; test rax, rax; je 0x23ed8; jmp rax; 
0x000000000002c055: sar rax, 2; pop rbp; ret; 
0x00000000000374fe: sar rax, 5; pop rbp; ret; 
0x0000000000023ebf: sar rsi, 1; je 0x23ed8; mov rax, qword ptr [rip + 0x37125]; test rax, rax; je 0x23ed8; jmp rax; 
0x0000000000031a31: sbb al, 0; add cl, cl; ret; 
0x000000000003da00: sbb al, 0x90; pop rbp; ret; 
0x000000000002f18b: sbb al, 0xf; add byte ptr [rax], al; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x000000000003c142: sbb al, 3; add byte ptr [rax], al; leave; ret; 
0x00000000000257e7: sbb al, 3; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000031ba5: sbb al, byte ptr [rax]; add cl, cl; ret; 
0x000000000003811e: sbb byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000039cf8: sbb byte ptr [rax - 0x75], cl; clc; mov rdi, rax; call rdx; 
0x0000000000039cf8: sbb byte ptr [rax - 0x75], cl; clc; mov rdi, rax; call rdx; leave; ret; 
0x0000000000043234: sbb byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000030607: sbb byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002b816: sbb byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x0000000000030631: sbb byte ptr [rax], al; add byte ptr [rax], bh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000307c1: sbb byte ptr [rax], al; add cl, cl; ret; 
0x0000000000038d64: sbb byte ptr [rbp - 0x76b70002], ch; ret 0x8d48; 
0x000000000002e564: sbb byte ptr [rbp - 1], dl; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003ce73: sbb byte ptr [rbx + 0x41], 0x5c; pop rbp; ret; 
0x0000000000043600: sbb byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x0000000000024e70: sbb byte ptr [rcx - 0x3876b72a], cl; call 0x24db7; mov eax, dword ptr [rbp - 4]; leave; ret; 
0x0000000000039797: sbb byte ptr [rdx], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000002de6e: sbb byte ptr [rsi - 0x366f0001], cl; ret; 
0x0000000000041e18: sbb byte ptr [rsi], al; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000030630: sbb byte ptr es:[rax], al; add byte ptr [rax], bh; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030606: sbb byte ptr ss:[rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000042526: sbb dh, bh; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000004221d: sbb dh, bh; dec ecx; ret; 
0x00000000000447ce: sbb dword ptr [rax - 0x77], ecx; ret 0xd148; 
0x0000000000031cfd: sbb dword ptr [rax], eax; add cl, cl; ret; 
0x000000000002f8bf: sbb dword ptr [rbx], edx; add byte ptr [rax], al; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000029c13: sbb dword ptr [rdi - 0x76b70001], ebx; ret 0x8d48; 
0x000000000004295b: sbb dword ptr [rdi], eax; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000037134: sbb dword ptr [rdx], eax; add byte ptr [rax], al; leave; ret; 
0x000000000003c30d: sbb eax, 0x90000002; leave; ret; 
0x000000000002c8db: sbb eax, 0xc9000002; ret; 
0x000000000002c7f1: sbb eax, dword ptr [rdx]; add byte ptr [rax], al; leave; ret; 
0x000000000002ac91: sbb eax, dword ptr [rdx]; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000029211: sbb ebp, dword ptr [rcx - 0x76b70001]; ret 0x8d48; 
0x0000000000030913: sbb ebx, dword ptr [rax]; add byte ptr [rax], al; leave; ret; 
0x0000000000038321: sbb esi, dword ptr [rdi - 0x366f0002]; ret; 
0x0000000000042180: sbb esi, edi; dec ecx; ret; 
0x0000000000026972: scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000004392d: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000025654: scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000042358: scasd eax, dword ptr [rdi]; ret 0xc35d; 
0x000000000002a3bd: scasd eax, dword ptr [rdi]; ret 1; 
0x0000000000044b27: scasd eax, dword ptr [rdi]; ror byte ptr [r8 - 0x77], 1; ret 0x8b48; 
0x000000000003917d: scasd eax, dword ptr [rdi]; test eax, 0x8948fffe; ret 0x8d48; 
0x00000000000253c9: sete al; leave; ret; 
0x0000000000033ccb: sete al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000025c12: sete al; movzx eax, al; test rax, rax; setne al; pop rbp; ret; 
0x000000000002b3ed: sete al; pop rbp; ret; 
0x000000000003393b: setne al; leave; ret; 
0x0000000000042258: setne al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000025c1b: setne al; pop rbp; ret; 
0x0000000000041a2a: setne dl; mov rax, qword ptr [rbp - 8]; mov byte ptr [rax + 0x7b], dl; nop; pop rbp; ret; 
0x0000000000031186: shl byte ptr [rax + rax], 1; add cl, cl; ret; 
0x0000000000024fe8: shl byte ptr [rax], 0x48; mov edi, eax; call 0x25170; nop; leave; ret; 
0x000000000003ed3c: shl byte ptr [rax], 0xc9; ret; 
0x00000000000392ac: shl byte ptr [rdi - 0x76b70002], 1; ret 0x8d48; 
0x0000000000028343: shl byte ptr [rsi + 0x2b], 0x45; in al, 0x89; ret 0x8b48; 
0x0000000000044831: shl dword ptr [rsi + 0xf], 0x7e; ret 0x8d48; 
0x000000000002be6e: shl eax, 2; add rax, rdx; pop rbp; ret; 
0x000000000002ca67: shl eax, 2; mov rdi, rax; call 0x23a90; leave; ret; 
0x00000000000422c1: shl eax, 3; add rax, rcx; pop rbp; ret; 
0x000000000003c979: shl eax, 3; mov rdi, rax; call 0x23a90; leave; ret; 
0x000000000003c226: shl eax, 4; mov rdi, rax; call 0x23a90; leave; ret; 
0x0000000000028d77: shl eax, 8; or eax, ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002be6d: shl rax, 2; add rax, rdx; pop rbp; ret; 
0x000000000002ca66: shl rax, 2; mov rdi, rax; call 0x23a90; leave; ret; 
0x00000000000422c0: shl rax, 3; add rax, rcx; pop rbp; ret; 
0x000000000003c978: shl rax, 3; mov rdi, rax; call 0x23a90; leave; ret; 
0x000000000003c225: shl rax, 4; mov rdi, rax; call 0x23a90; leave; ret; 
0x00000000000433c1: shr byte ptr [rip - 0x76b70002], cl; ret 0x8b48; 
0x000000000003074c: shr ebp, 0xff; dec dword ptr [rax - 0x77]; ret; 
0x000000000003fe36: sldt word ptr [rax]; add rax, rdx; movzx eax, byte ptr [rax]; leave; ret; 
0x00000000000326b9: sldt word ptr [rax]; leave; ret; 
0x000000000002f18c: sldt word ptr [rax]; mov qword ptr [rax + 0x10], rdx; nop; leave; ret; 
0x0000000000031b47: sldt word ptr [rax]; nop; leave; ret; 
0x0000000000031acd: sldt word ptr [rax]; nop; mov eax, 0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031a11: sldt word ptr [rax]; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000031c69: stc; out 0xff, eax; dec dword ptr [rax - 0x77]; ret; 
0x00000000000440b7: stc; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002fa46: std; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000033a0f: std; add bh, bh; dec ecx; ret; 
0x000000000002d079: std; call 0xffffffffc993d07e; ret; 
0x0000000000044ae9: std; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000043faa: std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000444e8: std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000044cc8: std; dec ecx; ret; 
0x0000000000044dda: std; jmp qword ptr [rsi + 0x48]; 
0x0000000000026c85: std; nop; pop rbp; ret; 
0x000000000003d17f: std; push -0x76b70002; ret 0x8d48; 
0x0000000000043ff5: std; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000043591: sti; add al, 0xfe; dec ecx; ret; 
0x0000000000043fa9: sti; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000043fd2: stosb byte ptr [rdi], al; cli; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000042355: stosb byte ptr [rdi], al; imul rax, rdx; pop rbp; ret; 
0x00000000000386d2: stosb byte ptr [rdi], al; mov bl, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000042354: stosb byte ptr [rdi], al; stosb byte ptr [rdi], al; imul rax, rdx; pop rbp; ret; 
0x0000000000042353: stosb byte ptr [rdi], al; stosb byte ptr [rdi], al; stosb byte ptr [rdi], al; imul rax, rdx; pop rbp; ret; 
0x0000000000039282: stosb byte ptr [rdi], al; test al, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000025d0b: stosd dword ptr [rdi], eax; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000444d1: stosd dword ptr [rdi], eax; cmc; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003fed1: stosd dword ptr [rdi], eax; cmp edi, esi; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003b80b: stosd dword ptr [rdi], eax; test al, 0xfe; dec dword ptr [rax - 0x77]; ret; 
0x0000000000042f0e: sub ah, byte ptr [rip - 0x76b70002]; ret; 
0x0000000000030fd9: sub al, 0; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002fd73: sub al, 0x15; add byte ptr [rax], al; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000030d2a: sub al, 0x29; add byte ptr [rax], al; leave; ret; 
0x0000000000040f5e: sub al, 0xf; mov dh, 0x45; add cl, 0xe0; add al, 0x89; ret 0x458b; 
0x0000000000038306: sub al, 2; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000003332a: sub al, 3; add byte ptr [rax], al; leave; ret; 
0x0000000000030bd7: sub al, byte ptr [rax]; add cl, cl; ret; 
0x000000000002c750: sub al, byte ptr [rdx]; add byte ptr [rax], al; leave; ret; 
0x00000000000433b8: sub byte ptr [rax - 0x75], cl; call 0xffffffffe8cbbd09; shr byte ptr [rip - 0x76b70002], cl; ret 0x8b48; 
0x0000000000029a54: sub byte ptr [rax - 0x76b70001], ah; ret 0x8b48; 
0x0000000000031435: sub byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002a8e0: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x2a8eb; call 0x23b10; leave; ret; 
0x000000000002aef8: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x2af03; call 0x23b10; leave; ret; 
0x000000000002af61: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x2af6c; call 0x23b10; leave; ret; 
0x000000000002b07f: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x2b08a; call 0x23b10; leave; ret; 
0x000000000002b48b: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x2b496; call 0x23b10; leave; ret; 
0x000000000002c0c3: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x2c0ce; call 0x23b10; leave; ret; 
0x000000000002c113: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x2c11e; call 0x23b10; leave; ret; 
0x000000000002c201: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x2c20c; call 0x23b10; leave; ret; 
0x000000000002c2a1: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x2c2ac; call 0x23b10; leave; ret; 
0x000000000002c3bc: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x2c3c7; call 0x23b10; leave; ret; 
0x000000000002cb55: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x2cb60; call 0x23b10; leave; ret; 
0x000000000003361d: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x33628; call 0x23b10; leave; ret; 
0x0000000000033a08: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x33a13; call 0x23b10; leave; ret; 
0x0000000000037344: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x3734f; call 0x23b10; leave; ret; 
0x000000000003748d: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x37498; call 0x23b10; leave; ret; 
0x000000000003758d: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x37598; call 0x23b10; leave; ret; 
0x0000000000037cf1: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x37cfc; call 0x23b10; leave; ret; 
0x0000000000037de7: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x37df2; call 0x23b10; leave; ret; 
0x0000000000038aa6: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x38ab1; call 0x23b10; leave; ret; 
0x000000000003901e: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x39029; call 0x23b10; leave; ret; 
0x000000000003991c: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x39927; call 0x23b10; leave; ret; 
0x000000000003a0e6: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x3a0f1; call 0x23b10; leave; ret; 
0x000000000003a131: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x3a13c; call 0x23b10; leave; ret; 
0x000000000003a1c6: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x3a1d1; call 0x23b10; leave; ret; 
0x000000000003a211: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x3a21c; call 0x23b10; leave; ret; 
0x000000000003aa05: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x3aa10; call 0x23b10; leave; ret; 
0x000000000003ab73: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x3ab7e; call 0x23b10; leave; ret; 
0x000000000003aef5: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x3af00; call 0x23b10; leave; ret; 
0x000000000003b1c3: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x3b1ce; call 0x23b10; leave; ret; 
0x000000000003bbc2: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x3bbcd; call 0x23b10; leave; ret; 
0x000000000003bcc2: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x3bccd; call 0x23b10; leave; ret; 
0x0000000000041bbb: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x41bc6; call 0x23b10; leave; ret; 
0x0000000000042178: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x42183; call 0x23b10; leave; ret; 
0x00000000000421c5: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x421d0; call 0x23b10; leave; ret; 
0x0000000000042215: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x42220; call 0x23b10; leave; ret; 
0x0000000000042427: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x42432; call 0x23b10; leave; ret; 
0x000000000004292a: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x42935; call 0x23b10; leave; ret; 
0x0000000000042a83: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x42a8e; call 0x23b10; leave; ret; 
0x0000000000042c1f: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x42c2a; call 0x23b10; leave; ret; 
0x0000000000042caa: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x42cb5; call 0x23b10; leave; ret; 
0x0000000000042d35: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x42d40; call 0x23b10; leave; ret; 
0x00000000000437ed: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x437f8; call 0x23b10; leave; ret; 
0x000000000004383d: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x43848; call 0x23b10; leave; ret; 
0x0000000000044cbf: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x44cca; call 0x23b10; leave; ret; 
0x0000000000043743: sub byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x0000000000025806: sub byte ptr [rbx], al; add byte ptr [rax], al; nop; leave; ret; 
0x000000000002a154: sub byte ptr [rcx - 0x76b70001], bl; ret 0x8d48; 
0x000000000003f154: sub byte ptr [rcx - 2], cl; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002ce2b: sub byte ptr [rcx], al; add byte ptr [rax], al; mov rdi, rax; call 0x41a38; leave; ret; 
0x000000000002ce4f: sub byte ptr [rcx], al; add byte ptr [rax], al; mov rdi, rax; call 0x41b2e; leave; ret; 
0x000000000002cebb: sub byte ptr [rcx], al; add byte ptr [rax], al; mov rdi, rax; call 0x41bc8; leave; ret; 
0x00000000000316bf: sub byte ptr [rdi - 0x366f0001], cl; ret; 
0x0000000000030bd6: sub byte ptr [rdx], 0; add cl, cl; ret; 
0x00000000000406e4: sub byte ptr [rsi + rdi*8], dh; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000030062: sub byte ptr [rsi], dl; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000029462: sub ch, byte ptr [rax - 0x76b70001]; ret 0x8d48; 
0x0000000000029042: sub ch, byte ptr [rbp - 0x76b70001]; ret 0x8d48; 
0x00000000000334bd: sub dh, byte ptr [rcx - 1]; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000002aba1: sub dword ptr [rax - 0x75], ecx; mov r8d, 0xe8c78948; mov gs, word ptr [rax - 0x76b70001]; ret 0x8b48; 
0x00000000000312c1: sub dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000030d2b: sub dword ptr [rax], eax; add cl, cl; ret; 
0x0000000000029d53: sub dword ptr [rbp - 0x76b70001], ebx; ret 0x8d48; 
0x0000000000026429: sub dword ptr [rcx], eax; add byte ptr [rax], al; leave; ret; 
0x0000000000029743: sub dword ptr [rsi - 0x76b70001], esp; ret 0x8d48; 
0x000000000002eb45: sub eax, 0x4800000a; mov dword ptr [rax + 0x10], edx; nop; leave; ret; 
0x0000000000030e65: sub eax, 0x89480000; ret; 
0x00000000000433c2: sub eax, 0x8948fffe; ret 0x8b48; 
0x000000000002c899: sub eax, 0xc9000002; ret; 
0x000000000003114d: sub eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000030a83: sub eax, dword ptr [rax]; add cl, cl; ret; 
0x000000000002b60a: sub eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000374fb: sub eax, dword ptr [rbp - 8]; sar rax, 5; pop rbp; ret; 
0x000000000002a8b3: sub eax, ecx; pop rbp; ret; 
0x000000000002c053: sub eax, ecx; sar rax, 2; pop rbp; ret; 
0x0000000000037c28: sub eax, edx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002ade1: sub ecx, dword ptr [rbp - 0x74b70001]; pop rbp; clc; leave; ret; 
0x00000000000328d3: sub ecx, dword ptr [rcx]; add byte ptr [rax], al; nop; leave; ret; 
0x000000000003ce71: sub esp, -0x80; pop rbx; pop r12; pop rbp; ret; 
0x0000000000044de9: sub esp, 8; add rsp, 8; ret; 
0x0000000000023005: sub esp, 8; mov rax, qword ptr [rip + 0x37fd9]; test rax, rax; je 0x23016; call rax; 
0x0000000000029851: sub esp, dword ptr [rdx - 0x76b70001]; ret 0xb60f; 
0x000000000002b609: sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000374fa: sub rax, qword ptr [rbp - 8]; sar rax, 5; pop rbp; ret; 
0x000000000002a8b2: sub rax, rcx; pop rbp; ret; 
0x000000000002c052: sub rax, rcx; sar rax, 2; pop rbp; ret; 
0x0000000000037c27: sub rax, rdx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000003ce70: sub rsp, -0x80; pop rbx; pop r12; pop rbp; ret; 
0x0000000000044de8: sub rsp, 8; add rsp, 8; ret; 
0x0000000000023004: sub rsp, 8; mov rax, qword ptr [rip + 0x37fd9]; test rax, rax; je 0x23016; call rax; 
0x00000000000425db: sysenter; 
0x00000000000370f7: test al, 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000039193: test al, 0xfe; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003b80c: test al, 0xfe; dec dword ptr [rax - 0x77]; ret; 
0x0000000000032713: test al, 0xff; call qword ptr [rax - 0x7a274b8]; leave; ret; 
0x000000000002abab: test al, 0xff; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000029227: test al, 0xff; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000251d0: test al, 2; add byte ptr [rax], al; nop; leave; ret; 
0x000000000004396f: test al, al; jne 0x43925; mov rax, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000043fa8: test bl, bh; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003dda8: test byte ptr [rbp - 2], bl; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000392f8: test byte ptr [rdi - 0x76b70002], ah; ret 0x8d48; 
0x0000000000030b63: test byte ptr [rdx - 0x74b70001], bl; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x0000000000031ef0: test byte ptr [rip - 0x47700000], cl; add byte ptr [rax], al; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000042d62: test byte ptr [rsi], 0xff; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000003b983: test dh, bh; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000002ccc2: test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; fmul dword ptr [r8 + 1]; ror cl, 1; ret; 
0x000000000003ceb9: test dword ptr [rbx - 1], ebp; call qword ptr [rax - 0x7a274b8]; leave; ret; 
0x000000000003dc07: test dword ptr [rcx - 2], esp; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000002e7f7: test dword ptr [rdx - 1], edx; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000295e4: test dword ptr [rsi - 0x17000003], ebx; ret 0xe8; 
0x0000000000039dd3: test dword ptr [rsi - 0x76b70001], ebx; ret 0x8b48; 
0x0000000000042991: test dword ptr [rsi], 0xc9900000; ret; 
0x0000000000032587: test eax, 0x4890ffff; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x00000000000390c6: test eax, 0x8948fffe; ret 0x8d48; 
0x0000000000038eae: test eax, 0x8948fffe; ret 0xb70f; 
0x0000000000029158: test eax, 0x8948ffff; ret 0x8b48; 
0x00000000000290f7: test eax, 0x8948ffff; ret 0x8d48; 
0x000000000002fcdf: test eax, 0xb8000014; add byte ptr [rax], al; add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000023010: test eax, eax; je 0x23016; call rax; 
0x0000000000023010: test eax, eax; je 0x23016; call rax; add rsp, 8; ret; 
0x0000000000023e8b: test eax, eax; je 0x23e98; jmp rax; 
0x0000000000023ecc: test eax, eax; je 0x23ed8; jmp rax; 
0x00000000000253c7: test eax, eax; sete al; leave; ret; 
0x0000000000037c62: test eax, eax; sete al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000398b3: test eax, eax; sete al; pop rbp; ret; 
0x0000000000033939: test eax, eax; setne al; leave; ret; 
0x0000000000025c19: test eax, eax; setne al; pop rbp; ret; 
0x00000000000442e7: test edx, edi; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000275b5: test esp, 0x1ebffff; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000002300f: test rax, rax; je 0x23016; call rax; 
0x000000000002300f: test rax, rax; je 0x23016; call rax; add rsp, 8; ret; 
0x0000000000023e8a: test rax, rax; je 0x23e98; jmp rax; 
0x0000000000023ecb: test rax, rax; je 0x23ed8; jmp rax; 
0x00000000000398b2: test rax, rax; sete al; pop rbp; ret; 
0x0000000000033938: test rax, rax; setne al; leave; ret; 
0x0000000000025c18: test rax, rax; setne al; pop rbp; ret; 
0x0000000000039f27: ud0; dec dword ptr [rax + 0x39]; fmul dword ptr [r15]; xchg eax, edi; ret; 
0x0000000000042e9d: wait; and eax, 0x8948fffe; ret; 
0x000000000003ec59: wait; ret; 
0x0000000000031f36: xchg bh, bh; dec dword ptr [rax - 0x75]; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000002b493: xchg bh, bh; dec ecx; ret; 
0x00000000000298f6: xchg byte ptr [rcx - 0x76b70001], ah; ret 0x8d48; 
0x00000000000290f6: xchg byte ptr [rcx - 0x76b70001], ch; ret 0x8d48; 
0x000000000002acf5: xchg dword ptr [rdx], eax; add byte ptr [rax], al; leave; ret; 
0x0000000000031dc1: xchg eax, ebp; out 0xff, eax; dec dword ptr [rax - 0x77]; ret; 
0x0000000000027770: xchg eax, ebp; ret 0x8b48; 
0x0000000000042259: xchg eax, ebp; ror byte ptr [rax - 0x75], 0x5d; clc; leave; ret; 
0x00000000000445d9: xchg eax, ebx; idiv ebp; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000028e20: xchg eax, ebx; mov edi, 0x458bffff; cld; leave; ret; 
0x000000000002fe82: xchg eax, ecx; adc eax, 0x48900000; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000002b756: xchg eax, ecx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000004429b: xchg eax, ecx; clc; std; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000003b242: xchg eax, edi; add bh, bh; dec ecx; ret; 
0x000000000002c23e: xchg eax, edi; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x75], 0x45; fmul dword ptr [rax - 0x77]; ret 0x8948; 
0x00000000000256d6: xchg eax, edi; add eax, dword ptr [rax]; add cl, cl; ret; 
0x000000000002becd: xchg eax, edi; ret; 
0x0000000000030ff2: xchg eax, edx; adc al, 0; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000003ed18: xchg eax, edx; add byte ptr [rax], al; add cl, cl; ret; 
0x000000000002bc20: xchg eax, edx; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000404aa: xchg eax, edx; xor eax, 0xc990fffe; ret; 
0x0000000000033958: xchg eax, esi; add dword ptr [rax], eax; add cl, cl; ret; 
0x00000000000444e6: xchg eax, esi; cmc; std; dec dword ptr [rax - 0x77]; ret; 
0x000000000003fee6: xchg eax, esi; cmp edi, esi; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000032358: xchg eax, esi; or eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000026eda: xchg eax, esp; ret 0x8b48; 
0x0000000000033ccc: xchg eax, esp; ror byte ptr [rax - 0x75], 0x5d; clc; leave; ret; 
0x0000000000025c13: xchg eax, esp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7b], 0xc0; setne al; pop rbp; ret; 
0x000000000002b30e: xchg edi, edi; dec ecx; ret; 
0x000000000003b3db: xchg esi, edi; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000003bd59: xlatb; add al, 0; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000003de1c: xlatb; call 0x23a80; nop; leave; ret; 
0x0000000000028e1e: xlatb; call 0x24db7; mov eax, dword ptr [rbp - 4]; leave; ret; 
0x0000000000033a9b: xlatb; call 0x2570c; nop; leave; ret; 
0x00000000000417fa: xlatb; call 0x2a776; movzx eax, byte ptr [rax]; leave; ret; 
0x000000000002eab4: xlatb; call 0x2b94c; nop; leave; ret; 
0x000000000002d077: xlatb; call 0x2b97a; nop; leave; ret; 
0x000000000002b971: xlatb; call 0x2bb38; nop; leave; ret; 
0x000000000003a42c: xlatb; call 0x398dc; leave; ret; 
0x000000000002cef1: xlatb; call 0x418fe; nop; leave; ret; 
0x000000000002cf21: xlatb; call 0x419c4; nop; leave; ret; 
0x000000000002cf81: xlatb; call 0x41a8e; nop; leave; ret; 
0x000000000002cfe1: xlatb; call 0x41bf4; nop; leave; ret; 
0x000000000002cf51: xlatb; call 0x41c4a; nop; leave; ret; 
0x000000000002d0a7: xlatb; call 0x41c6a; nop; leave; ret; 
0x000000000002cfb1: xlatb; call 0x41caa; nop; leave; ret; 
0x0000000000040855: xlatb; call 0x42116; nop; leave; ret; 
0x000000000003bd43: xlatb; in al, 0xff; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000044a05: xlatb; push 0xf660000; outsb dx, byte ptr [rsi]; ret 0x8948; 
0x000000000003217e: xor al, 0xc; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000044dd8: xor al, 0xed; std; jmp qword ptr [rsi + 0x48]; 
0x00000000000406e5: xor al, 0xfe; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000028ee2: xor al, byte ptr [rax]; nop; leave; ret; 
0x0000000000037c54: xor al, byte ptr [rcx]; add byte ptr [rax], al; movzx eax, byte ptr [rax]; movsx eax, al; mov edi, eax; call rbx; 
0x000000000003b3da: xor al, byte ptr [rdi - 0x74b70002]; pop rbp; clc; leave; ret; 
0x000000000003baf4: xor al, byte ptr [rsi]; add byte ptr [rax], al; leave; ret; 
0x00000000000442fc: xor bh, 0xfd; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002bb82: xor byte ptr [rax + rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000038a7f: xor byte ptr [rax - 0x75], cl; adc cl, byte ptr [rax - 0x7d]; ret 0x4818; 
0x0000000000038ff6: xor byte ptr [rax - 0x75], cl; adc cl, byte ptr [rax - 0x7d]; ret 0x4c10; 
0x0000000000030cb7: xor byte ptr [rcx - 0x74b70001], bl; adc ecx, dword ptr [rax - 0x77]; adc byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000002e85c: xor byte ptr [rcx - 1], dl; dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000031b84: xor byte ptr [rdi], cl; add byte ptr [rax], al; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000043072: xor byte ptr [rdx], al; add byte ptr [rax], al; leave; ret; 
0x000000000002ce97: xor byte ptr [rdx], al; add byte ptr [rax], al; mov rdi, rax; call 0x2ba16; leave; ret; 
0x000000000002f570: xor byte ptr [rdx], dl; add byte ptr [rax], al; leave; ret; 
0x000000000003975b: xor dl, byte ptr [rbp - 0x14]; mov byte ptr [rax], dl; nop; leave; ret; 
0x0000000000028eda: xor dword ptr [rax], eax; mov rax, qword ptr [rbp - 8]; mov byte ptr [rax + 0x32], 0; nop; leave; ret; 
0x00000000000393fb: xor dword ptr [rdi - 0x76b70002], esp; ret 0x8d48; 
0x0000000000037ee4: xor dword ptr [rdx], eax; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000003a287: xor eax, 0x48000003; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000031f91: xor eax, 0x9000000d; leave; ret; 
0x00000000000404ab: xor eax, 0xc990fffe; ret; 
0x000000000002a83c: xor eax, 1; leave; ret; 
0x0000000000032681: xor ecx, dword ptr [rdx]; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000042089: xor edi, esi; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000040432: xor edi, esi; dec dword ptr [rax - 0x77]; ret 0xb70f; 

6402 gadgets found
