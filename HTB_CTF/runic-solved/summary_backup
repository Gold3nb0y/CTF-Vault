# exploit summary
        the vulnerability in the program occurs within the edit function. When editing a rune, the new name is
    copied from the stack to the malloced ptr. it is read using read and copied to the heap using strcpy. this 
    copied value is then used to grab the size value from the items list.

        the error occurs in that read is able to read null bytes, and continue reading after. Whereas strcpy stops at
    the first null byte. The result of this is an incorrect lookup for the size of the malloced space. with this
    you can read more bytes than the size allocated to the malloc ptr you're reading too.

        This allows over write of the metadata for heap chunks, which in turn allows you to free into the unsort bins,
    putting a libc address on the stack. by then further abusing the overwrite, you can write right up to the ptr
    but not over it. then by using the show action on the overwritten chunk, and address can be leaked.
    -- in my exploit when I wanted to leak I just wrote CHEF to 1 before the thing I wanted to leak so the 
        new line (\n) char would not overwrite a part of the pointer. I like using CHEF to make things lol

## visualization
```
        stack       |          code          |          heap        
--------------------+------------------------+--------------------------        
    +------------+  |                        |   +-----------+   previously created with a size of 0x20
    |  new name  |----+-|\x01\x00\n|-----+   |   |    size   |<---------0x20
    +------------+  | |      1st    /    |   |   +-----------+
 +->|  new idx   |  | |  +------------+  | +-----|    name   |<-+  
 |  +------------+  | | +|   hash     |<-+ | |   +-----------+  |
 |                  | | |+------------+    | |   |    data   |------+
 +----[ 11 ]----------|-+                  | |   |           |  |   |
                    | |      2nd           | |   +-----------+  |   |
    same as above   | |  +------------+    | |                  |   |
    +------------+  | +->|   strcpy   |----|----|"\x01"|--------+   |
    |  new idx   |  |    +------------+    | |  now no newline after|
    +------------+  |        3rd           | |  this is insertied   |
      ^            |    +------------+    | |  into the heap       |
       \-[ 1 ]-----------|   hash     |<---+ |                      |
           |        |    +------------+      |                      |
           |        |       final            |                      |
           |        |    +------------+      |                      |
           +------------>|   read     |<----------------------------+
        size from idx 1  +------------+      |  heap ptr for idx 11
          i.e. 0x60           |              |    size 0x20
                              |
                              |
                    Size and chunk size mismatch
                    resulting in a heap overflow

```                        
Sorry for making it so complicated, but it was very hard to figure out!

This is the backbone for the rest of my exploit, it enables everything else 

# defeating glibc 2.35 restrictions
glibc removes the use of __malloc_hook and __free_hook, making their use in this challenge impossible

that being said, by freeing a chunk to an unsorted bin, we still have access to a write what where
primative. This is a super powerful primative, and enables lots of other things

I did read online that you could write to the exit_function_list and get RCE that way, but I couldn't figure out
the pointer decryption. On top of that, there are very few calls to exit from the program. only can be done with
a failed read. So, I tried something else. 

# ROPing with no stack BOF
I love ROP chain's, especially with libc leaked, you can do almost anything.
the problem is, right now we only have a pointer to libc, not the stack.
can we change that?

Introducing..... the environ variable!
the environ variable in libc contains a pointer the environment variables for the process, which 
just so happens to be on the stack!

It also is in a relatively static location, allowing for deterministic offset calculation

I chose to use this by mallocing a chunk right on top of the return address for the create function call that 
malloc'ed it.

by doing this I could us up to 12 ROP gadgets!! although the way mine ended up working out, I only allocated
enough space for 10. for more I would have needed to change the way my script works quite a bit.

10 is more than enough anyways!

## something else interesting...
Usually, with the challenges I like to call a one_gadget. They are perticuarly handy with rop chains
as you usually just need to pop null into some registers and call the gadget

However, with this challenge you can't!
I'm not sure if it is a new feature of libc, or if it is custom configured, but when I tried to call the one gadget
I got an error that `file execvpe.c not found`. So, I had to think a bit harder

## the final chain
My final chain was quite simple, since there is a gadget to pop rdx, and a syscall gadget. I just
manually populated the registers with 4 different pop $ calls, and then ended with a syscall! 

# Final thoughts
All in all this was a really fun challenge and I learned a ton!
It was very rewarding to finally figure out the vulnerability, it took me a looooong time to find it.
probably about 7 or so hours.

Then, with that getting the write what where vulnerability and figuring out I can't just overwrite the __malloc_ptr
was very shocking! It forced me to read other's writeup's and learn about how a modern version of libc works.

I'm also very happy with the way I finally code code execution, it felt like I used every trick I knew!
So, to wrap things off, here is a list of the techinques I used, and pieces of knowledge that helped me!

Techiniques/knowledge used:
    - strcpy copies to a null byte, while read doesn't stop at a null byte
    - freeing a chunk into an unsorted bin places a libc pointer on the heap
    - puts also prints until a null byte (allowing full leaks)
    - heap ptr's can be deciphered. read more (here)[https://github.com/shellphish/how2heap/blob/master/glibc_2.35/decrypt_safe_linking.c]
    - tcache poisoning. read more (here)[https://github.com/shellphish/how2heap/blob/master/glibc_2.35/tcache_poisoning.c]
    - ROP chaining
    - (not a techinque) carefully following how data/handles are passed around from function call to function call

What I learned:
    - environ variable in LIBC contains a pointer to the stack
    - in glibc 2.35 __malloc_hook, __free_hook, and __realloc_hook are useless :( 
    - exit_function_list can be overwritten for RCE on an exit call
    - sometimes one gadgets don't work<C-F9>


