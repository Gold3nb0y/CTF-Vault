


Gadgets
=======


0x0000000000006ca1: adc al, 0; add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x00000000000037b4: adc al, 0; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000000026a3: adc al, 0x48; mov eax, dword ptr [rip + 0x9945]; test rax, rax; je 0x26b8; jmp rax; 
0x00000000000050f1: adc byte ptr [rax - 0x75], cl; call 0xffffffffc2395185; setb al; pop rbp; ret; 
0x000000000000610c: adc byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x0000000000005160: adc byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000006dc3: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x19], 0x48; mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000002662: adc eax, 0x76058b48; cdq; add byte ptr [rax], al; test rax, rax; je 0x2678; jmp rax; 
0x00000000000036ba: adc eax, 0x89480000; ret 0x8d48; 
0x00000000000038e0: adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000004ac4: add al, 0; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000004dae: add al, 3; add byte ptr [rax], al; add rax, 8; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000063a5: add al, byte ptr [rax]; add cl, cl; ret; 
0x000000000000658e: add al, byte ptr es:[rax]; add cl, cl; ret; 
0x00000000000066a4: add al, byte ptr fs:[rax]; add cl, cl; ret; 
0x00000000000078ce: add byte ptr [r8], r8b; mov rdi, rax; call 0x2440; nop; leave; ret; 
0x00000000000065f9: add byte ptr [rax + 0x30c48348], dl; pop rbx; pop r12; pop rbp; ret; 
0x0000000000005087: add byte ptr [rax + 0x39], cl; ret 0x940f; 
0x00000000000057c4: add byte ptr [rax + 0x39], cl; ret; 
0x0000000000003f08: add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x00000000000050ac: add byte ptr [rax - 0x74b72777], dl; pop rbp; clc; leave; ret; 
0x00000000000058f1: add byte ptr [rax - 0x75], cl; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000005765: add byte ptr [rax - 0x75], cl; call 0x30c4dab6; pop rbx; pop r12; pop rbp; ret; 
0x0000000000005dc7: add byte ptr [rax - 0x75], cl; call 0x30c4e118; pop rbx; pop r12; pop rbp; ret; 
0x0000000000005142: add byte ptr [rax - 0x75], cl; clc; leave; ret; 
0x0000000000007397: add byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax + 0x18], 0; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000560c: add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000004c91: add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000002782: add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000005842: add byte ptr [rax - 0x77], cl; ret 0xc748; 
0x00000000000051a9: add byte ptr [rax - 0x77], cl; ret; 
0x00000000000056b5: add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x00000000000026aa: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x0000000000002669: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x000000000000200e: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000004db1: add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000002673: add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x00000000000073a1: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; clc; leave; ret; 
0x00000000000073ec: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x0000000000007367: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000006f0e: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000073a0: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004b04: add byte ptr [rax], al; add byte ptr [rax], al; nop; pop rbp; ret; 
0x00000000000049c5: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000002674: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000006b38: add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000004db0: add byte ptr [rax], al; add rax, 8; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000026e0: add byte ptr [rax], al; call 0x2320; call 0x2650; mov byte ptr [rip + 0x9be5], 1; pop rbp; ret; 
0x0000000000004a31: add byte ptr [rax], al; call 0x49cb; pop rbp; ret; 
0x0000000000006d99: add byte ptr [rax], al; call 0x6d33; pop rbp; ret; 
0x00000000000078ec: add byte ptr [rax], al; call 0x7886; pop rbp; ret; 
0x00000000000078f6: add byte ptr [rax], al; endbr64; sub rsp, 8; add rsp, 8; ret; 
0x000000000000501e: add byte ptr [rax], al; leave; ret; 
0x0000000000004a2c: add byte ptr [rax], al; mov edi, 1; call 0x49cb; pop rbp; ret; 
0x0000000000006d94: add byte ptr [rax], al; mov edi, 1; call 0x6d33; pop rbp; ret; 
0x00000000000078e7: add byte ptr [rax], al; mov edi, 1; call 0x7886; pop rbp; ret; 
0x0000000000005f72: add byte ptr [rax], al; mov esi, 1; mov rdi, rax; call 0x6566; leave; ret; 
0x0000000000005141: add byte ptr [rax], al; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000007396: add byte ptr [rax], al; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x18], 0; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000560b: add byte ptr [rax], al; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000007635: add byte ptr [rax], al; mov rdi, rax; call 0x2330; nop; pop rbp; ret; 
0x0000000000004a14: add byte ptr [rax], al; mov rdi, rax; call 0x2440; nop; leave; ret; 
0x0000000000004733: add byte ptr [rax], al; mov rdi, rax; call 0x2530; nop; leave; ret; 
0x0000000000005f77: add byte ptr [rax], al; mov rdi, rax; call 0x6566; leave; ret; 
0x0000000000006585: add byte ptr [rax], al; mov rsi, rcx; mov rdi, rax; call 0x67b8; leave; ret; 
0x0000000000004ac6: add byte ptr [rax], al; nop; leave; ret; 
0x00000000000050ab: add byte ptr [rax], al; nop; mov eax, ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000056b4: add byte ptr [rax], al; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004b06: add byte ptr [rax], al; nop; pop rbp; ret; 
0x0000000000004856: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000002676: add byte ptr [rax], al; ret; 
0x000000000000200d: add byte ptr [rax], al; test rax, rax; je 0x2016; call rax; 
0x000000000000200d: add byte ptr [rax], al; test rax, rax; je 0x2016; call rax; add rsp, 8; ret; 
0x0000000000002668: add byte ptr [rax], al; test rax, rax; je 0x2678; jmp rax; 
0x00000000000026a9: add byte ptr [rax], al; test rax, rax; je 0x26b8; jmp rax; 
0x0000000000004ba8: add byte ptr [rax], bh; ret 0x940f; 
0x0000000000006b37: add byte ptr [rax], r8b; add cl, cl; ret; 
0x00000000000026b5: add byte ptr [rax], r8b; ret; 
0x0000000000004ffd: add byte ptr [rbp - 0x50], dh; nop; nop; leave; ret; 
0x00000000000026f1: add byte ptr [rcx], al; pop rbp; ret; 
0x00000000000050f7: add byte ptr [rcx], bh; ret 0x920f; 
0x0000000000004a2d: add byte ptr [rdi + 1], bh; call 0x49cb; pop rbp; ret; 
0x0000000000006d95: add byte ptr [rdi + 1], bh; call 0x6d33; pop rbp; ret; 
0x00000000000078e8: add byte ptr [rdi + 1], bh; call 0x7886; pop rbp; ret; 
0x00000000000048b6: add byte ptr [rdi], cl; mov dh, 0xc0; or eax, ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005f73: add byte ptr [rsi + 1], bh; mov rdi, rax; call 0x6566; leave; ret; 
0x0000000000006315: add cl, byte ptr [rax - 0x75]; clc; leave; ret; 
0x000000000000501f: add cl, cl; ret; 
0x0000000000004f4b: add dword ptr [eax], eax; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000004bef: add dword ptr [rax + rax*8 - 0x74b7298b], eax; clc; leave; ret; 
0x00000000000030af: add dword ptr [rax + rax], ebx; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000007046: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; clc; leave; ret; 
0x0000000000004ec4: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000007106: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000004f4c: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000004a2f: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x49cb; pop rbp; ret; 
0x0000000000006d97: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x6d33; pop rbp; ret; 
0x00000000000078ea: add dword ptr [rax], eax; add byte ptr [rax], al; call 0x7886; pop rbp; ret; 
0x0000000000005f75: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rax; call 0x6566; leave; ret; 
0x0000000000005637: add dword ptr [rsi], 0; add byte ptr [rax - 0x75], cl; clc; leave; ret; 
0x0000000000006fdd: add eax, 0x10; pop rbp; ret; 
0x00000000000062a3: add eax, 0x18; pop rbp; ret; 
0x0000000000005667: add eax, 0x20; mov rdi, rax; call 0x5f02; leave; ret; 
0x000000000000639d: add eax, 0x20; mov rdi, rax; call 0x668c; leave; ret; 
0x00000000000060b5: add eax, 0x20; pop rbp; ret; 
0x00000000000078cc: add eax, 0x4727; mov rdi, rax; call 0x2440; nop; leave; ret; 
0x0000000000005f4d: add eax, 0x48900000; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000004854: add eax, 0x5d000000; ret; 
0x0000000000004a11: add eax, 0x75e2; mov rdi, rax; call 0x2440; nop; leave; ret; 
0x0000000000004730: add eax, 0x7a8b; mov rdi, rax; call 0x2530; nop; leave; ret; 
0x0000000000004fb9: add eax, 0x89480000; ret 0x8b48; 
0x0000000000005aa7: add eax, 0x89480000; ret 0xc748; 
0x00000000000051a7: add eax, 0x89480000; ret; 
0x00000000000050aa: add eax, 0x89900000; fmul dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000005140: add eax, 0x8b480000; clc; leave; ret; 
0x00000000000026a6: add eax, 0x9945; test rax, rax; je 0x26b8; jmp rax; 
0x0000000000002665: add eax, 0x9976; test rax, rax; je 0x2678; jmp rax; 
0x000000000000200a: add eax, 0x9fd9; test rax, rax; je 0x2016; call rax; 
0x0000000000004f73: add eax, 0xc9900000; ret; 
0x0000000000004db3: add eax, 8; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000000672f: add eax, 8; mov rdi, rax; call 0x23c0; nop; leave; ret; 
0x0000000000006ac9: add eax, 8; mov rdi, rax; call 0x2560; nop; leave; ret; 
0x0000000000004c47: add eax, 8; mov rdi, rax; call 0x4aa2; nop; leave; ret; 
0x0000000000005e63: add eax, 8; pop rbp; ret; 
0x0000000000004c8f: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000004d56: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000004daf: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000003f05: add eax, dword ptr [rdx]; add byte ptr [rax + 1], cl; sar byte ptr [rsi], 1; jmp rax; 
0x000000000000678b: add ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000038ad: add edx, dword ptr [rax + rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000000074e4: add esp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x00000000000075d3: add esp, 0x28; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000000576b: add esp, 0x30; pop rbx; pop r12; pop rbp; ret; 
0x0000000000005287: add esp, 0x50; pop rbx; pop r12; pop rbp; ret; 
0x00000000000068f0: add esp, 0x58; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000002017: add esp, 8; ret; 
0x0000000000006fdc: add rax, 0x10; pop rbp; ret; 
0x00000000000062a2: add rax, 0x18; pop rbp; ret; 
0x0000000000005666: add rax, 0x20; mov rdi, rax; call 0x5f02; leave; ret; 
0x000000000000639c: add rax, 0x20; mov rdi, rax; call 0x668c; leave; ret; 
0x00000000000060b4: add rax, 0x20; pop rbp; ret; 
0x0000000000004db2: add rax, 8; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000000672e: add rax, 8; mov rdi, rax; call 0x23c0; nop; leave; ret; 
0x0000000000006ac8: add rax, 8; mov rdi, rax; call 0x2560; nop; leave; ret; 
0x0000000000004c46: add rax, 8; mov rdi, rax; call 0x4aa2; nop; leave; ret; 
0x0000000000005e62: add rax, 8; pop rbp; ret; 
0x00000000000074e3: add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x00000000000075d2: add rsp, 0x28; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000000576a: add rsp, 0x30; pop rbx; pop r12; pop rbp; ret; 
0x0000000000005286: add rsp, 0x50; pop rbx; pop r12; pop rbp; ret; 
0x00000000000068ef: add rsp, 0x58; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000002016: add rsp, 8; ret; 
0x00000000000027b8: and al, 0; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000000029e8: and al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000002be0: and byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000006b97: and byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x00000000000074e6: and byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x0000000000002b6f: and dword ptr [r8], eax; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000002ac8: and dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000002780: and eax, 0x89480000; ret 0x8d48; 
0x00000000000028d0: and eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000000026e2: call 0x2320; call 0x2650; mov byte ptr [rip + 0x9be5], 1; pop rbp; ret; 
0x000000000000763a: call 0x2330; nop; pop rbp; ret; 
0x0000000000004766: call 0x2340; nop; leave; ret; 
0x0000000000004c11: call 0x2360; nop; leave; ret; 
0x0000000000004794: call 0x2390; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000007560: call 0x2390; nop; leave; ret; 
0x0000000000004a99: call 0x23a0; nop; leave; ret; 
0x0000000000006735: call 0x23c0; nop; leave; ret; 
0x0000000000004a19: call 0x2440; nop; leave; ret; 
0x000000000000681f: call 0x2470; nop; leave; ret; 
0x0000000000006799: call 0x2480; leave; ret; 
0x0000000000004738: call 0x2530; nop; leave; ret; 
0x0000000000006acf: call 0x2560; nop; leave; ret; 
0x00000000000074de: call 0x25d0; add rsp, 0x20; pop rbx; pop r12; pop rbp; ret; 
0x0000000000005281: call 0x25d0; add rsp, 0x50; pop rbx; pop r12; pop rbp; ret; 
0x00000000000039f1: call 0x25d0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000006f3e: call 0x25d0; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000026e7: call 0x2650; mov byte ptr [rip + 0x9be5], 1; pop rbp; ret; 
0x0000000000005769: call 0x30c4dab6; pop rbx; pop r12; pop rbp; ret; 
0x0000000000005dcb: call 0x30c4e118; pop rbx; pop r12; pop rbp; ret; 
0x0000000000006379: call 0x4810eec6; mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x0000000000007014: call 0x48cef961; mov edi, eax; call 0x70ac; leave; ret; 
0x0000000000007430: call 0x48cefd7d; mov edi, eax; call 0x7442; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004a33: call 0x49cb; pop rbp; ret; 
0x0000000000004c4d: call 0x4aa2; nop; leave; ret; 
0x0000000000004ac3: call 0x4acc; nop; leave; ret; 
0x0000000000004cab: call 0x4b0c; nop; leave; ret; 
0x0000000000004b63: call 0x4b2c; nop; leave; ret; 
0x0000000000006e23: call 0x4b6c; nop; leave; ret; 
0x0000000000004b43: call 0x4c1a; nop; leave; ret; 
0x0000000000004b23: call 0x4c56; nop; leave; ret; 
0x0000000000004b83: call 0x4c76; nop; leave; ret; 
0x0000000000004c6d: call 0x4f8a; nop; leave; ret; 
0x0000000000004dad: call 0x50b6; add rax, 8; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004f71: call 0x5534; nop; leave; ret; 
0x000000000000501b: call 0x55ae; leave; ret; 
0x0000000000005044: call 0x55c4; leave; ret; 
0x0000000000005063: call 0x5614; leave; ret; 
0x00000000000050d0: call 0x5652; leave; ret; 
0x000000000000513e: call 0x5686; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000060d1: call 0x5bc6; leave; ret; 
0x0000000000005ef2: call 0x5cbe; mov rax, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005636: call 0x5cbe; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000052bd: call 0x5d00; leave; ret; 
0x0000000000005408: call 0x5d1a; nop; leave; ret; 
0x00000000000055a5: call 0x5e18; nop; leave; ret; 
0x000000000000566d: call 0x5f02; leave; ret; 
0x00000000000056b1: call 0x5f20; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005bef: call 0x63aa; leave; ret; 
0x0000000000005d3c: call 0x63c0; nop; leave; ret; 
0x0000000000005f6f: call 0x64bc; mov esi, 1; mov rdi, rax; call 0x6566; leave; ret; 
0x0000000000005e0c: call 0x64ce; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005e4a: call 0x64f8; nop; leave; ret; 
0x0000000000005f19: call 0x652a; leave; ret; 
0x0000000000005f4b: call 0x653c; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005f7c: call 0x6566; leave; ret; 
0x00000000000063a3: call 0x668c; leave; ret; 
0x0000000000006759: call 0x671a; nop; leave; ret; 
0x00000000000064f0: call 0x673e; nop; leave; ret; 
0x0000000000006522: call 0x6762; nop; leave; ret; 
0x000000000000658d: call 0x67b8; leave; ret; 
0x00000000000066a3: call 0x690c; leave; ret; 
0x000000000000684a: call 0x69f0; nop; leave; ret; 
0x0000000000006940: call 0x6a40; nop; leave; ret; 
0x0000000000006a38: call 0x6a90; nop; leave; ret; 
0x0000000000006a88: call 0x6ad8; nop; leave; ret; 
0x0000000000006b36: call 0x6b7f; leave; ret; 
0x0000000000006b66: call 0x6b9d; leave; ret; 
0x0000000000006b96: call 0x6bbb; leave; ret; 
0x0000000000006bb4: call 0x6bd9; leave; ret; 
0x0000000000006bd2: call 0x6bf7; leave; ret; 
0x0000000000006bf0: call 0x6c0c; leave; ret; 
0x0000000000006d9b: call 0x6d33; pop rbp; ret; 
0x0000000000007319: call 0x6da2; leave; ret; 
0x0000000000007337: call 0x6dcf; leave; ret; 
0x0000000000006e4e: call 0x6ec0; nop; leave; ret; 
0x0000000000007175: call 0x7050; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000701b: call 0x70ac; leave; ret; 
0x0000000000007044: call 0x7153; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000007072: call 0x7180; nop; leave; ret; 
0x00000000000073ea: call 0x73f6; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000007437: call 0x7442; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000007521: call 0x7568; nop; leave; ret; 
0x00000000000078ee: call 0x7886; pop rbp; ret; 
0x0000000000006fa6: call 0x8c0f2f3; mov rdi, rax; call 0x4aa2; nop; leave; ret; 
0x00000000000050f5: call 0xffffffffc2395185; setb al; pop rbp; ret; 
0x00000000000055dc: call 0xffffffffe8c7df29; insd dword ptr [rdi], dx; or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000007100: call 0xffffffffe8c7fa4d; stc; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000000711e: call 0xffffffffe8c7fa6b; stc; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000005efa: call 0xfffffffff85dea47; leave; ret; 
0x000000000000714c: call 0xfffffffff85dfc99; leave; ret; 
0x0000000000006f42: call qword ptr [rax - 0x7a274b8]; leave; ret; 
0x0000000000002014: call rax; 
0x0000000000002014: call rax; add rsp, 8; ret; 
0x0000000000003817: cdq; adc al, 0; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000002667: cdq; add byte ptr [rax], al; test rax, rax; je 0x2678; jmp rax; 
0x00000000000026a8: cdq; add byte ptr [rax], al; test rax, rax; je 0x26b8; jmp rax; 
0x0000000000002c17: cdq; and byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000003317: cdq; sbb dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000006fdb: clc; add rax, 0x10; pop rbp; ret; 
0x00000000000062a1: clc; add rax, 0x18; pop rbp; ret; 
0x0000000000005665: clc; add rax, 0x20; mov rdi, rax; call 0x5f02; leave; ret; 
0x000000000000639b: clc; add rax, 0x20; mov rdi, rax; call 0x668c; leave; ret; 
0x00000000000060b3: clc; add rax, 0x20; pop rbp; ret; 
0x0000000000005e61: clc; add rax, 8; pop rbp; ret; 
0x0000000000005ce7: clc; cmp qword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x0000000000002660: clc; je 0x2678; mov rax, qword ptr [rip + 0x9976]; test rax, rax; je 0x2678; jmp rax; 
0x00000000000039f9: clc; leave; ret; 
0x000000000000739b: clc; mov qword ptr [rax + 0x18], 0; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004aff: clc; mov qword ptr [rax + 0x20], 0; nop; pop rbp; ret; 
0x0000000000006110: clc; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x0000000000005164: clc; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000004a45: clc; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000005d0b: clc; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000004a5b: clc; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x0000000000006312: clc; mov qword ptr [rdx], rax; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000655f: clc; mov qword ptr [rdx], rax; nop; leave; ret; 
0x0000000000005568: clc; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x0000000000005552: clc; mov rax, qword ptr [rax + 0x18]; pop rbp; ret; 
0x000000000000609d: clc; mov rax, qword ptr [rax + 0x28]; pop rbp; ret; 
0x00000000000050c9: clc; mov rax, qword ptr [rax]; mov rdi, rax; call 0x5652; leave; ret; 
0x0000000000006c06: clc; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000006fd7: clc; mov rax, qword ptr [rbp - 8]; add rax, 0x10; pop rbp; ret; 
0x000000000000629d: clc; mov rax, qword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x00000000000060af: clc; mov rax, qword ptr [rbp - 8]; add rax, 0x20; pop rbp; ret; 
0x0000000000005e5d: clc; mov rax, qword ptr [rbp - 8]; add rax, 8; pop rbp; ret; 
0x0000000000005564: clc; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x000000000000554e: clc; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x18]; pop rbp; ret; 
0x0000000000006099: clc; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x28]; pop rbp; ret; 
0x0000000000006c02: clc; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000005013: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x55ae; leave; ret; 
0x000000000000505b: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x5614; leave; ret; 
0x00000000000060c9: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x5bc6; leave; ret; 
0x0000000000005f11: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x652a; leave; ret; 
0x000000000000669b: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x690c; leave; ret; 
0x0000000000006b2e: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6b7f; leave; ret; 
0x0000000000006b5e: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6b9d; leave; ret; 
0x0000000000006b8e: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6bbb; leave; ret; 
0x0000000000006bac: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6bd9; leave; ret; 
0x0000000000006bca: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6bf7; leave; ret; 
0x0000000000006be8: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6c0c; leave; ret; 
0x0000000000007311: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6da2; leave; ret; 
0x000000000000732f: clc; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6dcf; leave; ret; 
0x000000000000510a: clc; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000004c0d: clc; mov rdi, rax; call 0x2360; nop; leave; ret; 
0x0000000000004abf: clc; mov rdi, rax; call 0x4acc; nop; leave; ret; 
0x0000000000004ca7: clc; mov rdi, rax; call 0x4b0c; nop; leave; ret; 
0x0000000000004b5f: clc; mov rdi, rax; call 0x4b2c; nop; leave; ret; 
0x0000000000006e1f: clc; mov rdi, rax; call 0x4b6c; nop; leave; ret; 
0x0000000000004b3f: clc; mov rdi, rax; call 0x4c1a; nop; leave; ret; 
0x0000000000004b1f: clc; mov rdi, rax; call 0x4c56; nop; leave; ret; 
0x0000000000004b7f: clc; mov rdi, rax; call 0x4c76; nop; leave; ret; 
0x0000000000004c69: clc; mov rdi, rax; call 0x4f8a; nop; leave; ret; 
0x0000000000004f6d: clc; mov rdi, rax; call 0x5534; nop; leave; ret; 
0x0000000000005017: clc; mov rdi, rax; call 0x55ae; leave; ret; 
0x000000000000505f: clc; mov rdi, rax; call 0x5614; leave; ret; 
0x00000000000060cd: clc; mov rdi, rax; call 0x5bc6; leave; ret; 
0x0000000000005f15: clc; mov rdi, rax; call 0x652a; leave; ret; 
0x000000000000669f: clc; mov rdi, rax; call 0x690c; leave; ret; 
0x0000000000006b32: clc; mov rdi, rax; call 0x6b7f; leave; ret; 
0x0000000000006b62: clc; mov rdi, rax; call 0x6b9d; leave; ret; 
0x0000000000006b92: clc; mov rdi, rax; call 0x6bbb; leave; ret; 
0x0000000000006bb0: clc; mov rdi, rax; call 0x6bd9; leave; ret; 
0x0000000000006bce: clc; mov rdi, rax; call 0x6bf7; leave; ret; 
0x0000000000006bec: clc; mov rdi, rax; call 0x6c0c; leave; ret; 
0x0000000000007315: clc; mov rdi, rax; call 0x6da2; leave; ret; 
0x0000000000007333: clc; mov rdi, rax; call 0x6dcf; leave; ret; 
0x0000000000005cd1: clc; mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000004f85: clc; nop; pop rbp; ret; 
0x000000000000510e: clc; pop rbp; ret; 
0x0000000000005aa6: cli; add eax, 0x89480000; ret 0xc748; 
0x0000000000005cf5: cli; push rbp; mov rbp, rsp; mov qword ptr [rbp - 8], rdi; pop rbp; ret; 
0x00000000000078fb: cli; sub rsp, 8; add rsp, 8; ret; 
0x0000000000002003: cli; sub rsp, 8; mov rax, qword ptr [rip + 0x9fd9]; test rax, rax; je 0x2016; call rax; 
0x0000000000004ba9: cmp dl, al; sete al; pop rbp; ret; 
0x0000000000003077: cmp dword ptr [rax + rax], ebx; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000004ffa: cmp dword ptr [rbp - 0x20], 0; jne 0x4fb0; nop; nop; leave; ret; 
0x0000000000005ce9: cmp dword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x0000000000006523: cmp eax, dword ptr [rdx]; add byte ptr [rax], al; nop; leave; ret; 
0x000000000000265f: cmp eax, edi; je 0x2678; mov rax, qword ptr [rip + 0x9976]; test rax, rax; je 0x2678; jmp rax; 
0x00000000000050f8: cmp edx, eax; setb al; pop rbp; ret; 
0x0000000000005089: cmp edx, eax; sete al; pop rbp; ret; 
0x0000000000004ff9: cmp qword ptr [rbp - 0x20], 0; jne 0x4fb0; nop; nop; leave; ret; 
0x0000000000005ce8: cmp qword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x000000000000265e: cmp rax, rdi; je 0x2678; mov rax, qword ptr [rip + 0x9976]; test rax, rax; je 0x2678; jmp rax; 
0x0000000000005088: cmp rdx, rax; sete al; pop rbp; ret; 
0x0000000000004d55: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000005ef6: dec dword ptr [rax - 0x75]; call 0xfffffffff85dea47; leave; ret; 
0x0000000000004798: dec dword ptr [rax - 0x75]; clc; leave; ret; 
0x0000000000004987: dec dword ptr [rax - 0x75]; fmul dword ptr [r8 - 0x75]; pop rbp; clc; leave; ret; 
0x00000000000039f5: dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000005811: dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000000534e: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000000688e: dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000000573d: dec dword ptr [rax - 0x77]; ret; 
0x00000000000060d5: dec ecx; ret; 
0x0000000000005cf2: endbr64; push rbp; mov rbp, rsp; mov qword ptr [rbp - 8], rdi; pop rbp; ret; 
0x00000000000078f8: endbr64; sub rsp, 8; add rsp, 8; ret; 
0x0000000000002000: endbr64; sub rsp, 8; mov rax, qword ptr [rip + 0x9fd9]; test rax, rax; je 0x2016; call rax; 
0x00000000000046f1: fdivp st(7); dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000000498a: fmul dword ptr [r8 - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000007143: fmul dword ptr [r8 - 0x77]; push rax; sub byte ptr [rax - 0x75], cl; call 0xfffffffff85dfc99; leave; ret; 
0x00000000000048bb: fmul dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000007144: fmul dword ptr [rax - 0x77]; push rax; sub byte ptr [rax - 0x75], cl; call 0xfffffffff85dfc99; leave; ret; 
0x0000000000005f4a: fucomip st(0); in al, dx; add eax, 0x48900000; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x000000000000663a: idiv bh; dec dword ptr [rax - 0x75]; clc; leave; ret; 
0x0000000000005ff2: idiv bh; dec dword ptr [rax - 0x77]; ret; 
0x0000000000002e47: imul ebx, dword ptr [rsi], 0x89480000; ret 0x8d48; 
0x00000000000063a4: in al, 2; add byte ptr [rax], al; leave; ret; 
0x0000000000005f4c: in al, dx; add eax, 0x48900000; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000002006: in al, dx; or byte ptr [rax - 0x75], cl; add eax, 0x9fd9; test rax, rax; je 0x2016; call rax; 
0x0000000000005ce3: in eax, 0x48; mov dword ptr [rbp - 8], edi; cmp qword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x0000000000004a41: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000004a57: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x0000000000006fd3: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; add rax, 0x10; pop rbp; ret; 
0x0000000000006299: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x00000000000060ab: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; add rax, 0x20; pop rbp; ret; 
0x0000000000005e59: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; add rax, 8; pop rbp; ret; 
0x0000000000005560: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x000000000000554a: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x18]; pop rbp; ret; 
0x0000000000006095: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x28]; pop rbp; ret; 
0x0000000000006bfe: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000005106: in eax, 0x48; mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000004f81: in eax, 0x48; mov dword ptr [rbp - 8], edi; nop; pop rbp; ret; 
0x0000000000005cf9: in eax, 0x48; mov dword ptr [rbp - 8], edi; pop rbp; ret; 
0x0000000000005f7d: in eax, 5; add byte ptr [rax], al; leave; ret; 
0x0000000000004a2b: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x49cb; pop rbp; ret; 
0x0000000000006d93: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x6d33; pop rbp; ret; 
0x00000000000078e6: inc dword ptr [rax]; add byte ptr [rdi + 1], bh; call 0x7886; pop rbp; ret; 
0x0000000000004bec: inc dword ptr [rbx - 0x3f7bfe10]; jne 0x4bca; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000003943: insd dword ptr [rdi], dx; adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000000055e1: insd dword ptr [rdi], dx; or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000033bf: int1; sbb byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000005e49: iretd; call 0x64f8; nop; leave; ret; 
0x0000000000002666: jbe 0x2601; add byte ptr [rax], al; test rax, rax; je 0x2678; jmp rax; 
0x00000000000049ff: jbe 0x4a01; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000002012: je 0x2016; call rax; 
0x0000000000002012: je 0x2016; call rax; add rsp, 8; ret; 
0x000000000000266d: je 0x2678; jmp rax; 
0x0000000000002661: je 0x2678; mov rax, qword ptr [rip + 0x9976]; test rax, rax; je 0x2678; jmp rax; 
0x00000000000026ae: je 0x26b8; jmp rax; 
0x00000000000026a2: je 0x26b8; mov rax, qword ptr [rip + 0x9945]; test rax, rax; je 0x26b8; jmp rax; 
0x0000000000005d3d: jg 0x5d45; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000004a44: jge 0x4a3e; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000004a5a: jge 0x4a54; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x0000000000004f84: jge 0x4f7e; nop; pop rbp; ret; 
0x0000000000004f94: jge 0x4f8e; nop; pop rbp; ret; 
0x0000000000004ffb: jge 0x4fdd; add byte ptr [rbp - 0x50], dh; nop; nop; leave; ret; 
0x0000000000005012: jge 0x500c; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x55ae; leave; ret; 
0x000000000000505a: jge 0x5054; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x5614; leave; ret; 
0x00000000000050d1: jge 0x50d8; add byte ptr [rax], al; leave; ret; 
0x0000000000005109: jge 0x5103; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000000553e: jge 0x5538; nop; pop rbp; ret; 
0x000000000000554d: jge 0x5547; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x18]; pop rbp; ret; 
0x0000000000005563: jge 0x555d; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x00000000000055b8: jge 0x55b2; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x000000000000564c: jge 0x5646; nop; pop rbp; ret; 
0x000000000000567e: jge 0x5678; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000056c7: jge 0x56c1; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000056d9: jge 0x56d3; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000056eb: jge 0x56e5; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000005ce6: jge 0x5ce0; cmp qword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x0000000000005cfc: jge 0x5cf6; pop rbp; ret; 
0x0000000000005d0a: jge 0x5d04; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000005d4e: jge 0x5d48; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000005e5c: jge 0x5e56; mov rax, qword ptr [rbp - 8]; add rax, 8; pop rbp; ret; 
0x0000000000005f10: jge 0x5f0a; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x652a; leave; ret; 
0x0000000000006098: jge 0x6092; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x28]; pop rbp; ret; 
0x00000000000060ae: jge 0x60a8; mov rax, qword ptr [rbp - 8]; add rax, 0x20; pop rbp; ret; 
0x00000000000060c8: jge 0x60c2; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x5bc6; leave; ret; 
0x000000000000629c: jge 0x6296; mov rax, qword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x00000000000063b4: jge 0x63ae; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x00000000000064c6: jge 0x64c0; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000006534: jge 0x652e; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000000660e: jge 0x6608; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000000669a: jge 0x6694; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x690c; leave; ret; 
0x0000000000006904: jge 0x68fe; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000006916: jge 0x6910; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000006b2d: jge 0x6b27; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6b7f; leave; ret; 
0x0000000000006b47: jge 0x6b41; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000006b5d: jge 0x6b57; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6b9d; leave; ret; 
0x0000000000006b77: jge 0x6b71; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000006b8d: jge 0x6b87; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6bbb; leave; ret; 
0x0000000000006bab: jge 0x6ba5; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6bd9; leave; ret; 
0x0000000000006bc9: jge 0x6bc3; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6bf7; leave; ret; 
0x0000000000006be7: jge 0x6be1; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6c0c; leave; ret; 
0x0000000000006c01: jge 0x6bfb; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000006c16: jge 0x6c10; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000006fc0: jge 0x6fba; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x0000000000006fd6: jge 0x6fd0; mov rax, qword ptr [rbp - 8]; add rax, 0x10; pop rbp; ret; 
0x0000000000007084: jge 0x707e; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x000000000000718a: jge 0x7184; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x0000000000007310: jge 0x730a; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6da2; leave; ret; 
0x000000000000732e: jge 0x7328; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6dcf; leave; ret; 
0x00000000000073b4: jge 0x73ae; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000000266f: jmp rax; 
0x0000000000004a48: jne 0x4a3a; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000004a5e: jne 0x4a50; nop; pop rbp; ret; 
0x0000000000004bf2: jne 0x4bca; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004ffe: jne 0x4fb0; nop; nop; leave; ret; 
0x0000000000005d0e: jne 0x5d00; mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000063b8: jne 0x63aa; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000006dc7: jne 0x6db0; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000006df4: jne 0x6ddd; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000007088: jne 0x707a; nop; pop rbp; ret; 
0x000000000000718e: jne 0x7180; nop; pop rbp; ret; 
0x0000000000005045: jnp 0x504c; add byte ptr [rax], al; leave; ret; 
0x0000000000003911: lahf; adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000000200c: lahf; add byte ptr [rax], al; test rax, rax; je 0x2016; call rax; 
0x0000000000005be6: lea eax, [rbp - 1]; mov rsi, rdx; mov rdi, rax; call 0x63aa; leave; ret; 
0x000000000000472f: lea eax, [rip + 0x7a8b]; mov rdi, rax; call 0x2530; nop; leave; ret; 
0x0000000000006f3f: lea esi, [rsi + 0x4890ffff]; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000005be5: lea rax, [rbp - 1]; mov rsi, rdx; mov rdi, rax; call 0x63aa; leave; ret; 
0x000000000000472e: lea rax, [rip + 0x7a8b]; mov rdi, rax; call 0x2530; nop; leave; ret; 
0x00000000000029e7: leave; and al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000007485: leave; loope 0x7487; dec dword ptr [rax - 0x77]; ret; 
0x00000000000039fa: leave; ret; 
0x00000000000030e7: leave; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000004bee: lock add dword ptr [rax + rax*8 - 0x74b7298b], eax; clc; leave; ret; 
0x0000000000005d13: lock sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000007486: loope 0x7487; dec dword ptr [rax - 0x77]; ret; 
0x0000000000004fff: mov al, 0x90; nop; leave; ret; 
0x0000000000006eb6: mov bh, 0xff; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x00000000000026ec: mov byte ptr [rip + 0x9be5], 1; pop rbp; ret; 
0x0000000000004ba7: mov dh, 0; cmp dl, al; sete al; pop rbp; ret; 
0x00000000000048b5: mov dh, 0; movzx eax, al; or eax, ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000048b8: mov dh, 0xc0; or eax, ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000006f40: mov dh, 0xff; call qword ptr [rax - 0x7a274b8]; leave; ret; 
0x0000000000005bf0: mov dh, 7; add byte ptr [rax], al; leave; ret; 
0x00000000000072f9: mov dl, 0xff; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x000000000000739d: mov dword ptr [rax + 0x18], 0; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004b01: mov dword ptr [rax + 0x20], 0; nop; pop rbp; ret; 
0x0000000000007146: mov dword ptr [rax + 0x28], edx; mov rax, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000006112: mov dword ptr [rax + 8], edx; nop; leave; ret; 
0x0000000000002827: mov dword ptr [rax + rax], esp; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000005166: mov dword ptr [rax], edx; nop; pop rbp; ret; 
0x0000000000004a47: mov dword ptr [rbp - 0x10], esi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000005d0d: mov dword ptr [rbp - 0x10], esi; mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000004a5d: mov dword ptr [rbp - 0x10], esi; nop; pop rbp; ret; 
0x0000000000005ce5: mov dword ptr [rbp - 8], edi; cmp qword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x0000000000004a43: mov dword ptr [rbp - 8], edi; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000005d09: mov dword ptr [rbp - 8], edi; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000004a59: mov dword ptr [rbp - 8], edi; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x0000000000006fd5: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; add rax, 0x10; pop rbp; ret; 
0x000000000000629b: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x00000000000060ad: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; add rax, 0x20; pop rbp; ret; 
0x0000000000005e5b: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; add rax, 8; pop rbp; ret; 
0x0000000000005562: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x000000000000554c: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x18]; pop rbp; ret; 
0x0000000000006097: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x28]; pop rbp; ret; 
0x0000000000006c00: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000005011: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x55ae; leave; ret; 
0x0000000000005059: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x5614; leave; ret; 
0x00000000000060c7: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x5bc6; leave; ret; 
0x0000000000005f0f: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x652a; leave; ret; 
0x0000000000006699: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x690c; leave; ret; 
0x0000000000006b2c: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6b7f; leave; ret; 
0x0000000000006b5c: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6b9d; leave; ret; 
0x0000000000006b8c: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6bbb; leave; ret; 
0x0000000000006baa: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6bd9; leave; ret; 
0x0000000000006bc8: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6bf7; leave; ret; 
0x0000000000006be6: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6c0c; leave; ret; 
0x000000000000730f: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6da2; leave; ret; 
0x000000000000732d: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6dcf; leave; ret; 
0x0000000000005108: mov dword ptr [rbp - 8], edi; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000004f83: mov dword ptr [rbp - 8], edi; nop; pop rbp; ret; 
0x0000000000005cfb: mov dword ptr [rbp - 8], edi; pop rbp; ret; 
0x0000000000006314: mov dword ptr [rdx], eax; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000006561: mov dword ptr [rdx], eax; nop; leave; ret; 
0x0000000000002f27: mov dword ptr [rip - 0x76b80000], ebx; ret 0x8d48; 
0x00000000000049c4: mov eax, 0; pop rbp; ret; 
0x0000000000004853: mov eax, 5; pop rbp; ret; 
0x000000000000556a: mov eax, dword ptr [rax + 0x10]; pop rbp; ret; 
0x0000000000006dc1: mov eax, dword ptr [rax + 0x10]; test rax, rax; jne 0x6db0; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000005554: mov eax, dword ptr [rax + 0x18]; pop rbp; ret; 
0x0000000000006dee: mov eax, dword ptr [rax + 0x18]; test rax, rax; jne 0x6ddd; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000000609f: mov eax, dword ptr [rax + 0x28]; pop rbp; ret; 
0x00000000000050f6: mov eax, dword ptr [rax]; cmp edx, eax; setb al; pop rbp; ret; 
0x0000000000005086: mov eax, dword ptr [rax]; cmp rdx, rax; sete al; pop rbp; ret; 
0x00000000000050cb: mov eax, dword ptr [rax]; mov rdi, rax; call 0x5652; leave; ret; 
0x0000000000006c08: mov eax, dword ptr [rax]; pop rbp; ret; 
0x0000000000005082: mov eax, dword ptr [rbp - 0x10]; mov rax, qword ptr [rax]; cmp rdx, rax; sete al; pop rbp; ret; 
0x0000000000006753: mov eax, dword ptr [rbp - 0x10]; mov rdi, rax; call 0x671a; nop; leave; ret; 
0x0000000000006790: mov eax, dword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x2480; leave; ret; 
0x0000000000004ba3: mov eax, dword ptr [rbp - 0x10]; movzx eax, byte ptr [rax]; cmp dl, al; sete al; pop rbp; ret; 
0x0000000000004a4b: mov eax, dword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000005d11: mov eax, dword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000005767: mov eax, dword ptr [rbp - 0x18]; add rsp, 0x30; pop rbx; pop r12; pop rbp; ret; 
0x00000000000050f3: mov eax, dword ptr [rbp - 0x18]; mov eax, dword ptr [rax]; cmp edx, eax; setb al; pop rbp; ret; 
0x0000000000005ef8: mov eax, dword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004a93: mov eax, dword ptr [rbp - 0x18]; mov rdi, rax; call 0x23a0; nop; leave; ret; 
0x0000000000007012: mov eax, dword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x70ac; leave; ret; 
0x0000000000005cb1: mov eax, dword ptr [rbp - 0x20]; add rsp, 0x30; pop rbx; pop r12; pop rbp; ret; 
0x0000000000007142: mov eax, dword ptr [rbp - 0x28]; mov qword ptr [rax + 0x28], rdx; mov rax, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004989: mov eax, dword ptr [rbp - 0x28]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000006fd9: mov eax, dword ptr [rbp - 8]; add rax, 0x10; pop rbp; ret; 
0x000000000000629f: mov eax, dword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x0000000000005663: mov eax, dword ptr [rbp - 8]; add rax, 0x20; mov rdi, rax; call 0x5f02; leave; ret; 
0x0000000000006399: mov eax, dword ptr [rbp - 8]; add rax, 0x20; mov rdi, rax; call 0x668c; leave; ret; 
0x00000000000060b1: mov eax, dword ptr [rbp - 8]; add rax, 0x20; pop rbp; ret; 
0x0000000000005e5f: mov eax, dword ptr [rbp - 8]; add rax, 8; pop rbp; ret; 
0x000000000000479a: mov eax, dword ptr [rbp - 8]; leave; ret; 
0x0000000000007399: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 0x18], 0; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004afd: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 0x20], 0; nop; pop rbp; ret; 
0x000000000000610e: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x0000000000005162: mov eax, dword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000005566: mov eax, dword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x0000000000005550: mov eax, dword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x18]; pop rbp; ret; 
0x000000000000609b: mov eax, dword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x28]; pop rbp; ret; 
0x00000000000050c7: mov eax, dword ptr [rbp - 8]; mov rax, qword ptr [rax]; mov rdi, rax; call 0x5652; leave; ret; 
0x0000000000006c04: mov eax, dword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000004c0b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x2360; nop; leave; ret; 
0x0000000000004abd: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x4acc; nop; leave; ret; 
0x0000000000004ca5: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x4b0c; nop; leave; ret; 
0x0000000000004b5d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x4b2c; nop; leave; ret; 
0x0000000000006e1d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x4b6c; nop; leave; ret; 
0x0000000000004b3d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x4c1a; nop; leave; ret; 
0x0000000000004b1d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x4c56; nop; leave; ret; 
0x0000000000004b7d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x4c76; nop; leave; ret; 
0x0000000000004c67: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x4f8a; nop; leave; ret; 
0x0000000000004f6b: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x5534; nop; leave; ret; 
0x0000000000005015: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x55ae; leave; ret; 
0x000000000000505d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x5614; leave; ret; 
0x00000000000060cb: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x5bc6; leave; ret; 
0x0000000000005f13: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x652a; leave; ret; 
0x000000000000669d: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x690c; leave; ret; 
0x0000000000006b30: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x6b7f; leave; ret; 
0x0000000000006b60: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x6b9d; leave; ret; 
0x0000000000006b90: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x6bbb; leave; ret; 
0x0000000000006bae: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x6bd9; leave; ret; 
0x0000000000006bcc: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x6bf7; leave; ret; 
0x0000000000006bea: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x6c0c; leave; ret; 
0x0000000000007313: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x6da2; leave; ret; 
0x0000000000007331: mov eax, dword ptr [rbp - 8]; mov rdi, rax; call 0x6dcf; leave; ret; 
0x0000000000005ccf: mov eax, dword ptr [rbp - 8]; mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x000000000000510c: mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000078cb: mov eax, dword ptr [rip + 0x4727]; mov rdi, rax; call 0x2440; nop; leave; ret; 
0x0000000000004a10: mov eax, dword ptr [rip + 0x75e2]; mov rdi, rax; call 0x2440; nop; leave; ret; 
0x00000000000026a5: mov eax, dword ptr [rip + 0x9945]; test rax, rax; je 0x26b8; jmp rax; 
0x0000000000002664: mov eax, dword ptr [rip + 0x9976]; test rax, rax; je 0x2678; jmp rax; 
0x0000000000002009: mov eax, dword ptr [rip + 0x9fd9]; test rax, rax; je 0x2016; call rax; 
0x00000000000050ae: mov eax, ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000039ec: mov eax, ebx; mov rdi, rax; call 0x25d0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005e0d: mov ebp, 0x90000006; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004a27: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x49cb; pop rbp; ret; 
0x0000000000006d8f: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x6d33; pop rbp; ret; 
0x00000000000078e2: mov ebp, esp; mov esi, 0xffff; mov edi, 1; call 0x7886; pop rbp; ret; 
0x0000000000005ce2: mov ebp, esp; mov qword ptr [rbp - 8], rdi; cmp qword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x0000000000004a40: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000004a56: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x0000000000006fd2: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0x10; pop rbp; ret; 
0x0000000000006298: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x00000000000060aa: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0x20; pop rbp; ret; 
0x0000000000005e58: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 8; pop rbp; ret; 
0x000000000000555f: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x0000000000005549: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x18]; pop rbp; ret; 
0x0000000000006094: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x28]; pop rbp; ret; 
0x0000000000006bfd: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000005105: mov ebp, esp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000004f80: mov ebp, esp; mov qword ptr [rbp - 8], rdi; nop; pop rbp; ret; 
0x0000000000005cf8: mov ebp, esp; mov qword ptr [rbp - 8], rdi; pop rbp; ret; 
0x00000000000039f7: mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000004a2e: mov edi, 1; call 0x49cb; pop rbp; ret; 
0x0000000000006d96: mov edi, 1; call 0x6d33; pop rbp; ret; 
0x00000000000078e9: mov edi, 1; call 0x7886; pop rbp; ret; 
0x0000000000007638: mov edi, eax; call 0x2330; nop; pop rbp; ret; 
0x0000000000004c0f: mov edi, eax; call 0x2360; nop; leave; ret; 
0x0000000000004792: mov edi, eax; call 0x2390; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000755e: mov edi, eax; call 0x2390; nop; leave; ret; 
0x0000000000004a97: mov edi, eax; call 0x23a0; nop; leave; ret; 
0x0000000000006733: mov edi, eax; call 0x23c0; nop; leave; ret; 
0x0000000000004a17: mov edi, eax; call 0x2440; nop; leave; ret; 
0x000000000000681d: mov edi, eax; call 0x2470; nop; leave; ret; 
0x0000000000006797: mov edi, eax; call 0x2480; leave; ret; 
0x0000000000004736: mov edi, eax; call 0x2530; nop; leave; ret; 
0x0000000000006acd: mov edi, eax; call 0x2560; nop; leave; ret; 
0x00000000000039ef: mov edi, eax; call 0x25d0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000006f3c: mov edi, eax; call 0x25d0; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004c4b: mov edi, eax; call 0x4aa2; nop; leave; ret; 
0x0000000000004ac1: mov edi, eax; call 0x4acc; nop; leave; ret; 
0x0000000000004ca9: mov edi, eax; call 0x4b0c; nop; leave; ret; 
0x0000000000004b61: mov edi, eax; call 0x4b2c; nop; leave; ret; 
0x0000000000006e21: mov edi, eax; call 0x4b6c; nop; leave; ret; 
0x0000000000004b41: mov edi, eax; call 0x4c1a; nop; leave; ret; 
0x0000000000004b21: mov edi, eax; call 0x4c56; nop; leave; ret; 
0x0000000000004b81: mov edi, eax; call 0x4c76; nop; leave; ret; 
0x0000000000004c6b: mov edi, eax; call 0x4f8a; nop; leave; ret; 
0x0000000000004dab: mov edi, eax; call 0x50b6; add rax, 8; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004f6f: mov edi, eax; call 0x5534; nop; leave; ret; 
0x0000000000005019: mov edi, eax; call 0x55ae; leave; ret; 
0x0000000000005042: mov edi, eax; call 0x55c4; leave; ret; 
0x0000000000005061: mov edi, eax; call 0x5614; leave; ret; 
0x00000000000050ce: mov edi, eax; call 0x5652; leave; ret; 
0x000000000000513c: mov edi, eax; call 0x5686; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000060cf: mov edi, eax; call 0x5bc6; leave; ret; 
0x0000000000005ef0: mov edi, eax; call 0x5cbe; mov rax, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005634: mov edi, eax; call 0x5cbe; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000052bb: mov edi, eax; call 0x5d00; leave; ret; 
0x0000000000005406: mov edi, eax; call 0x5d1a; nop; leave; ret; 
0x00000000000055a3: mov edi, eax; call 0x5e18; nop; leave; ret; 
0x000000000000566b: mov edi, eax; call 0x5f02; leave; ret; 
0x0000000000005bed: mov edi, eax; call 0x63aa; leave; ret; 
0x0000000000005d3a: mov edi, eax; call 0x63c0; nop; leave; ret; 
0x0000000000005e0a: mov edi, eax; call 0x64ce; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005f17: mov edi, eax; call 0x652a; leave; ret; 
0x0000000000005f7a: mov edi, eax; call 0x6566; leave; ret; 
0x00000000000063a1: mov edi, eax; call 0x668c; leave; ret; 
0x0000000000006757: mov edi, eax; call 0x671a; nop; leave; ret; 
0x00000000000064ee: mov edi, eax; call 0x673e; nop; leave; ret; 
0x0000000000006520: mov edi, eax; call 0x6762; nop; leave; ret; 
0x000000000000658b: mov edi, eax; call 0x67b8; leave; ret; 
0x00000000000066a1: mov edi, eax; call 0x690c; leave; ret; 
0x0000000000006848: mov edi, eax; call 0x69f0; nop; leave; ret; 
0x000000000000693e: mov edi, eax; call 0x6a40; nop; leave; ret; 
0x0000000000006a36: mov edi, eax; call 0x6a90; nop; leave; ret; 
0x0000000000006a86: mov edi, eax; call 0x6ad8; nop; leave; ret; 
0x0000000000006b34: mov edi, eax; call 0x6b7f; leave; ret; 
0x0000000000006b64: mov edi, eax; call 0x6b9d; leave; ret; 
0x0000000000006b94: mov edi, eax; call 0x6bbb; leave; ret; 
0x0000000000006bb2: mov edi, eax; call 0x6bd9; leave; ret; 
0x0000000000006bd0: mov edi, eax; call 0x6bf7; leave; ret; 
0x0000000000006bee: mov edi, eax; call 0x6c0c; leave; ret; 
0x0000000000007317: mov edi, eax; call 0x6da2; leave; ret; 
0x0000000000007335: mov edi, eax; call 0x6dcf; leave; ret; 
0x0000000000006e4c: mov edi, eax; call 0x6ec0; nop; leave; ret; 
0x0000000000007173: mov edi, eax; call 0x7050; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000007019: mov edi, eax; call 0x70ac; leave; ret; 
0x0000000000007042: mov edi, eax; call 0x7153; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000007070: mov edi, eax; call 0x7180; nop; leave; ret; 
0x0000000000007435: mov edi, eax; call 0x7442; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000751f: mov edi, eax; call 0x7568; nop; leave; ret; 
0x0000000000005f49: mov edi, ebx; call 0x653c; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000073e8: mov edi, ebx; call 0x73f6; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005e48: mov edi, ecx; call 0x64f8; nop; leave; ret; 
0x0000000000004764: mov edi, edx; call 0x2340; nop; leave; ret; 
0x0000000000006d82: mov edx, 0x90ffffb6; leave; ret; 
0x0000000000006ad1: mov edx, 0xc990ffff; ret; 
0x000000000000610b: mov edx, dword ptr [rax]; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x000000000000515f: mov edx, dword ptr [rax]; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000005cd3: mov edx, dword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000006a05: mov edx, dword ptr [rbp - 0x10]; mov rdx, qword ptr [rdx]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x000000000000503b: mov edx, dword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x55c4; leave; ret; 
0x00000000000052b4: mov edx, dword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x5d00; leave; ret; 
0x0000000000005bbd: mov edx, dword ptr [rbp - 0x28]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000006310: mov edx, dword ptr [rbp - 8]; mov qword ptr [rdx], rax; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000655d: mov edx, dword ptr [rbp - 8]; mov qword ptr [rdx], rax; nop; leave; ret; 
0x0000000000006a09: mov edx, dword ptr [rdx]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000004f72: mov esi, 0x90000005; leave; ret; 
0x0000000000004a29: mov esi, 0xffff; mov edi, 1; call 0x49cb; pop rbp; ret; 
0x0000000000006d91: mov esi, 0xffff; mov edi, 1; call 0x6d33; pop rbp; ret; 
0x00000000000078e4: mov esi, 0xffff; mov edi, 1; call 0x7886; pop rbp; ret; 
0x0000000000005f74: mov esi, 1; mov rdi, rax; call 0x6566; leave; ret; 
0x00000000000073e5: mov esi, eax; mov rdi, rbx; call 0x73f6; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005e45: mov esi, eax; mov rdi, rcx; call 0x64f8; nop; leave; ret; 
0x0000000000004761: mov esi, eax; mov rdi, rdx; call 0x2340; nop; leave; ret; 
0x000000000000651d: mov esi, ecx; mov rdi, rax; call 0x6762; nop; leave; ret; 
0x0000000000006588: mov esi, ecx; mov rdi, rax; call 0x67b8; leave; ret; 
0x0000000000006a33: mov esi, ecx; mov rdi, rax; call 0x6a90; nop; leave; ret; 
0x0000000000006a83: mov esi, ecx; mov rdi, rax; call 0x6ad8; nop; leave; ret; 
0x0000000000007016: mov esi, ecx; mov rdi, rax; call 0x70ac; leave; ret; 
0x0000000000007432: mov esi, ecx; mov rdi, rax; call 0x7442; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000751c: mov esi, ecx; mov rdi, rax; call 0x7568; nop; leave; ret; 
0x000000000000478f: mov esi, edx; mov rdi, rax; call 0x2390; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000755b: mov esi, edx; mov rdi, rax; call 0x2390; nop; leave; ret; 
0x0000000000006794: mov esi, edx; mov rdi, rax; call 0x2480; leave; ret; 
0x000000000000503f: mov esi, edx; mov rdi, rax; call 0x55c4; leave; ret; 
0x0000000000005139: mov esi, edx; mov rdi, rax; call 0x5686; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005631: mov esi, edx; mov rdi, rax; call 0x5cbe; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000052b8: mov esi, edx; mov rdi, rax; call 0x5d00; leave; ret; 
0x0000000000005403: mov esi, edx; mov rdi, rax; call 0x5d1a; nop; leave; ret; 
0x00000000000055a0: mov esi, edx; mov rdi, rax; call 0x5e18; nop; leave; ret; 
0x0000000000005bea: mov esi, edx; mov rdi, rax; call 0x63aa; leave; ret; 
0x0000000000005d37: mov esi, edx; mov rdi, rax; call 0x63c0; nop; leave; ret; 
0x00000000000064eb: mov esi, edx; mov rdi, rax; call 0x673e; nop; leave; ret; 
0x0000000000006845: mov esi, edx; mov rdi, rax; call 0x69f0; nop; leave; ret; 
0x000000000000693b: mov esi, edx; mov rdi, rax; call 0x6a40; nop; leave; ret; 
0x0000000000006e49: mov esi, edx; mov rdi, rax; call 0x6ec0; nop; leave; ret; 
0x0000000000007170: mov esi, edx; mov rdi, rax; call 0x7050; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000703f: mov esi, edx; mov rdi, rax; call 0x7153; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000706d: mov esi, edx; mov rdi, rax; call 0x7180; nop; leave; ret; 
0x000000000000675a: mov esp, 0x90ffffff; leave; ret; 
0x0000000000006737: mov esp, 0xc990ffff; ret; 
0x000000000000739c: mov qword ptr [rax + 0x18], 0; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004b00: mov qword ptr [rax + 0x20], 0; nop; pop rbp; ret; 
0x0000000000007145: mov qword ptr [rax + 0x28], rdx; mov rax, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000006111: mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x0000000000005165: mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000004a46: mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000005d0c: mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000004a5c: mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x0000000000005ce4: mov qword ptr [rbp - 8], rdi; cmp qword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x0000000000004a42: mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000005d08: mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000004a58: mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x0000000000006fd4: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0x10; pop rbp; ret; 
0x000000000000629a: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x00000000000060ac: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0x20; pop rbp; ret; 
0x0000000000005e5a: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 8; pop rbp; ret; 
0x0000000000005561: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x000000000000554b: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x18]; pop rbp; ret; 
0x0000000000006096: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x28]; pop rbp; ret; 
0x0000000000006bff: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000005010: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x55ae; leave; ret; 
0x0000000000005058: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x5614; leave; ret; 
0x00000000000060c6: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x5bc6; leave; ret; 
0x0000000000005f0e: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x652a; leave; ret; 
0x0000000000006698: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x690c; leave; ret; 
0x0000000000006b2b: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6b7f; leave; ret; 
0x0000000000006b5b: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6b9d; leave; ret; 
0x0000000000006b8b: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6bbb; leave; ret; 
0x0000000000006ba9: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6bd9; leave; ret; 
0x0000000000006bc7: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6bf7; leave; ret; 
0x0000000000006be5: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6c0c; leave; ret; 
0x000000000000730e: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6da2; leave; ret; 
0x000000000000732c: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6dcf; leave; ret; 
0x0000000000005107: mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000004f82: mov qword ptr [rbp - 8], rdi; nop; pop rbp; ret; 
0x0000000000005cfa: mov qword ptr [rbp - 8], rdi; pop rbp; ret; 
0x0000000000006313: mov qword ptr [rdx], rax; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000006560: mov qword ptr [rdx], rax; nop; leave; ret; 
0x0000000000005569: mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x0000000000006dc0: mov rax, qword ptr [rax + 0x10]; test rax, rax; jne 0x6db0; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000005553: mov rax, qword ptr [rax + 0x18]; pop rbp; ret; 
0x0000000000006ded: mov rax, qword ptr [rax + 0x18]; test rax, rax; jne 0x6ddd; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000000609e: mov rax, qword ptr [rax + 0x28]; pop rbp; ret; 
0x0000000000005085: mov rax, qword ptr [rax]; cmp rdx, rax; sete al; pop rbp; ret; 
0x00000000000050ca: mov rax, qword ptr [rax]; mov rdi, rax; call 0x5652; leave; ret; 
0x0000000000006c07: mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000005081: mov rax, qword ptr [rbp - 0x10]; mov rax, qword ptr [rax]; cmp rdx, rax; sete al; pop rbp; ret; 
0x0000000000006752: mov rax, qword ptr [rbp - 0x10]; mov rdi, rax; call 0x671a; nop; leave; ret; 
0x000000000000678f: mov rax, qword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x2480; leave; ret; 
0x0000000000004ba2: mov rax, qword ptr [rbp - 0x10]; movzx eax, byte ptr [rax]; cmp dl, al; sete al; pop rbp; ret; 
0x0000000000004a4a: mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000005d10: mov rax, qword ptr [rbp - 0x10]; sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000005766: mov rax, qword ptr [rbp - 0x18]; add rsp, 0x30; pop rbx; pop r12; pop rbp; ret; 
0x00000000000050f2: mov rax, qword ptr [rbp - 0x18]; mov eax, dword ptr [rax]; cmp edx, eax; setb al; pop rbp; ret; 
0x0000000000005ef7: mov rax, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004a92: mov rax, qword ptr [rbp - 0x18]; mov rdi, rax; call 0x23a0; nop; leave; ret; 
0x0000000000007011: mov rax, qword ptr [rbp - 0x18]; mov rsi, rcx; mov rdi, rax; call 0x70ac; leave; ret; 
0x0000000000005cb0: mov rax, qword ptr [rbp - 0x20]; add rsp, 0x30; pop rbx; pop r12; pop rbp; ret; 
0x0000000000007141: mov rax, qword ptr [rbp - 0x28]; mov qword ptr [rax + 0x28], rdx; mov rax, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004988: mov rax, qword ptr [rbp - 0x28]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000006fd8: mov rax, qword ptr [rbp - 8]; add rax, 0x10; pop rbp; ret; 
0x000000000000629e: mov rax, qword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x0000000000005662: mov rax, qword ptr [rbp - 8]; add rax, 0x20; mov rdi, rax; call 0x5f02; leave; ret; 
0x0000000000006398: mov rax, qword ptr [rbp - 8]; add rax, 0x20; mov rdi, rax; call 0x668c; leave; ret; 
0x00000000000060b0: mov rax, qword ptr [rbp - 8]; add rax, 0x20; pop rbp; ret; 
0x0000000000005e5e: mov rax, qword ptr [rbp - 8]; add rax, 8; pop rbp; ret; 
0x0000000000004799: mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000007398: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x18], 0; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004afc: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 0x20], 0; nop; pop rbp; ret; 
0x000000000000610d: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x0000000000005161: mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000005565: mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x000000000000554f: mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x18]; pop rbp; ret; 
0x000000000000609a: mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x28]; pop rbp; ret; 
0x00000000000050c6: mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; mov rdi, rax; call 0x5652; leave; ret; 
0x0000000000006c03: mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000004c0a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x2360; nop; leave; ret; 
0x0000000000004abc: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x4acc; nop; leave; ret; 
0x0000000000004ca4: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x4b0c; nop; leave; ret; 
0x0000000000004b5c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x4b2c; nop; leave; ret; 
0x0000000000006e1c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x4b6c; nop; leave; ret; 
0x0000000000004b3c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x4c1a; nop; leave; ret; 
0x0000000000004b1c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x4c56; nop; leave; ret; 
0x0000000000004b7c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x4c76; nop; leave; ret; 
0x0000000000004c66: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x4f8a; nop; leave; ret; 
0x0000000000004f6a: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x5534; nop; leave; ret; 
0x0000000000005014: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x55ae; leave; ret; 
0x000000000000505c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x5614; leave; ret; 
0x00000000000060ca: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x5bc6; leave; ret; 
0x0000000000005f12: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x652a; leave; ret; 
0x000000000000669c: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x690c; leave; ret; 
0x0000000000006b2f: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6b7f; leave; ret; 
0x0000000000006b5f: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6b9d; leave; ret; 
0x0000000000006b8f: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6bbb; leave; ret; 
0x0000000000006bad: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6bd9; leave; ret; 
0x0000000000006bcb: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6bf7; leave; ret; 
0x0000000000006be9: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6c0c; leave; ret; 
0x0000000000007312: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6da2; leave; ret; 
0x0000000000007330: mov rax, qword ptr [rbp - 8]; mov rdi, rax; call 0x6dcf; leave; ret; 
0x0000000000005cce: mov rax, qword ptr [rbp - 8]; mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x000000000000510b: mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000078ca: mov rax, qword ptr [rip + 0x4727]; mov rdi, rax; call 0x2440; nop; leave; ret; 
0x0000000000004a0f: mov rax, qword ptr [rip + 0x75e2]; mov rdi, rax; call 0x2440; nop; leave; ret; 
0x00000000000026a4: mov rax, qword ptr [rip + 0x9945]; test rax, rax; je 0x26b8; jmp rax; 
0x0000000000002663: mov rax, qword ptr [rip + 0x9976]; test rax, rax; je 0x2678; jmp rax; 
0x0000000000002008: mov rax, qword ptr [rip + 0x9fd9]; test rax, rax; je 0x2016; call rax; 
0x00000000000039eb: mov rax, rbx; mov rdi, rax; call 0x25d0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004a26: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x49cb; pop rbp; ret; 
0x0000000000006d8e: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x6d33; pop rbp; ret; 
0x00000000000078e1: mov rbp, rsp; mov esi, 0xffff; mov edi, 1; call 0x7886; pop rbp; ret; 
0x0000000000005ce1: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; cmp qword ptr [rbp - 8], 0; sete al; pop rbp; ret; 
0x0000000000004a3f: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; mov rax, qword ptr [rbp - 0x10]; pop rbp; ret; 
0x0000000000004a55: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov qword ptr [rbp - 0x10], rsi; nop; pop rbp; ret; 
0x0000000000006fd1: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0x10; pop rbp; ret; 
0x0000000000006297: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0x18; pop rbp; ret; 
0x00000000000060a9: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 0x20; pop rbp; ret; 
0x0000000000005e57: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; add rax, 8; pop rbp; ret; 
0x000000000000555e: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x10]; pop rbp; ret; 
0x0000000000005548: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x18]; pop rbp; ret; 
0x0000000000006093: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax + 0x28]; pop rbp; ret; 
0x0000000000006bfc: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; mov rax, qword ptr [rax]; pop rbp; ret; 
0x0000000000005104: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000004f7f: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; nop; pop rbp; ret; 
0x0000000000005cf7: mov rbp, rsp; mov qword ptr [rbp - 8], rdi; pop rbp; ret; 
0x00000000000039f6: mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000007637: mov rdi, rax; call 0x2330; nop; pop rbp; ret; 
0x0000000000004c0e: mov rdi, rax; call 0x2360; nop; leave; ret; 
0x0000000000004791: mov rdi, rax; call 0x2390; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000755d: mov rdi, rax; call 0x2390; nop; leave; ret; 
0x0000000000004a96: mov rdi, rax; call 0x23a0; nop; leave; ret; 
0x0000000000006732: mov rdi, rax; call 0x23c0; nop; leave; ret; 
0x0000000000004a16: mov rdi, rax; call 0x2440; nop; leave; ret; 
0x000000000000681c: mov rdi, rax; call 0x2470; nop; leave; ret; 
0x0000000000006796: mov rdi, rax; call 0x2480; leave; ret; 
0x0000000000004735: mov rdi, rax; call 0x2530; nop; leave; ret; 
0x0000000000006acc: mov rdi, rax; call 0x2560; nop; leave; ret; 
0x00000000000039ee: mov rdi, rax; call 0x25d0; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000006f3b: mov rdi, rax; call 0x25d0; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004c4a: mov rdi, rax; call 0x4aa2; nop; leave; ret; 
0x0000000000004ac0: mov rdi, rax; call 0x4acc; nop; leave; ret; 
0x0000000000004ca8: mov rdi, rax; call 0x4b0c; nop; leave; ret; 
0x0000000000004b60: mov rdi, rax; call 0x4b2c; nop; leave; ret; 
0x0000000000006e20: mov rdi, rax; call 0x4b6c; nop; leave; ret; 
0x0000000000004b40: mov rdi, rax; call 0x4c1a; nop; leave; ret; 
0x0000000000004b20: mov rdi, rax; call 0x4c56; nop; leave; ret; 
0x0000000000004b80: mov rdi, rax; call 0x4c76; nop; leave; ret; 
0x0000000000004c6a: mov rdi, rax; call 0x4f8a; nop; leave; ret; 
0x0000000000004daa: mov rdi, rax; call 0x50b6; add rax, 8; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004f6e: mov rdi, rax; call 0x5534; nop; leave; ret; 
0x0000000000005018: mov rdi, rax; call 0x55ae; leave; ret; 
0x0000000000005041: mov rdi, rax; call 0x55c4; leave; ret; 
0x0000000000005060: mov rdi, rax; call 0x5614; leave; ret; 
0x00000000000050cd: mov rdi, rax; call 0x5652; leave; ret; 
0x000000000000513b: mov rdi, rax; call 0x5686; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000060ce: mov rdi, rax; call 0x5bc6; leave; ret; 
0x0000000000005eef: mov rdi, rax; call 0x5cbe; mov rax, qword ptr [rbp - 0x18]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005633: mov rdi, rax; call 0x5cbe; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000052ba: mov rdi, rax; call 0x5d00; leave; ret; 
0x0000000000005405: mov rdi, rax; call 0x5d1a; nop; leave; ret; 
0x00000000000055a2: mov rdi, rax; call 0x5e18; nop; leave; ret; 
0x000000000000566a: mov rdi, rax; call 0x5f02; leave; ret; 
0x0000000000005bec: mov rdi, rax; call 0x63aa; leave; ret; 
0x0000000000005d39: mov rdi, rax; call 0x63c0; nop; leave; ret; 
0x0000000000005e09: mov rdi, rax; call 0x64ce; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005f16: mov rdi, rax; call 0x652a; leave; ret; 
0x0000000000005f79: mov rdi, rax; call 0x6566; leave; ret; 
0x00000000000063a0: mov rdi, rax; call 0x668c; leave; ret; 
0x0000000000006756: mov rdi, rax; call 0x671a; nop; leave; ret; 
0x00000000000064ed: mov rdi, rax; call 0x673e; nop; leave; ret; 
0x000000000000651f: mov rdi, rax; call 0x6762; nop; leave; ret; 
0x000000000000658a: mov rdi, rax; call 0x67b8; leave; ret; 
0x00000000000066a0: mov rdi, rax; call 0x690c; leave; ret; 
0x0000000000006847: mov rdi, rax; call 0x69f0; nop; leave; ret; 
0x000000000000693d: mov rdi, rax; call 0x6a40; nop; leave; ret; 
0x0000000000006a35: mov rdi, rax; call 0x6a90; nop; leave; ret; 
0x0000000000006a85: mov rdi, rax; call 0x6ad8; nop; leave; ret; 
0x0000000000006b33: mov rdi, rax; call 0x6b7f; leave; ret; 
0x0000000000006b63: mov rdi, rax; call 0x6b9d; leave; ret; 
0x0000000000006b93: mov rdi, rax; call 0x6bbb; leave; ret; 
0x0000000000006bb1: mov rdi, rax; call 0x6bd9; leave; ret; 
0x0000000000006bcf: mov rdi, rax; call 0x6bf7; leave; ret; 
0x0000000000006bed: mov rdi, rax; call 0x6c0c; leave; ret; 
0x0000000000007316: mov rdi, rax; call 0x6da2; leave; ret; 
0x0000000000007334: mov rdi, rax; call 0x6dcf; leave; ret; 
0x0000000000006e4b: mov rdi, rax; call 0x6ec0; nop; leave; ret; 
0x0000000000007172: mov rdi, rax; call 0x7050; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000007018: mov rdi, rax; call 0x70ac; leave; ret; 
0x0000000000007041: mov rdi, rax; call 0x7153; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000706f: mov rdi, rax; call 0x7180; nop; leave; ret; 
0x0000000000007434: mov rdi, rax; call 0x7442; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000751e: mov rdi, rax; call 0x7568; nop; leave; ret; 
0x0000000000005f48: mov rdi, rbx; call 0x653c; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000073e7: mov rdi, rbx; call 0x73f6; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005e47: mov rdi, rcx; call 0x64f8; nop; leave; ret; 
0x0000000000004763: mov rdi, rdx; call 0x2340; nop; leave; ret; 
0x000000000000610a: mov rdx, qword ptr [rax]; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax + 8], rdx; nop; leave; ret; 
0x000000000000515e: mov rdx, qword ptr [rax]; mov rax, qword ptr [rbp - 8]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000005cd2: mov rdx, qword ptr [rbp - 0x10]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x0000000000006a04: mov rdx, qword ptr [rbp - 0x10]; mov rdx, qword ptr [rdx]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x000000000000503a: mov rdx, qword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x55c4; leave; ret; 
0x00000000000052b3: mov rdx, qword ptr [rbp - 0x10]; mov rsi, rdx; mov rdi, rax; call 0x5d00; leave; ret; 
0x0000000000005bbc: mov rdx, qword ptr [rbp - 0x28]; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x000000000000630f: mov rdx, qword ptr [rbp - 8]; mov qword ptr [rdx], rax; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000655c: mov rdx, qword ptr [rbp - 8]; mov qword ptr [rdx], rax; nop; leave; ret; 
0x0000000000006a08: mov rdx, qword ptr [rdx]; mov qword ptr [rax], rdx; nop; pop rbp; ret; 
0x00000000000073e4: mov rsi, rax; mov rdi, rbx; call 0x73f6; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005e44: mov rsi, rax; mov rdi, rcx; call 0x64f8; nop; leave; ret; 
0x0000000000004760: mov rsi, rax; mov rdi, rdx; call 0x2340; nop; leave; ret; 
0x000000000000651c: mov rsi, rcx; mov rdi, rax; call 0x6762; nop; leave; ret; 
0x0000000000006587: mov rsi, rcx; mov rdi, rax; call 0x67b8; leave; ret; 
0x0000000000006a32: mov rsi, rcx; mov rdi, rax; call 0x6a90; nop; leave; ret; 
0x0000000000006a82: mov rsi, rcx; mov rdi, rax; call 0x6ad8; nop; leave; ret; 
0x0000000000007015: mov rsi, rcx; mov rdi, rax; call 0x70ac; leave; ret; 
0x0000000000007431: mov rsi, rcx; mov rdi, rax; call 0x7442; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000751b: mov rsi, rcx; mov rdi, rax; call 0x7568; nop; leave; ret; 
0x000000000000478e: mov rsi, rdx; mov rdi, rax; call 0x2390; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000755a: mov rsi, rdx; mov rdi, rax; call 0x2390; nop; leave; ret; 
0x0000000000006793: mov rsi, rdx; mov rdi, rax; call 0x2480; leave; ret; 
0x000000000000503e: mov rsi, rdx; mov rdi, rax; call 0x55c4; leave; ret; 
0x0000000000005138: mov rsi, rdx; mov rdi, rax; call 0x5686; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005630: mov rsi, rdx; mov rdi, rax; call 0x5cbe; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000052b7: mov rsi, rdx; mov rdi, rax; call 0x5d00; leave; ret; 
0x0000000000005402: mov rsi, rdx; mov rdi, rax; call 0x5d1a; nop; leave; ret; 
0x000000000000559f: mov rsi, rdx; mov rdi, rax; call 0x5e18; nop; leave; ret; 
0x0000000000005be9: mov rsi, rdx; mov rdi, rax; call 0x63aa; leave; ret; 
0x0000000000005d36: mov rsi, rdx; mov rdi, rax; call 0x63c0; nop; leave; ret; 
0x00000000000064ea: mov rsi, rdx; mov rdi, rax; call 0x673e; nop; leave; ret; 
0x0000000000006844: mov rsi, rdx; mov rdi, rax; call 0x69f0; nop; leave; ret; 
0x000000000000693a: mov rsi, rdx; mov rdi, rax; call 0x6a40; nop; leave; ret; 
0x0000000000006e48: mov rsi, rdx; mov rdi, rax; call 0x6ec0; nop; leave; ret; 
0x000000000000716f: mov rsi, rdx; mov rdi, rax; call 0x7050; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000703e: mov rsi, rdx; mov rdi, rax; call 0x7153; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000706c: mov rsi, rdx; mov rdi, rax; call 0x7180; nop; leave; ret; 
0x000000000000701c: mov word ptr [rax], es; add byte ptr [rax], al; leave; ret; 
0x00000000000058ee: movabs al, byte ptr [0x3948008b48000009]; ret; 
0x00000000000048b7: movzx eax, al; or eax, ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000004ba6: movzx eax, byte ptr [rax]; cmp dl, al; sete al; pop rbp; ret; 
0x00000000000048b4: movzx eax, byte ptr [rax]; movzx eax, al; or eax, ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000026b3: nop dword ptr [rax + rax]; ret; 
0x0000000000002671: nop dword ptr [rax]; ret; 
0x00000000000026b2: nop word ptr [rax + rax]; ret; 
0x00000000000065fa: nop; add rsp, 0x30; pop rbx; pop r12; pop rbp; ret; 
0x000000000000473d: nop; leave; ret; 
0x00000000000050ad: nop; mov eax, ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000056b6: nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005000: nop; nop; leave; ret; 
0x000000000000566e: nop; or byte ptr [rax], al; add cl, cl; ret; 
0x0000000000004a60: nop; pop rbp; ret; 
0x00000000000036b9: not dword ptr [rip - 0x76b80000]; ret 0x8d48; 
0x0000000000005f1a: or al, 6; add byte ptr [rax], al; leave; ret; 
0x00000000000052bf: or al, byte ptr [rax]; add cl, cl; ret; 
0x0000000000007045: or al, byte ptr [rcx]; add byte ptr [rax], al; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x00000000000052be: or al, byte ptr ds:[rax]; add cl, cl; ret; 
0x0000000000002007: or byte ptr [rax - 0x75], cl; add eax, 0x9fd9; test rax, rax; je 0x2016; call rax; 
0x0000000000004db5: or byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x000000000000560a: or byte ptr [rax], al; add byte ptr [rax - 0x75], cl; pop rbp; clc; leave; ret; 
0x00000000000058ae: or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000005840: or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc748; 
0x000000000000544b: or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000056b3: or byte ptr [rax], al; add byte ptr [rax - 0x7a274b8], dl; leave; ret; 
0x000000000000566f: or byte ptr [rax], al; add cl, cl; ret; 
0x00000000000048a0: or byte ptr [rcx], cl; ret; 
0x00000000000058ef: or dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000051db: or dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000000590b: or dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000007073: or dword ptr [rcx], eax; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000005409: or eax, 0x90000009; leave; ret; 
0x0000000000004a91: or eax, 0xe8458b48; mov rdi, rax; call 0x23a0; nop; leave; ret; 
0x0000000000004332: or eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000000048ba: or eax, ebx; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000006dc8: out 0x48, eax; mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000003dee: out 0xff, eax; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000004ec3: out dx, eax; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000000605a: pop r12; pop r13; pop r14; pop rbp; ret; 
0x00000000000068f4: pop r12; pop r13; pop rbp; ret; 
0x000000000000528b: pop r12; pop rbp; ret; 
0x000000000000605c: pop r13; pop r14; pop rbp; ret; 
0x00000000000068f6: pop r13; pop rbp; ret; 
0x000000000000605e: pop r14; pop rbp; ret; 
0x00000000000068f2: pop rax; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000000039f8: pop rbp; clc; leave; ret; 
0x0000000000005ff1: pop rbp; idiv bh; dec dword ptr [rax - 0x77]; ret; 
0x000000000000605d: pop rbp; pop r14; pop rbp; ret; 
0x00000000000068f7: pop rbp; pop rbp; ret; 
0x00000000000026f3: pop rbp; ret; 
0x0000000000006059: pop rbx; pop r12; pop r13; pop r14; pop rbp; ret; 
0x00000000000068f3: pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000000528a: pop rbx; pop r12; pop rbp; ret; 
0x0000000000002a57: pop rcx; and al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000003157: pop rcx; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000006022: pop rdx; ret; 
0x000000000000605f: pop rsi; pop rbp; ret; 
0x00000000000066e4: pop rsp; idiv bh; dec dword ptr [rax - 0x77]; ret; 
0x000000000000605b: pop rsp; pop r13; pop r14; pop rbp; ret; 
0x00000000000068f5: pop rsp; pop r13; pop rbp; ret; 
0x000000000000528c: pop rsp; pop rbp; ret; 
0x00000000000056b2: push 8; add byte ptr [rax], al; nop; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x0000000000005289: push rax; pop rbx; pop r12; pop rbp; ret; 
0x0000000000007147: push rax; sub byte ptr [rax - 0x75], cl; call 0xfffffffff85dfc99; leave; ret; 
0x0000000000006311: push rbp; clc; mov qword ptr [rdx], rax; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000655e: push rbp; clc; mov qword ptr [rdx], rax; nop; leave; ret; 
0x0000000000005bbe: push rbp; fmul dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x0000000000005103: push rbp; mov rbp, rsp; mov qword ptr [rbp - 8], rdi; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000004f7e: push rbp; mov rbp, rsp; mov qword ptr [rbp - 8], rdi; nop; pop rbp; ret; 
0x0000000000005cf6: push rbp; mov rbp, rsp; mov qword ptr [rbp - 8], rdi; pop rbp; ret; 
0x000000000000285f: push rcx; and al, 0; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000002f5f: push rcx; sbb eax, 0x89480000; ret 0x8d48; 
0x0000000000006fde: rcl byte ptr [rax], 0x5d; ret; 
0x00000000000062a4: rcr byte ptr [rax], 0x5d; ret; 
0x0000000000006ef0: ret 0; 
0x0000000000007558: ret 0x4808; 
0x0000000000006e8c: ret 0x4830; 
0x0000000000004dee: ret 0x8948; 
0x0000000000004c94: ret 0x8b48; 
0x0000000000002785: ret 0x8d48; 
0x00000000000050f9: ret 0x920f; 
0x0000000000004baa: ret 0x940f; 
0x0000000000005845: ret 0xc748; 
0x00000000000040fa: ret 0xffe2; 
0x0000000000003e1a: ret 0xffe7; 
0x000000000000398a: ret 0xffeb; 
0x000000000000201a: ret; 
0x00000000000037e5: retf; adc al, 0; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000004b44: rol byte ptr [rax], cl; add byte ptr [rax], al; nop; leave; ret; 
0x000000000000489d: rol cl, 0xe0; or byte ptr [rcx], cl; ret; 
0x0000000000004db4: ror byte ptr [rax], 0x48; mov ebx, dword ptr [rbp - 8]; leave; ret; 
0x0000000000006730: ror byte ptr [rax], 0x48; mov edi, eax; call 0x23c0; nop; leave; ret; 
0x0000000000006aca: ror byte ptr [rax], 0x48; mov edi, eax; call 0x2560; nop; leave; ret; 
0x0000000000004c48: ror byte ptr [rax], 0x48; mov edi, eax; call 0x4aa2; nop; leave; ret; 
0x0000000000005e64: ror byte ptr [rax], 0x5d; ret; 
0x00000000000048b9: ror byte ptr [rcx], 0xd8; mov rbx, qword ptr [rbp - 8]; leave; ret; 
0x00000000000026ad: sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x0000000000006dc6: sal byte ptr [rbp - 0x19], 0x48; mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000004bf1: sal byte ptr [rbp - 0x2a], 0x48; mov eax, dword ptr [rbp - 8]; leave; ret; 
0x000000000000266c: sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x0000000000002011: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x000000000000534c: sar bh, cl; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000003f0b: sar byte ptr [rsi], 1; jmp rax; 
0x00000000000053dc: sar edi, 1; dec dword ptr [rax - 0x75]; pop rbp; clc; leave; ret; 
0x00000000000026a0: sar esi, 1; je 0x26b8; mov rax, qword ptr [rip + 0x9945]; test rax, rax; je 0x26b8; jmp rax; 
0x000000000000269f: sar rsi, 1; je 0x26b8; mov rax, qword ptr [rip + 0x9945]; test rax, rax; je 0x26b8; jmp rax; 
0x0000000000002fd0: sbb al, 0; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000000326f: sbb al, byte ptr [r8]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000000031c8: sbb al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000003461: sbb byte ptr [r8], r8b; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000000711a: sbb byte ptr [rax - 0x75], cl; call 0xffffffffe8c7fa6b; stc; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000004afb: sbb byte ptr [rax - 0x75], cl; clc; mov qword ptr [rax + 0x20], 0; nop; pop rbp; ret; 
0x0000000000006df0: sbb byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x19], 0x48; mov eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000033c0: sbb byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000000739f: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; clc; leave; ret; 
0x0000000000004c6e: sbb byte ptr [rbx], al; add byte ptr [rax], al; nop; leave; ret; 
0x0000000000002897: sbb dword ptr [rax + rax], esp; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000000342f: sbb dword ptr [rax], 0x89480000; ret 0x8d48; 
0x00000000000032e0: sbb dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000002d2f: sbb dword ptr [rdi], 0x89480000; ret 0x8d48; 
0x0000000000002f97: sbb dword ptr [rip - 0x76b80000], ebx; ret 0x8d48; 
0x0000000000002eb8: sbb eax, 0x89480000; ret 0x8d48; 
0x00000000000030e8: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000000050fa: setb al; pop rbp; ret; 
0x0000000000004bab: sete al; pop rbp; ret; 
0x0000000000005668: shl byte ptr [rax], 0x48; mov edi, eax; call 0x5f02; leave; ret; 
0x000000000000639e: shl byte ptr [rax], 0x48; mov edi, eax; call 0x668c; leave; ret; 
0x00000000000060b6: shl byte ptr [rax], 0x5d; ret; 
0x0000000000006819: shl eax, 3; mov rdi, rax; call 0x2470; nop; leave; ret; 
0x0000000000006818: shl rax, 3; mov rdi, rax; call 0x2470; nop; leave; ret; 
0x0000000000007105: stc; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000027b7: stc; and al, 0; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000002eb7: stc; sbb eax, 0x89480000; ret 0x8d48; 
0x00000000000037b3: std; adc al, 0; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000007148: sub byte ptr [rax - 0x75], cl; call 0xfffffffff85dfc99; leave; ret; 
0x00000000000075d5: sub byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x0000000000005d15: sub eax, dword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000070cd: sub ebp, 0x8948ffff; ret; 
0x0000000000007561: sub ebp, dword ptr [rsi - 0x366f0001]; ret; 
0x00000000000078fd: sub esp, 8; add rsp, 8; ret; 
0x0000000000002005: sub esp, 8; mov rax, qword ptr [rip + 0x9fd9]; test rax, rax; je 0x2016; call rax; 
0x0000000000005d14: sub rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x00000000000078fc: sub rsp, 8; add rsp, 8; ret; 
0x0000000000002004: sub rsp, 8; mov rax, qword ptr [rip + 0x9fd9]; test rax, rax; je 0x2016; call rax; 
0x0000000000004bf0: test al, al; jne 0x4bca; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x000000000000544a: test byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000005e4b: test eax, 0x90000006; leave; ret; 
0x0000000000002010: test eax, eax; je 0x2016; call rax; 
0x0000000000002010: test eax, eax; je 0x2016; call rax; add rsp, 8; ret; 
0x000000000000266b: test eax, eax; je 0x2678; jmp rax; 
0x00000000000026ac: test eax, eax; je 0x26b8; jmp rax; 
0x0000000000006dc5: test eax, eax; jne 0x6db0; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000006df2: test eax, eax; jne 0x6ddd; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x000000000000200f: test rax, rax; je 0x2016; call rax; 
0x000000000000200f: test rax, rax; je 0x2016; call rax; add rsp, 8; ret; 
0x000000000000266a: test rax, rax; je 0x2678; jmp rax; 
0x00000000000026ab: test rax, rax; je 0x26b8; jmp rax; 
0x0000000000006dc4: test rax, rax; jne 0x6db0; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000006df1: test rax, rax; jne 0x6ddd; mov rax, qword ptr [rbp - 8]; pop rbp; ret; 
0x0000000000004fb8: xchg dword ptr [rip - 0x76b80000], eax; ret 0x8b48; 
0x000000000000371d: xchg eax, ebx; adc eax, 0x89480000; ret 0x8d48; 
0x0000000000002a1f: xchg eax, ecx; and al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000000311f: xchg eax, ecx; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x0000000000004d1b: xchg eax, edi; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000004765: xlatb; call 0x2340; nop; leave; ret; 
0x0000000000006b67: xor al, byte ptr [rax]; add byte ptr [rax], al; leave; ret; 
0x0000000000006058: xor byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000000576d: xor byte ptr [rbx + 0x41], bl; pop rsp; pop rbp; ret; 
0x000000000000277f: xor dword ptr [rip - 0x76b80000], esp; ret 0x8d48; 
0x0000000000004bed: xor eax, 1; test al, al; jne 0x4bca; mov rax, qword ptr [rbp - 8]; leave; ret; 
0x0000000000006639: xor esi, 0x8b48ffff; clc; leave; ret; 

1149 gadgets found
