{"message":"unknown feature `const_cmp`","code":{"code":"E0635","explanation":"The `#![feature]` attribute specified an unknown feature.\n\nErroneous code example:\n\n```compile_fail,E0635\n#![feature(nonexistent_rust_feature)] // error: unknown feature\n```\n"},"level":"error","spans":[{"file_name":"kernel/src/main.rs","byte_start":76,"byte_end":85,"line_start":6,"line_end":6,"column_start":12,"column_end":21,"is_primary":true,"text":[{"text":"#![feature(const_cmp)]","highlight_start":12,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0635]\u001b[0m\u001b[0m\u001b[1m: unknown feature `const_cmp`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mkernel/src/main.rs:6:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(const_cmp)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\n"}
{"message":"const `impl` for trait `PartialEq` which is not marked with `#[const_trait]`","code":null,"level":"error","spans":[{"file_name":"kernel/src/addr.rs","byte_start":289,"byte_end":298,"line_start":17,"line_end":17,"column_start":16,"column_end":25,"is_primary":true,"text":[{"text":"#[derive_const(PartialEq, PartialOrd)]","highlight_start":16,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"kernel/src/addr.rs","byte_start":289,"byte_end":298,"line_start":17,"line_end":17,"column_start":16,"column_end":25,"is_primary":false,"text":[{"text":"#[derive_const(PartialEq, PartialOrd)]","highlight_start":16,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(PartialEq)]","def_site_span":{"file_name":"/home/goldenboy/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/cmp.rs","byte_start":7860,"byte_end":7879,"line_start":236,"line_end":236,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro PartialEq($item:item) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"marking a trait with `#[const_trait]` ensures all default method bodies are `const`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"adding a non-const method body in the future would be a breaking change","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: const `impl` for trait `PartialEq` which is not marked with `#[const_trait]`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mkernel/src/addr.rs:17:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive_const(PartialEq, PartialOrd)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: adding a non-const method body in the future would be a breaking change\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"const `impl` for trait `PartialOrd` which is not marked with `#[const_trait]`","code":null,"level":"error","spans":[{"file_name":"kernel/src/addr.rs","byte_start":300,"byte_end":310,"line_start":17,"line_end":17,"column_start":27,"column_end":37,"is_primary":true,"text":[{"text":"#[derive_const(PartialEq, PartialOrd)]","highlight_start":27,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"kernel/src/addr.rs","byte_start":300,"byte_end":310,"line_start":17,"line_end":17,"column_start":27,"column_end":37,"is_primary":false,"text":[{"text":"#[derive_const(PartialEq, PartialOrd)]","highlight_start":27,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(PartialOrd)]","def_site_span":{"file_name":"/home/goldenboy/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/cmp.rs","byte_start":34677,"byte_end":34697,"line_start":1127,"line_end":1127,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"pub macro PartialOrd($item:item) {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"marking a trait with `#[const_trait]` ensures all default method bodies are `const`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"adding a non-const method body in the future would be a breaking change","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: const `impl` for trait `PartialOrd` which is not marked with `#[const_trait]`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mkernel/src/addr.rs:17:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive_const(PartialEq, PartialOrd)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: adding a non-const method body in the future would be a breaking change\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"const `impl` for trait `PartialEq` which is not marked with `#[const_trait]`","code":null,"level":"error","spans":[{"file_name":"kernel/src/addr.rs","byte_start":1461,"byte_end":1470,"line_start":60,"line_end":60,"column_start":16,"column_end":25,"is_primary":true,"text":[{"text":"#[derive_const(PartialEq, PartialOrd)]","highlight_start":16,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"kernel/src/addr.rs","byte_start":1461,"byte_end":1470,"line_start":60,"line_end":60,"column_start":16,"column_end":25,"is_primary":false,"text":[{"text":"#[derive_const(PartialEq, PartialOrd)]","highlight_start":16,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(PartialEq)]","def_site_span":{"file_name":"/home/goldenboy/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/cmp.rs","byte_start":7860,"byte_end":7879,"line_start":236,"line_end":236,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub macro PartialEq($item:item) {","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"marking a trait with `#[const_trait]` ensures all default method bodies are `const`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"adding a non-const method body in the future would be a breaking change","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: const `impl` for trait `PartialEq` which is not marked with `#[const_trait]`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mkernel/src/addr.rs:60:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive_const(PartialEq, PartialOrd)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: adding a non-const method body in the future would be a breaking change\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"const `impl` for trait `PartialOrd` which is not marked with `#[const_trait]`","code":null,"level":"error","spans":[{"file_name":"kernel/src/addr.rs","byte_start":1472,"byte_end":1482,"line_start":60,"line_end":60,"column_start":27,"column_end":37,"is_primary":true,"text":[{"text":"#[derive_const(PartialEq, PartialOrd)]","highlight_start":27,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"kernel/src/addr.rs","byte_start":1472,"byte_end":1482,"line_start":60,"line_end":60,"column_start":27,"column_end":37,"is_primary":false,"text":[{"text":"#[derive_const(PartialEq, PartialOrd)]","highlight_start":27,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(PartialOrd)]","def_site_span":{"file_name":"/home/goldenboy/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/cmp.rs","byte_start":34677,"byte_end":34697,"line_start":1127,"line_end":1127,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"pub macro PartialOrd($item:item) {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"marking a trait with `#[const_trait]` ensures all default method bodies are `const`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"adding a non-const method body in the future would be a breaking change","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: const `impl` for trait `PartialOrd` which is not marked with `#[const_trait]`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mkernel/src/addr.rs:60:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive_const(PartialEq, PartialOrd)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: adding a non-const method body in the future would be a breaking change\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"const `impl` for trait `Add` which is not marked with `#[const_trait]`","code":null,"level":"error","spans":[{"file_name":"kernel/src/addr.rs","byte_start":2476,"byte_end":2486,"line_start":98,"line_end":98,"column_start":16,"column_end":26,"is_primary":true,"text":[{"text":"    impl const Add<usize> for $ty {","highlight_start":16,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"kernel/src/addr.rs","byte_start":3955,"byte_end":3984,"line_start":161,"line_end":161,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_addr!(VirtAddr, virt, v);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_addr!","def_site_span":{"file_name":"kernel/src/addr.rs","byte_start":2405,"byte_end":2458,"line_start":97,"line_end":97,"column_start":1,"column_end":54,"is_primary":false,"text":[{"text":"macro impl_addr($ty:ident, $field:ident, $mark:ident) {","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"marking a trait with `#[const_trait]` ensures all default method bodies are `const`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"adding a non-const method body in the future would be a breaking change","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: const `impl` for trait `Add` which is not marked with `#[const_trait]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mkernel/src/addr.rs:98:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    impl const Add<usize> for $ty {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_addr!(VirtAddr, virt, v);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: adding a non-const method body in the future would be a breaking change\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"const `impl` for trait `Sub` which is not marked with `#[const_trait]`","code":null,"level":"error","spans":[{"file_name":"kernel/src/addr.rs","byte_start":2650,"byte_end":2660,"line_start":106,"line_end":106,"column_start":16,"column_end":26,"is_primary":true,"text":[{"text":"    impl const Sub<usize> for $ty {","highlight_start":16,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"kernel/src/addr.rs","byte_start":3955,"byte_end":3984,"line_start":161,"line_end":161,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_addr!(VirtAddr, virt, v);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_addr!","def_site_span":{"file_name":"kernel/src/addr.rs","byte_start":2405,"byte_end":2458,"line_start":97,"line_end":97,"column_start":1,"column_end":54,"is_primary":false,"text":[{"text":"macro impl_addr($ty:ident, $field:ident, $mark:ident) {","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"marking a trait with `#[const_trait]` ensures all default method bodies are `const`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"adding a non-const method body in the future would be a breaking change","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: const `impl` for trait `Sub` which is not marked with `#[const_trait]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mkernel/src/addr.rs:106:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    impl const Sub<usize> for $ty {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_addr!(VirtAddr, virt, v);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: adding a non-const method body in the future would be a breaking change\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"const `impl` for trait `Sub` which is not marked with `#[const_trait]`","code":null,"level":"error","spans":[{"file_name":"kernel/src/addr.rs","byte_start":2824,"byte_end":2827,"line_start":114,"line_end":114,"column_start":16,"column_end":19,"is_primary":true,"text":[{"text":"    impl const Sub for $ty {","highlight_start":16,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"kernel/src/addr.rs","byte_start":3955,"byte_end":3984,"line_start":161,"line_end":161,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_addr!(VirtAddr, virt, v);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_addr!","def_site_span":{"file_name":"kernel/src/addr.rs","byte_start":2405,"byte_end":2458,"line_start":97,"line_end":97,"column_start":1,"column_end":54,"is_primary":false,"text":[{"text":"macro impl_addr($ty:ident, $field:ident, $mark:ident) {","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"marking a trait with `#[const_trait]` ensures all default method bodies are `const`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"adding a non-const method body in the future would be a breaking change","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: const `impl` for trait `Sub` which is not marked with `#[const_trait]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mkernel/src/addr.rs:114:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    impl const Sub for $ty {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_addr!(VirtAddr, virt, v);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: adding a non-const method body in the future would be a breaking change\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"const `impl` for trait `Add` which is not marked with `#[const_trait]`","code":null,"level":"error","spans":[{"file_name":"kernel/src/addr.rs","byte_start":2476,"byte_end":2486,"line_start":98,"line_end":98,"column_start":16,"column_end":26,"is_primary":true,"text":[{"text":"    impl const Add<usize> for $ty {","highlight_start":16,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"kernel/src/addr.rs","byte_start":3986,"byte_end":4015,"line_start":162,"line_end":162,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_addr!(PhysAddr, phys, p);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_addr!","def_site_span":{"file_name":"kernel/src/addr.rs","byte_start":2405,"byte_end":2458,"line_start":97,"line_end":97,"column_start":1,"column_end":54,"is_primary":false,"text":[{"text":"macro impl_addr($ty:ident, $field:ident, $mark:ident) {","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"marking a trait with `#[const_trait]` ensures all default method bodies are `const`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"adding a non-const method body in the future would be a breaking change","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: const `impl` for trait `Add` which is not marked with `#[const_trait]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mkernel/src/addr.rs:98:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    impl const Add<usize> for $ty {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_addr!(PhysAddr, phys, p);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: adding a non-const method body in the future would be a breaking change\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"const `impl` for trait `Sub` which is not marked with `#[const_trait]`","code":null,"level":"error","spans":[{"file_name":"kernel/src/addr.rs","byte_start":2650,"byte_end":2660,"line_start":106,"line_end":106,"column_start":16,"column_end":26,"is_primary":true,"text":[{"text":"    impl const Sub<usize> for $ty {","highlight_start":16,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"kernel/src/addr.rs","byte_start":3986,"byte_end":4015,"line_start":162,"line_end":162,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_addr!(PhysAddr, phys, p);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_addr!","def_site_span":{"file_name":"kernel/src/addr.rs","byte_start":2405,"byte_end":2458,"line_start":97,"line_end":97,"column_start":1,"column_end":54,"is_primary":false,"text":[{"text":"macro impl_addr($ty:ident, $field:ident, $mark:ident) {","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"marking a trait with `#[const_trait]` ensures all default method bodies are `const`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"adding a non-const method body in the future would be a breaking change","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: const `impl` for trait `Sub` which is not marked with `#[const_trait]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mkernel/src/addr.rs:106:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    impl const Sub<usize> for $ty {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_addr!(PhysAddr, phys, p);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: adding a non-const method body in the future would be a breaking change\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"const `impl` for trait `Sub` which is not marked with `#[const_trait]`","code":null,"level":"error","spans":[{"file_name":"kernel/src/addr.rs","byte_start":2824,"byte_end":2827,"line_start":114,"line_end":114,"column_start":16,"column_end":19,"is_primary":true,"text":[{"text":"    impl const Sub for $ty {","highlight_start":16,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"kernel/src/addr.rs","byte_start":3986,"byte_end":4015,"line_start":162,"line_end":162,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"impl_addr!(PhysAddr, phys, p);","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_addr!","def_site_span":{"file_name":"kernel/src/addr.rs","byte_start":2405,"byte_end":2458,"line_start":97,"line_end":97,"column_start":1,"column_end":54,"is_primary":false,"text":[{"text":"macro impl_addr($ty:ident, $field:ident, $mark:ident) {","highlight_start":1,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"marking a trait with `#[const_trait]` ensures all default method bodies are `const`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"adding a non-const method body in the future would be a breaking change","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: const `impl` for trait `Sub` which is not marked with `#[const_trait]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mkernel/src/addr.rs:114:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    impl const Sub for $ty {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl_addr!(PhysAddr, phys, p);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: adding a non-const method body in the future would be a breaking change\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `impl_addr` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 11 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 11 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0635`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0635`.\u001b[0m\n"}
